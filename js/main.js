/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/d3/d3.js":
/*!*******************************!*\
  !*** ./node_modules/d3/d3.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj){if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};}return _typeof(obj);}// https://d3js.org v5.9.2 Copyright 2019 Mike Bostock
(function(global,factory){( false?undefined:_typeof(exports))==='object'&&typeof module!=='undefined'?factory(exports): true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):undefined;})(this,function(exports){'use strict';var version="5.9.2";function ascending(a,b){return a<b?-1:a>b?1:a>=b?0:NaN;}function bisector(compare){if(compare.length===1)compare=ascendingComparator(compare);return{left:function left(a,x,lo,hi){if(lo==null)lo=0;if(hi==null)hi=a.length;while(lo<hi){var mid=lo+hi>>>1;if(compare(a[mid],x)<0)lo=mid+1;else hi=mid;}return lo;},right:function right(a,x,lo,hi){if(lo==null)lo=0;if(hi==null)hi=a.length;while(lo<hi){var mid=lo+hi>>>1;if(compare(a[mid],x)>0)hi=mid;else lo=mid+1;}return lo;}};}function ascendingComparator(f){return function(d,x){return ascending(f(d),x);};}var ascendingBisect=bisector(ascending);var bisectRight=ascendingBisect.right;var bisectLeft=ascendingBisect.left;function pairs(array,f){if(f==null)f=pair;var i=0,n=array.length-1,p=array[0],pairs=new Array(n<0?0:n);while(i<n){pairs[i]=f(p,p=array[++i]);}return pairs;}function pair(a,b){return[a,b];}function cross(values0,values1,reduce){var n0=values0.length,n1=values1.length,values=new Array(n0*n1),i0,i1,i,value0;if(reduce==null)reduce=pair;for(i0=i=0;i0<n0;++i0){for(value0=values0[i0],i1=0;i1<n1;++i1,++i){values[i]=reduce(value0,values1[i1]);}}return values;}function descending(a,b){return b<a?-1:b>a?1:b>=a?0:NaN;}function number(x){return x===null?NaN:+x;}function variance(values,valueof){var n=values.length,m=0,i=-1,mean=0,value,delta,sum=0;if(valueof==null){while(++i<n){if(!isNaN(value=number(values[i]))){delta=value-mean;mean+=delta/++m;sum+=delta*(value-mean);}}}else{while(++i<n){if(!isNaN(value=number(valueof(values[i],i,values)))){delta=value-mean;mean+=delta/++m;sum+=delta*(value-mean);}}}if(m>1)return sum/(m-1);}function deviation(array,f){var v=variance(array,f);return v?Math.sqrt(v):v;}function extent(values,valueof){var n=values.length,i=-1,value,min,max;if(valueof==null){while(++i<n){// Find the first comparable value.
if((value=values[i])!=null&&value>=value){min=max=value;while(++i<n){// Compare the remaining values.
if((value=values[i])!=null){if(min>value)min=value;if(max<value)max=value;}}}}}else{while(++i<n){// Find the first comparable value.
if((value=valueof(values[i],i,values))!=null&&value>=value){min=max=value;while(++i<n){// Compare the remaining values.
if((value=valueof(values[i],i,values))!=null){if(min>value)min=value;if(max<value)max=value;}}}}}return[min,max];}var array=Array.prototype;var slice=array.slice;var map=array.map;function constant(x){return function(){return x;};}function identity(x){return x;}function sequence(start,stop,step){start=+start,stop=+stop,step=(n=arguments.length)<2?(stop=start,start=0,1):n<3?1:+step;var i=-1,n=Math.max(0,Math.ceil((stop-start)/step))|0,range=new Array(n);while(++i<n){range[i]=start+i*step;}return range;}var e10=Math.sqrt(50),e5=Math.sqrt(10),e2=Math.sqrt(2);function ticks(start,stop,count){var reverse,i=-1,n,ticks,step;stop=+stop,start=+start,count=+count;if(start===stop&&count>0)return[start];if(reverse=stop<start)n=start,start=stop,stop=n;if((step=tickIncrement(start,stop,count))===0||!isFinite(step))return[];if(step>0){start=Math.ceil(start/step);stop=Math.floor(stop/step);ticks=new Array(n=Math.ceil(stop-start+1));while(++i<n){ticks[i]=(start+i)*step;}}else{start=Math.floor(start*step);stop=Math.ceil(stop*step);ticks=new Array(n=Math.ceil(start-stop+1));while(++i<n){ticks[i]=(start-i)/step;}}if(reverse)ticks.reverse();return ticks;}function tickIncrement(start,stop,count){var step=(stop-start)/Math.max(0,count),power=Math.floor(Math.log(step)/Math.LN10),error=step/Math.pow(10,power);return power>=0?(error>=e10?10:error>=e5?5:error>=e2?2:1)*Math.pow(10,power):-Math.pow(10,-power)/(error>=e10?10:error>=e5?5:error>=e2?2:1);}function tickStep(start,stop,count){var step0=Math.abs(stop-start)/Math.max(0,count),step1=Math.pow(10,Math.floor(Math.log(step0)/Math.LN10)),error=step0/step1;if(error>=e10)step1*=10;else if(error>=e5)step1*=5;else if(error>=e2)step1*=2;return stop<start?-step1:step1;}function thresholdSturges(values){return Math.ceil(Math.log(values.length)/Math.LN2)+1;}function histogram(){var value=identity,domain=extent,threshold=thresholdSturges;function histogram(data){var i,n=data.length,x,values=new Array(n);for(i=0;i<n;++i){values[i]=value(data[i],i,data);}var xz=domain(values),x0=xz[0],x1=xz[1],tz=threshold(values,x0,x1);// Convert number of thresholds into uniform thresholds.
if(!Array.isArray(tz)){tz=tickStep(x0,x1,tz);tz=sequence(Math.ceil(x0/tz)*tz,x1,tz);// exclusive
}// Remove any thresholds outside the domain.
var m=tz.length;while(tz[0]<=x0){tz.shift(),--m;}while(tz[m-1]>x1){tz.pop(),--m;}var bins=new Array(m+1),bin;// Initialize bins.
for(i=0;i<=m;++i){bin=bins[i]=[];bin.x0=i>0?tz[i-1]:x0;bin.x1=i<m?tz[i]:x1;}// Assign data to bins by value, ignoring any outside the domain.
for(i=0;i<n;++i){x=values[i];if(x0<=x&&x<=x1){bins[bisectRight(tz,x,0,m)].push(data[i]);}}return bins;}histogram.value=function(_){return arguments.length?(value=typeof _==="function"?_:constant(_),histogram):value;};histogram.domain=function(_){return arguments.length?(domain=typeof _==="function"?_:constant([_[0],_[1]]),histogram):domain;};histogram.thresholds=function(_){return arguments.length?(threshold=typeof _==="function"?_:Array.isArray(_)?constant(slice.call(_)):constant(_),histogram):threshold;};return histogram;}function threshold(values,p,valueof){if(valueof==null)valueof=number;if(!(n=values.length))return;if((p=+p)<=0||n<2)return+valueof(values[0],0,values);if(p>=1)return+valueof(values[n-1],n-1,values);var n,i=(n-1)*p,i0=Math.floor(i),value0=+valueof(values[i0],i0,values),value1=+valueof(values[i0+1],i0+1,values);return value0+(value1-value0)*(i-i0);}function freedmanDiaconis(values,min,max){values=map.call(values,number).sort(ascending);return Math.ceil((max-min)/(2*(threshold(values,0.75)-threshold(values,0.25))*Math.pow(values.length,-1/3)));}function scott(values,min,max){return Math.ceil((max-min)/(3.5*deviation(values)*Math.pow(values.length,-1/3)));}function max(values,valueof){var n=values.length,i=-1,value,max;if(valueof==null){while(++i<n){// Find the first comparable value.
if((value=values[i])!=null&&value>=value){max=value;while(++i<n){// Compare the remaining values.
if((value=values[i])!=null&&value>max){max=value;}}}}}else{while(++i<n){// Find the first comparable value.
if((value=valueof(values[i],i,values))!=null&&value>=value){max=value;while(++i<n){// Compare the remaining values.
if((value=valueof(values[i],i,values))!=null&&value>max){max=value;}}}}}return max;}function mean(values,valueof){var n=values.length,m=n,i=-1,value,sum=0;if(valueof==null){while(++i<n){if(!isNaN(value=number(values[i])))sum+=value;else--m;}}else{while(++i<n){if(!isNaN(value=number(valueof(values[i],i,values))))sum+=value;else--m;}}if(m)return sum/m;}function median(values,valueof){var n=values.length,i=-1,value,numbers=[];if(valueof==null){while(++i<n){if(!isNaN(value=number(values[i]))){numbers.push(value);}}}else{while(++i<n){if(!isNaN(value=number(valueof(values[i],i,values)))){numbers.push(value);}}}return threshold(numbers.sort(ascending),0.5);}function merge(arrays){var n=arrays.length,m,i=-1,j=0,merged,array;while(++i<n){j+=arrays[i].length;}merged=new Array(j);while(--n>=0){array=arrays[n];m=array.length;while(--m>=0){merged[--j]=array[m];}}return merged;}function min(values,valueof){var n=values.length,i=-1,value,min;if(valueof==null){while(++i<n){// Find the first comparable value.
if((value=values[i])!=null&&value>=value){min=value;while(++i<n){// Compare the remaining values.
if((value=values[i])!=null&&min>value){min=value;}}}}}else{while(++i<n){// Find the first comparable value.
if((value=valueof(values[i],i,values))!=null&&value>=value){min=value;while(++i<n){// Compare the remaining values.
if((value=valueof(values[i],i,values))!=null&&min>value){min=value;}}}}}return min;}function permute(array,indexes){var i=indexes.length,permutes=new Array(i);while(i--){permutes[i]=array[indexes[i]];}return permutes;}function scan(values,compare){if(!(n=values.length))return;var n,i=0,j=0,xi,xj=values[j];if(compare==null)compare=ascending;while(++i<n){if(compare(xi=values[i],xj)<0||compare(xj,xj)!==0){xj=xi,j=i;}}if(compare(xj,xj)===0)return j;}function shuffle(array,i0,i1){var m=(i1==null?array.length:i1)-(i0=i0==null?0:+i0),t,i;while(m){i=Math.random()*m--|0;t=array[m+i0];array[m+i0]=array[i+i0];array[i+i0]=t;}return array;}function sum(values,valueof){var n=values.length,i=-1,value,sum=0;if(valueof==null){while(++i<n){if(value=+values[i])sum+=value;// Note: zero and null are equivalent.
}}else{while(++i<n){if(value=+valueof(values[i],i,values))sum+=value;}}return sum;}function transpose(matrix){if(!(n=matrix.length))return[];for(var i=-1,m=min(matrix,length),transpose=new Array(m);++i<m;){for(var j=-1,n,row=transpose[i]=new Array(n);++j<n;){row[j]=matrix[j][i];}}return transpose;}function length(d){return d.length;}function zip(){return transpose(arguments);}var slice$1=Array.prototype.slice;function identity$1(x){return x;}var top=1,right=2,bottom=3,left=4,epsilon=1e-6;function translateX(x){return"translate("+(x+0.5)+",0)";}function translateY(y){return"translate(0,"+(y+0.5)+")";}function number$1(scale){return function(d){return+scale(d);};}function center(scale){var offset=Math.max(0,scale.bandwidth()-1)/2;// Adjust for 0.5px offset.
if(scale.round())offset=Math.round(offset);return function(d){return+scale(d)+offset;};}function entering(){return!this.__axis;}function axis(orient,scale){var tickArguments=[],tickValues=null,tickFormat=null,tickSizeInner=6,tickSizeOuter=6,tickPadding=3,k=orient===top||orient===left?-1:1,x=orient===left||orient===right?"x":"y",transform=orient===top||orient===bottom?translateX:translateY;function axis(context){var values=tickValues==null?scale.ticks?scale.ticks.apply(scale,tickArguments):scale.domain():tickValues,format=tickFormat==null?scale.tickFormat?scale.tickFormat.apply(scale,tickArguments):identity$1:tickFormat,spacing=Math.max(tickSizeInner,0)+tickPadding,range=scale.range(),range0=+range[0]+0.5,range1=+range[range.length-1]+0.5,position=(scale.bandwidth?center:number$1)(scale.copy()),selection=context.selection?context.selection():context,path=selection.selectAll(".domain").data([null]),tick=selection.selectAll(".tick").data(values,scale).order(),tickExit=tick.exit(),tickEnter=tick.enter().append("g").attr("class","tick"),line=tick.select("line"),text=tick.select("text");path=path.merge(path.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor"));tick=tick.merge(tickEnter);line=line.merge(tickEnter.append("line").attr("stroke","currentColor").attr(x+"2",k*tickSizeInner));text=text.merge(tickEnter.append("text").attr("fill","currentColor").attr(x,k*spacing).attr("dy",orient===top?"0em":orient===bottom?"0.71em":"0.32em"));if(context!==selection){path=path.transition(context);tick=tick.transition(context);line=line.transition(context);text=text.transition(context);tickExit=tickExit.transition(context).attr("opacity",epsilon).attr("transform",function(d){return isFinite(d=position(d))?transform(d):this.getAttribute("transform");});tickEnter.attr("opacity",epsilon).attr("transform",function(d){var p=this.parentNode.__axis;return transform(p&&isFinite(p=p(d))?p:position(d));});}tickExit.remove();path.attr("d",orient===left||orient==right?tickSizeOuter?"M"+k*tickSizeOuter+","+range0+"H0.5V"+range1+"H"+k*tickSizeOuter:"M0.5,"+range0+"V"+range1:tickSizeOuter?"M"+range0+","+k*tickSizeOuter+"V0.5H"+range1+"V"+k*tickSizeOuter:"M"+range0+",0.5H"+range1);tick.attr("opacity",1).attr("transform",function(d){return transform(position(d));});line.attr(x+"2",k*tickSizeInner);text.attr(x,k*spacing).text(format);selection.filter(entering).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",orient===right?"start":orient===left?"end":"middle");selection.each(function(){this.__axis=position;});}axis.scale=function(_){return arguments.length?(scale=_,axis):scale;};axis.ticks=function(){return tickArguments=slice$1.call(arguments),axis;};axis.tickArguments=function(_){return arguments.length?(tickArguments=_==null?[]:slice$1.call(_),axis):tickArguments.slice();};axis.tickValues=function(_){return arguments.length?(tickValues=_==null?null:slice$1.call(_),axis):tickValues&&tickValues.slice();};axis.tickFormat=function(_){return arguments.length?(tickFormat=_,axis):tickFormat;};axis.tickSize=function(_){return arguments.length?(tickSizeInner=tickSizeOuter=+_,axis):tickSizeInner;};axis.tickSizeInner=function(_){return arguments.length?(tickSizeInner=+_,axis):tickSizeInner;};axis.tickSizeOuter=function(_){return arguments.length?(tickSizeOuter=+_,axis):tickSizeOuter;};axis.tickPadding=function(_){return arguments.length?(tickPadding=+_,axis):tickPadding;};return axis;}function axisTop(scale){return axis(top,scale);}function axisRight(scale){return axis(right,scale);}function axisBottom(scale){return axis(bottom,scale);}function axisLeft(scale){return axis(left,scale);}var noop={value:function value(){}};function dispatch(){for(var i=0,n=arguments.length,_={},t;i<n;++i){if(!(t=arguments[i]+"")||t in _)throw new Error("illegal type: "+t);_[t]=[];}return new Dispatch(_);}function Dispatch(_){this._=_;}function parseTypenames(typenames,types){return typenames.trim().split(/^|\s+/).map(function(t){var name="",i=t.indexOf(".");if(i>=0)name=t.slice(i+1),t=t.slice(0,i);if(t&&!types.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:name};});}Dispatch.prototype=dispatch.prototype={constructor:Dispatch,on:function on(typename,callback){var _=this._,T=parseTypenames(typename+"",_),t,i=-1,n=T.length;// If no callback was specified, return the callback of the given type and name.
if(arguments.length<2){while(++i<n){if((t=(typename=T[i]).type)&&(t=get(_[t],typename.name)))return t;}return;}// If a type was specified, set the callback for the given type and name.
// Otherwise, if a null callback was specified, remove callbacks of the given name.
if(callback!=null&&typeof callback!=="function")throw new Error("invalid callback: "+callback);while(++i<n){if(t=(typename=T[i]).type)_[t]=set(_[t],typename.name,callback);else if(callback==null)for(t in _){_[t]=set(_[t],typename.name,null);}}return this;},copy:function copy(){var copy={},_=this._;for(var t in _){copy[t]=_[t].slice();}return new Dispatch(copy);},call:function call(type,that){if((n=arguments.length-2)>0)for(var args=new Array(n),i=0,n,t;i<n;++i){args[i]=arguments[i+2];}if(!this._.hasOwnProperty(type))throw new Error("unknown type: "+type);for(t=this._[type],i=0,n=t.length;i<n;++i){t[i].value.apply(that,args);}},apply:function apply(type,that,args){if(!this._.hasOwnProperty(type))throw new Error("unknown type: "+type);for(var t=this._[type],i=0,n=t.length;i<n;++i){t[i].value.apply(that,args);}}};function get(type,name){for(var i=0,n=type.length,c;i<n;++i){if((c=type[i]).name===name){return c.value;}}}function set(type,name,callback){for(var i=0,n=type.length;i<n;++i){if(type[i].name===name){type[i]=noop,type=type.slice(0,i).concat(type.slice(i+1));break;}}if(callback!=null)type.push({name:name,value:callback});return type;}var xhtml="http://www.w3.org/1999/xhtml";var namespaces={svg:"http://www.w3.org/2000/svg",xhtml:xhtml,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function namespace(name){var prefix=name+="",i=prefix.indexOf(":");if(i>=0&&(prefix=name.slice(0,i))!=="xmlns")name=name.slice(i+1);return namespaces.hasOwnProperty(prefix)?{space:namespaces[prefix],local:name}:name;}function creatorInherit(name){return function(){var document=this.ownerDocument,uri=this.namespaceURI;return uri===xhtml&&document.documentElement.namespaceURI===xhtml?document.createElement(name):document.createElementNS(uri,name);};}function creatorFixed(fullname){return function(){return this.ownerDocument.createElementNS(fullname.space,fullname.local);};}function creator(name){var fullname=namespace(name);return(fullname.local?creatorFixed:creatorInherit)(fullname);}function none(){}function selector(selector){return selector==null?none:function(){return this.querySelector(selector);};}function selection_select(select){if(typeof select!=="function")select=selector(select);for(var groups=this._groups,m=groups.length,subgroups=new Array(m),j=0;j<m;++j){for(var group=groups[j],n=group.length,subgroup=subgroups[j]=new Array(n),node,subnode,i=0;i<n;++i){if((node=group[i])&&(subnode=select.call(node,node.__data__,i,group))){if("__data__"in node)subnode.__data__=node.__data__;subgroup[i]=subnode;}}}return new Selection(subgroups,this._parents);}function empty(){return[];}function selectorAll(selector){return selector==null?empty:function(){return this.querySelectorAll(selector);};}function selection_selectAll(select){if(typeof select!=="function")select=selectorAll(select);for(var groups=this._groups,m=groups.length,subgroups=[],parents=[],j=0;j<m;++j){for(var group=groups[j],n=group.length,node,i=0;i<n;++i){if(node=group[i]){subgroups.push(select.call(node,node.__data__,i,group));parents.push(node);}}}return new Selection(subgroups,parents);}function matcher(selector){return function(){return this.matches(selector);};}function selection_filter(match){if(typeof match!=="function")match=matcher(match);for(var groups=this._groups,m=groups.length,subgroups=new Array(m),j=0;j<m;++j){for(var group=groups[j],n=group.length,subgroup=subgroups[j]=[],node,i=0;i<n;++i){if((node=group[i])&&match.call(node,node.__data__,i,group)){subgroup.push(node);}}}return new Selection(subgroups,this._parents);}function sparse(update){return new Array(update.length);}function selection_enter(){return new Selection(this._enter||this._groups.map(sparse),this._parents);}function EnterNode(parent,datum){this.ownerDocument=parent.ownerDocument;this.namespaceURI=parent.namespaceURI;this._next=null;this._parent=parent;this.__data__=datum;}EnterNode.prototype={constructor:EnterNode,appendChild:function appendChild(child){return this._parent.insertBefore(child,this._next);},insertBefore:function insertBefore(child,next){return this._parent.insertBefore(child,next);},querySelector:function querySelector(selector){return this._parent.querySelector(selector);},querySelectorAll:function querySelectorAll(selector){return this._parent.querySelectorAll(selector);}};function constant$1(x){return function(){return x;};}var keyPrefix="$";// Protect against keys like “__proto__”.
function bindIndex(parent,group,enter,update,exit,data){var i=0,node,groupLength=group.length,dataLength=data.length;// Put any non-null nodes that fit into update.
// Put any null nodes into enter.
// Put any remaining data into enter.
for(;i<dataLength;++i){if(node=group[i]){node.__data__=data[i];update[i]=node;}else{enter[i]=new EnterNode(parent,data[i]);}}// Put any non-null nodes that don’t fit into exit.
for(;i<groupLength;++i){if(node=group[i]){exit[i]=node;}}}function bindKey(parent,group,enter,update,exit,data,key){var i,node,nodeByKeyValue={},groupLength=group.length,dataLength=data.length,keyValues=new Array(groupLength),keyValue;// Compute the key for each node.
// If multiple nodes have the same key, the duplicates are added to exit.
for(i=0;i<groupLength;++i){if(node=group[i]){keyValues[i]=keyValue=keyPrefix+key.call(node,node.__data__,i,group);if(keyValue in nodeByKeyValue){exit[i]=node;}else{nodeByKeyValue[keyValue]=node;}}}// Compute the key for each datum.
// If there a node associated with this key, join and add it to update.
// If there is not (or the key is a duplicate), add it to enter.
for(i=0;i<dataLength;++i){keyValue=keyPrefix+key.call(parent,data[i],i,data);if(node=nodeByKeyValue[keyValue]){update[i]=node;node.__data__=data[i];nodeByKeyValue[keyValue]=null;}else{enter[i]=new EnterNode(parent,data[i]);}}// Add any remaining nodes that were not bound to data to exit.
for(i=0;i<groupLength;++i){if((node=group[i])&&nodeByKeyValue[keyValues[i]]===node){exit[i]=node;}}}function selection_data(value,key){if(!value){data=new Array(this.size()),j=-1;this.each(function(d){data[++j]=d;});return data;}var bind=key?bindKey:bindIndex,parents=this._parents,groups=this._groups;if(typeof value!=="function")value=constant$1(value);for(var m=groups.length,update=new Array(m),enter=new Array(m),exit=new Array(m),j=0;j<m;++j){var parent=parents[j],group=groups[j],groupLength=group.length,data=value.call(parent,parent&&parent.__data__,j,parents),dataLength=data.length,enterGroup=enter[j]=new Array(dataLength),updateGroup=update[j]=new Array(dataLength),exitGroup=exit[j]=new Array(groupLength);bind(parent,group,enterGroup,updateGroup,exitGroup,data,key);// Now connect the enter nodes to their following update node, such that
// appendChild can insert the materialized enter node before this node,
// rather than at the end of the parent node.
for(var i0=0,i1=0,previous,next;i0<dataLength;++i0){if(previous=enterGroup[i0]){if(i0>=i1)i1=i0+1;while(!(next=updateGroup[i1])&&++i1<dataLength){;}previous._next=next||null;}}}update=new Selection(update,parents);update._enter=enter;update._exit=exit;return update;}function selection_exit(){return new Selection(this._exit||this._groups.map(sparse),this._parents);}function selection_join(onenter,onupdate,onexit){var enter=this.enter(),update=this,exit=this.exit();enter=typeof onenter==="function"?onenter(enter):enter.append(onenter+"");if(onupdate!=null)update=onupdate(update);if(onexit==null)exit.remove();else onexit(exit);return enter&&update?enter.merge(update).order():update;}function selection_merge(selection$$1){for(var groups0=this._groups,groups1=selection$$1._groups,m0=groups0.length,m1=groups1.length,m=Math.min(m0,m1),merges=new Array(m0),j=0;j<m;++j){for(var group0=groups0[j],group1=groups1[j],n=group0.length,merge=merges[j]=new Array(n),node,i=0;i<n;++i){if(node=group0[i]||group1[i]){merge[i]=node;}}}for(;j<m0;++j){merges[j]=groups0[j];}return new Selection(merges,this._parents);}function selection_order(){for(var groups=this._groups,j=-1,m=groups.length;++j<m;){for(var group=groups[j],i=group.length-1,next=group[i],node;--i>=0;){if(node=group[i]){if(next&&node.compareDocumentPosition(next)^4)next.parentNode.insertBefore(node,next);next=node;}}}return this;}function selection_sort(compare){if(!compare)compare=ascending$1;function compareNode(a,b){return a&&b?compare(a.__data__,b.__data__):!a-!b;}for(var groups=this._groups,m=groups.length,sortgroups=new Array(m),j=0;j<m;++j){for(var group=groups[j],n=group.length,sortgroup=sortgroups[j]=new Array(n),node,i=0;i<n;++i){if(node=group[i]){sortgroup[i]=node;}}sortgroup.sort(compareNode);}return new Selection(sortgroups,this._parents).order();}function ascending$1(a,b){return a<b?-1:a>b?1:a>=b?0:NaN;}function selection_call(){var callback=arguments[0];arguments[0]=this;callback.apply(null,arguments);return this;}function selection_nodes(){var nodes=new Array(this.size()),i=-1;this.each(function(){nodes[++i]=this;});return nodes;}function selection_node(){for(var groups=this._groups,j=0,m=groups.length;j<m;++j){for(var group=groups[j],i=0,n=group.length;i<n;++i){var node=group[i];if(node)return node;}}return null;}function selection_size(){var size=0;this.each(function(){++size;});return size;}function selection_empty(){return!this.node();}function selection_each(callback){for(var groups=this._groups,j=0,m=groups.length;j<m;++j){for(var group=groups[j],i=0,n=group.length,node;i<n;++i){if(node=group[i])callback.call(node,node.__data__,i,group);}}return this;}function attrRemove(name){return function(){this.removeAttribute(name);};}function attrRemoveNS(fullname){return function(){this.removeAttributeNS(fullname.space,fullname.local);};}function attrConstant(name,value){return function(){this.setAttribute(name,value);};}function attrConstantNS(fullname,value){return function(){this.setAttributeNS(fullname.space,fullname.local,value);};}function attrFunction(name,value){return function(){var v=value.apply(this,arguments);if(v==null)this.removeAttribute(name);else this.setAttribute(name,v);};}function attrFunctionNS(fullname,value){return function(){var v=value.apply(this,arguments);if(v==null)this.removeAttributeNS(fullname.space,fullname.local);else this.setAttributeNS(fullname.space,fullname.local,v);};}function selection_attr(name,value){var fullname=namespace(name);if(arguments.length<2){var node=this.node();return fullname.local?node.getAttributeNS(fullname.space,fullname.local):node.getAttribute(fullname);}return this.each((value==null?fullname.local?attrRemoveNS:attrRemove:typeof value==="function"?fullname.local?attrFunctionNS:attrFunction:fullname.local?attrConstantNS:attrConstant)(fullname,value));}function defaultView(node){return node.ownerDocument&&node.ownerDocument.defaultView||// node is a Node
node.document&&node// node is a Window
||node.defaultView;// node is a Document
}function styleRemove(name){return function(){this.style.removeProperty(name);};}function styleConstant(name,value,priority){return function(){this.style.setProperty(name,value,priority);};}function styleFunction(name,value,priority){return function(){var v=value.apply(this,arguments);if(v==null)this.style.removeProperty(name);else this.style.setProperty(name,v,priority);};}function selection_style(name,value,priority){return arguments.length>1?this.each((value==null?styleRemove:typeof value==="function"?styleFunction:styleConstant)(name,value,priority==null?"":priority)):styleValue(this.node(),name);}function styleValue(node,name){return node.style.getPropertyValue(name)||defaultView(node).getComputedStyle(node,null).getPropertyValue(name);}function propertyRemove(name){return function(){delete this[name];};}function propertyConstant(name,value){return function(){this[name]=value;};}function propertyFunction(name,value){return function(){var v=value.apply(this,arguments);if(v==null)delete this[name];else this[name]=v;};}function selection_property(name,value){return arguments.length>1?this.each((value==null?propertyRemove:typeof value==="function"?propertyFunction:propertyConstant)(name,value)):this.node()[name];}function classArray(string){return string.trim().split(/^|\s+/);}function classList(node){return node.classList||new ClassList(node);}function ClassList(node){this._node=node;this._names=classArray(node.getAttribute("class")||"");}ClassList.prototype={add:function add(name){var i=this._names.indexOf(name);if(i<0){this._names.push(name);this._node.setAttribute("class",this._names.join(" "));}},remove:function remove(name){var i=this._names.indexOf(name);if(i>=0){this._names.splice(i,1);this._node.setAttribute("class",this._names.join(" "));}},contains:function contains(name){return this._names.indexOf(name)>=0;}};function classedAdd(node,names){var list=classList(node),i=-1,n=names.length;while(++i<n){list.add(names[i]);}}function classedRemove(node,names){var list=classList(node),i=-1,n=names.length;while(++i<n){list.remove(names[i]);}}function classedTrue(names){return function(){classedAdd(this,names);};}function classedFalse(names){return function(){classedRemove(this,names);};}function classedFunction(names,value){return function(){(value.apply(this,arguments)?classedAdd:classedRemove)(this,names);};}function selection_classed(name,value){var names=classArray(name+"");if(arguments.length<2){var list=classList(this.node()),i=-1,n=names.length;while(++i<n){if(!list.contains(names[i]))return false;}return true;}return this.each((typeof value==="function"?classedFunction:value?classedTrue:classedFalse)(names,value));}function textRemove(){this.textContent="";}function textConstant(value){return function(){this.textContent=value;};}function textFunction(value){return function(){var v=value.apply(this,arguments);this.textContent=v==null?"":v;};}function selection_text(value){return arguments.length?this.each(value==null?textRemove:(typeof value==="function"?textFunction:textConstant)(value)):this.node().textContent;}function htmlRemove(){this.innerHTML="";}function htmlConstant(value){return function(){this.innerHTML=value;};}function htmlFunction(value){return function(){var v=value.apply(this,arguments);this.innerHTML=v==null?"":v;};}function selection_html(value){return arguments.length?this.each(value==null?htmlRemove:(typeof value==="function"?htmlFunction:htmlConstant)(value)):this.node().innerHTML;}function raise(){if(this.nextSibling)this.parentNode.appendChild(this);}function selection_raise(){return this.each(raise);}function lower(){if(this.previousSibling)this.parentNode.insertBefore(this,this.parentNode.firstChild);}function selection_lower(){return this.each(lower);}function selection_append(name){var create=typeof name==="function"?name:creator(name);return this.select(function(){return this.appendChild(create.apply(this,arguments));});}function constantNull(){return null;}function selection_insert(name,before){var create=typeof name==="function"?name:creator(name),select=before==null?constantNull:typeof before==="function"?before:selector(before);return this.select(function(){return this.insertBefore(create.apply(this,arguments),select.apply(this,arguments)||null);});}function remove(){var parent=this.parentNode;if(parent)parent.removeChild(this);}function selection_remove(){return this.each(remove);}function selection_cloneShallow(){return this.parentNode.insertBefore(this.cloneNode(false),this.nextSibling);}function selection_cloneDeep(){return this.parentNode.insertBefore(this.cloneNode(true),this.nextSibling);}function selection_clone(deep){return this.select(deep?selection_cloneDeep:selection_cloneShallow);}function selection_datum(value){return arguments.length?this.property("__data__",value):this.node().__data__;}var filterEvents={};exports.event=null;if(typeof document!=="undefined"){var element=document.documentElement;if(!("onmouseenter"in element)){filterEvents={mouseenter:"mouseover",mouseleave:"mouseout"};}}function filterContextListener(listener,index,group){listener=contextListener(listener,index,group);return function(event){var related=event.relatedTarget;if(!related||related!==this&&!(related.compareDocumentPosition(this)&8)){listener.call(this,event);}};}function contextListener(listener,index,group){return function(event1){var event0=exports.event;// Events can be reentrant (e.g., focus).
exports.event=event1;try{listener.call(this,this.__data__,index,group);}finally{exports.event=event0;}};}function parseTypenames$1(typenames){return typenames.trim().split(/^|\s+/).map(function(t){var name="",i=t.indexOf(".");if(i>=0)name=t.slice(i+1),t=t.slice(0,i);return{type:t,name:name};});}function onRemove(typename){return function(){var on=this.__on;if(!on)return;for(var j=0,i=-1,m=on.length,o;j<m;++j){if(o=on[j],(!typename.type||o.type===typename.type)&&o.name===typename.name){this.removeEventListener(o.type,o.listener,o.capture);}else{on[++i]=o;}}if(++i)on.length=i;else delete this.__on;};}function onAdd(typename,value,capture){var wrap=filterEvents.hasOwnProperty(typename.type)?filterContextListener:contextListener;return function(d,i,group){var on=this.__on,o,listener=wrap(value,i,group);if(on)for(var j=0,m=on.length;j<m;++j){if((o=on[j]).type===typename.type&&o.name===typename.name){this.removeEventListener(o.type,o.listener,o.capture);this.addEventListener(o.type,o.listener=listener,o.capture=capture);o.value=value;return;}}this.addEventListener(typename.type,listener,capture);o={type:typename.type,name:typename.name,value:value,listener:listener,capture:capture};if(!on)this.__on=[o];else on.push(o);};}function selection_on(typename,value,capture){var typenames=parseTypenames$1(typename+""),i,n=typenames.length,t;if(arguments.length<2){var on=this.node().__on;if(on)for(var j=0,m=on.length,o;j<m;++j){for(i=0,o=on[j];i<n;++i){if((t=typenames[i]).type===o.type&&t.name===o.name){return o.value;}}}return;}on=value?onAdd:onRemove;if(capture==null)capture=false;for(i=0;i<n;++i){this.each(on(typenames[i],value,capture));}return this;}function customEvent(event1,listener,that,args){var event0=exports.event;event1.sourceEvent=exports.event;exports.event=event1;try{return listener.apply(that,args);}finally{exports.event=event0;}}function dispatchEvent(node,type,params){var window=defaultView(node),event=window.CustomEvent;if(typeof event==="function"){event=new event(type,params);}else{event=window.document.createEvent("Event");if(params)event.initEvent(type,params.bubbles,params.cancelable),event.detail=params.detail;else event.initEvent(type,false,false);}node.dispatchEvent(event);}function dispatchConstant(type,params){return function(){return dispatchEvent(this,type,params);};}function dispatchFunction(type,params){return function(){return dispatchEvent(this,type,params.apply(this,arguments));};}function selection_dispatch(type,params){return this.each((typeof params==="function"?dispatchFunction:dispatchConstant)(type,params));}var root=[null];function Selection(groups,parents){this._groups=groups;this._parents=parents;}function selection(){return new Selection([[document.documentElement]],root);}Selection.prototype=selection.prototype={constructor:Selection,select:selection_select,selectAll:selection_selectAll,filter:selection_filter,data:selection_data,enter:selection_enter,exit:selection_exit,join:selection_join,merge:selection_merge,order:selection_order,sort:selection_sort,call:selection_call,nodes:selection_nodes,node:selection_node,size:selection_size,empty:selection_empty,each:selection_each,attr:selection_attr,style:selection_style,property:selection_property,classed:selection_classed,text:selection_text,html:selection_html,raise:selection_raise,lower:selection_lower,append:selection_append,insert:selection_insert,remove:selection_remove,clone:selection_clone,datum:selection_datum,on:selection_on,dispatch:selection_dispatch};function select(selector){return typeof selector==="string"?new Selection([[document.querySelector(selector)]],[document.documentElement]):new Selection([[selector]],root);}function create(name){return select(creator(name).call(document.documentElement));}var nextId=0;function local(){return new Local();}function Local(){this._="@"+(++nextId).toString(36);}Local.prototype=local.prototype={constructor:Local,get:function get(node){var id=this._;while(!(id in node)){if(!(node=node.parentNode))return;}return node[id];},set:function set(node,value){return node[this._]=value;},remove:function remove(node){return this._ in node&&delete node[this._];},toString:function toString(){return this._;}};function sourceEvent(){var current=exports.event,source;while(source=current.sourceEvent){current=source;}return current;}function point(node,event){var svg=node.ownerSVGElement||node;if(svg.createSVGPoint){var point=svg.createSVGPoint();point.x=event.clientX,point.y=event.clientY;point=point.matrixTransform(node.getScreenCTM().inverse());return[point.x,point.y];}var rect=node.getBoundingClientRect();return[event.clientX-rect.left-node.clientLeft,event.clientY-rect.top-node.clientTop];}function mouse(node){var event=sourceEvent();if(event.changedTouches)event=event.changedTouches[0];return point(node,event);}function selectAll(selector){return typeof selector==="string"?new Selection([document.querySelectorAll(selector)],[document.documentElement]):new Selection([selector==null?[]:selector],root);}function touch(node,touches,identifier){if(arguments.length<3)identifier=touches,touches=sourceEvent().changedTouches;for(var i=0,n=touches?touches.length:0,touch;i<n;++i){if((touch=touches[i]).identifier===identifier){return point(node,touch);}}return null;}function touches(node,touches){if(touches==null)touches=sourceEvent().touches;for(var i=0,n=touches?touches.length:0,points=new Array(n);i<n;++i){points[i]=point(node,touches[i]);}return points;}function nopropagation(){exports.event.stopImmediatePropagation();}function noevent(){exports.event.preventDefault();exports.event.stopImmediatePropagation();}function dragDisable(view){var root=view.document.documentElement,selection$$1=select(view).on("dragstart.drag",noevent,true);if("onselectstart"in root){selection$$1.on("selectstart.drag",noevent,true);}else{root.__noselect=root.style.MozUserSelect;root.style.MozUserSelect="none";}}function yesdrag(view,noclick){var root=view.document.documentElement,selection$$1=select(view).on("dragstart.drag",null);if(noclick){selection$$1.on("click.drag",noevent,true);setTimeout(function(){selection$$1.on("click.drag",null);},0);}if("onselectstart"in root){selection$$1.on("selectstart.drag",null);}else{root.style.MozUserSelect=root.__noselect;delete root.__noselect;}}function constant$2(x){return function(){return x;};}function DragEvent(target,type,subject,id,active,x,y,dx,dy,dispatch){this.target=target;this.type=type;this.subject=subject;this.identifier=id;this.active=active;this.x=x;this.y=y;this.dx=dx;this.dy=dy;this._=dispatch;}DragEvent.prototype.on=function(){var value=this._.on.apply(this._,arguments);return value===this._?this:value;};// Ignore right-click, since that should open the context menu.
function defaultFilter(){return!exports.event.button;}function defaultContainer(){return this.parentNode;}function defaultSubject(d){return d==null?{x:exports.event.x,y:exports.event.y}:d;}function defaultTouchable(){return"ontouchstart"in this;}function drag(){var filter=defaultFilter,container=defaultContainer,subject=defaultSubject,touchable=defaultTouchable,gestures={},listeners=dispatch("start","drag","end"),active=0,mousedownx,mousedowny,mousemoving,touchending,clickDistance2=0;function drag(selection$$1){selection$$1.on("mousedown.drag",mousedowned).filter(touchable).on("touchstart.drag",touchstarted).on("touchmove.drag",touchmoved).on("touchend.drag touchcancel.drag",touchended).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)");}function mousedowned(){if(touchending||!filter.apply(this,arguments))return;var gesture=beforestart("mouse",container.apply(this,arguments),mouse,this,arguments);if(!gesture)return;select(exports.event.view).on("mousemove.drag",mousemoved,true).on("mouseup.drag",mouseupped,true);dragDisable(exports.event.view);nopropagation();mousemoving=false;mousedownx=exports.event.clientX;mousedowny=exports.event.clientY;gesture("start");}function mousemoved(){noevent();if(!mousemoving){var dx=exports.event.clientX-mousedownx,dy=exports.event.clientY-mousedowny;mousemoving=dx*dx+dy*dy>clickDistance2;}gestures.mouse("drag");}function mouseupped(){select(exports.event.view).on("mousemove.drag mouseup.drag",null);yesdrag(exports.event.view,mousemoving);noevent();gestures.mouse("end");}function touchstarted(){if(!filter.apply(this,arguments))return;var touches$$1=exports.event.changedTouches,c=container.apply(this,arguments),n=touches$$1.length,i,gesture;for(i=0;i<n;++i){if(gesture=beforestart(touches$$1[i].identifier,c,touch,this,arguments)){nopropagation();gesture("start");}}}function touchmoved(){var touches$$1=exports.event.changedTouches,n=touches$$1.length,i,gesture;for(i=0;i<n;++i){if(gesture=gestures[touches$$1[i].identifier]){noevent();gesture("drag");}}}function touchended(){var touches$$1=exports.event.changedTouches,n=touches$$1.length,i,gesture;if(touchending)clearTimeout(touchending);touchending=setTimeout(function(){touchending=null;},500);// Ghost clicks are delayed!
for(i=0;i<n;++i){if(gesture=gestures[touches$$1[i].identifier]){nopropagation();gesture("end");}}}function beforestart(id,container,point$$1,that,args){var p=point$$1(container,id),s,dx,dy,sublisteners=listeners.copy();if(!customEvent(new DragEvent(drag,"beforestart",s,id,active,p[0],p[1],0,0,sublisteners),function(){if((exports.event.subject=s=subject.apply(that,args))==null)return false;dx=s.x-p[0]||0;dy=s.y-p[1]||0;return true;}))return;return function gesture(type){var p0=p,n;switch(type){case"start":gestures[id]=gesture,n=active++;break;case"end":delete gestures[id],--active;// nobreak
case"drag":p=point$$1(container,id),n=active;break;}customEvent(new DragEvent(drag,type,s,id,n,p[0]+dx,p[1]+dy,p[0]-p0[0],p[1]-p0[1],sublisteners),sublisteners.apply,sublisteners,[type,that,args]);};}drag.filter=function(_){return arguments.length?(filter=typeof _==="function"?_:constant$2(!!_),drag):filter;};drag.container=function(_){return arguments.length?(container=typeof _==="function"?_:constant$2(_),drag):container;};drag.subject=function(_){return arguments.length?(subject=typeof _==="function"?_:constant$2(_),drag):subject;};drag.touchable=function(_){return arguments.length?(touchable=typeof _==="function"?_:constant$2(!!_),drag):touchable;};drag.on=function(){var value=listeners.on.apply(listeners,arguments);return value===listeners?drag:value;};drag.clickDistance=function(_){return arguments.length?(clickDistance2=(_=+_)*_,drag):Math.sqrt(clickDistance2);};return drag;}function define(constructor,factory,prototype){constructor.prototype=factory.prototype=prototype;prototype.constructor=constructor;}function extend(parent,definition){var prototype=Object.create(parent.prototype);for(var key in definition){prototype[key]=definition[key];}return prototype;}function Color(){}var _darker=0.7;var _brighter=1/_darker;var reI="\\s*([+-]?\\d+)\\s*",reN="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",reP="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",reHex3=/^#([0-9a-f]{3})$/,reHex6=/^#([0-9a-f]{6})$/,reRgbInteger=new RegExp("^rgb\\("+[reI,reI,reI]+"\\)$"),reRgbPercent=new RegExp("^rgb\\("+[reP,reP,reP]+"\\)$"),reRgbaInteger=new RegExp("^rgba\\("+[reI,reI,reI,reN]+"\\)$"),reRgbaPercent=new RegExp("^rgba\\("+[reP,reP,reP,reN]+"\\)$"),reHslPercent=new RegExp("^hsl\\("+[reN,reP,reP]+"\\)$"),reHslaPercent=new RegExp("^hsla\\("+[reN,reP,reP,reN]+"\\)$");var named={aliceblue:0xf0f8ff,antiquewhite:0xfaebd7,aqua:0x00ffff,aquamarine:0x7fffd4,azure:0xf0ffff,beige:0xf5f5dc,bisque:0xffe4c4,black:0x000000,blanchedalmond:0xffebcd,blue:0x0000ff,blueviolet:0x8a2be2,brown:0xa52a2a,burlywood:0xdeb887,cadetblue:0x5f9ea0,chartreuse:0x7fff00,chocolate:0xd2691e,coral:0xff7f50,cornflowerblue:0x6495ed,cornsilk:0xfff8dc,crimson:0xdc143c,cyan:0x00ffff,darkblue:0x00008b,darkcyan:0x008b8b,darkgoldenrod:0xb8860b,darkgray:0xa9a9a9,darkgreen:0x006400,darkgrey:0xa9a9a9,darkkhaki:0xbdb76b,darkmagenta:0x8b008b,darkolivegreen:0x556b2f,darkorange:0xff8c00,darkorchid:0x9932cc,darkred:0x8b0000,darksalmon:0xe9967a,darkseagreen:0x8fbc8f,darkslateblue:0x483d8b,darkslategray:0x2f4f4f,darkslategrey:0x2f4f4f,darkturquoise:0x00ced1,darkviolet:0x9400d3,deeppink:0xff1493,deepskyblue:0x00bfff,dimgray:0x696969,dimgrey:0x696969,dodgerblue:0x1e90ff,firebrick:0xb22222,floralwhite:0xfffaf0,forestgreen:0x228b22,fuchsia:0xff00ff,gainsboro:0xdcdcdc,ghostwhite:0xf8f8ff,gold:0xffd700,goldenrod:0xdaa520,gray:0x808080,green:0x008000,greenyellow:0xadff2f,grey:0x808080,honeydew:0xf0fff0,hotpink:0xff69b4,indianred:0xcd5c5c,indigo:0x4b0082,ivory:0xfffff0,khaki:0xf0e68c,lavender:0xe6e6fa,lavenderblush:0xfff0f5,lawngreen:0x7cfc00,lemonchiffon:0xfffacd,lightblue:0xadd8e6,lightcoral:0xf08080,lightcyan:0xe0ffff,lightgoldenrodyellow:0xfafad2,lightgray:0xd3d3d3,lightgreen:0x90ee90,lightgrey:0xd3d3d3,lightpink:0xffb6c1,lightsalmon:0xffa07a,lightseagreen:0x20b2aa,lightskyblue:0x87cefa,lightslategray:0x778899,lightslategrey:0x778899,lightsteelblue:0xb0c4de,lightyellow:0xffffe0,lime:0x00ff00,limegreen:0x32cd32,linen:0xfaf0e6,magenta:0xff00ff,maroon:0x800000,mediumaquamarine:0x66cdaa,mediumblue:0x0000cd,mediumorchid:0xba55d3,mediumpurple:0x9370db,mediumseagreen:0x3cb371,mediumslateblue:0x7b68ee,mediumspringgreen:0x00fa9a,mediumturquoise:0x48d1cc,mediumvioletred:0xc71585,midnightblue:0x191970,mintcream:0xf5fffa,mistyrose:0xffe4e1,moccasin:0xffe4b5,navajowhite:0xffdead,navy:0x000080,oldlace:0xfdf5e6,olive:0x808000,olivedrab:0x6b8e23,orange:0xffa500,orangered:0xff4500,orchid:0xda70d6,palegoldenrod:0xeee8aa,palegreen:0x98fb98,paleturquoise:0xafeeee,palevioletred:0xdb7093,papayawhip:0xffefd5,peachpuff:0xffdab9,peru:0xcd853f,pink:0xffc0cb,plum:0xdda0dd,powderblue:0xb0e0e6,purple:0x800080,rebeccapurple:0x663399,red:0xff0000,rosybrown:0xbc8f8f,royalblue:0x4169e1,saddlebrown:0x8b4513,salmon:0xfa8072,sandybrown:0xf4a460,seagreen:0x2e8b57,seashell:0xfff5ee,sienna:0xa0522d,silver:0xc0c0c0,skyblue:0x87ceeb,slateblue:0x6a5acd,slategray:0x708090,slategrey:0x708090,snow:0xfffafa,springgreen:0x00ff7f,steelblue:0x4682b4,tan:0xd2b48c,teal:0x008080,thistle:0xd8bfd8,tomato:0xff6347,turquoise:0x40e0d0,violet:0xee82ee,wheat:0xf5deb3,white:0xffffff,whitesmoke:0xf5f5f5,yellow:0xffff00,yellowgreen:0x9acd32};define(Color,color,{displayable:function displayable(){return this.rgb().displayable();},hex:function hex(){return this.rgb().hex();},toString:function toString(){return this.rgb()+"";}});function color(format){var m;format=(format+"").trim().toLowerCase();return(m=reHex3.exec(format))?(m=parseInt(m[1],16),new Rgb(m>>8&0xf|m>>4&0x0f0,m>>4&0xf|m&0xf0,(m&0xf)<<4|m&0xf,1)// #f00
):(m=reHex6.exec(format))?rgbn(parseInt(m[1],16))// #ff0000
:(m=reRgbInteger.exec(format))?new Rgb(m[1],m[2],m[3],1)// rgb(255, 0, 0)
:(m=reRgbPercent.exec(format))?new Rgb(m[1]*255/100,m[2]*255/100,m[3]*255/100,1)// rgb(100%, 0%, 0%)
:(m=reRgbaInteger.exec(format))?rgba(m[1],m[2],m[3],m[4])// rgba(255, 0, 0, 1)
:(m=reRgbaPercent.exec(format))?rgba(m[1]*255/100,m[2]*255/100,m[3]*255/100,m[4])// rgb(100%, 0%, 0%, 1)
:(m=reHslPercent.exec(format))?hsla(m[1],m[2]/100,m[3]/100,1)// hsl(120, 50%, 50%)
:(m=reHslaPercent.exec(format))?hsla(m[1],m[2]/100,m[3]/100,m[4])// hsla(120, 50%, 50%, 1)
:named.hasOwnProperty(format)?rgbn(named[format]):format==="transparent"?new Rgb(NaN,NaN,NaN,0):null;}function rgbn(n){return new Rgb(n>>16&0xff,n>>8&0xff,n&0xff,1);}function rgba(r,g,b,a){if(a<=0)r=g=b=NaN;return new Rgb(r,g,b,a);}function rgbConvert(o){if(!(o instanceof Color))o=color(o);if(!o)return new Rgb();o=o.rgb();return new Rgb(o.r,o.g,o.b,o.opacity);}function rgb(r,g,b,opacity){return arguments.length===1?rgbConvert(r):new Rgb(r,g,b,opacity==null?1:opacity);}function Rgb(r,g,b,opacity){this.r=+r;this.g=+g;this.b=+b;this.opacity=+opacity;}define(Rgb,rgb,extend(Color,{brighter:function brighter(k){k=k==null?_brighter:Math.pow(_brighter,k);return new Rgb(this.r*k,this.g*k,this.b*k,this.opacity);},darker:function darker(k){k=k==null?_darker:Math.pow(_darker,k);return new Rgb(this.r*k,this.g*k,this.b*k,this.opacity);},rgb:function rgb(){return this;},displayable:function displayable(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1;},hex:function hex(){return"#"+_hex(this.r)+_hex(this.g)+_hex(this.b);},toString:function toString(){var a=this.opacity;a=isNaN(a)?1:Math.max(0,Math.min(1,a));return(a===1?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(a===1?")":", "+a+")");}}));function _hex(value){value=Math.max(0,Math.min(255,Math.round(value)||0));return(value<16?"0":"")+value.toString(16);}function hsla(h,s,l,a){if(a<=0)h=s=l=NaN;else if(l<=0||l>=1)h=s=NaN;else if(s<=0)h=NaN;return new Hsl(h,s,l,a);}function hslConvert(o){if(o instanceof Hsl)return new Hsl(o.h,o.s,o.l,o.opacity);if(!(o instanceof Color))o=color(o);if(!o)return new Hsl();if(o instanceof Hsl)return o;o=o.rgb();var r=o.r/255,g=o.g/255,b=o.b/255,min=Math.min(r,g,b),max=Math.max(r,g,b),h=NaN,s=max-min,l=(max+min)/2;if(s){if(r===max)h=(g-b)/s+(g<b)*6;else if(g===max)h=(b-r)/s+2;else h=(r-g)/s+4;s/=l<0.5?max+min:2-max-min;h*=60;}else{s=l>0&&l<1?0:h;}return new Hsl(h,s,l,o.opacity);}function hsl(h,s,l,opacity){return arguments.length===1?hslConvert(h):new Hsl(h,s,l,opacity==null?1:opacity);}function Hsl(h,s,l,opacity){this.h=+h;this.s=+s;this.l=+l;this.opacity=+opacity;}define(Hsl,hsl,extend(Color,{brighter:function brighter(k){k=k==null?_brighter:Math.pow(_brighter,k);return new Hsl(this.h,this.s,this.l*k,this.opacity);},darker:function darker(k){k=k==null?_darker:Math.pow(_darker,k);return new Hsl(this.h,this.s,this.l*k,this.opacity);},rgb:function rgb(){var h=this.h%360+(this.h<0)*360,s=isNaN(h)||isNaN(this.s)?0:this.s,l=this.l,m2=l+(l<0.5?l:1-l)*s,m1=2*l-m2;return new Rgb(hsl2rgb(h>=240?h-240:h+120,m1,m2),hsl2rgb(h,m1,m2),hsl2rgb(h<120?h+240:h-120,m1,m2),this.opacity);},displayable:function displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1;}}));/* From FvD 13.37, CSS Color Module Level 3 */function hsl2rgb(h,m1,m2){return(h<60?m1+(m2-m1)*h/60:h<180?m2:h<240?m1+(m2-m1)*(240-h)/60:m1)*255;}var deg2rad=Math.PI/180;var rad2deg=180/Math.PI;// https://beta.observablehq.com/@mbostock/lab-and-rgb
var K=18,Xn=0.96422,Yn=1,Zn=0.82521,t0=4/29,t1=6/29,t2=3*t1*t1,t3=t1*t1*t1;function labConvert(o){if(o instanceof Lab)return new Lab(o.l,o.a,o.b,o.opacity);if(o instanceof Hcl){if(isNaN(o.h))return new Lab(o.l,0,0,o.opacity);var h=o.h*deg2rad;return new Lab(o.l,Math.cos(h)*o.c,Math.sin(h)*o.c,o.opacity);}if(!(o instanceof Rgb))o=rgbConvert(o);var r=rgb2lrgb(o.r),g=rgb2lrgb(o.g),b=rgb2lrgb(o.b),y=xyz2lab((0.2225045*r+0.7168786*g+0.0606169*b)/Yn),x,z;if(r===g&&g===b)x=z=y;else{x=xyz2lab((0.4360747*r+0.3850649*g+0.1430804*b)/Xn);z=xyz2lab((0.0139322*r+0.0971045*g+0.7141733*b)/Zn);}return new Lab(116*y-16,500*(x-y),200*(y-z),o.opacity);}function gray(l,opacity){return new Lab(l,0,0,opacity==null?1:opacity);}function lab(l,a,b,opacity){return arguments.length===1?labConvert(l):new Lab(l,a,b,opacity==null?1:opacity);}function Lab(l,a,b,opacity){this.l=+l;this.a=+a;this.b=+b;this.opacity=+opacity;}define(Lab,lab,extend(Color,{brighter:function brighter(k){return new Lab(this.l+K*(k==null?1:k),this.a,this.b,this.opacity);},darker:function darker(k){return new Lab(this.l-K*(k==null?1:k),this.a,this.b,this.opacity);},rgb:function rgb(){var y=(this.l+16)/116,x=isNaN(this.a)?y:y+this.a/500,z=isNaN(this.b)?y:y-this.b/200;x=Xn*lab2xyz(x);y=Yn*lab2xyz(y);z=Zn*lab2xyz(z);return new Rgb(lrgb2rgb(3.1338561*x-1.6168667*y-0.4906146*z),lrgb2rgb(-0.9787684*x+1.9161415*y+0.0334540*z),lrgb2rgb(0.0719453*x-0.2289914*y+1.4052427*z),this.opacity);}}));function xyz2lab(t){return t>t3?Math.pow(t,1/3):t/t2+t0;}function lab2xyz(t){return t>t1?t*t*t:t2*(t-t0);}function lrgb2rgb(x){return 255*(x<=0.0031308?12.92*x:1.055*Math.pow(x,1/2.4)-0.055);}function rgb2lrgb(x){return(x/=255)<=0.04045?x/12.92:Math.pow((x+0.055)/1.055,2.4);}function hclConvert(o){if(o instanceof Hcl)return new Hcl(o.h,o.c,o.l,o.opacity);if(!(o instanceof Lab))o=labConvert(o);if(o.a===0&&o.b===0)return new Hcl(NaN,0,o.l,o.opacity);var h=Math.atan2(o.b,o.a)*rad2deg;return new Hcl(h<0?h+360:h,Math.sqrt(o.a*o.a+o.b*o.b),o.l,o.opacity);}function lch(l,c,h,opacity){return arguments.length===1?hclConvert(l):new Hcl(h,c,l,opacity==null?1:opacity);}function hcl(h,c,l,opacity){return arguments.length===1?hclConvert(h):new Hcl(h,c,l,opacity==null?1:opacity);}function Hcl(h,c,l,opacity){this.h=+h;this.c=+c;this.l=+l;this.opacity=+opacity;}define(Hcl,hcl,extend(Color,{brighter:function brighter(k){return new Hcl(this.h,this.c,this.l+K*(k==null?1:k),this.opacity);},darker:function darker(k){return new Hcl(this.h,this.c,this.l-K*(k==null?1:k),this.opacity);},rgb:function rgb(){return labConvert(this).rgb();}}));var A=-0.14861,B=+1.78277,C=-0.29227,D=-0.90649,E=+1.97294,ED=E*D,EB=E*B,BC_DA=B*C-D*A;function cubehelixConvert(o){if(o instanceof Cubehelix)return new Cubehelix(o.h,o.s,o.l,o.opacity);if(!(o instanceof Rgb))o=rgbConvert(o);var r=o.r/255,g=o.g/255,b=o.b/255,l=(BC_DA*b+ED*r-EB*g)/(BC_DA+ED-EB),bl=b-l,k=(E*(g-l)-C*bl)/D,s=Math.sqrt(k*k+bl*bl)/(E*l*(1-l)),// NaN if l=0 or l=1
h=s?Math.atan2(k,bl)*rad2deg-120:NaN;return new Cubehelix(h<0?h+360:h,s,l,o.opacity);}function cubehelix(h,s,l,opacity){return arguments.length===1?cubehelixConvert(h):new Cubehelix(h,s,l,opacity==null?1:opacity);}function Cubehelix(h,s,l,opacity){this.h=+h;this.s=+s;this.l=+l;this.opacity=+opacity;}define(Cubehelix,cubehelix,extend(Color,{brighter:function brighter(k){k=k==null?_brighter:Math.pow(_brighter,k);return new Cubehelix(this.h,this.s,this.l*k,this.opacity);},darker:function darker(k){k=k==null?_darker:Math.pow(_darker,k);return new Cubehelix(this.h,this.s,this.l*k,this.opacity);},rgb:function rgb(){var h=isNaN(this.h)?0:(this.h+120)*deg2rad,l=+this.l,a=isNaN(this.s)?0:this.s*l*(1-l),cosh=Math.cos(h),sinh=Math.sin(h);return new Rgb(255*(l+a*(A*cosh+B*sinh)),255*(l+a*(C*cosh+D*sinh)),255*(l+a*(E*cosh)),this.opacity);}}));function basis(t1,v0,v1,v2,v3){var t2=t1*t1,t3=t2*t1;return((1-3*t1+3*t2-t3)*v0+(4-6*t2+3*t3)*v1+(1+3*t1+3*t2-3*t3)*v2+t3*v3)/6;}function basis$1(values){var n=values.length-1;return function(t){var i=t<=0?t=0:t>=1?(t=1,n-1):Math.floor(t*n),v1=values[i],v2=values[i+1],v0=i>0?values[i-1]:2*v1-v2,v3=i<n-1?values[i+2]:2*v2-v1;return basis((t-i/n)*n,v0,v1,v2,v3);};}function basisClosed(values){var n=values.length;return function(t){var i=Math.floor(((t%=1)<0?++t:t)*n),v0=values[(i+n-1)%n],v1=values[i%n],v2=values[(i+1)%n],v3=values[(i+2)%n];return basis((t-i/n)*n,v0,v1,v2,v3);};}function constant$3(x){return function(){return x;};}function linear(a,d){return function(t){return a+t*d;};}function exponential(a,b,y){return a=Math.pow(a,y),b=Math.pow(b,y)-a,y=1/y,function(t){return Math.pow(a+t*b,y);};}function hue(a,b){var d=b-a;return d?linear(a,d>180||d<-180?d-360*Math.round(d/360):d):constant$3(isNaN(a)?b:a);}function gamma(y){return(y=+y)===1?nogamma:function(a,b){return b-a?exponential(a,b,y):constant$3(isNaN(a)?b:a);};}function nogamma(a,b){var d=b-a;return d?linear(a,d):constant$3(isNaN(a)?b:a);}var interpolateRgb=function rgbGamma(y){var color$$1=gamma(y);function rgb$$1(start,end){var r=color$$1((start=rgb(start)).r,(end=rgb(end)).r),g=color$$1(start.g,end.g),b=color$$1(start.b,end.b),opacity=nogamma(start.opacity,end.opacity);return function(t){start.r=r(t);start.g=g(t);start.b=b(t);start.opacity=opacity(t);return start+"";};}rgb$$1.gamma=rgbGamma;return rgb$$1;}(1);function rgbSpline(spline){return function(colors){var n=colors.length,r=new Array(n),g=new Array(n),b=new Array(n),i,color$$1;for(i=0;i<n;++i){color$$1=rgb(colors[i]);r[i]=color$$1.r||0;g[i]=color$$1.g||0;b[i]=color$$1.b||0;}r=spline(r);g=spline(g);b=spline(b);color$$1.opacity=1;return function(t){color$$1.r=r(t);color$$1.g=g(t);color$$1.b=b(t);return color$$1+"";};};}var rgbBasis=rgbSpline(basis$1);var rgbBasisClosed=rgbSpline(basisClosed);function array$1(a,b){var nb=b?b.length:0,na=a?Math.min(nb,a.length):0,x=new Array(na),c=new Array(nb),i;for(i=0;i<na;++i){x[i]=interpolateValue(a[i],b[i]);}for(;i<nb;++i){c[i]=b[i];}return function(t){for(i=0;i<na;++i){c[i]=x[i](t);}return c;};}function date(a,b){var d=new Date();return a=+a,b-=a,function(t){return d.setTime(a+b*t),d;};}function interpolateNumber(a,b){return a=+a,b-=a,function(t){return a+b*t;};}function object(a,b){var i={},c={},k;if(a===null||_typeof(a)!=="object")a={};if(b===null||_typeof(b)!=="object")b={};for(k in b){if(k in a){i[k]=interpolateValue(a[k],b[k]);}else{c[k]=b[k];}}return function(t){for(k in i){c[k]=i[k](t);}return c;};}var reA=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,reB=new RegExp(reA.source,"g");function zero(b){return function(){return b;};}function one(b){return function(t){return b(t)+"";};}function interpolateString(a,b){var bi=reA.lastIndex=reB.lastIndex=0,// scan index for next number in b
am,// current match in a
bm,// current match in b
bs,// string preceding current number in b, if any
i=-1,// index in s
s=[],// string constants and placeholders
q=[];// number interpolators
// Coerce inputs to strings.
a=a+"",b=b+"";// Interpolate pairs of numbers in a & b.
while((am=reA.exec(a))&&(bm=reB.exec(b))){if((bs=bm.index)>bi){// a string precedes the next number in b
bs=b.slice(bi,bs);if(s[i])s[i]+=bs;// coalesce with previous string
else s[++i]=bs;}if((am=am[0])===(bm=bm[0])){// numbers in a & b match
if(s[i])s[i]+=bm;// coalesce with previous string
else s[++i]=bm;}else{// interpolate non-matching numbers
s[++i]=null;q.push({i:i,x:interpolateNumber(am,bm)});}bi=reB.lastIndex;}// Add remains of b.
if(bi<b.length){bs=b.slice(bi);if(s[i])s[i]+=bs;// coalesce with previous string
else s[++i]=bs;}// Special optimization for only a single match.
// Otherwise, interpolate each of the numbers and rejoin the string.
return s.length<2?q[0]?one(q[0].x):zero(b):(b=q.length,function(t){for(var i=0,o;i<b;++i){s[(o=q[i]).i]=o.x(t);}return s.join("");});}function interpolateValue(a,b){var t=_typeof(b),c;return b==null||t==="boolean"?constant$3(b):(t==="number"?interpolateNumber:t==="string"?(c=color(b))?(b=c,interpolateRgb):interpolateString:b instanceof color?interpolateRgb:b instanceof Date?date:Array.isArray(b)?array$1:typeof b.valueOf!=="function"&&typeof b.toString!=="function"||isNaN(b)?object:interpolateNumber)(a,b);}function discrete(range){var n=range.length;return function(t){return range[Math.max(0,Math.min(n-1,Math.floor(t*n)))];};}function hue$1(a,b){var i=hue(+a,+b);return function(t){var x=i(t);return x-360*Math.floor(x/360);};}function interpolateRound(a,b){return a=+a,b-=a,function(t){return Math.round(a+b*t);};}var degrees=180/Math.PI;var identity$2={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function decompose(a,b,c,d,e,f){var scaleX,scaleY,skewX;if(scaleX=Math.sqrt(a*a+b*b))a/=scaleX,b/=scaleX;if(skewX=a*c+b*d)c-=a*skewX,d-=b*skewX;if(scaleY=Math.sqrt(c*c+d*d))c/=scaleY,d/=scaleY,skewX/=scaleY;if(a*d<b*c)a=-a,b=-b,skewX=-skewX,scaleX=-scaleX;return{translateX:e,translateY:f,rotate:Math.atan2(b,a)*degrees,skewX:Math.atan(skewX)*degrees,scaleX:scaleX,scaleY:scaleY};}var cssNode,cssRoot,cssView,svgNode;function parseCss(value){if(value==="none")return identity$2;if(!cssNode)cssNode=document.createElement("DIV"),cssRoot=document.documentElement,cssView=document.defaultView;cssNode.style.transform=value;value=cssView.getComputedStyle(cssRoot.appendChild(cssNode),null).getPropertyValue("transform");cssRoot.removeChild(cssNode);value=value.slice(7,-1).split(",");return decompose(+value[0],+value[1],+value[2],+value[3],+value[4],+value[5]);}function parseSvg(value){if(value==null)return identity$2;if(!svgNode)svgNode=document.createElementNS("http://www.w3.org/2000/svg","g");svgNode.setAttribute("transform",value);if(!(value=svgNode.transform.baseVal.consolidate()))return identity$2;value=value.matrix;return decompose(value.a,value.b,value.c,value.d,value.e,value.f);}function interpolateTransform(parse,pxComma,pxParen,degParen){function pop(s){return s.length?s.pop()+" ":"";}function translate(xa,ya,xb,yb,s,q){if(xa!==xb||ya!==yb){var i=s.push("translate(",null,pxComma,null,pxParen);q.push({i:i-4,x:interpolateNumber(xa,xb)},{i:i-2,x:interpolateNumber(ya,yb)});}else if(xb||yb){s.push("translate("+xb+pxComma+yb+pxParen);}}function rotate(a,b,s,q){if(a!==b){if(a-b>180)b+=360;else if(b-a>180)a+=360;// shortest path
q.push({i:s.push(pop(s)+"rotate(",null,degParen)-2,x:interpolateNumber(a,b)});}else if(b){s.push(pop(s)+"rotate("+b+degParen);}}function skewX(a,b,s,q){if(a!==b){q.push({i:s.push(pop(s)+"skewX(",null,degParen)-2,x:interpolateNumber(a,b)});}else if(b){s.push(pop(s)+"skewX("+b+degParen);}}function scale(xa,ya,xb,yb,s,q){if(xa!==xb||ya!==yb){var i=s.push(pop(s)+"scale(",null,",",null,")");q.push({i:i-4,x:interpolateNumber(xa,xb)},{i:i-2,x:interpolateNumber(ya,yb)});}else if(xb!==1||yb!==1){s.push(pop(s)+"scale("+xb+","+yb+")");}}return function(a,b){var s=[],// string constants and placeholders
q=[];// number interpolators
a=parse(a),b=parse(b);translate(a.translateX,a.translateY,b.translateX,b.translateY,s,q);rotate(a.rotate,b.rotate,s,q);skewX(a.skewX,b.skewX,s,q);scale(a.scaleX,a.scaleY,b.scaleX,b.scaleY,s,q);a=b=null;// gc
return function(t){var i=-1,n=q.length,o;while(++i<n){s[(o=q[i]).i]=o.x(t);}return s.join("");};};}var interpolateTransformCss=interpolateTransform(parseCss,"px, ","px)","deg)");var interpolateTransformSvg=interpolateTransform(parseSvg,", ",")",")");var rho=Math.SQRT2,rho2=2,rho4=4,epsilon2=1e-12;function cosh(x){return((x=Math.exp(x))+1/x)/2;}function sinh(x){return((x=Math.exp(x))-1/x)/2;}function tanh(x){return((x=Math.exp(2*x))-1)/(x+1);}// p0 = [ux0, uy0, w0]
// p1 = [ux1, uy1, w1]
function interpolateZoom(p0,p1){var ux0=p0[0],uy0=p0[1],w0=p0[2],ux1=p1[0],uy1=p1[1],w1=p1[2],dx=ux1-ux0,dy=uy1-uy0,d2=dx*dx+dy*dy,i,S;// Special case for u0 ≅ u1.
if(d2<epsilon2){S=Math.log(w1/w0)/rho;i=function i(t){return[ux0+t*dx,uy0+t*dy,w0*Math.exp(rho*t*S)];};}// General case.
else{var d1=Math.sqrt(d2),b0=(w1*w1-w0*w0+rho4*d2)/(2*w0*rho2*d1),b1=(w1*w1-w0*w0-rho4*d2)/(2*w1*rho2*d1),r0=Math.log(Math.sqrt(b0*b0+1)-b0),r1=Math.log(Math.sqrt(b1*b1+1)-b1);S=(r1-r0)/rho;i=function i(t){var s=t*S,coshr0=cosh(r0),u=w0/(rho2*d1)*(coshr0*tanh(rho*s+r0)-sinh(r0));return[ux0+u*dx,uy0+u*dy,w0*coshr0/cosh(rho*s+r0)];};}i.duration=S*1000;return i;}function hsl$1(hue$$1){return function(start,end){var h=hue$$1((start=hsl(start)).h,(end=hsl(end)).h),s=nogamma(start.s,end.s),l=nogamma(start.l,end.l),opacity=nogamma(start.opacity,end.opacity);return function(t){start.h=h(t);start.s=s(t);start.l=l(t);start.opacity=opacity(t);return start+"";};};}var hsl$2=hsl$1(hue);var hslLong=hsl$1(nogamma);function lab$1(start,end){var l=nogamma((start=lab(start)).l,(end=lab(end)).l),a=nogamma(start.a,end.a),b=nogamma(start.b,end.b),opacity=nogamma(start.opacity,end.opacity);return function(t){start.l=l(t);start.a=a(t);start.b=b(t);start.opacity=opacity(t);return start+"";};}function hcl$1(hue$$1){return function(start,end){var h=hue$$1((start=hcl(start)).h,(end=hcl(end)).h),c=nogamma(start.c,end.c),l=nogamma(start.l,end.l),opacity=nogamma(start.opacity,end.opacity);return function(t){start.h=h(t);start.c=c(t);start.l=l(t);start.opacity=opacity(t);return start+"";};};}var hcl$2=hcl$1(hue);var hclLong=hcl$1(nogamma);function cubehelix$1(hue$$1){return function cubehelixGamma(y){y=+y;function cubehelix$$1(start,end){var h=hue$$1((start=cubehelix(start)).h,(end=cubehelix(end)).h),s=nogamma(start.s,end.s),l=nogamma(start.l,end.l),opacity=nogamma(start.opacity,end.opacity);return function(t){start.h=h(t);start.s=s(t);start.l=l(Math.pow(t,y));start.opacity=opacity(t);return start+"";};}cubehelix$$1.gamma=cubehelixGamma;return cubehelix$$1;}(1);}var cubehelix$2=cubehelix$1(hue);var cubehelixLong=cubehelix$1(nogamma);function piecewise(interpolate,values){var i=0,n=values.length-1,v=values[0],I=new Array(n<0?0:n);while(i<n){I[i]=interpolate(v,v=values[++i]);}return function(t){var i=Math.max(0,Math.min(n-1,Math.floor(t*=n)));return I[i](t-i);};}function quantize(interpolator,n){var samples=new Array(n);for(var i=0;i<n;++i){samples[i]=interpolator(i/(n-1));}return samples;}var frame=0,// is an animation frame pending?
timeout=0,// is a timeout pending?
interval=0,// are any timers active?
pokeDelay=1000,// how frequently we check for clock skew
taskHead,taskTail,clockLast=0,clockNow=0,clockSkew=0,clock=(typeof performance==="undefined"?"undefined":_typeof(performance))==="object"&&performance.now?performance:Date,setFrame=(typeof window==="undefined"?"undefined":_typeof(window))==="object"&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(f){setTimeout(f,17);};function now(){return clockNow||(setFrame(clearNow),clockNow=clock.now()+clockSkew);}function clearNow(){clockNow=0;}function Timer(){this._call=this._time=this._next=null;}Timer.prototype=timer.prototype={constructor:Timer,restart:function restart(callback,delay,time){if(typeof callback!=="function")throw new TypeError("callback is not a function");time=(time==null?now():+time)+(delay==null?0:+delay);if(!this._next&&taskTail!==this){if(taskTail)taskTail._next=this;else taskHead=this;taskTail=this;}this._call=callback;this._time=time;sleep();},stop:function stop(){if(this._call){this._call=null;this._time=Infinity;sleep();}}};function timer(callback,delay,time){var t=new Timer();t.restart(callback,delay,time);return t;}function timerFlush(){now();// Get the current time, if not already set.
++frame;// Pretend we’ve set an alarm, if we haven’t already.
var t=taskHead,e;while(t){if((e=clockNow-t._time)>=0)t._call.call(null,e);t=t._next;}--frame;}function wake(){clockNow=(clockLast=clock.now())+clockSkew;frame=timeout=0;try{timerFlush();}finally{frame=0;nap();clockNow=0;}}function poke(){var now=clock.now(),delay=now-clockLast;if(delay>pokeDelay)clockSkew-=delay,clockLast=now;}function nap(){var t0,t1=taskHead,t2,time=Infinity;while(t1){if(t1._call){if(time>t1._time)time=t1._time;t0=t1,t1=t1._next;}else{t2=t1._next,t1._next=null;t1=t0?t0._next=t2:taskHead=t2;}}taskTail=t0;sleep(time);}function sleep(time){if(frame)return;// Soonest alarm already set, or will be.
if(timeout)timeout=clearTimeout(timeout);var delay=time-clockNow;// Strictly less than if we recomputed clockNow.
if(delay>24){if(time<Infinity)timeout=setTimeout(wake,time-clock.now()-clockSkew);if(interval)interval=clearInterval(interval);}else{if(!interval)clockLast=clock.now(),interval=setInterval(poke,pokeDelay);frame=1,setFrame(wake);}}function timeout$1(callback,delay,time){var t=new Timer();delay=delay==null?0:+delay;t.restart(function(elapsed){t.stop();callback(elapsed+delay);},delay,time);return t;}function interval$1(callback,delay,time){var t=new Timer(),total=delay;if(delay==null)return t.restart(callback,delay,time),t;delay=+delay,time=time==null?now():+time;t.restart(function tick(elapsed){elapsed+=total;t.restart(tick,total+=delay,time);callback(elapsed);},delay,time);return t;}var emptyOn=dispatch("start","end","cancel","interrupt");var emptyTween=[];var CREATED=0;var SCHEDULED=1;var STARTING=2;var STARTED=3;var RUNNING=4;var ENDING=5;var ENDED=6;function schedule(node,name,id,index,group,timing){var schedules=node.__transition;if(!schedules)node.__transition={};else if(id in schedules)return;create$1(node,id,{name:name,index:index,// For context during callback.
group:group,// For context during callback.
on:emptyOn,tween:emptyTween,time:timing.time,delay:timing.delay,duration:timing.duration,ease:timing.ease,timer:null,state:CREATED});}function init(node,id){var schedule=get$1(node,id);if(schedule.state>CREATED)throw new Error("too late; already scheduled");return schedule;}function set$1(node,id){var schedule=get$1(node,id);if(schedule.state>STARTED)throw new Error("too late; already running");return schedule;}function get$1(node,id){var schedule=node.__transition;if(!schedule||!(schedule=schedule[id]))throw new Error("transition not found");return schedule;}function create$1(node,id,self){var schedules=node.__transition,tween;// Initialize the self timer when the transition is created.
// Note the actual delay is not known until the first callback!
schedules[id]=self;self.timer=timer(schedule,0,self.time);function schedule(elapsed){self.state=SCHEDULED;self.timer.restart(start,self.delay,self.time);// If the elapsed delay is less than our first sleep, start immediately.
if(self.delay<=elapsed)start(elapsed-self.delay);}function start(elapsed){var i,j,n,o;// If the state is not SCHEDULED, then we previously errored on start.
if(self.state!==SCHEDULED)return stop();for(i in schedules){o=schedules[i];if(o.name!==self.name)continue;// While this element already has a starting transition during this frame,
// defer starting an interrupting transition until that transition has a
// chance to tick (and possibly end); see d3/d3-transition#54!
if(o.state===STARTED)return timeout$1(start);// Interrupt the active transition, if any.
if(o.state===RUNNING){o.state=ENDED;o.timer.stop();o.on.call("interrupt",node,node.__data__,o.index,o.group);delete schedules[i];}// Cancel any pre-empted transitions.
else if(+i<id){o.state=ENDED;o.timer.stop();o.on.call("cancel",node,node.__data__,o.index,o.group);delete schedules[i];}}// Defer the first tick to end of the current frame; see d3/d3#1576.
// Note the transition may be canceled after start and before the first tick!
// Note this must be scheduled before the start event; see d3/d3-transition#16!
// Assuming this is successful, subsequent callbacks go straight to tick.
timeout$1(function(){if(self.state===STARTED){self.state=RUNNING;self.timer.restart(tick,self.delay,self.time);tick(elapsed);}});// Dispatch the start event.
// Note this must be done before the tween are initialized.
self.state=STARTING;self.on.call("start",node,node.__data__,self.index,self.group);if(self.state!==STARTING)return;// interrupted
self.state=STARTED;// Initialize the tween, deleting null tween.
tween=new Array(n=self.tween.length);for(i=0,j=-1;i<n;++i){if(o=self.tween[i].value.call(node,node.__data__,self.index,self.group)){tween[++j]=o;}}tween.length=j+1;}function tick(elapsed){var t=elapsed<self.duration?self.ease.call(null,elapsed/self.duration):(self.timer.restart(stop),self.state=ENDING,1),i=-1,n=tween.length;while(++i<n){tween[i].call(node,t);}// Dispatch the end event.
if(self.state===ENDING){self.on.call("end",node,node.__data__,self.index,self.group);stop();}}function stop(){self.state=ENDED;self.timer.stop();delete schedules[id];for(var i in schedules){return;}// eslint-disable-line no-unused-vars
delete node.__transition;}}function interrupt(node,name){var schedules=node.__transition,schedule$$1,active,empty=true,i;if(!schedules)return;name=name==null?null:name+"";for(i in schedules){if((schedule$$1=schedules[i]).name!==name){empty=false;continue;}active=schedule$$1.state>STARTING&&schedule$$1.state<ENDING;schedule$$1.state=ENDED;schedule$$1.timer.stop();schedule$$1.on.call(active?"interrupt":"cancel",node,node.__data__,schedule$$1.index,schedule$$1.group);delete schedules[i];}if(empty)delete node.__transition;}function selection_interrupt(name){return this.each(function(){interrupt(this,name);});}function tweenRemove(id,name){var tween0,tween1;return function(){var schedule$$1=set$1(this,id),tween=schedule$$1.tween;// If this node shared tween with the previous node,
// just assign the updated shared tween and we’re done!
// Otherwise, copy-on-write.
if(tween!==tween0){tween1=tween0=tween;for(var i=0,n=tween1.length;i<n;++i){if(tween1[i].name===name){tween1=tween1.slice();tween1.splice(i,1);break;}}}schedule$$1.tween=tween1;};}function tweenFunction(id,name,value){var tween0,tween1;if(typeof value!=="function")throw new Error();return function(){var schedule$$1=set$1(this,id),tween=schedule$$1.tween;// If this node shared tween with the previous node,
// just assign the updated shared tween and we’re done!
// Otherwise, copy-on-write.
if(tween!==tween0){tween1=(tween0=tween).slice();for(var t={name:name,value:value},i=0,n=tween1.length;i<n;++i){if(tween1[i].name===name){tween1[i]=t;break;}}if(i===n)tween1.push(t);}schedule$$1.tween=tween1;};}function transition_tween(name,value){var id=this._id;name+="";if(arguments.length<2){var tween=get$1(this.node(),id).tween;for(var i=0,n=tween.length,t;i<n;++i){if((t=tween[i]).name===name){return t.value;}}return null;}return this.each((value==null?tweenRemove:tweenFunction)(id,name,value));}function tweenValue(transition,name,value){var id=transition._id;transition.each(function(){var schedule$$1=set$1(this,id);(schedule$$1.value||(schedule$$1.value={}))[name]=value.apply(this,arguments);});return function(node){return get$1(node,id).value[name];};}function interpolate(a,b){var c;return(typeof b==="number"?interpolateNumber:b instanceof color?interpolateRgb:(c=color(b))?(b=c,interpolateRgb):interpolateString)(a,b);}function attrRemove$1(name){return function(){this.removeAttribute(name);};}function attrRemoveNS$1(fullname){return function(){this.removeAttributeNS(fullname.space,fullname.local);};}function attrConstant$1(name,interpolate$$1,value1){var string00,string1=value1+"",interpolate0;return function(){var string0=this.getAttribute(name);return string0===string1?null:string0===string00?interpolate0:interpolate0=interpolate$$1(string00=string0,value1);};}function attrConstantNS$1(fullname,interpolate$$1,value1){var string00,string1=value1+"",interpolate0;return function(){var string0=this.getAttributeNS(fullname.space,fullname.local);return string0===string1?null:string0===string00?interpolate0:interpolate0=interpolate$$1(string00=string0,value1);};}function attrFunction$1(name,interpolate$$1,value){var string00,string10,interpolate0;return function(){var string0,value1=value(this),string1;if(value1==null)return void this.removeAttribute(name);string0=this.getAttribute(name);string1=value1+"";return string0===string1?null:string0===string00&&string1===string10?interpolate0:(string10=string1,interpolate0=interpolate$$1(string00=string0,value1));};}function attrFunctionNS$1(fullname,interpolate$$1,value){var string00,string10,interpolate0;return function(){var string0,value1=value(this),string1;if(value1==null)return void this.removeAttributeNS(fullname.space,fullname.local);string0=this.getAttributeNS(fullname.space,fullname.local);string1=value1+"";return string0===string1?null:string0===string00&&string1===string10?interpolate0:(string10=string1,interpolate0=interpolate$$1(string00=string0,value1));};}function transition_attr(name,value){var fullname=namespace(name),i=fullname==="transform"?interpolateTransformSvg:interpolate;return this.attrTween(name,typeof value==="function"?(fullname.local?attrFunctionNS$1:attrFunction$1)(fullname,i,tweenValue(this,"attr."+name,value)):value==null?(fullname.local?attrRemoveNS$1:attrRemove$1)(fullname):(fullname.local?attrConstantNS$1:attrConstant$1)(fullname,i,value));}function attrInterpolate(name,i){return function(t){this.setAttribute(name,i(t));};}function attrInterpolateNS(fullname,i){return function(t){this.setAttributeNS(fullname.space,fullname.local,i(t));};}function attrTweenNS(fullname,value){var t0,i0;function tween(){var i=value.apply(this,arguments);if(i!==i0)t0=(i0=i)&&attrInterpolateNS(fullname,i);return t0;}tween._value=value;return tween;}function attrTween(name,value){var t0,i0;function tween(){var i=value.apply(this,arguments);if(i!==i0)t0=(i0=i)&&attrInterpolate(name,i);return t0;}tween._value=value;return tween;}function transition_attrTween(name,value){var key="attr."+name;if(arguments.length<2)return(key=this.tween(key))&&key._value;if(value==null)return this.tween(key,null);if(typeof value!=="function")throw new Error();var fullname=namespace(name);return this.tween(key,(fullname.local?attrTweenNS:attrTween)(fullname,value));}function delayFunction(id,value){return function(){init(this,id).delay=+value.apply(this,arguments);};}function delayConstant(id,value){return value=+value,function(){init(this,id).delay=value;};}function transition_delay(value){var id=this._id;return arguments.length?this.each((typeof value==="function"?delayFunction:delayConstant)(id,value)):get$1(this.node(),id).delay;}function durationFunction(id,value){return function(){set$1(this,id).duration=+value.apply(this,arguments);};}function durationConstant(id,value){return value=+value,function(){set$1(this,id).duration=value;};}function transition_duration(value){var id=this._id;return arguments.length?this.each((typeof value==="function"?durationFunction:durationConstant)(id,value)):get$1(this.node(),id).duration;}function easeConstant(id,value){if(typeof value!=="function")throw new Error();return function(){set$1(this,id).ease=value;};}function transition_ease(value){var id=this._id;return arguments.length?this.each(easeConstant(id,value)):get$1(this.node(),id).ease;}function transition_filter(match){if(typeof match!=="function")match=matcher(match);for(var groups=this._groups,m=groups.length,subgroups=new Array(m),j=0;j<m;++j){for(var group=groups[j],n=group.length,subgroup=subgroups[j]=[],node,i=0;i<n;++i){if((node=group[i])&&match.call(node,node.__data__,i,group)){subgroup.push(node);}}}return new Transition(subgroups,this._parents,this._name,this._id);}function transition_merge(transition$$1){if(transition$$1._id!==this._id)throw new Error();for(var groups0=this._groups,groups1=transition$$1._groups,m0=groups0.length,m1=groups1.length,m=Math.min(m0,m1),merges=new Array(m0),j=0;j<m;++j){for(var group0=groups0[j],group1=groups1[j],n=group0.length,merge=merges[j]=new Array(n),node,i=0;i<n;++i){if(node=group0[i]||group1[i]){merge[i]=node;}}}for(;j<m0;++j){merges[j]=groups0[j];}return new Transition(merges,this._parents,this._name,this._id);}function start(name){return(name+"").trim().split(/^|\s+/).every(function(t){var i=t.indexOf(".");if(i>=0)t=t.slice(0,i);return!t||t==="start";});}function onFunction(id,name,listener){var on0,on1,sit=start(name)?init:set$1;return function(){var schedule$$1=sit(this,id),on=schedule$$1.on;// If this node shared a dispatch with the previous node,
// just assign the updated shared dispatch and we’re done!
// Otherwise, copy-on-write.
if(on!==on0)(on1=(on0=on).copy()).on(name,listener);schedule$$1.on=on1;};}function transition_on(name,listener){var id=this._id;return arguments.length<2?get$1(this.node(),id).on.on(name):this.each(onFunction(id,name,listener));}function removeFunction(id){return function(){var parent=this.parentNode;for(var i in this.__transition){if(+i!==id)return;}if(parent)parent.removeChild(this);};}function transition_remove(){return this.on("end.remove",removeFunction(this._id));}function transition_select(select$$1){var name=this._name,id=this._id;if(typeof select$$1!=="function")select$$1=selector(select$$1);for(var groups=this._groups,m=groups.length,subgroups=new Array(m),j=0;j<m;++j){for(var group=groups[j],n=group.length,subgroup=subgroups[j]=new Array(n),node,subnode,i=0;i<n;++i){if((node=group[i])&&(subnode=select$$1.call(node,node.__data__,i,group))){if("__data__"in node)subnode.__data__=node.__data__;subgroup[i]=subnode;schedule(subgroup[i],name,id,i,subgroup,get$1(node,id));}}}return new Transition(subgroups,this._parents,name,id);}function transition_selectAll(select$$1){var name=this._name,id=this._id;if(typeof select$$1!=="function")select$$1=selectorAll(select$$1);for(var groups=this._groups,m=groups.length,subgroups=[],parents=[],j=0;j<m;++j){for(var group=groups[j],n=group.length,node,i=0;i<n;++i){if(node=group[i]){for(var children=select$$1.call(node,node.__data__,i,group),child,inherit=get$1(node,id),k=0,l=children.length;k<l;++k){if(child=children[k]){schedule(child,name,id,k,children,inherit);}}subgroups.push(children);parents.push(node);}}}return new Transition(subgroups,parents,name,id);}var Selection$1=selection.prototype.constructor;function transition_selection(){return new Selection$1(this._groups,this._parents);}function styleNull(name,interpolate$$1){var string00,string10,interpolate0;return function(){var string0=styleValue(this,name),string1=(this.style.removeProperty(name),styleValue(this,name));return string0===string1?null:string0===string00&&string1===string10?interpolate0:interpolate0=interpolate$$1(string00=string0,string10=string1);};}function styleRemove$1(name){return function(){this.style.removeProperty(name);};}function styleConstant$1(name,interpolate$$1,value1){var string00,string1=value1+"",interpolate0;return function(){var string0=styleValue(this,name);return string0===string1?null:string0===string00?interpolate0:interpolate0=interpolate$$1(string00=string0,value1);};}function styleFunction$1(name,interpolate$$1,value){var string00,string10,interpolate0;return function(){var string0=styleValue(this,name),value1=value(this),string1=value1+"";if(value1==null)string1=value1=(this.style.removeProperty(name),styleValue(this,name));return string0===string1?null:string0===string00&&string1===string10?interpolate0:(string10=string1,interpolate0=interpolate$$1(string00=string0,value1));};}function styleMaybeRemove(id,name){var on0,on1,listener0,key="style."+name,event="end."+key,remove;return function(){var schedule$$1=set$1(this,id),on=schedule$$1.on,listener=schedule$$1.value[key]==null?remove||(remove=styleRemove$1(name)):undefined;// If this node shared a dispatch with the previous node,
// just assign the updated shared dispatch and we’re done!
// Otherwise, copy-on-write.
if(on!==on0||listener0!==listener)(on1=(on0=on).copy()).on(event,listener0=listener);schedule$$1.on=on1;};}function transition_style(name,value,priority){var i=(name+="")==="transform"?interpolateTransformCss:interpolate;return value==null?this.styleTween(name,styleNull(name,i)).on("end.style."+name,styleRemove$1(name)):typeof value==="function"?this.styleTween(name,styleFunction$1(name,i,tweenValue(this,"style."+name,value))).each(styleMaybeRemove(this._id,name)):this.styleTween(name,styleConstant$1(name,i,value),priority).on("end.style."+name,null);}function styleInterpolate(name,i,priority){return function(t){this.style.setProperty(name,i(t),priority);};}function styleTween(name,value,priority){var t,i0;function tween(){var i=value.apply(this,arguments);if(i!==i0)t=(i0=i)&&styleInterpolate(name,i,priority);return t;}tween._value=value;return tween;}function transition_styleTween(name,value,priority){var key="style."+(name+="");if(arguments.length<2)return(key=this.tween(key))&&key._value;if(value==null)return this.tween(key,null);if(typeof value!=="function")throw new Error();return this.tween(key,styleTween(name,value,priority==null?"":priority));}function textConstant$1(value){return function(){this.textContent=value;};}function textFunction$1(value){return function(){var value1=value(this);this.textContent=value1==null?"":value1;};}function transition_text(value){return this.tween("text",typeof value==="function"?textFunction$1(tweenValue(this,"text",value)):textConstant$1(value==null?"":value+""));}function transition_transition(){var name=this._name,id0=this._id,id1=newId();for(var groups=this._groups,m=groups.length,j=0;j<m;++j){for(var group=groups[j],n=group.length,node,i=0;i<n;++i){if(node=group[i]){var inherit=get$1(node,id0);schedule(node,name,id1,i,group,{time:inherit.time+inherit.delay+inherit.duration,delay:0,duration:inherit.duration,ease:inherit.ease});}}}return new Transition(groups,this._parents,name,id1);}function transition_end(){var on0,on1,that=this,id=that._id,size=that.size();return new Promise(function(resolve,reject){var cancel={value:reject},end={value:function value(){if(--size===0)resolve();}};that.each(function(){var schedule$$1=set$1(this,id),on=schedule$$1.on;// If this node shared a dispatch with the previous node,
// just assign the updated shared dispatch and we’re done!
// Otherwise, copy-on-write.
if(on!==on0){on1=(on0=on).copy();on1._.cancel.push(cancel);on1._.interrupt.push(cancel);on1._.end.push(end);}schedule$$1.on=on1;});});}var id=0;function Transition(groups,parents,name,id){this._groups=groups;this._parents=parents;this._name=name;this._id=id;}function transition(name){return selection().transition(name);}function newId(){return++id;}var selection_prototype=selection.prototype;Transition.prototype=transition.prototype={constructor:Transition,select:transition_select,selectAll:transition_selectAll,filter:transition_filter,merge:transition_merge,selection:transition_selection,transition:transition_transition,call:selection_prototype.call,nodes:selection_prototype.nodes,node:selection_prototype.node,size:selection_prototype.size,empty:selection_prototype.empty,each:selection_prototype.each,on:transition_on,attr:transition_attr,attrTween:transition_attrTween,style:transition_style,styleTween:transition_styleTween,text:transition_text,remove:transition_remove,tween:transition_tween,delay:transition_delay,duration:transition_duration,ease:transition_ease,end:transition_end};function linear$1(t){return+t;}function quadIn(t){return t*t;}function quadOut(t){return t*(2-t);}function quadInOut(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2;}function cubicIn(t){return t*t*t;}function cubicOut(t){return--t*t*t+1;}function cubicInOut(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2;}var exponent=3;var polyIn=function custom(e){e=+e;function polyIn(t){return Math.pow(t,e);}polyIn.exponent=custom;return polyIn;}(exponent);var polyOut=function custom(e){e=+e;function polyOut(t){return 1-Math.pow(1-t,e);}polyOut.exponent=custom;return polyOut;}(exponent);var polyInOut=function custom(e){e=+e;function polyInOut(t){return((t*=2)<=1?Math.pow(t,e):2-Math.pow(2-t,e))/2;}polyInOut.exponent=custom;return polyInOut;}(exponent);var pi=Math.PI,halfPi=pi/2;function sinIn(t){return 1-Math.cos(t*halfPi);}function sinOut(t){return Math.sin(t*halfPi);}function sinInOut(t){return(1-Math.cos(pi*t))/2;}function expIn(t){return Math.pow(2,10*t-10);}function expOut(t){return 1-Math.pow(2,-10*t);}function expInOut(t){return((t*=2)<=1?Math.pow(2,10*t-10):2-Math.pow(2,10-10*t))/2;}function circleIn(t){return 1-Math.sqrt(1-t*t);}function circleOut(t){return Math.sqrt(1- --t*t);}function circleInOut(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2;}var b1=4/11,b2=6/11,b3=8/11,b4=3/4,b5=9/11,b6=10/11,b7=15/16,b8=21/22,b9=63/64,b0=1/b1/b1;function bounceIn(t){return 1-bounceOut(1-t);}function bounceOut(t){return(t=+t)<b1?b0*t*t:t<b3?b0*(t-=b2)*t+b4:t<b6?b0*(t-=b5)*t+b7:b0*(t-=b8)*t+b9;}function bounceInOut(t){return((t*=2)<=1?1-bounceOut(1-t):bounceOut(t-1)+1)/2;}var overshoot=1.70158;var backIn=function custom(s){s=+s;function backIn(t){return t*t*((s+1)*t-s);}backIn.overshoot=custom;return backIn;}(overshoot);var backOut=function custom(s){s=+s;function backOut(t){return--t*t*((s+1)*t+s)+1;}backOut.overshoot=custom;return backOut;}(overshoot);var backInOut=function custom(s){s=+s;function backInOut(t){return((t*=2)<1?t*t*((s+1)*t-s):(t-=2)*t*((s+1)*t+s)+2)/2;}backInOut.overshoot=custom;return backInOut;}(overshoot);var tau=2*Math.PI,amplitude=1,period=0.3;var elasticIn=function custom(a,p){var s=Math.asin(1/(a=Math.max(1,a)))*(p/=tau);function elasticIn(t){return a*Math.pow(2,10*--t)*Math.sin((s-t)/p);}elasticIn.amplitude=function(a){return custom(a,p*tau);};elasticIn.period=function(p){return custom(a,p);};return elasticIn;}(amplitude,period);var elasticOut=function custom(a,p){var s=Math.asin(1/(a=Math.max(1,a)))*(p/=tau);function elasticOut(t){return 1-a*Math.pow(2,-10*(t=+t))*Math.sin((t+s)/p);}elasticOut.amplitude=function(a){return custom(a,p*tau);};elasticOut.period=function(p){return custom(a,p);};return elasticOut;}(amplitude,period);var elasticInOut=function custom(a,p){var s=Math.asin(1/(a=Math.max(1,a)))*(p/=tau);function elasticInOut(t){return((t=t*2-1)<0?a*Math.pow(2,10*t)*Math.sin((s-t)/p):2-a*Math.pow(2,-10*t)*Math.sin((s+t)/p))/2;}elasticInOut.amplitude=function(a){return custom(a,p*tau);};elasticInOut.period=function(p){return custom(a,p);};return elasticInOut;}(amplitude,period);var defaultTiming={time:null,// Set on use.
delay:0,duration:250,ease:cubicInOut};function inherit(node,id){var timing;while(!(timing=node.__transition)||!(timing=timing[id])){if(!(node=node.parentNode)){return defaultTiming.time=now(),defaultTiming;}}return timing;}function selection_transition(name){var id,timing;if(name instanceof Transition){id=name._id,name=name._name;}else{id=newId(),(timing=defaultTiming).time=now(),name=name==null?null:name+"";}for(var groups=this._groups,m=groups.length,j=0;j<m;++j){for(var group=groups[j],n=group.length,node,i=0;i<n;++i){if(node=group[i]){schedule(node,name,id,i,group,timing||inherit(node,id));}}}return new Transition(groups,this._parents,name,id);}selection.prototype.interrupt=selection_interrupt;selection.prototype.transition=selection_transition;var root$1=[null];function active(node,name){var schedules=node.__transition,schedule$$1,i;if(schedules){name=name==null?null:name+"";for(i in schedules){if((schedule$$1=schedules[i]).state>SCHEDULED&&schedule$$1.name===name){return new Transition([[node]],root$1,name,+i);}}}return null;}function constant$4(x){return function(){return x;};}function BrushEvent(target,type,selection){this.target=target;this.type=type;this.selection=selection;}function nopropagation$1(){exports.event.stopImmediatePropagation();}function noevent$1(){exports.event.preventDefault();exports.event.stopImmediatePropagation();}var MODE_DRAG={name:"drag"},MODE_SPACE={name:"space"},MODE_HANDLE={name:"handle"},MODE_CENTER={name:"center"};var X={name:"x",handles:["e","w"].map(type),input:function input(x,e){return x&&[[x[0],e[0][1]],[x[1],e[1][1]]];},output:function output(xy){return xy&&[xy[0][0],xy[1][0]];}};var Y={name:"y",handles:["n","s"].map(type),input:function input(y,e){return y&&[[e[0][0],y[0]],[e[1][0],y[1]]];},output:function output(xy){return xy&&[xy[0][1],xy[1][1]];}};var XY={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(type),input:function input(xy){return xy;},output:function output(xy){return xy;}};var cursors={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"};var flipX={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"};var flipY={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"};var signsX={overlay:+1,selection:+1,n:null,e:+1,s:null,w:-1,nw:-1,ne:+1,se:+1,sw:-1};var signsY={overlay:+1,selection:+1,n:-1,e:null,s:+1,w:null,nw:-1,ne:-1,se:+1,sw:+1};function type(t){return{type:t};}// Ignore right-click, since that should open the context menu.
function defaultFilter$1(){return!exports.event.button;}function defaultExtent(){var svg=this.ownerSVGElement||this;return[[0,0],[svg.width.baseVal.value,svg.height.baseVal.value]];}// Like d3.local, but with the name “__brush” rather than auto-generated.
function local$1(node){while(!node.__brush){if(!(node=node.parentNode))return;}return node.__brush;}function empty$1(extent){return extent[0][0]===extent[1][0]||extent[0][1]===extent[1][1];}function brushSelection(node){var state=node.__brush;return state?state.dim.output(state.selection):null;}function brushX(){return brush$1(X);}function brushY(){return brush$1(Y);}function brush(){return brush$1(XY);}function brush$1(dim){var extent=defaultExtent,filter=defaultFilter$1,listeners=dispatch(brush,"start","brush","end"),handleSize=6,touchending;function brush(group){var overlay=group.property("__brush",initialize).selectAll(".overlay").data([type("overlay")]);overlay.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",cursors.overlay).merge(overlay).each(function(){var extent=local$1(this).extent;select(this).attr("x",extent[0][0]).attr("y",extent[0][1]).attr("width",extent[1][0]-extent[0][0]).attr("height",extent[1][1]-extent[0][1]);});group.selectAll(".selection").data([type("selection")]).enter().append("rect").attr("class","selection").attr("cursor",cursors.selection).attr("fill","#777").attr("fill-opacity",0.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var handle=group.selectAll(".handle").data(dim.handles,function(d){return d.type;});handle.exit().remove();handle.enter().append("rect").attr("class",function(d){return"handle handle--"+d.type;}).attr("cursor",function(d){return cursors[d.type];});group.each(redraw).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",started);}brush.move=function(group,selection$$1){if(group.selection){group.on("start.brush",function(){emitter(this,arguments).beforestart().start();}).on("interrupt.brush end.brush",function(){emitter(this,arguments).end();}).tween("brush",function(){var that=this,state=that.__brush,emit=emitter(that,arguments),selection0=state.selection,selection1=dim.input(typeof selection$$1==="function"?selection$$1.apply(this,arguments):selection$$1,state.extent),i=interpolateValue(selection0,selection1);function tween(t){state.selection=t===1&&empty$1(selection1)?null:i(t);redraw.call(that);emit.brush();}return selection0&&selection1?tween:tween(1);});}else{group.each(function(){var that=this,args=arguments,state=that.__brush,selection1=dim.input(typeof selection$$1==="function"?selection$$1.apply(that,args):selection$$1,state.extent),emit=emitter(that,args).beforestart();interrupt(that);state.selection=selection1==null||empty$1(selection1)?null:selection1;redraw.call(that);emit.start().brush().end();});}};function redraw(){var group=select(this),selection$$1=local$1(this).selection;if(selection$$1){group.selectAll(".selection").style("display",null).attr("x",selection$$1[0][0]).attr("y",selection$$1[0][1]).attr("width",selection$$1[1][0]-selection$$1[0][0]).attr("height",selection$$1[1][1]-selection$$1[0][1]);group.selectAll(".handle").style("display",null).attr("x",function(d){return d.type[d.type.length-1]==="e"?selection$$1[1][0]-handleSize/2:selection$$1[0][0]-handleSize/2;}).attr("y",function(d){return d.type[0]==="s"?selection$$1[1][1]-handleSize/2:selection$$1[0][1]-handleSize/2;}).attr("width",function(d){return d.type==="n"||d.type==="s"?selection$$1[1][0]-selection$$1[0][0]+handleSize:handleSize;}).attr("height",function(d){return d.type==="e"||d.type==="w"?selection$$1[1][1]-selection$$1[0][1]+handleSize:handleSize;});}else{group.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null);}}function emitter(that,args){return that.__brush.emitter||new Emitter(that,args);}function Emitter(that,args){this.that=that;this.args=args;this.state=that.__brush;this.active=0;}Emitter.prototype={beforestart:function beforestart(){if(++this.active===1)this.state.emitter=this,this.starting=true;return this;},start:function start(){if(this.starting)this.starting=false,this.emit("start");return this;},brush:function brush(){this.emit("brush");return this;},end:function end(){if(--this.active===0)delete this.state.emitter,this.emit("end");return this;},emit:function emit(type){customEvent(new BrushEvent(brush,type,dim.output(this.state.selection)),listeners.apply,listeners,[type,this.that,this.args]);}};function started(){if(exports.event.touches){if(exports.event.changedTouches.length<exports.event.touches.length)return noevent$1();}else if(touchending)return;if(!filter.apply(this,arguments))return;var that=this,type=exports.event.target.__data__.type,mode=(exports.event.metaKey?type="overlay":type)==="selection"?MODE_DRAG:exports.event.altKey?MODE_CENTER:MODE_HANDLE,signX=dim===Y?null:signsX[type],signY=dim===X?null:signsY[type],state=local$1(that),extent=state.extent,selection$$1=state.selection,W=extent[0][0],w0,w1,N=extent[0][1],n0,n1,E=extent[1][0],e0,e1,S=extent[1][1],s0,s1,dx,dy,moving,shifting=signX&&signY&&exports.event.shiftKey,lockX,lockY,point0=mouse(that),point$$1=point0,emit=emitter(that,arguments).beforestart();if(type==="overlay"){state.selection=selection$$1=[[w0=dim===Y?W:point0[0],n0=dim===X?N:point0[1]],[e0=dim===Y?E:w0,s0=dim===X?S:n0]];}else{w0=selection$$1[0][0];n0=selection$$1[0][1];e0=selection$$1[1][0];s0=selection$$1[1][1];}w1=w0;n1=n0;e1=e0;s1=s0;var group=select(that).attr("pointer-events","none");var overlay=group.selectAll(".overlay").attr("cursor",cursors[type]);if(exports.event.touches){group.on("touchmove.brush",moved,true).on("touchend.brush touchcancel.brush",ended,true);}else{var view=select(exports.event.view).on("keydown.brush",keydowned,true).on("keyup.brush",keyupped,true).on("mousemove.brush",moved,true).on("mouseup.brush",ended,true);dragDisable(exports.event.view);}nopropagation$1();interrupt(that);redraw.call(that);emit.start();function moved(){var point1=mouse(that);if(shifting&&!lockX&&!lockY){if(Math.abs(point1[0]-point$$1[0])>Math.abs(point1[1]-point$$1[1]))lockY=true;else lockX=true;}point$$1=point1;moving=true;noevent$1();move();}function move(){var t;dx=point$$1[0]-point0[0];dy=point$$1[1]-point0[1];switch(mode){case MODE_SPACE:case MODE_DRAG:{if(signX)dx=Math.max(W-w0,Math.min(E-e0,dx)),w1=w0+dx,e1=e0+dx;if(signY)dy=Math.max(N-n0,Math.min(S-s0,dy)),n1=n0+dy,s1=s0+dy;break;}case MODE_HANDLE:{if(signX<0)dx=Math.max(W-w0,Math.min(E-w0,dx)),w1=w0+dx,e1=e0;else if(signX>0)dx=Math.max(W-e0,Math.min(E-e0,dx)),w1=w0,e1=e0+dx;if(signY<0)dy=Math.max(N-n0,Math.min(S-n0,dy)),n1=n0+dy,s1=s0;else if(signY>0)dy=Math.max(N-s0,Math.min(S-s0,dy)),n1=n0,s1=s0+dy;break;}case MODE_CENTER:{if(signX)w1=Math.max(W,Math.min(E,w0-dx*signX)),e1=Math.max(W,Math.min(E,e0+dx*signX));if(signY)n1=Math.max(N,Math.min(S,n0-dy*signY)),s1=Math.max(N,Math.min(S,s0+dy*signY));break;}}if(e1<w1){signX*=-1;t=w0,w0=e0,e0=t;t=w1,w1=e1,e1=t;if(type in flipX)overlay.attr("cursor",cursors[type=flipX[type]]);}if(s1<n1){signY*=-1;t=n0,n0=s0,s0=t;t=n1,n1=s1,s1=t;if(type in flipY)overlay.attr("cursor",cursors[type=flipY[type]]);}if(state.selection)selection$$1=state.selection;// May be set by brush.move!
if(lockX)w1=selection$$1[0][0],e1=selection$$1[1][0];if(lockY)n1=selection$$1[0][1],s1=selection$$1[1][1];if(selection$$1[0][0]!==w1||selection$$1[0][1]!==n1||selection$$1[1][0]!==e1||selection$$1[1][1]!==s1){state.selection=[[w1,n1],[e1,s1]];redraw.call(that);emit.brush();}}function ended(){nopropagation$1();if(exports.event.touches){if(exports.event.touches.length)return;if(touchending)clearTimeout(touchending);touchending=setTimeout(function(){touchending=null;},500);// Ghost clicks are delayed!
group.on("touchmove.brush touchend.brush touchcancel.brush",null);}else{yesdrag(exports.event.view,moving);view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);}group.attr("pointer-events","all");overlay.attr("cursor",cursors.overlay);if(state.selection)selection$$1=state.selection;// May be set by brush.move (on start)!
if(empty$1(selection$$1))state.selection=null,redraw.call(that);emit.end();}function keydowned(){switch(exports.event.keyCode){case 16:{// SHIFT
shifting=signX&&signY;break;}case 18:{// ALT
if(mode===MODE_HANDLE){if(signX)e0=e1-dx*signX,w0=w1+dx*signX;if(signY)s0=s1-dy*signY,n0=n1+dy*signY;mode=MODE_CENTER;move();}break;}case 32:{// SPACE; takes priority over ALT
if(mode===MODE_HANDLE||mode===MODE_CENTER){if(signX<0)e0=e1-dx;else if(signX>0)w0=w1-dx;if(signY<0)s0=s1-dy;else if(signY>0)n0=n1-dy;mode=MODE_SPACE;overlay.attr("cursor",cursors.selection);move();}break;}default:return;}noevent$1();}function keyupped(){switch(exports.event.keyCode){case 16:{// SHIFT
if(shifting){lockX=lockY=shifting=false;move();}break;}case 18:{// ALT
if(mode===MODE_CENTER){if(signX<0)e0=e1;else if(signX>0)w0=w1;if(signY<0)s0=s1;else if(signY>0)n0=n1;mode=MODE_HANDLE;move();}break;}case 32:{// SPACE
if(mode===MODE_SPACE){if(exports.event.altKey){if(signX)e0=e1-dx*signX,w0=w1+dx*signX;if(signY)s0=s1-dy*signY,n0=n1+dy*signY;mode=MODE_CENTER;}else{if(signX<0)e0=e1;else if(signX>0)w0=w1;if(signY<0)s0=s1;else if(signY>0)n0=n1;mode=MODE_HANDLE;}overlay.attr("cursor",cursors[type]);move();}break;}default:return;}noevent$1();}}function initialize(){var state=this.__brush||{selection:null};state.extent=extent.apply(this,arguments);state.dim=dim;return state;}brush.extent=function(_){return arguments.length?(extent=typeof _==="function"?_:constant$4([[+_[0][0],+_[0][1]],[+_[1][0],+_[1][1]]]),brush):extent;};brush.filter=function(_){return arguments.length?(filter=typeof _==="function"?_:constant$4(!!_),brush):filter;};brush.handleSize=function(_){return arguments.length?(handleSize=+_,brush):handleSize;};brush.on=function(){var value=listeners.on.apply(listeners,arguments);return value===listeners?brush:value;};return brush;}var cos=Math.cos;var sin=Math.sin;var pi$1=Math.PI;var halfPi$1=pi$1/2;var tau$1=pi$1*2;var max$1=Math.max;function compareValue(compare){return function(a,b){return compare(a.source.value+a.target.value,b.source.value+b.target.value);};}function chord(){var padAngle=0,sortGroups=null,sortSubgroups=null,sortChords=null;function chord(matrix){var n=matrix.length,groupSums=[],groupIndex=sequence(n),subgroupIndex=[],chords=[],groups=chords.groups=new Array(n),subgroups=new Array(n*n),k,x,x0,dx,i,j;// Compute the sum.
k=0,i=-1;while(++i<n){x=0,j=-1;while(++j<n){x+=matrix[i][j];}groupSums.push(x);subgroupIndex.push(sequence(n));k+=x;}// Sort groups…
if(sortGroups)groupIndex.sort(function(a,b){return sortGroups(groupSums[a],groupSums[b]);});// Sort subgroups…
if(sortSubgroups)subgroupIndex.forEach(function(d,i){d.sort(function(a,b){return sortSubgroups(matrix[i][a],matrix[i][b]);});});// Convert the sum to scaling factor for [0, 2pi].
// TODO Allow start and end angle to be specified?
// TODO Allow padding to be specified as percentage?
k=max$1(0,tau$1-padAngle*n)/k;dx=k?padAngle:tau$1/n;// Compute the start and end angle for each group and subgroup.
// Note: Opera has a bug reordering object literal properties!
x=0,i=-1;while(++i<n){x0=x,j=-1;while(++j<n){var di=groupIndex[i],dj=subgroupIndex[di][j],v=matrix[di][dj],a0=x,a1=x+=v*k;subgroups[dj*n+di]={index:di,subindex:dj,startAngle:a0,endAngle:a1,value:v};}groups[di]={index:di,startAngle:x0,endAngle:x,value:groupSums[di]};x+=dx;}// Generate chords for each (non-empty) subgroup-subgroup link.
i=-1;while(++i<n){j=i-1;while(++j<n){var source=subgroups[j*n+i],target=subgroups[i*n+j];if(source.value||target.value){chords.push(source.value<target.value?{source:target,target:source}:{source:source,target:target});}}}return sortChords?chords.sort(sortChords):chords;}chord.padAngle=function(_){return arguments.length?(padAngle=max$1(0,_),chord):padAngle;};chord.sortGroups=function(_){return arguments.length?(sortGroups=_,chord):sortGroups;};chord.sortSubgroups=function(_){return arguments.length?(sortSubgroups=_,chord):sortSubgroups;};chord.sortChords=function(_){return arguments.length?(_==null?sortChords=null:(sortChords=compareValue(_))._=_,chord):sortChords&&sortChords._;};return chord;}var slice$2=Array.prototype.slice;function constant$5(x){return function(){return x;};}var pi$2=Math.PI,tau$2=2*pi$2,epsilon$1=1e-6,tauEpsilon=tau$2-epsilon$1;function Path(){this._x0=this._y0=// start of current subpath
this._x1=this._y1=null;// end of current subpath
this._="";}function path(){return new Path();}Path.prototype=path.prototype={constructor:Path,moveTo:function moveTo(x,y){this._+="M"+(this._x0=this._x1=+x)+","+(this._y0=this._y1=+y);},closePath:function closePath(){if(this._x1!==null){this._x1=this._x0,this._y1=this._y0;this._+="Z";}},lineTo:function lineTo(x,y){this._+="L"+(this._x1=+x)+","+(this._y1=+y);},quadraticCurveTo:function quadraticCurveTo(x1,y1,x,y){this._+="Q"+ +x1+","+ +y1+","+(this._x1=+x)+","+(this._y1=+y);},bezierCurveTo:function bezierCurveTo(x1,y1,x2,y2,x,y){this._+="C"+ +x1+","+ +y1+","+ +x2+","+ +y2+","+(this._x1=+x)+","+(this._y1=+y);},arcTo:function arcTo(x1,y1,x2,y2,r){x1=+x1,y1=+y1,x2=+x2,y2=+y2,r=+r;var x0=this._x1,y0=this._y1,x21=x2-x1,y21=y2-y1,x01=x0-x1,y01=y0-y1,l01_2=x01*x01+y01*y01;// Is the radius negative? Error.
if(r<0)throw new Error("negative radius: "+r);// Is this path empty? Move to (x1,y1).
if(this._x1===null){this._+="M"+(this._x1=x1)+","+(this._y1=y1);}// Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
else if(!(l01_2>epsilon$1));// Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
// Equivalently, is (x1,y1) coincident with (x2,y2)?
// Or, is the radius zero? Line to (x1,y1).
else if(!(Math.abs(y01*x21-y21*x01)>epsilon$1)||!r){this._+="L"+(this._x1=x1)+","+(this._y1=y1);}// Otherwise, draw an arc!
else{var x20=x2-x0,y20=y2-y0,l21_2=x21*x21+y21*y21,l20_2=x20*x20+y20*y20,l21=Math.sqrt(l21_2),l01=Math.sqrt(l01_2),l=r*Math.tan((pi$2-Math.acos((l21_2+l01_2-l20_2)/(2*l21*l01)))/2),t01=l/l01,t21=l/l21;// If the start tangent is not coincident with (x0,y0), line to.
if(Math.abs(t01-1)>epsilon$1){this._+="L"+(x1+t01*x01)+","+(y1+t01*y01);}this._+="A"+r+","+r+",0,0,"+ +(y01*x20>x01*y20)+","+(this._x1=x1+t21*x21)+","+(this._y1=y1+t21*y21);}},arc:function arc(x,y,r,a0,a1,ccw){x=+x,y=+y,r=+r;var dx=r*Math.cos(a0),dy=r*Math.sin(a0),x0=x+dx,y0=y+dy,cw=1^ccw,da=ccw?a0-a1:a1-a0;// Is the radius negative? Error.
if(r<0)throw new Error("negative radius: "+r);// Is this path empty? Move to (x0,y0).
if(this._x1===null){this._+="M"+x0+","+y0;}// Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
else if(Math.abs(this._x1-x0)>epsilon$1||Math.abs(this._y1-y0)>epsilon$1){this._+="L"+x0+","+y0;}// Is this arc empty? We’re done.
if(!r)return;// Does the angle go the wrong way? Flip the direction.
if(da<0)da=da%tau$2+tau$2;// Is this a complete circle? Draw two arcs to complete the circle.
if(da>tauEpsilon){this._+="A"+r+","+r+",0,1,"+cw+","+(x-dx)+","+(y-dy)+"A"+r+","+r+",0,1,"+cw+","+(this._x1=x0)+","+(this._y1=y0);}// Is this arc non-empty? Draw an arc!
else if(da>epsilon$1){this._+="A"+r+","+r+",0,"+ +(da>=pi$2)+","+cw+","+(this._x1=x+r*Math.cos(a1))+","+(this._y1=y+r*Math.sin(a1));}},rect:function rect(x,y,w,h){this._+="M"+(this._x0=this._x1=+x)+","+(this._y0=this._y1=+y)+"h"+ +w+"v"+ +h+"h"+-w+"Z";},toString:function toString(){return this._;}};function defaultSource(d){return d.source;}function defaultTarget(d){return d.target;}function defaultRadius(d){return d.radius;}function defaultStartAngle(d){return d.startAngle;}function defaultEndAngle(d){return d.endAngle;}function ribbon(){var source=defaultSource,target=defaultTarget,radius=defaultRadius,startAngle=defaultStartAngle,endAngle=defaultEndAngle,context=null;function ribbon(){var buffer,argv=slice$2.call(arguments),s=source.apply(this,argv),t=target.apply(this,argv),sr=+radius.apply(this,(argv[0]=s,argv)),sa0=startAngle.apply(this,argv)-halfPi$1,sa1=endAngle.apply(this,argv)-halfPi$1,sx0=sr*cos(sa0),sy0=sr*sin(sa0),tr=+radius.apply(this,(argv[0]=t,argv)),ta0=startAngle.apply(this,argv)-halfPi$1,ta1=endAngle.apply(this,argv)-halfPi$1;if(!context)context=buffer=path();context.moveTo(sx0,sy0);context.arc(0,0,sr,sa0,sa1);if(sa0!==ta0||sa1!==ta1){// TODO sr !== tr?
context.quadraticCurveTo(0,0,tr*cos(ta0),tr*sin(ta0));context.arc(0,0,tr,ta0,ta1);}context.quadraticCurveTo(0,0,sx0,sy0);context.closePath();if(buffer)return context=null,buffer+""||null;}ribbon.radius=function(_){return arguments.length?(radius=typeof _==="function"?_:constant$5(+_),ribbon):radius;};ribbon.startAngle=function(_){return arguments.length?(startAngle=typeof _==="function"?_:constant$5(+_),ribbon):startAngle;};ribbon.endAngle=function(_){return arguments.length?(endAngle=typeof _==="function"?_:constant$5(+_),ribbon):endAngle;};ribbon.source=function(_){return arguments.length?(source=_,ribbon):source;};ribbon.target=function(_){return arguments.length?(target=_,ribbon):target;};ribbon.context=function(_){return arguments.length?(context=_==null?null:_,ribbon):context;};return ribbon;}var prefix="$";function Map(){}Map.prototype=map$1.prototype={constructor:Map,has:function has(key){return prefix+key in this;},get:function get(key){return this[prefix+key];},set:function set(key,value){this[prefix+key]=value;return this;},remove:function remove(key){var property=prefix+key;return property in this&&delete this[property];},clear:function clear(){for(var property in this){if(property[0]===prefix)delete this[property];}},keys:function keys(){var keys=[];for(var property in this){if(property[0]===prefix)keys.push(property.slice(1));}return keys;},values:function values(){var values=[];for(var property in this){if(property[0]===prefix)values.push(this[property]);}return values;},entries:function entries(){var entries=[];for(var property in this){if(property[0]===prefix)entries.push({key:property.slice(1),value:this[property]});}return entries;},size:function size(){var size=0;for(var property in this){if(property[0]===prefix)++size;}return size;},empty:function empty(){for(var property in this){if(property[0]===prefix)return false;}return true;},each:function each(f){for(var property in this){if(property[0]===prefix)f(this[property],property.slice(1),this);}}};function map$1(object,f){var map=new Map();// Copy constructor.
if(object instanceof Map)object.each(function(value,key){map.set(key,value);});// Index array by numeric index or specified key function.
else if(Array.isArray(object)){var i=-1,n=object.length,o;if(f==null)while(++i<n){map.set(i,object[i]);}else while(++i<n){map.set(f(o=object[i],i,object),o);}}// Convert object to map.
else if(object)for(var key in object){map.set(key,object[key]);}return map;}function nest(){var keys=[],_sortKeys=[],_sortValues,_rollup,nest;function apply(array,depth,createResult,setResult){if(depth>=keys.length){if(_sortValues!=null)array.sort(_sortValues);return _rollup!=null?_rollup(array):array;}var i=-1,n=array.length,key=keys[depth++],keyValue,value,valuesByKey=map$1(),values,result=createResult();while(++i<n){if(values=valuesByKey.get(keyValue=key(value=array[i])+"")){values.push(value);}else{valuesByKey.set(keyValue,[value]);}}valuesByKey.each(function(values,key){setResult(result,key,apply(values,depth,createResult,setResult));});return result;}function _entries(map,depth){if(++depth>keys.length)return map;var array,sortKey=_sortKeys[depth-1];if(_rollup!=null&&depth>=keys.length)array=map.entries();else array=[],map.each(function(v,k){array.push({key:k,values:_entries(v,depth)});});return sortKey!=null?array.sort(function(a,b){return sortKey(a.key,b.key);}):array;}return nest={object:function object(array){return apply(array,0,createObject,setObject);},map:function map(array){return apply(array,0,createMap,setMap);},entries:function entries(array){return _entries(apply(array,0,createMap,setMap),0);},key:function key(d){keys.push(d);return nest;},sortKeys:function sortKeys(order){_sortKeys[keys.length-1]=order;return nest;},sortValues:function sortValues(order){_sortValues=order;return nest;},rollup:function rollup(f){_rollup=f;return nest;}};}function createObject(){return{};}function setObject(object,key,value){object[key]=value;}function createMap(){return map$1();}function setMap(map,key,value){map.set(key,value);}function Set(){}var proto=map$1.prototype;Set.prototype=set$2.prototype={constructor:Set,has:proto.has,add:function add(value){value+="";this[prefix+value]=value;return this;},remove:proto.remove,clear:proto.clear,values:proto.keys,size:proto.size,empty:proto.empty,each:proto.each};function set$2(object,f){var set=new Set();// Copy constructor.
if(object instanceof Set)object.each(function(value){set.add(value);});// Otherwise, assume it’s an array.
else if(object){var i=-1,n=object.length;if(f==null)while(++i<n){set.add(object[i]);}else while(++i<n){set.add(f(object[i],i,object));}}return set;}function keys(map){var keys=[];for(var key in map){keys.push(key);}return keys;}function values(map){var values=[];for(var key in map){values.push(map[key]);}return values;}function entries(map){var entries=[];for(var key in map){entries.push({key:key,value:map[key]});}return entries;}var array$2=Array.prototype;var slice$3=array$2.slice;function ascending$2(a,b){return a-b;}function area(ring){var i=0,n=ring.length,area=ring[n-1][1]*ring[0][0]-ring[n-1][0]*ring[0][1];while(++i<n){area+=ring[i-1][1]*ring[i][0]-ring[i-1][0]*ring[i][1];}return area;}function constant$6(x){return function(){return x;};}function contains(ring,hole){var i=-1,n=hole.length,c;while(++i<n){if(c=ringContains(ring,hole[i]))return c;}return 0;}function ringContains(ring,point){var x=point[0],y=point[1],contains=-1;for(var i=0,n=ring.length,j=n-1;i<n;j=i++){var pi=ring[i],xi=pi[0],yi=pi[1],pj=ring[j],xj=pj[0],yj=pj[1];if(segmentContains(pi,pj,point))return 0;if(yi>y!==yj>y&&x<(xj-xi)*(y-yi)/(yj-yi)+xi)contains=-contains;}return contains;}function segmentContains(a,b,c){var i;return collinear(a,b,c)&&within(a[i=+(a[0]===b[0])],c[i],b[i]);}function collinear(a,b,c){return(b[0]-a[0])*(c[1]-a[1])===(c[0]-a[0])*(b[1]-a[1]);}function within(p,q,r){return p<=q&&q<=r||r<=q&&q<=p;}function noop$1(){}var cases=[[],[[[1.0,1.5],[0.5,1.0]]],[[[1.5,1.0],[1.0,1.5]]],[[[1.5,1.0],[0.5,1.0]]],[[[1.0,0.5],[1.5,1.0]]],[[[1.0,1.5],[0.5,1.0]],[[1.0,0.5],[1.5,1.0]]],[[[1.0,0.5],[1.0,1.5]]],[[[1.0,0.5],[0.5,1.0]]],[[[0.5,1.0],[1.0,0.5]]],[[[1.0,1.5],[1.0,0.5]]],[[[0.5,1.0],[1.0,0.5]],[[1.5,1.0],[1.0,1.5]]],[[[1.5,1.0],[1.0,0.5]]],[[[0.5,1.0],[1.5,1.0]]],[[[1.0,1.5],[1.5,1.0]]],[[[0.5,1.0],[1.0,1.5]]],[]];function contours(){var dx=1,dy=1,threshold$$1=thresholdSturges,smooth=smoothLinear;function contours(values){var tz=threshold$$1(values);// Convert number of thresholds into uniform thresholds.
if(!Array.isArray(tz)){var domain=extent(values),start=domain[0],stop=domain[1];tz=tickStep(start,stop,tz);tz=sequence(Math.floor(start/tz)*tz,Math.floor(stop/tz)*tz,tz);}else{tz=tz.slice().sort(ascending$2);}return tz.map(function(value){return contour(values,value);});}// Accumulate, smooth contour rings, assign holes to exterior rings.
// Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js
function contour(values,value){var polygons=[],holes=[];isorings(values,value,function(ring){smooth(ring,values,value);if(area(ring)>0)polygons.push([ring]);else holes.push(ring);});holes.forEach(function(hole){for(var i=0,n=polygons.length,polygon;i<n;++i){if(contains((polygon=polygons[i])[0],hole)!==-1){polygon.push(hole);return;}}});return{type:"MultiPolygon",value:value,coordinates:polygons};}// Marching squares with isolines stitched into rings.
// Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js
function isorings(values,value,callback){var fragmentByStart=new Array(),fragmentByEnd=new Array(),x,y,t0,t1,t2,t3;// Special case for the first row (y = -1, t2 = t3 = 0).
x=y=-1;t1=values[0]>=value;cases[t1<<1].forEach(stitch);while(++x<dx-1){t0=t1,t1=values[x+1]>=value;cases[t0|t1<<1].forEach(stitch);}cases[t1<<0].forEach(stitch);// General case for the intermediate rows.
while(++y<dy-1){x=-1;t1=values[y*dx+dx]>=value;t2=values[y*dx]>=value;cases[t1<<1|t2<<2].forEach(stitch);while(++x<dx-1){t0=t1,t1=values[y*dx+dx+x+1]>=value;t3=t2,t2=values[y*dx+x+1]>=value;cases[t0|t1<<1|t2<<2|t3<<3].forEach(stitch);}cases[t1|t2<<3].forEach(stitch);}// Special case for the last row (y = dy - 1, t0 = t1 = 0).
x=-1;t2=values[y*dx]>=value;cases[t2<<2].forEach(stitch);while(++x<dx-1){t3=t2,t2=values[y*dx+x+1]>=value;cases[t2<<2|t3<<3].forEach(stitch);}cases[t2<<3].forEach(stitch);function stitch(line){var start=[line[0][0]+x,line[0][1]+y],end=[line[1][0]+x,line[1][1]+y],startIndex=index(start),endIndex=index(end),f,g;if(f=fragmentByEnd[startIndex]){if(g=fragmentByStart[endIndex]){delete fragmentByEnd[f.end];delete fragmentByStart[g.start];if(f===g){f.ring.push(end);callback(f.ring);}else{fragmentByStart[f.start]=fragmentByEnd[g.end]={start:f.start,end:g.end,ring:f.ring.concat(g.ring)};}}else{delete fragmentByEnd[f.end];f.ring.push(end);fragmentByEnd[f.end=endIndex]=f;}}else if(f=fragmentByStart[endIndex]){if(g=fragmentByEnd[startIndex]){delete fragmentByStart[f.start];delete fragmentByEnd[g.end];if(f===g){f.ring.push(end);callback(f.ring);}else{fragmentByStart[g.start]=fragmentByEnd[f.end]={start:g.start,end:f.end,ring:g.ring.concat(f.ring)};}}else{delete fragmentByStart[f.start];f.ring.unshift(start);fragmentByStart[f.start=startIndex]=f;}}else{fragmentByStart[startIndex]=fragmentByEnd[endIndex]={start:startIndex,end:endIndex,ring:[start,end]};}}}function index(point){return point[0]*2+point[1]*(dx+1)*4;}function smoothLinear(ring,values,value){ring.forEach(function(point){var x=point[0],y=point[1],xt=x|0,yt=y|0,v0,v1=values[yt*dx+xt];if(x>0&&x<dx&&xt===x){v0=values[yt*dx+xt-1];point[0]=x+(value-v0)/(v1-v0)-0.5;}if(y>0&&y<dy&&yt===y){v0=values[(yt-1)*dx+xt];point[1]=y+(value-v0)/(v1-v0)-0.5;}});}contours.contour=contour;contours.size=function(_){if(!arguments.length)return[dx,dy];var _0=Math.ceil(_[0]),_1=Math.ceil(_[1]);if(!(_0>0)||!(_1>0))throw new Error("invalid size");return dx=_0,dy=_1,contours;};contours.thresholds=function(_){return arguments.length?(threshold$$1=typeof _==="function"?_:Array.isArray(_)?constant$6(slice$3.call(_)):constant$6(_),contours):threshold$$1;};contours.smooth=function(_){return arguments.length?(smooth=_?smoothLinear:noop$1,contours):smooth===smoothLinear;};return contours;}// TODO Optimize edge cases.
// TODO Optimize index calculation.
// TODO Optimize arguments.
function blurX(source,target,r){var n=source.width,m=source.height,w=(r<<1)+1;for(var j=0;j<m;++j){for(var i=0,sr=0;i<n+r;++i){if(i<n){sr+=source.data[i+j*n];}if(i>=r){if(i>=w){sr-=source.data[i-w+j*n];}target.data[i-r+j*n]=sr/Math.min(i+1,n-1+w-i,w);}}}}// TODO Optimize edge cases.
// TODO Optimize index calculation.
// TODO Optimize arguments.
function blurY(source,target,r){var n=source.width,m=source.height,w=(r<<1)+1;for(var i=0;i<n;++i){for(var j=0,sr=0;j<m+r;++j){if(j<m){sr+=source.data[i+j*n];}if(j>=r){if(j>=w){sr-=source.data[i+(j-w)*n];}target.data[i+(j-r)*n]=sr/Math.min(j+1,m-1+w-j,w);}}}}function defaultX(d){return d[0];}function defaultY(d){return d[1];}function defaultWeight(){return 1;}function density(){var x=defaultX,y=defaultY,weight=defaultWeight,dx=960,dy=500,r=20,// blur radius
k=2,// log2(grid cell size)
o=r*3,// grid offset, to pad for blur
n=dx+o*2>>k,// grid width
m=dy+o*2>>k,// grid height
threshold$$1=constant$6(20);function density(data){var values0=new Float32Array(n*m),values1=new Float32Array(n*m);data.forEach(function(d,i,data){var xi=+x(d,i,data)+o>>k,yi=+y(d,i,data)+o>>k,wi=+weight(d,i,data);if(xi>=0&&xi<n&&yi>=0&&yi<m){values0[xi+yi*n]+=wi;}});// TODO Optimize.
blurX({width:n,height:m,data:values0},{width:n,height:m,data:values1},r>>k);blurY({width:n,height:m,data:values1},{width:n,height:m,data:values0},r>>k);blurX({width:n,height:m,data:values0},{width:n,height:m,data:values1},r>>k);blurY({width:n,height:m,data:values1},{width:n,height:m,data:values0},r>>k);blurX({width:n,height:m,data:values0},{width:n,height:m,data:values1},r>>k);blurY({width:n,height:m,data:values1},{width:n,height:m,data:values0},r>>k);var tz=threshold$$1(values0);// Convert number of thresholds into uniform thresholds.
if(!Array.isArray(tz)){var stop=max(values0);tz=tickStep(0,stop,tz);tz=sequence(0,Math.floor(stop/tz)*tz,tz);tz.shift();}return contours().thresholds(tz).size([n,m])(values0).map(transform);}function transform(geometry){geometry.value*=Math.pow(2,-2*k);// Density in points per square pixel.
geometry.coordinates.forEach(transformPolygon);return geometry;}function transformPolygon(coordinates){coordinates.forEach(transformRing);}function transformRing(coordinates){coordinates.forEach(transformPoint);}// TODO Optimize.
function transformPoint(coordinates){coordinates[0]=coordinates[0]*Math.pow(2,k)-o;coordinates[1]=coordinates[1]*Math.pow(2,k)-o;}function resize(){o=r*3;n=dx+o*2>>k;m=dy+o*2>>k;return density;}density.x=function(_){return arguments.length?(x=typeof _==="function"?_:constant$6(+_),density):x;};density.y=function(_){return arguments.length?(y=typeof _==="function"?_:constant$6(+_),density):y;};density.weight=function(_){return arguments.length?(weight=typeof _==="function"?_:constant$6(+_),density):weight;};density.size=function(_){if(!arguments.length)return[dx,dy];var _0=Math.ceil(_[0]),_1=Math.ceil(_[1]);if(!(_0>=0)&&!(_0>=0))throw new Error("invalid size");return dx=_0,dy=_1,resize();};density.cellSize=function(_){if(!arguments.length)return 1<<k;if(!((_=+_)>=1))throw new Error("invalid cell size");return k=Math.floor(Math.log(_)/Math.LN2),resize();};density.thresholds=function(_){return arguments.length?(threshold$$1=typeof _==="function"?_:Array.isArray(_)?constant$6(slice$3.call(_)):constant$6(_),density):threshold$$1;};density.bandwidth=function(_){if(!arguments.length)return Math.sqrt(r*(r+1));if(!((_=+_)>=0))throw new Error("invalid bandwidth");return r=Math.round((Math.sqrt(4*_*_+1)-1)/2),resize();};return density;}var EOL={},EOF={},QUOTE=34,NEWLINE=10,RETURN=13;function objectConverter(columns){return new Function("d","return {"+columns.map(function(name,i){return JSON.stringify(name)+": d["+i+"]";}).join(",")+"}");}function customConverter(columns,f){var object=objectConverter(columns);return function(row,i){return f(object(row),i,columns);};}// Compute unique columns in order of discovery.
function inferColumns(rows){var columnSet=Object.create(null),columns=[];rows.forEach(function(row){for(var column in row){if(!(column in columnSet)){columns.push(columnSet[column]=column);}}});return columns;}function pad(value,width){var s=value+"",length=s.length;return length<width?new Array(width-length+1).join(0)+s:s;}function formatYear(year){return year<0?"-"+pad(-year,6):year>9999?"+"+pad(year,6):pad(year,4);}function formatDate(date){var hours=date.getUTCHours(),minutes=date.getUTCMinutes(),seconds=date.getUTCSeconds(),milliseconds=date.getUTCMilliseconds();return isNaN(date)?"Invalid Date":formatYear(date.getUTCFullYear(),4)+"-"+pad(date.getUTCMonth()+1,2)+"-"+pad(date.getUTCDate(),2)+(milliseconds?"T"+pad(hours,2)+":"+pad(minutes,2)+":"+pad(seconds,2)+"."+pad(milliseconds,3)+"Z":seconds?"T"+pad(hours,2)+":"+pad(minutes,2)+":"+pad(seconds,2)+"Z":minutes||hours?"T"+pad(hours,2)+":"+pad(minutes,2)+"Z":"");}function dsvFormat(delimiter){var reFormat=new RegExp("[\""+delimiter+"\n\r]"),DELIMITER=delimiter.charCodeAt(0);function parse(text,f){var convert,columns,rows=parseRows(text,function(row,i){if(convert)return convert(row,i-1);columns=row,convert=f?customConverter(row,f):objectConverter(row);});rows.columns=columns||[];return rows;}function parseRows(text,f){var rows=[],// output rows
N=text.length,I=0,// current character index
n=0,// current line number
t,// current token
eof=N<=0,// current token followed by EOF?
eol=false;// current token followed by EOL?
// Strip the trailing newline.
if(text.charCodeAt(N-1)===NEWLINE)--N;if(text.charCodeAt(N-1)===RETURN)--N;function token(){if(eof)return EOF;if(eol)return eol=false,EOL;// Unescape quotes.
var i,j=I,c;if(text.charCodeAt(j)===QUOTE){while(I++<N&&text.charCodeAt(I)!==QUOTE||text.charCodeAt(++I)===QUOTE){;}if((i=I)>=N)eof=true;else if((c=text.charCodeAt(I++))===NEWLINE)eol=true;else if(c===RETURN){eol=true;if(text.charCodeAt(I)===NEWLINE)++I;}return text.slice(j+1,i-1).replace(/""/g,"\"");}// Find next delimiter or newline.
while(I<N){if((c=text.charCodeAt(i=I++))===NEWLINE)eol=true;else if(c===RETURN){eol=true;if(text.charCodeAt(I)===NEWLINE)++I;}else if(c!==DELIMITER)continue;return text.slice(j,i);}// Return last token before EOF.
return eof=true,text.slice(j,N);}while((t=token())!==EOF){var row=[];while(t!==EOL&&t!==EOF){row.push(t),t=token();}if(f&&(row=f(row,n++))==null)continue;rows.push(row);}return rows;}function preformatBody(rows,columns){return rows.map(function(row){return columns.map(function(column){return formatValue(row[column]);}).join(delimiter);});}function format(rows,columns){if(columns==null)columns=inferColumns(rows);return[columns.map(formatValue).join(delimiter)].concat(preformatBody(rows,columns)).join("\n");}function formatBody(rows,columns){if(columns==null)columns=inferColumns(rows);return preformatBody(rows,columns).join("\n");}function formatRows(rows){return rows.map(formatRow).join("\n");}function formatRow(row){return row.map(formatValue).join(delimiter);}function formatValue(value){return value==null?"":value instanceof Date?formatDate(value):reFormat.test(value+="")?"\""+value.replace(/"/g,"\"\"")+"\"":value;}return{parse:parse,parseRows:parseRows,format:format,formatBody:formatBody,formatRows:formatRows};}var csv=dsvFormat(",");var csvParse=csv.parse;var csvParseRows=csv.parseRows;var csvFormat=csv.format;var csvFormatBody=csv.formatBody;var csvFormatRows=csv.formatRows;var tsv=dsvFormat("\t");var tsvParse=tsv.parse;var tsvParseRows=tsv.parseRows;var tsvFormat=tsv.format;var tsvFormatBody=tsv.formatBody;var tsvFormatRows=tsv.formatRows;function autoType(object){for(var key in object){var value=object[key].trim(),number;if(!value)value=null;else if(value==="true")value=true;else if(value==="false")value=false;else if(value==="NaN")value=NaN;else if(!isNaN(number=+value))value=number;else if(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/.test(value))value=new Date(value);else continue;object[key]=value;}return object;}function responseBlob(response){if(!response.ok)throw new Error(response.status+" "+response.statusText);return response.blob();}function blob(input,init){return fetch(input,init).then(responseBlob);}function responseArrayBuffer(response){if(!response.ok)throw new Error(response.status+" "+response.statusText);return response.arrayBuffer();}function buffer(input,init){return fetch(input,init).then(responseArrayBuffer);}function responseText(response){if(!response.ok)throw new Error(response.status+" "+response.statusText);return response.text();}function text(input,init){return fetch(input,init).then(responseText);}function dsvParse(parse){return function(input,init,row){if(arguments.length===2&&typeof init==="function")row=init,init=undefined;return text(input,init).then(function(response){return parse(response,row);});};}function dsv(delimiter,input,init,row){if(arguments.length===3&&typeof init==="function")row=init,init=undefined;var format=dsvFormat(delimiter);return text(input,init).then(function(response){return format.parse(response,row);});}var csv$1=dsvParse(csvParse);var tsv$1=dsvParse(tsvParse);function image(input,init){return new Promise(function(resolve,reject){var image=new Image();for(var key in init){image[key]=init[key];}image.onerror=reject;image.onload=function(){resolve(image);};image.src=input;});}function responseJson(response){if(!response.ok)throw new Error(response.status+" "+response.statusText);return response.json();}function json(input,init){return fetch(input,init).then(responseJson);}function parser(type){return function(input,init){return text(input,init).then(function(text$$1){return new DOMParser().parseFromString(text$$1,type);});};}var xml=parser("application/xml");var html=parser("text/html");var svg=parser("image/svg+xml");function center$1(x,y){var nodes;if(x==null)x=0;if(y==null)y=0;function force(){var i,n=nodes.length,node,sx=0,sy=0;for(i=0;i<n;++i){node=nodes[i],sx+=node.x,sy+=node.y;}for(sx=sx/n-x,sy=sy/n-y,i=0;i<n;++i){node=nodes[i],node.x-=sx,node.y-=sy;}}force.initialize=function(_){nodes=_;};force.x=function(_){return arguments.length?(x=+_,force):x;};force.y=function(_){return arguments.length?(y=+_,force):y;};return force;}function constant$7(x){return function(){return x;};}function jiggle(){return(Math.random()-0.5)*1e-6;}function tree_add(d){var x=+this._x.call(null,d),y=+this._y.call(null,d);return add(this.cover(x,y),x,y,d);}function add(tree,x,y,d){if(isNaN(x)||isNaN(y))return tree;// ignore invalid points
var parent,node=tree._root,leaf={data:d},x0=tree._x0,y0=tree._y0,x1=tree._x1,y1=tree._y1,xm,ym,xp,yp,right,bottom,i,j;// If the tree is empty, initialize the root as a leaf.
if(!node)return tree._root=leaf,tree;// Find the existing leaf for the new point, or add it.
while(node.length){if(right=x>=(xm=(x0+x1)/2))x0=xm;else x1=xm;if(bottom=y>=(ym=(y0+y1)/2))y0=ym;else y1=ym;if(parent=node,!(node=node[i=bottom<<1|right]))return parent[i]=leaf,tree;}// Is the new point is exactly coincident with the existing point?
xp=+tree._x.call(null,node.data);yp=+tree._y.call(null,node.data);if(x===xp&&y===yp)return leaf.next=node,parent?parent[i]=leaf:tree._root=leaf,tree;// Otherwise, split the leaf node until the old and new point are separated.
do{parent=parent?parent[i]=new Array(4):tree._root=new Array(4);if(right=x>=(xm=(x0+x1)/2))x0=xm;else x1=xm;if(bottom=y>=(ym=(y0+y1)/2))y0=ym;else y1=ym;}while((i=bottom<<1|right)===(j=(yp>=ym)<<1|xp>=xm));return parent[j]=node,parent[i]=leaf,tree;}function addAll(data){var d,i,n=data.length,x,y,xz=new Array(n),yz=new Array(n),x0=Infinity,y0=Infinity,x1=-Infinity,y1=-Infinity;// Compute the points and their extent.
for(i=0;i<n;++i){if(isNaN(x=+this._x.call(null,d=data[i]))||isNaN(y=+this._y.call(null,d)))continue;xz[i]=x;yz[i]=y;if(x<x0)x0=x;if(x>x1)x1=x;if(y<y0)y0=y;if(y>y1)y1=y;}// If there were no (valid) points, abort.
if(x0>x1||y0>y1)return this;// Expand the tree to cover the new points.
this.cover(x0,y0).cover(x1,y1);// Add the new points.
for(i=0;i<n;++i){add(this,xz[i],yz[i],data[i]);}return this;}function tree_cover(x,y){if(isNaN(x=+x)||isNaN(y=+y))return this;// ignore invalid points
var x0=this._x0,y0=this._y0,x1=this._x1,y1=this._y1;// If the quadtree has no extent, initialize them.
// Integer extent are necessary so that if we later double the extent,
// the existing quadrant boundaries don’t change due to floating point error!
if(isNaN(x0)){x1=(x0=Math.floor(x))+1;y1=(y0=Math.floor(y))+1;}// Otherwise, double repeatedly to cover.
else{var z=x1-x0,node=this._root,parent,i;while(x0>x||x>=x1||y0>y||y>=y1){i=(y<y0)<<1|x<x0;parent=new Array(4),parent[i]=node,node=parent,z*=2;switch(i){case 0:x1=x0+z,y1=y0+z;break;case 1:x0=x1-z,y1=y0+z;break;case 2:x1=x0+z,y0=y1-z;break;case 3:x0=x1-z,y0=y1-z;break;}}if(this._root&&this._root.length)this._root=node;}this._x0=x0;this._y0=y0;this._x1=x1;this._y1=y1;return this;}function tree_data(){var data=[];this.visit(function(node){if(!node.length)do{data.push(node.data);}while(node=node.next);});return data;}function tree_extent(_){return arguments.length?this.cover(+_[0][0],+_[0][1]).cover(+_[1][0],+_[1][1]):isNaN(this._x0)?undefined:[[this._x0,this._y0],[this._x1,this._y1]];}function Quad(node,x0,y0,x1,y1){this.node=node;this.x0=x0;this.y0=y0;this.x1=x1;this.y1=y1;}function tree_find(x,y,radius){var data,x0=this._x0,y0=this._y0,x1,y1,x2,y2,x3=this._x1,y3=this._y1,quads=[],node=this._root,q,i;if(node)quads.push(new Quad(node,x0,y0,x3,y3));if(radius==null)radius=Infinity;else{x0=x-radius,y0=y-radius;x3=x+radius,y3=y+radius;radius*=radius;}while(q=quads.pop()){// Stop searching if this quadrant can’t contain a closer node.
if(!(node=q.node)||(x1=q.x0)>x3||(y1=q.y0)>y3||(x2=q.x1)<x0||(y2=q.y1)<y0)continue;// Bisect the current quadrant.
if(node.length){var xm=(x1+x2)/2,ym=(y1+y2)/2;quads.push(new Quad(node[3],xm,ym,x2,y2),new Quad(node[2],x1,ym,xm,y2),new Quad(node[1],xm,y1,x2,ym),new Quad(node[0],x1,y1,xm,ym));// Visit the closest quadrant first.
if(i=(y>=ym)<<1|x>=xm){q=quads[quads.length-1];quads[quads.length-1]=quads[quads.length-1-i];quads[quads.length-1-i]=q;}}// Visit this point. (Visiting coincident points isn’t necessary!)
else{var dx=x-+this._x.call(null,node.data),dy=y-+this._y.call(null,node.data),d2=dx*dx+dy*dy;if(d2<radius){var d=Math.sqrt(radius=d2);x0=x-d,y0=y-d;x3=x+d,y3=y+d;data=node.data;}}}return data;}function tree_remove(d){if(isNaN(x=+this._x.call(null,d))||isNaN(y=+this._y.call(null,d)))return this;// ignore invalid points
var parent,node=this._root,retainer,previous,next,x0=this._x0,y0=this._y0,x1=this._x1,y1=this._y1,x,y,xm,ym,right,bottom,i,j;// If the tree is empty, initialize the root as a leaf.
if(!node)return this;// Find the leaf node for the point.
// While descending, also retain the deepest parent with a non-removed sibling.
if(node.length)while(true){if(right=x>=(xm=(x0+x1)/2))x0=xm;else x1=xm;if(bottom=y>=(ym=(y0+y1)/2))y0=ym;else y1=ym;if(!(parent=node,node=node[i=bottom<<1|right]))return this;if(!node.length)break;if(parent[i+1&3]||parent[i+2&3]||parent[i+3&3])retainer=parent,j=i;}// Find the point to remove.
while(node.data!==d){if(!(previous=node,node=node.next))return this;}if(next=node.next)delete node.next;// If there are multiple coincident points, remove just the point.
if(previous)return next?previous.next=next:delete previous.next,this;// If this is the root point, remove it.
if(!parent)return this._root=next,this;// Remove this leaf.
next?parent[i]=next:delete parent[i];// If the parent now contains exactly one leaf, collapse superfluous parents.
if((node=parent[0]||parent[1]||parent[2]||parent[3])&&node===(parent[3]||parent[2]||parent[1]||parent[0])&&!node.length){if(retainer)retainer[j]=node;else this._root=node;}return this;}function removeAll(data){for(var i=0,n=data.length;i<n;++i){this.remove(data[i]);}return this;}function tree_root(){return this._root;}function tree_size(){var size=0;this.visit(function(node){if(!node.length)do{++size;}while(node=node.next);});return size;}function tree_visit(callback){var quads=[],q,node=this._root,child,x0,y0,x1,y1;if(node)quads.push(new Quad(node,this._x0,this._y0,this._x1,this._y1));while(q=quads.pop()){if(!callback(node=q.node,x0=q.x0,y0=q.y0,x1=q.x1,y1=q.y1)&&node.length){var xm=(x0+x1)/2,ym=(y0+y1)/2;if(child=node[3])quads.push(new Quad(child,xm,ym,x1,y1));if(child=node[2])quads.push(new Quad(child,x0,ym,xm,y1));if(child=node[1])quads.push(new Quad(child,xm,y0,x1,ym));if(child=node[0])quads.push(new Quad(child,x0,y0,xm,ym));}}return this;}function tree_visitAfter(callback){var quads=[],next=[],q;if(this._root)quads.push(new Quad(this._root,this._x0,this._y0,this._x1,this._y1));while(q=quads.pop()){var node=q.node;if(node.length){var child,x0=q.x0,y0=q.y0,x1=q.x1,y1=q.y1,xm=(x0+x1)/2,ym=(y0+y1)/2;if(child=node[0])quads.push(new Quad(child,x0,y0,xm,ym));if(child=node[1])quads.push(new Quad(child,xm,y0,x1,ym));if(child=node[2])quads.push(new Quad(child,x0,ym,xm,y1));if(child=node[3])quads.push(new Quad(child,xm,ym,x1,y1));}next.push(q);}while(q=next.pop()){callback(q.node,q.x0,q.y0,q.x1,q.y1);}return this;}function defaultX$1(d){return d[0];}function tree_x(_){return arguments.length?(this._x=_,this):this._x;}function defaultY$1(d){return d[1];}function tree_y(_){return arguments.length?(this._y=_,this):this._y;}function quadtree(nodes,x,y){var tree=new Quadtree(x==null?defaultX$1:x,y==null?defaultY$1:y,NaN,NaN,NaN,NaN);return nodes==null?tree:tree.addAll(nodes);}function Quadtree(x,y,x0,y0,x1,y1){this._x=x;this._y=y;this._x0=x0;this._y0=y0;this._x1=x1;this._y1=y1;this._root=undefined;}function leaf_copy(leaf){var copy={data:leaf.data},next=copy;while(leaf=leaf.next){next=next.next={data:leaf.data};}return copy;}var treeProto=quadtree.prototype=Quadtree.prototype;treeProto.copy=function(){var copy=new Quadtree(this._x,this._y,this._x0,this._y0,this._x1,this._y1),node=this._root,nodes,child;if(!node)return copy;if(!node.length)return copy._root=leaf_copy(node),copy;nodes=[{source:node,target:copy._root=new Array(4)}];while(node=nodes.pop()){for(var i=0;i<4;++i){if(child=node.source[i]){if(child.length)nodes.push({source:child,target:node.target[i]=new Array(4)});else node.target[i]=leaf_copy(child);}}}return copy;};treeProto.add=tree_add;treeProto.addAll=addAll;treeProto.cover=tree_cover;treeProto.data=tree_data;treeProto.extent=tree_extent;treeProto.find=tree_find;treeProto.remove=tree_remove;treeProto.removeAll=removeAll;treeProto.root=tree_root;treeProto.size=tree_size;treeProto.visit=tree_visit;treeProto.visitAfter=tree_visitAfter;treeProto.x=tree_x;treeProto.y=tree_y;function x(d){return d.x+d.vx;}function y(d){return d.y+d.vy;}function collide(radius){var nodes,radii,strength=1,iterations=1;if(typeof radius!=="function")radius=constant$7(radius==null?1:+radius);function force(){var i,n=nodes.length,tree,node,xi,yi,ri,ri2;for(var k=0;k<iterations;++k){tree=quadtree(nodes,x,y).visitAfter(prepare);for(i=0;i<n;++i){node=nodes[i];ri=radii[node.index],ri2=ri*ri;xi=node.x+node.vx;yi=node.y+node.vy;tree.visit(apply);}}function apply(quad,x0,y0,x1,y1){var data=quad.data,rj=quad.r,r=ri+rj;if(data){if(data.index>node.index){var x=xi-data.x-data.vx,y=yi-data.y-data.vy,l=x*x+y*y;if(l<r*r){if(x===0)x=jiggle(),l+=x*x;if(y===0)y=jiggle(),l+=y*y;l=(r-(l=Math.sqrt(l)))/l*strength;node.vx+=(x*=l)*(r=(rj*=rj)/(ri2+rj));node.vy+=(y*=l)*r;data.vx-=x*(r=1-r);data.vy-=y*r;}}return;}return x0>xi+r||x1<xi-r||y0>yi+r||y1<yi-r;}}function prepare(quad){if(quad.data)return quad.r=radii[quad.data.index];for(var i=quad.r=0;i<4;++i){if(quad[i]&&quad[i].r>quad.r){quad.r=quad[i].r;}}}function initialize(){if(!nodes)return;var i,n=nodes.length,node;radii=new Array(n);for(i=0;i<n;++i){node=nodes[i],radii[node.index]=+radius(node,i,nodes);}}force.initialize=function(_){nodes=_;initialize();};force.iterations=function(_){return arguments.length?(iterations=+_,force):iterations;};force.strength=function(_){return arguments.length?(strength=+_,force):strength;};force.radius=function(_){return arguments.length?(radius=typeof _==="function"?_:constant$7(+_),initialize(),force):radius;};return force;}function index(d){return d.index;}function find(nodeById,nodeId){var node=nodeById.get(nodeId);if(!node)throw new Error("missing: "+nodeId);return node;}function link(links){var id=index,strength=defaultStrength,strengths,distance=constant$7(30),distances,nodes,count,bias,iterations=1;if(links==null)links=[];function defaultStrength(link){return 1/Math.min(count[link.source.index],count[link.target.index]);}function force(alpha){for(var k=0,n=links.length;k<iterations;++k){for(var i=0,link,source,target,x,y,l,b;i<n;++i){link=links[i],source=link.source,target=link.target;x=target.x+target.vx-source.x-source.vx||jiggle();y=target.y+target.vy-source.y-source.vy||jiggle();l=Math.sqrt(x*x+y*y);l=(l-distances[i])/l*alpha*strengths[i];x*=l,y*=l;target.vx-=x*(b=bias[i]);target.vy-=y*b;source.vx+=x*(b=1-b);source.vy+=y*b;}}}function initialize(){if(!nodes)return;var i,n=nodes.length,m=links.length,nodeById=map$1(nodes,id),link;for(i=0,count=new Array(n);i<m;++i){link=links[i],link.index=i;if(_typeof(link.source)!=="object")link.source=find(nodeById,link.source);if(_typeof(link.target)!=="object")link.target=find(nodeById,link.target);count[link.source.index]=(count[link.source.index]||0)+1;count[link.target.index]=(count[link.target.index]||0)+1;}for(i=0,bias=new Array(m);i<m;++i){link=links[i],bias[i]=count[link.source.index]/(count[link.source.index]+count[link.target.index]);}strengths=new Array(m),initializeStrength();distances=new Array(m),initializeDistance();}function initializeStrength(){if(!nodes)return;for(var i=0,n=links.length;i<n;++i){strengths[i]=+strength(links[i],i,links);}}function initializeDistance(){if(!nodes)return;for(var i=0,n=links.length;i<n;++i){distances[i]=+distance(links[i],i,links);}}force.initialize=function(_){nodes=_;initialize();};force.links=function(_){return arguments.length?(links=_,initialize(),force):links;};force.id=function(_){return arguments.length?(id=_,force):id;};force.iterations=function(_){return arguments.length?(iterations=+_,force):iterations;};force.strength=function(_){return arguments.length?(strength=typeof _==="function"?_:constant$7(+_),initializeStrength(),force):strength;};force.distance=function(_){return arguments.length?(distance=typeof _==="function"?_:constant$7(+_),initializeDistance(),force):distance;};return force;}function x$1(d){return d.x;}function y$1(d){return d.y;}var initialRadius=10,initialAngle=Math.PI*(3-Math.sqrt(5));function simulation(_nodes){var simulation,_alpha=1,_alphaMin=0.001,_alphaDecay=1-Math.pow(_alphaMin,1/300),_alphaTarget=0,_velocityDecay=0.6,forces=map$1(),stepper=timer(step),event=dispatch("tick","end");if(_nodes==null)_nodes=[];function step(){tick();event.call("tick",simulation);if(_alpha<_alphaMin){stepper.stop();event.call("end",simulation);}}function tick(iterations){var i,n=_nodes.length,node;if(iterations===undefined)iterations=1;for(var k=0;k<iterations;++k){_alpha+=(_alphaTarget-_alpha)*_alphaDecay;forces.each(function(force){force(_alpha);});for(i=0;i<n;++i){node=_nodes[i];if(node.fx==null)node.x+=node.vx*=_velocityDecay;else node.x=node.fx,node.vx=0;if(node.fy==null)node.y+=node.vy*=_velocityDecay;else node.y=node.fy,node.vy=0;}}return simulation;}function initializeNodes(){for(var i=0,n=_nodes.length,node;i<n;++i){node=_nodes[i],node.index=i;if(node.fx!=null)node.x=node.fx;if(node.fy!=null)node.y=node.fy;if(isNaN(node.x)||isNaN(node.y)){var radius=initialRadius*Math.sqrt(i),angle=i*initialAngle;node.x=radius*Math.cos(angle);node.y=radius*Math.sin(angle);}if(isNaN(node.vx)||isNaN(node.vy)){node.vx=node.vy=0;}}}function initializeForce(force){if(force.initialize)force.initialize(_nodes);return force;}initializeNodes();return simulation={tick:tick,restart:function restart(){return stepper.restart(step),simulation;},stop:function stop(){return stepper.stop(),simulation;},nodes:function nodes(_){return arguments.length?(_nodes=_,initializeNodes(),forces.each(initializeForce),simulation):_nodes;},alpha:function alpha(_){return arguments.length?(_alpha=+_,simulation):_alpha;},alphaMin:function alphaMin(_){return arguments.length?(_alphaMin=+_,simulation):_alphaMin;},alphaDecay:function alphaDecay(_){return arguments.length?(_alphaDecay=+_,simulation):+_alphaDecay;},alphaTarget:function alphaTarget(_){return arguments.length?(_alphaTarget=+_,simulation):_alphaTarget;},velocityDecay:function velocityDecay(_){return arguments.length?(_velocityDecay=1-_,simulation):1-_velocityDecay;},force:function force(name,_){return arguments.length>1?(_==null?forces.remove(name):forces.set(name,initializeForce(_)),simulation):forces.get(name);},find:function find(x,y,radius){var i=0,n=_nodes.length,dx,dy,d2,node,closest;if(radius==null)radius=Infinity;else radius*=radius;for(i=0;i<n;++i){node=_nodes[i];dx=x-node.x;dy=y-node.y;d2=dx*dx+dy*dy;if(d2<radius)closest=node,radius=d2;}return closest;},on:function on(name,_){return arguments.length>1?(event.on(name,_),simulation):event.on(name);}};}function manyBody(){var nodes,node,alpha,strength=constant$7(-30),strengths,distanceMin2=1,distanceMax2=Infinity,theta2=0.81;function force(_){var i,n=nodes.length,tree=quadtree(nodes,x$1,y$1).visitAfter(accumulate);for(alpha=_,i=0;i<n;++i){node=nodes[i],tree.visit(apply);}}function initialize(){if(!nodes)return;var i,n=nodes.length,node;strengths=new Array(n);for(i=0;i<n;++i){node=nodes[i],strengths[node.index]=+strength(node,i,nodes);}}function accumulate(quad){var strength=0,q,c,weight=0,x,y,i;// For internal nodes, accumulate forces from child quadrants.
if(quad.length){for(x=y=i=0;i<4;++i){if((q=quad[i])&&(c=Math.abs(q.value))){strength+=q.value,weight+=c,x+=c*q.x,y+=c*q.y;}}quad.x=x/weight;quad.y=y/weight;}// For leaf nodes, accumulate forces from coincident quadrants.
else{q=quad;q.x=q.data.x;q.y=q.data.y;do{strength+=strengths[q.data.index];}while(q=q.next);}quad.value=strength;}function apply(quad,x1,_,x2){if(!quad.value)return true;var x=quad.x-node.x,y=quad.y-node.y,w=x2-x1,l=x*x+y*y;// Apply the Barnes-Hut approximation if possible.
// Limit forces for very close nodes; randomize direction if coincident.
if(w*w/theta2<l){if(l<distanceMax2){if(x===0)x=jiggle(),l+=x*x;if(y===0)y=jiggle(),l+=y*y;if(l<distanceMin2)l=Math.sqrt(distanceMin2*l);node.vx+=x*quad.value*alpha/l;node.vy+=y*quad.value*alpha/l;}return true;}// Otherwise, process points directly.
else if(quad.length||l>=distanceMax2)return;// Limit forces for very close nodes; randomize direction if coincident.
if(quad.data!==node||quad.next){if(x===0)x=jiggle(),l+=x*x;if(y===0)y=jiggle(),l+=y*y;if(l<distanceMin2)l=Math.sqrt(distanceMin2*l);}do{if(quad.data!==node){w=strengths[quad.data.index]*alpha/l;node.vx+=x*w;node.vy+=y*w;}}while(quad=quad.next);}force.initialize=function(_){nodes=_;initialize();};force.strength=function(_){return arguments.length?(strength=typeof _==="function"?_:constant$7(+_),initialize(),force):strength;};force.distanceMin=function(_){return arguments.length?(distanceMin2=_*_,force):Math.sqrt(distanceMin2);};force.distanceMax=function(_){return arguments.length?(distanceMax2=_*_,force):Math.sqrt(distanceMax2);};force.theta=function(_){return arguments.length?(theta2=_*_,force):Math.sqrt(theta2);};return force;}function radial(radius,x,y){var nodes,strength=constant$7(0.1),strengths,radiuses;if(typeof radius!=="function")radius=constant$7(+radius);if(x==null)x=0;if(y==null)y=0;function force(alpha){for(var i=0,n=nodes.length;i<n;++i){var node=nodes[i],dx=node.x-x||1e-6,dy=node.y-y||1e-6,r=Math.sqrt(dx*dx+dy*dy),k=(radiuses[i]-r)*strengths[i]*alpha/r;node.vx+=dx*k;node.vy+=dy*k;}}function initialize(){if(!nodes)return;var i,n=nodes.length;strengths=new Array(n);radiuses=new Array(n);for(i=0;i<n;++i){radiuses[i]=+radius(nodes[i],i,nodes);strengths[i]=isNaN(radiuses[i])?0:+strength(nodes[i],i,nodes);}}force.initialize=function(_){nodes=_,initialize();};force.strength=function(_){return arguments.length?(strength=typeof _==="function"?_:constant$7(+_),initialize(),force):strength;};force.radius=function(_){return arguments.length?(radius=typeof _==="function"?_:constant$7(+_),initialize(),force):radius;};force.x=function(_){return arguments.length?(x=+_,force):x;};force.y=function(_){return arguments.length?(y=+_,force):y;};return force;}function x$2(x){var strength=constant$7(0.1),nodes,strengths,xz;if(typeof x!=="function")x=constant$7(x==null?0:+x);function force(alpha){for(var i=0,n=nodes.length,node;i<n;++i){node=nodes[i],node.vx+=(xz[i]-node.x)*strengths[i]*alpha;}}function initialize(){if(!nodes)return;var i,n=nodes.length;strengths=new Array(n);xz=new Array(n);for(i=0;i<n;++i){strengths[i]=isNaN(xz[i]=+x(nodes[i],i,nodes))?0:+strength(nodes[i],i,nodes);}}force.initialize=function(_){nodes=_;initialize();};force.strength=function(_){return arguments.length?(strength=typeof _==="function"?_:constant$7(+_),initialize(),force):strength;};force.x=function(_){return arguments.length?(x=typeof _==="function"?_:constant$7(+_),initialize(),force):x;};return force;}function y$2(y){var strength=constant$7(0.1),nodes,strengths,yz;if(typeof y!=="function")y=constant$7(y==null?0:+y);function force(alpha){for(var i=0,n=nodes.length,node;i<n;++i){node=nodes[i],node.vy+=(yz[i]-node.y)*strengths[i]*alpha;}}function initialize(){if(!nodes)return;var i,n=nodes.length;strengths=new Array(n);yz=new Array(n);for(i=0;i<n;++i){strengths[i]=isNaN(yz[i]=+y(nodes[i],i,nodes))?0:+strength(nodes[i],i,nodes);}}force.initialize=function(_){nodes=_;initialize();};force.strength=function(_){return arguments.length?(strength=typeof _==="function"?_:constant$7(+_),initialize(),force):strength;};force.y=function(_){return arguments.length?(y=typeof _==="function"?_:constant$7(+_),initialize(),force):y;};return force;}// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimal(1.23) returns ["123", 0].
function formatDecimal(x,p){if((i=(x=p?x.toExponential(p-1):x.toExponential()).indexOf("e"))<0)return null;// NaN, ±Infinity
var i,coefficient=x.slice(0,i);// The string returned by toExponential either has the form \d\.\d+e[-+]\d+
// (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
return[coefficient.length>1?coefficient[0]+coefficient.slice(2):coefficient,+x.slice(i+1)];}function exponent$1(x){return x=formatDecimal(Math.abs(x)),x?x[1]:NaN;}function formatGroup(grouping,thousands){return function(value,width){var i=value.length,t=[],j=0,g=grouping[0],length=0;while(i>0&&g>0){if(length+g+1>width)g=Math.max(1,width-length);t.push(value.substring(i-=g,i+g));if((length+=g+1)>width)break;g=grouping[j=(j+1)%grouping.length];}return t.reverse().join(thousands);};}function formatNumerals(numerals){return function(value){return value.replace(/[0-9]/g,function(i){return numerals[+i];});};}// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var re=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function formatSpecifier(specifier){return new FormatSpecifier(specifier);}formatSpecifier.prototype=FormatSpecifier.prototype;// instanceof
function FormatSpecifier(specifier){if(!(match=re.exec(specifier)))throw new Error("invalid format: "+specifier);var match;this.fill=match[1]||" ";this.align=match[2]||">";this.sign=match[3]||"-";this.symbol=match[4]||"";this.zero=!!match[5];this.width=match[6]&&+match[6];this.comma=!!match[7];this.precision=match[8]&&+match[8].slice(1);this.trim=!!match[9];this.type=match[10]||"";}FormatSpecifier.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(this.width==null?"":Math.max(1,this.width|0))+(this.comma?",":"")+(this.precision==null?"":"."+Math.max(0,this.precision|0))+(this.trim?"~":"")+this.type;};// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
function formatTrim(s){out:for(var n=s.length,i=1,i0=-1,i1;i<n;++i){switch(s[i]){case".":i0=i1=i;break;case"0":if(i0===0)i0=i;i1=i;break;default:if(i0>0){if(!+s[i])break out;i0=0;}break;}}return i0>0?s.slice(0,i0)+s.slice(i1+1):s;}var prefixExponent;function formatPrefixAuto(x,p){var d=formatDecimal(x,p);if(!d)return x+"";var coefficient=d[0],exponent=d[1],i=exponent-(prefixExponent=Math.max(-8,Math.min(8,Math.floor(exponent/3)))*3)+1,n=coefficient.length;return i===n?coefficient:i>n?coefficient+new Array(i-n+1).join("0"):i>0?coefficient.slice(0,i)+"."+coefficient.slice(i):"0."+new Array(1-i).join("0")+formatDecimal(x,Math.max(0,p+i-1))[0];// less than 1y!
}function formatRounded(x,p){var d=formatDecimal(x,p);if(!d)return x+"";var coefficient=d[0],exponent=d[1];return exponent<0?"0."+new Array(-exponent).join("0")+coefficient:coefficient.length>exponent+1?coefficient.slice(0,exponent+1)+"."+coefficient.slice(exponent+1):coefficient+new Array(exponent-coefficient.length+2).join("0");}var formatTypes={"%":function _(x,p){return(x*100).toFixed(p);},"b":function b(x){return Math.round(x).toString(2);},"c":function c(x){return x+"";},"d":function d(x){return Math.round(x).toString(10);},"e":function e(x,p){return x.toExponential(p);},"f":function f(x,p){return x.toFixed(p);},"g":function g(x,p){return x.toPrecision(p);},"o":function o(x){return Math.round(x).toString(8);},"p":function p(x,_p){return formatRounded(x*100,_p);},"r":formatRounded,"s":formatPrefixAuto,"X":function X(x){return Math.round(x).toString(16).toUpperCase();},"x":function x(_x){return Math.round(_x).toString(16);}};function identity$3(x){return x;}var prefixes=["y","z","a","f","p","n","\xB5","m","","k","M","G","T","P","E","Z","Y"];function formatLocale(locale){var group=locale.grouping&&locale.thousands?formatGroup(locale.grouping,locale.thousands):identity$3,currency=locale.currency,decimal=locale.decimal,numerals=locale.numerals?formatNumerals(locale.numerals):identity$3,percent=locale.percent||"%";function newFormat(specifier){specifier=formatSpecifier(specifier);var fill=specifier.fill,align=specifier.align,sign=specifier.sign,symbol=specifier.symbol,zero=specifier.zero,width=specifier.width,comma=specifier.comma,precision=specifier.precision,trim=specifier.trim,type=specifier.type;// The "n" type is an alias for ",g".
if(type==="n")comma=true,type="g";// The "" type, and any invalid type, is an alias for ".12~g".
else if(!formatTypes[type])precision==null&&(precision=12),trim=true,type="g";// If zero fill is specified, padding goes after sign and before digits.
if(zero||fill==="0"&&align==="=")zero=true,fill="0",align="=";// Compute the prefix and suffix.
// For SI-prefix, the suffix is lazily computed.
var prefix=symbol==="$"?currency[0]:symbol==="#"&&/[boxX]/.test(type)?"0"+type.toLowerCase():"",suffix=symbol==="$"?currency[1]:/[%p]/.test(type)?percent:"";// What format function should we use?
// Is this an integer type?
// Can this type generate exponential notation?
var formatType=formatTypes[type],maybeSuffix=/[defgprs%]/.test(type);// Set the default precision if not specified,
// or clamp the specified precision to the supported range.
// For significant precision, it must be in [1, 21].
// For fixed precision, it must be in [0, 20].
precision=precision==null?6:/[gprs]/.test(type)?Math.max(1,Math.min(21,precision)):Math.max(0,Math.min(20,precision));function format(value){var valuePrefix=prefix,valueSuffix=suffix,i,n,c;if(type==="c"){valueSuffix=formatType(value)+valueSuffix;value="";}else{value=+value;// Perform the initial formatting.
var valueNegative=value<0;value=formatType(Math.abs(value),precision);// Trim insignificant zeros.
if(trim)value=formatTrim(value);// If a negative value rounds to zero during formatting, treat as positive.
if(valueNegative&&+value===0)valueNegative=false;// Compute the prefix and suffix.
valuePrefix=(valueNegative?sign==="("?sign:"-":sign==="-"||sign==="("?"":sign)+valuePrefix;valueSuffix=(type==="s"?prefixes[8+prefixExponent/3]:"")+valueSuffix+(valueNegative&&sign==="("?")":"");// Break the formatted value into the integer “value” part that can be
// grouped, and fractional or exponential “suffix” part that is not.
if(maybeSuffix){i=-1,n=value.length;while(++i<n){if(c=value.charCodeAt(i),48>c||c>57){valueSuffix=(c===46?decimal+value.slice(i+1):value.slice(i))+valueSuffix;value=value.slice(0,i);break;}}}}// If the fill character is not "0", grouping is applied before padding.
if(comma&&!zero)value=group(value,Infinity);// Compute the padding.
var length=valuePrefix.length+value.length+valueSuffix.length,padding=length<width?new Array(width-length+1).join(fill):"";// If the fill character is "0", grouping is applied after padding.
if(comma&&zero)value=group(padding+value,padding.length?width-valueSuffix.length:Infinity),padding="";// Reconstruct the final output based on the desired alignment.
switch(align){case"<":value=valuePrefix+value+valueSuffix+padding;break;case"=":value=valuePrefix+padding+value+valueSuffix;break;case"^":value=padding.slice(0,length=padding.length>>1)+valuePrefix+value+valueSuffix+padding.slice(length);break;default:value=padding+valuePrefix+value+valueSuffix;break;}return numerals(value);}format.toString=function(){return specifier+"";};return format;}function formatPrefix(specifier,value){var f=newFormat((specifier=formatSpecifier(specifier),specifier.type="f",specifier)),e=Math.max(-8,Math.min(8,Math.floor(exponent$1(value)/3)))*3,k=Math.pow(10,-e),prefix=prefixes[8+e/3];return function(value){return f(k*value)+prefix;};}return{format:newFormat,formatPrefix:formatPrefix};}var locale;defaultLocale({decimal:".",thousands:",",grouping:[3],currency:["$",""]});function defaultLocale(definition){locale=formatLocale(definition);exports.format=locale.format;exports.formatPrefix=locale.formatPrefix;return locale;}function precisionFixed(step){return Math.max(0,-exponent$1(Math.abs(step)));}function precisionPrefix(step,value){return Math.max(0,Math.max(-8,Math.min(8,Math.floor(exponent$1(value)/3)))*3-exponent$1(Math.abs(step)));}function precisionRound(step,max){step=Math.abs(step),max=Math.abs(max)-step;return Math.max(0,exponent$1(max)-exponent$1(step))+1;}// Adds floating point numbers with twice the normal precision.
// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
// 305–363 (1997).
// Code adapted from GeographicLib by Charles F. F. Karney,
// http://geographiclib.sourceforge.net/
function adder(){return new Adder();}function Adder(){this.reset();}Adder.prototype={constructor:Adder,reset:function reset(){this.s=// rounded value
this.t=0;// exact error
},add:function add(y){add$1(temp,y,this.t);add$1(this,temp.s,this.s);if(this.s)this.t+=temp.t;else this.s=temp.t;},valueOf:function valueOf(){return this.s;}};var temp=new Adder();function add$1(adder,a,b){var x=adder.s=a+b,bv=x-a,av=x-bv;adder.t=a-av+(b-bv);}var epsilon$2=1e-6;var epsilon2$1=1e-12;var pi$3=Math.PI;var halfPi$2=pi$3/2;var quarterPi=pi$3/4;var tau$3=pi$3*2;var degrees$1=180/pi$3;var radians=pi$3/180;var abs=Math.abs;var atan=Math.atan;var atan2=Math.atan2;var cos$1=Math.cos;var ceil=Math.ceil;var exp=Math.exp;var log=Math.log;var pow=Math.pow;var sin$1=Math.sin;var sign=Math.sign||function(x){return x>0?1:x<0?-1:0;};var sqrt=Math.sqrt;var tan=Math.tan;function acos(x){return x>1?0:x<-1?pi$3:Math.acos(x);}function asin(x){return x>1?halfPi$2:x<-1?-halfPi$2:Math.asin(x);}function haversin(x){return(x=sin$1(x/2))*x;}function noop$2(){}function streamGeometry(geometry,stream){if(geometry&&streamGeometryType.hasOwnProperty(geometry.type)){streamGeometryType[geometry.type](geometry,stream);}}var streamObjectType={Feature:function Feature(object,stream){streamGeometry(object.geometry,stream);},FeatureCollection:function FeatureCollection(object,stream){var features=object.features,i=-1,n=features.length;while(++i<n){streamGeometry(features[i].geometry,stream);}}};var streamGeometryType={Sphere:function Sphere(object,stream){stream.sphere();},Point:function Point(object,stream){object=object.coordinates;stream.point(object[0],object[1],object[2]);},MultiPoint:function MultiPoint(object,stream){var coordinates=object.coordinates,i=-1,n=coordinates.length;while(++i<n){object=coordinates[i],stream.point(object[0],object[1],object[2]);}},LineString:function LineString(object,stream){streamLine(object.coordinates,stream,0);},MultiLineString:function MultiLineString(object,stream){var coordinates=object.coordinates,i=-1,n=coordinates.length;while(++i<n){streamLine(coordinates[i],stream,0);}},Polygon:function Polygon(object,stream){streamPolygon(object.coordinates,stream);},MultiPolygon:function MultiPolygon(object,stream){var coordinates=object.coordinates,i=-1,n=coordinates.length;while(++i<n){streamPolygon(coordinates[i],stream);}},GeometryCollection:function GeometryCollection(object,stream){var geometries=object.geometries,i=-1,n=geometries.length;while(++i<n){streamGeometry(geometries[i],stream);}}};function streamLine(coordinates,stream,closed){var i=-1,n=coordinates.length-closed,coordinate;stream.lineStart();while(++i<n){coordinate=coordinates[i],stream.point(coordinate[0],coordinate[1],coordinate[2]);}stream.lineEnd();}function streamPolygon(coordinates,stream){var i=-1,n=coordinates.length;stream.polygonStart();while(++i<n){streamLine(coordinates[i],stream,1);}stream.polygonEnd();}function geoStream(object,stream){if(object&&streamObjectType.hasOwnProperty(object.type)){streamObjectType[object.type](object,stream);}else{streamGeometry(object,stream);}}var areaRingSum=adder();var areaSum=adder(),lambda00,phi00,lambda0,cosPhi0,sinPhi0;var areaStream={point:noop$2,lineStart:noop$2,lineEnd:noop$2,polygonStart:function polygonStart(){areaRingSum.reset();areaStream.lineStart=areaRingStart;areaStream.lineEnd=areaRingEnd;},polygonEnd:function polygonEnd(){var areaRing=+areaRingSum;areaSum.add(areaRing<0?tau$3+areaRing:areaRing);this.lineStart=this.lineEnd=this.point=noop$2;},sphere:function sphere(){areaSum.add(tau$3);}};function areaRingStart(){areaStream.point=areaPointFirst;}function areaRingEnd(){areaPoint(lambda00,phi00);}function areaPointFirst(lambda,phi){areaStream.point=areaPoint;lambda00=lambda,phi00=phi;lambda*=radians,phi*=radians;lambda0=lambda,cosPhi0=cos$1(phi=phi/2+quarterPi),sinPhi0=sin$1(phi);}function areaPoint(lambda,phi){lambda*=radians,phi*=radians;phi=phi/2+quarterPi;// half the angular distance from south pole
// Spherical excess E for a spherical triangle with vertices: south pole,
// previous point, current point.  Uses a formula derived from Cagnoli’s
// theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
var dLambda=lambda-lambda0,sdLambda=dLambda>=0?1:-1,adLambda=sdLambda*dLambda,cosPhi=cos$1(phi),sinPhi=sin$1(phi),k=sinPhi0*sinPhi,u=cosPhi0*cosPhi+k*cos$1(adLambda),v=k*sdLambda*sin$1(adLambda);areaRingSum.add(atan2(v,u));// Advance the previous points.
lambda0=lambda,cosPhi0=cosPhi,sinPhi0=sinPhi;}function area$1(object){areaSum.reset();geoStream(object,areaStream);return areaSum*2;}function spherical(cartesian){return[atan2(cartesian[1],cartesian[0]),asin(cartesian[2])];}function cartesian(spherical){var lambda=spherical[0],phi=spherical[1],cosPhi=cos$1(phi);return[cosPhi*cos$1(lambda),cosPhi*sin$1(lambda),sin$1(phi)];}function cartesianDot(a,b){return a[0]*b[0]+a[1]*b[1]+a[2]*b[2];}function cartesianCross(a,b){return[a[1]*b[2]-a[2]*b[1],a[2]*b[0]-a[0]*b[2],a[0]*b[1]-a[1]*b[0]];}// TODO return a
function cartesianAddInPlace(a,b){a[0]+=b[0],a[1]+=b[1],a[2]+=b[2];}function cartesianScale(vector,k){return[vector[0]*k,vector[1]*k,vector[2]*k];}// TODO return d
function cartesianNormalizeInPlace(d){var l=sqrt(d[0]*d[0]+d[1]*d[1]+d[2]*d[2]);d[0]/=l,d[1]/=l,d[2]/=l;}var lambda0$1,phi0,lambda1,phi1,// bounds
lambda2,// previous lambda-coordinate
lambda00$1,phi00$1,// first point
p0,// previous 3D point
deltaSum=adder(),ranges,range;var boundsStream={point:boundsPoint,lineStart:boundsLineStart,lineEnd:boundsLineEnd,polygonStart:function polygonStart(){boundsStream.point=boundsRingPoint;boundsStream.lineStart=boundsRingStart;boundsStream.lineEnd=boundsRingEnd;deltaSum.reset();areaStream.polygonStart();},polygonEnd:function polygonEnd(){areaStream.polygonEnd();boundsStream.point=boundsPoint;boundsStream.lineStart=boundsLineStart;boundsStream.lineEnd=boundsLineEnd;if(areaRingSum<0)lambda0$1=-(lambda1=180),phi0=-(phi1=90);else if(deltaSum>epsilon$2)phi1=90;else if(deltaSum<-epsilon$2)phi0=-90;range[0]=lambda0$1,range[1]=lambda1;}};function boundsPoint(lambda,phi){ranges.push(range=[lambda0$1=lambda,lambda1=lambda]);if(phi<phi0)phi0=phi;if(phi>phi1)phi1=phi;}function linePoint(lambda,phi){var p=cartesian([lambda*radians,phi*radians]);if(p0){var normal=cartesianCross(p0,p),equatorial=[normal[1],-normal[0],0],inflection=cartesianCross(equatorial,normal);cartesianNormalizeInPlace(inflection);inflection=spherical(inflection);var delta=lambda-lambda2,sign$$1=delta>0?1:-1,lambdai=inflection[0]*degrees$1*sign$$1,phii,antimeridian=abs(delta)>180;if(antimeridian^(sign$$1*lambda2<lambdai&&lambdai<sign$$1*lambda)){phii=inflection[1]*degrees$1;if(phii>phi1)phi1=phii;}else if(lambdai=(lambdai+360)%360-180,antimeridian^(sign$$1*lambda2<lambdai&&lambdai<sign$$1*lambda)){phii=-inflection[1]*degrees$1;if(phii<phi0)phi0=phii;}else{if(phi<phi0)phi0=phi;if(phi>phi1)phi1=phi;}if(antimeridian){if(lambda<lambda2){if(angle(lambda0$1,lambda)>angle(lambda0$1,lambda1))lambda1=lambda;}else{if(angle(lambda,lambda1)>angle(lambda0$1,lambda1))lambda0$1=lambda;}}else{if(lambda1>=lambda0$1){if(lambda<lambda0$1)lambda0$1=lambda;if(lambda>lambda1)lambda1=lambda;}else{if(lambda>lambda2){if(angle(lambda0$1,lambda)>angle(lambda0$1,lambda1))lambda1=lambda;}else{if(angle(lambda,lambda1)>angle(lambda0$1,lambda1))lambda0$1=lambda;}}}}else{ranges.push(range=[lambda0$1=lambda,lambda1=lambda]);}if(phi<phi0)phi0=phi;if(phi>phi1)phi1=phi;p0=p,lambda2=lambda;}function boundsLineStart(){boundsStream.point=linePoint;}function boundsLineEnd(){range[0]=lambda0$1,range[1]=lambda1;boundsStream.point=boundsPoint;p0=null;}function boundsRingPoint(lambda,phi){if(p0){var delta=lambda-lambda2;deltaSum.add(abs(delta)>180?delta+(delta>0?360:-360):delta);}else{lambda00$1=lambda,phi00$1=phi;}areaStream.point(lambda,phi);linePoint(lambda,phi);}function boundsRingStart(){areaStream.lineStart();}function boundsRingEnd(){boundsRingPoint(lambda00$1,phi00$1);areaStream.lineEnd();if(abs(deltaSum)>epsilon$2)lambda0$1=-(lambda1=180);range[0]=lambda0$1,range[1]=lambda1;p0=null;}// Finds the left-right distance between two longitudes.
// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
// the distance between ±180° to be 360°.
function angle(lambda0,lambda1){return(lambda1-=lambda0)<0?lambda1+360:lambda1;}function rangeCompare(a,b){return a[0]-b[0];}function rangeContains(range,x){return range[0]<=range[1]?range[0]<=x&&x<=range[1]:x<range[0]||range[1]<x;}function bounds(feature){var i,n,a,b,merged,deltaMax,delta;phi1=lambda1=-(lambda0$1=phi0=Infinity);ranges=[];geoStream(feature,boundsStream);// First, sort ranges by their minimum longitudes.
if(n=ranges.length){ranges.sort(rangeCompare);// Then, merge any ranges that overlap.
for(i=1,a=ranges[0],merged=[a];i<n;++i){b=ranges[i];if(rangeContains(a,b[0])||rangeContains(a,b[1])){if(angle(a[0],b[1])>angle(a[0],a[1]))a[1]=b[1];if(angle(b[0],a[1])>angle(a[0],a[1]))a[0]=b[0];}else{merged.push(a=b);}}// Finally, find the largest gap between the merged ranges.
// The final bounding box will be the inverse of this gap.
for(deltaMax=-Infinity,n=merged.length-1,i=0,a=merged[n];i<=n;a=b,++i){b=merged[i];if((delta=angle(a[1],b[0]))>deltaMax)deltaMax=delta,lambda0$1=b[0],lambda1=a[1];}}ranges=range=null;return lambda0$1===Infinity||phi0===Infinity?[[NaN,NaN],[NaN,NaN]]:[[lambda0$1,phi0],[lambda1,phi1]];}var W0,W1,X0,Y0,Z0,X1,Y1,Z1,X2,Y2,Z2,lambda00$2,phi00$2,// first point
x0,y0,z0;// previous point
var centroidStream={sphere:noop$2,point:centroidPoint,lineStart:centroidLineStart,lineEnd:centroidLineEnd,polygonStart:function polygonStart(){centroidStream.lineStart=centroidRingStart;centroidStream.lineEnd=centroidRingEnd;},polygonEnd:function polygonEnd(){centroidStream.lineStart=centroidLineStart;centroidStream.lineEnd=centroidLineEnd;}};// Arithmetic mean of Cartesian vectors.
function centroidPoint(lambda,phi){lambda*=radians,phi*=radians;var cosPhi=cos$1(phi);centroidPointCartesian(cosPhi*cos$1(lambda),cosPhi*sin$1(lambda),sin$1(phi));}function centroidPointCartesian(x,y,z){++W0;X0+=(x-X0)/W0;Y0+=(y-Y0)/W0;Z0+=(z-Z0)/W0;}function centroidLineStart(){centroidStream.point=centroidLinePointFirst;}function centroidLinePointFirst(lambda,phi){lambda*=radians,phi*=radians;var cosPhi=cos$1(phi);x0=cosPhi*cos$1(lambda);y0=cosPhi*sin$1(lambda);z0=sin$1(phi);centroidStream.point=centroidLinePoint;centroidPointCartesian(x0,y0,z0);}function centroidLinePoint(lambda,phi){lambda*=radians,phi*=radians;var cosPhi=cos$1(phi),x=cosPhi*cos$1(lambda),y=cosPhi*sin$1(lambda),z=sin$1(phi),w=atan2(sqrt((w=y0*z-z0*y)*w+(w=z0*x-x0*z)*w+(w=x0*y-y0*x)*w),x0*x+y0*y+z0*z);W1+=w;X1+=w*(x0+(x0=x));Y1+=w*(y0+(y0=y));Z1+=w*(z0+(z0=z));centroidPointCartesian(x0,y0,z0);}function centroidLineEnd(){centroidStream.point=centroidPoint;}// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
// J. Applied Mechanics 42, 239 (1975).
function centroidRingStart(){centroidStream.point=centroidRingPointFirst;}function centroidRingEnd(){centroidRingPoint(lambda00$2,phi00$2);centroidStream.point=centroidPoint;}function centroidRingPointFirst(lambda,phi){lambda00$2=lambda,phi00$2=phi;lambda*=radians,phi*=radians;centroidStream.point=centroidRingPoint;var cosPhi=cos$1(phi);x0=cosPhi*cos$1(lambda);y0=cosPhi*sin$1(lambda);z0=sin$1(phi);centroidPointCartesian(x0,y0,z0);}function centroidRingPoint(lambda,phi){lambda*=radians,phi*=radians;var cosPhi=cos$1(phi),x=cosPhi*cos$1(lambda),y=cosPhi*sin$1(lambda),z=sin$1(phi),cx=y0*z-z0*y,cy=z0*x-x0*z,cz=x0*y-y0*x,m=sqrt(cx*cx+cy*cy+cz*cz),w=asin(m),// line weight = angle
v=m&&-w/m;// area weight multiplier
X2+=v*cx;Y2+=v*cy;Z2+=v*cz;W1+=w;X1+=w*(x0+(x0=x));Y1+=w*(y0+(y0=y));Z1+=w*(z0+(z0=z));centroidPointCartesian(x0,y0,z0);}function centroid(object){W0=W1=X0=Y0=Z0=X1=Y1=Z1=X2=Y2=Z2=0;geoStream(object,centroidStream);var x=X2,y=Y2,z=Z2,m=x*x+y*y+z*z;// If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
if(m<epsilon2$1){x=X1,y=Y1,z=Z1;// If the feature has zero length, fall back to arithmetic mean of point vectors.
if(W1<epsilon$2)x=X0,y=Y0,z=Z0;m=x*x+y*y+z*z;// If the feature still has an undefined ccentroid, then return.
if(m<epsilon2$1)return[NaN,NaN];}return[atan2(y,x)*degrees$1,asin(z/sqrt(m))*degrees$1];}function constant$8(x){return function(){return x;};}function compose(a,b){function compose(x,y){return x=a(x,y),b(x[0],x[1]);}if(a.invert&&b.invert)compose.invert=function(x,y){return x=b.invert(x,y),x&&a.invert(x[0],x[1]);};return compose;}function rotationIdentity(lambda,phi){return[abs(lambda)>pi$3?lambda+Math.round(-lambda/tau$3)*tau$3:lambda,phi];}rotationIdentity.invert=rotationIdentity;function rotateRadians(deltaLambda,deltaPhi,deltaGamma){return(deltaLambda%=tau$3)?deltaPhi||deltaGamma?compose(rotationLambda(deltaLambda),rotationPhiGamma(deltaPhi,deltaGamma)):rotationLambda(deltaLambda):deltaPhi||deltaGamma?rotationPhiGamma(deltaPhi,deltaGamma):rotationIdentity;}function forwardRotationLambda(deltaLambda){return function(lambda,phi){return lambda+=deltaLambda,[lambda>pi$3?lambda-tau$3:lambda<-pi$3?lambda+tau$3:lambda,phi];};}function rotationLambda(deltaLambda){var rotation=forwardRotationLambda(deltaLambda);rotation.invert=forwardRotationLambda(-deltaLambda);return rotation;}function rotationPhiGamma(deltaPhi,deltaGamma){var cosDeltaPhi=cos$1(deltaPhi),sinDeltaPhi=sin$1(deltaPhi),cosDeltaGamma=cos$1(deltaGamma),sinDeltaGamma=sin$1(deltaGamma);function rotation(lambda,phi){var cosPhi=cos$1(phi),x=cos$1(lambda)*cosPhi,y=sin$1(lambda)*cosPhi,z=sin$1(phi),k=z*cosDeltaPhi+x*sinDeltaPhi;return[atan2(y*cosDeltaGamma-k*sinDeltaGamma,x*cosDeltaPhi-z*sinDeltaPhi),asin(k*cosDeltaGamma+y*sinDeltaGamma)];}rotation.invert=function(lambda,phi){var cosPhi=cos$1(phi),x=cos$1(lambda)*cosPhi,y=sin$1(lambda)*cosPhi,z=sin$1(phi),k=z*cosDeltaGamma-y*sinDeltaGamma;return[atan2(y*cosDeltaGamma+z*sinDeltaGamma,x*cosDeltaPhi+k*sinDeltaPhi),asin(k*cosDeltaPhi-x*sinDeltaPhi)];};return rotation;}function rotation(rotate){rotate=rotateRadians(rotate[0]*radians,rotate[1]*radians,rotate.length>2?rotate[2]*radians:0);function forward(coordinates){coordinates=rotate(coordinates[0]*radians,coordinates[1]*radians);return coordinates[0]*=degrees$1,coordinates[1]*=degrees$1,coordinates;}forward.invert=function(coordinates){coordinates=rotate.invert(coordinates[0]*radians,coordinates[1]*radians);return coordinates[0]*=degrees$1,coordinates[1]*=degrees$1,coordinates;};return forward;}// Generates a circle centered at [0°, 0°], with a given radius and precision.
function circleStream(stream,radius,delta,direction,t0,t1){if(!delta)return;var cosRadius=cos$1(radius),sinRadius=sin$1(radius),step=direction*delta;if(t0==null){t0=radius+direction*tau$3;t1=radius-step/2;}else{t0=circleRadius(cosRadius,t0);t1=circleRadius(cosRadius,t1);if(direction>0?t0<t1:t0>t1)t0+=direction*tau$3;}for(var point,t=t0;direction>0?t>t1:t<t1;t-=step){point=spherical([cosRadius,-sinRadius*cos$1(t),-sinRadius*sin$1(t)]);stream.point(point[0],point[1]);}}// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
function circleRadius(cosRadius,point){point=cartesian(point),point[0]-=cosRadius;cartesianNormalizeInPlace(point);var radius=acos(-point[1]);return((-point[2]<0?-radius:radius)+tau$3-epsilon$2)%tau$3;}function circle(){var center=constant$8([0,0]),radius=constant$8(90),precision=constant$8(6),ring,rotate,stream={point:point};function point(x,y){ring.push(x=rotate(x,y));x[0]*=degrees$1,x[1]*=degrees$1;}function circle(){var c=center.apply(this,arguments),r=radius.apply(this,arguments)*radians,p=precision.apply(this,arguments)*radians;ring=[];rotate=rotateRadians(-c[0]*radians,-c[1]*radians,0).invert;circleStream(stream,r,p,1);c={type:"Polygon",coordinates:[ring]};ring=rotate=null;return c;}circle.center=function(_){return arguments.length?(center=typeof _==="function"?_:constant$8([+_[0],+_[1]]),circle):center;};circle.radius=function(_){return arguments.length?(radius=typeof _==="function"?_:constant$8(+_),circle):radius;};circle.precision=function(_){return arguments.length?(precision=typeof _==="function"?_:constant$8(+_),circle):precision;};return circle;}function clipBuffer(){var lines=[],line;return{point:function point(x,y){line.push([x,y]);},lineStart:function lineStart(){lines.push(line=[]);},lineEnd:noop$2,rejoin:function rejoin(){if(lines.length>1)lines.push(lines.pop().concat(lines.shift()));},result:function result(){var result=lines;lines=[];line=null;return result;}};}function pointEqual(a,b){return abs(a[0]-b[0])<epsilon$2&&abs(a[1]-b[1])<epsilon$2;}function Intersection(point,points,other,entry){this.x=point;this.z=points;this.o=other;// another intersection
this.e=entry;// is an entry?
this.v=false;// visited
this.n=this.p=null;// next & previous
}// A generalized polygon clipping algorithm: given a polygon that has been cut
// into its visible line segments, and rejoins the segments by interpolating
// along the clip edge.
function clipRejoin(segments,compareIntersection,startInside,interpolate,stream){var subject=[],clip=[],i,n;segments.forEach(function(segment){if((n=segment.length-1)<=0)return;var n,p0=segment[0],p1=segment[n],x;// If the first and last points of a segment are coincident, then treat as a
// closed ring. TODO if all rings are closed, then the winding order of the
// exterior ring should be checked.
if(pointEqual(p0,p1)){stream.lineStart();for(i=0;i<n;++i){stream.point((p0=segment[i])[0],p0[1]);}stream.lineEnd();return;}subject.push(x=new Intersection(p0,segment,null,true));clip.push(x.o=new Intersection(p0,null,x,false));subject.push(x=new Intersection(p1,segment,null,false));clip.push(x.o=new Intersection(p1,null,x,true));});if(!subject.length)return;clip.sort(compareIntersection);link$1(subject);link$1(clip);for(i=0,n=clip.length;i<n;++i){clip[i].e=startInside=!startInside;}var start=subject[0],points,point;while(1){// Find first unvisited intersection.
var current=start,isSubject=true;while(current.v){if((current=current.n)===start)return;}points=current.z;stream.lineStart();do{current.v=current.o.v=true;if(current.e){if(isSubject){for(i=0,n=points.length;i<n;++i){stream.point((point=points[i])[0],point[1]);}}else{interpolate(current.x,current.n.x,1,stream);}current=current.n;}else{if(isSubject){points=current.p.z;for(i=points.length-1;i>=0;--i){stream.point((point=points[i])[0],point[1]);}}else{interpolate(current.x,current.p.x,-1,stream);}current=current.p;}current=current.o;points=current.z;isSubject=!isSubject;}while(!current.v);stream.lineEnd();}}function link$1(array){if(!(n=array.length))return;var n,i=0,a=array[0],b;while(++i<n){a.n=b=array[i];b.p=a;a=b;}a.n=b=array[0];b.p=a;}var sum$1=adder();function polygonContains(polygon,point){var lambda=point[0],phi=point[1],sinPhi=sin$1(phi),normal=[sin$1(lambda),-cos$1(lambda),0],angle=0,winding=0;sum$1.reset();if(sinPhi===1)phi=halfPi$2+epsilon$2;else if(sinPhi===-1)phi=-halfPi$2-epsilon$2;for(var i=0,n=polygon.length;i<n;++i){if(!(m=(ring=polygon[i]).length))continue;var ring,m,point0=ring[m-1],lambda0=point0[0],phi0=point0[1]/2+quarterPi,sinPhi0=sin$1(phi0),cosPhi0=cos$1(phi0);for(var j=0;j<m;++j,lambda0=lambda1,sinPhi0=sinPhi1,cosPhi0=cosPhi1,point0=point1){var point1=ring[j],lambda1=point1[0],phi1=point1[1]/2+quarterPi,sinPhi1=sin$1(phi1),cosPhi1=cos$1(phi1),delta=lambda1-lambda0,sign$$1=delta>=0?1:-1,absDelta=sign$$1*delta,antimeridian=absDelta>pi$3,k=sinPhi0*sinPhi1;sum$1.add(atan2(k*sign$$1*sin$1(absDelta),cosPhi0*cosPhi1+k*cos$1(absDelta)));angle+=antimeridian?delta+sign$$1*tau$3:delta;// Are the longitudes either side of the point’s meridian (lambda),
// and are the latitudes smaller than the parallel (phi)?
if(antimeridian^lambda0>=lambda^lambda1>=lambda){var arc=cartesianCross(cartesian(point0),cartesian(point1));cartesianNormalizeInPlace(arc);var intersection=cartesianCross(normal,arc);cartesianNormalizeInPlace(intersection);var phiArc=(antimeridian^delta>=0?-1:1)*asin(intersection[2]);if(phi>phiArc||phi===phiArc&&(arc[0]||arc[1])){winding+=antimeridian^delta>=0?1:-1;}}}}// First, determine whether the South pole is inside or outside:
//
// It is inside if:
// * the polygon winds around it in a clockwise direction.
// * the polygon does not (cumulatively) wind around it, but has a negative
//   (counter-clockwise) area.
//
// Second, count the (signed) number of times a segment crosses a lambda
// from the point to the South pole.  If it is zero, then the point is the
// same side as the South pole.
return(angle<-epsilon$2||angle<epsilon$2&&sum$1<-epsilon$2)^winding&1;}function clip(pointVisible,clipLine,interpolate,start){return function(sink){var line=clipLine(sink),ringBuffer=clipBuffer(),ringSink=clipLine(ringBuffer),polygonStarted=false,polygon,segments,ring;var clip={point:point,lineStart:lineStart,lineEnd:lineEnd,polygonStart:function polygonStart(){clip.point=pointRing;clip.lineStart=ringStart;clip.lineEnd=ringEnd;segments=[];polygon=[];},polygonEnd:function polygonEnd(){clip.point=point;clip.lineStart=lineStart;clip.lineEnd=lineEnd;segments=merge(segments);var startInside=polygonContains(polygon,start);if(segments.length){if(!polygonStarted)sink.polygonStart(),polygonStarted=true;clipRejoin(segments,compareIntersection,startInside,interpolate,sink);}else if(startInside){if(!polygonStarted)sink.polygonStart(),polygonStarted=true;sink.lineStart();interpolate(null,null,1,sink);sink.lineEnd();}if(polygonStarted)sink.polygonEnd(),polygonStarted=false;segments=polygon=null;},sphere:function sphere(){sink.polygonStart();sink.lineStart();interpolate(null,null,1,sink);sink.lineEnd();sink.polygonEnd();}};function point(lambda,phi){if(pointVisible(lambda,phi))sink.point(lambda,phi);}function pointLine(lambda,phi){line.point(lambda,phi);}function lineStart(){clip.point=pointLine;line.lineStart();}function lineEnd(){clip.point=point;line.lineEnd();}function pointRing(lambda,phi){ring.push([lambda,phi]);ringSink.point(lambda,phi);}function ringStart(){ringSink.lineStart();ring=[];}function ringEnd(){pointRing(ring[0][0],ring[0][1]);ringSink.lineEnd();var clean=ringSink.clean(),ringSegments=ringBuffer.result(),i,n=ringSegments.length,m,segment,point;ring.pop();polygon.push(ring);ring=null;if(!n)return;// No intersections.
if(clean&1){segment=ringSegments[0];if((m=segment.length-1)>0){if(!polygonStarted)sink.polygonStart(),polygonStarted=true;sink.lineStart();for(i=0;i<m;++i){sink.point((point=segment[i])[0],point[1]);}sink.lineEnd();}return;}// Rejoin connected segments.
// TODO reuse ringBuffer.rejoin()?
if(n>1&&clean&2)ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));segments.push(ringSegments.filter(validSegment));}return clip;};}function validSegment(segment){return segment.length>1;}// Intersections are sorted along the clip edge. For both antimeridian cutting
// and circle clipping, the same comparison is used.
function compareIntersection(a,b){return((a=a.x)[0]<0?a[1]-halfPi$2-epsilon$2:halfPi$2-a[1])-((b=b.x)[0]<0?b[1]-halfPi$2-epsilon$2:halfPi$2-b[1]);}var clipAntimeridian=clip(function(){return true;},clipAntimeridianLine,clipAntimeridianInterpolate,[-pi$3,-halfPi$2]);// Takes a line and cuts into visible segments. Return values: 0 - there were
// intersections or the line was empty; 1 - no intersections; 2 - there were
// intersections, and the first and last segments should be rejoined.
function clipAntimeridianLine(stream){var lambda0=NaN,phi0=NaN,sign0=NaN,_clean;// no intersections
return{lineStart:function lineStart(){stream.lineStart();_clean=1;},point:function point(lambda1,phi1){var sign1=lambda1>0?pi$3:-pi$3,delta=abs(lambda1-lambda0);if(abs(delta-pi$3)<epsilon$2){// line crosses a pole
stream.point(lambda0,phi0=(phi0+phi1)/2>0?halfPi$2:-halfPi$2);stream.point(sign0,phi0);stream.lineEnd();stream.lineStart();stream.point(sign1,phi0);stream.point(lambda1,phi0);_clean=0;}else if(sign0!==sign1&&delta>=pi$3){// line crosses antimeridian
if(abs(lambda0-sign0)<epsilon$2)lambda0-=sign0*epsilon$2;// handle degeneracies
if(abs(lambda1-sign1)<epsilon$2)lambda1-=sign1*epsilon$2;phi0=clipAntimeridianIntersect(lambda0,phi0,lambda1,phi1);stream.point(sign0,phi0);stream.lineEnd();stream.lineStart();stream.point(sign1,phi0);_clean=0;}stream.point(lambda0=lambda1,phi0=phi1);sign0=sign1;},lineEnd:function lineEnd(){stream.lineEnd();lambda0=phi0=NaN;},clean:function clean(){return 2-_clean;// if intersections, rejoin first and last segments
}};}function clipAntimeridianIntersect(lambda0,phi0,lambda1,phi1){var cosPhi0,cosPhi1,sinLambda0Lambda1=sin$1(lambda0-lambda1);return abs(sinLambda0Lambda1)>epsilon$2?atan((sin$1(phi0)*(cosPhi1=cos$1(phi1))*sin$1(lambda1)-sin$1(phi1)*(cosPhi0=cos$1(phi0))*sin$1(lambda0))/(cosPhi0*cosPhi1*sinLambda0Lambda1)):(phi0+phi1)/2;}function clipAntimeridianInterpolate(from,to,direction,stream){var phi;if(from==null){phi=direction*halfPi$2;stream.point(-pi$3,phi);stream.point(0,phi);stream.point(pi$3,phi);stream.point(pi$3,0);stream.point(pi$3,-phi);stream.point(0,-phi);stream.point(-pi$3,-phi);stream.point(-pi$3,0);stream.point(-pi$3,phi);}else if(abs(from[0]-to[0])>epsilon$2){var lambda=from[0]<to[0]?pi$3:-pi$3;phi=direction*lambda/2;stream.point(-lambda,phi);stream.point(0,phi);stream.point(lambda,phi);}else{stream.point(to[0],to[1]);}}function clipCircle(radius){var cr=cos$1(radius),delta=6*radians,smallRadius=cr>0,notHemisphere=abs(cr)>epsilon$2;// TODO optimise for this common case
function interpolate(from,to,direction,stream){circleStream(stream,radius,delta,direction,from,to);}function visible(lambda,phi){return cos$1(lambda)*cos$1(phi)>cr;}// Takes a line and cuts into visible segments. Return values used for polygon
// clipping: 0 - there were intersections or the line was empty; 1 - no
// intersections 2 - there were intersections, and the first and last segments
// should be rejoined.
function clipLine(stream){var point0,// previous point
c0,// code for previous point
v0,// visibility of previous point
v00,// visibility of first point
_clean2;// no intersections
return{lineStart:function lineStart(){v00=v0=false;_clean2=1;},point:function point(lambda,phi){var point1=[lambda,phi],point2,v=visible(lambda,phi),c=smallRadius?v?0:code(lambda,phi):v?code(lambda+(lambda<0?pi$3:-pi$3),phi):0;if(!point0&&(v00=v0=v))stream.lineStart();// Handle degeneracies.
// TODO ignore if not clipping polygons.
if(v!==v0){point2=intersect(point0,point1);if(!point2||pointEqual(point0,point2)||pointEqual(point1,point2)){point1[0]+=epsilon$2;point1[1]+=epsilon$2;v=visible(point1[0],point1[1]);}}if(v!==v0){_clean2=0;if(v){// outside going in
stream.lineStart();point2=intersect(point1,point0);stream.point(point2[0],point2[1]);}else{// inside going out
point2=intersect(point0,point1);stream.point(point2[0],point2[1]);stream.lineEnd();}point0=point2;}else if(notHemisphere&&point0&&smallRadius^v){var t;// If the codes for two points are different, or are both zero,
// and there this segment intersects with the small circle.
if(!(c&c0)&&(t=intersect(point1,point0,true))){_clean2=0;if(smallRadius){stream.lineStart();stream.point(t[0][0],t[0][1]);stream.point(t[1][0],t[1][1]);stream.lineEnd();}else{stream.point(t[1][0],t[1][1]);stream.lineEnd();stream.lineStart();stream.point(t[0][0],t[0][1]);}}}if(v&&(!point0||!pointEqual(point0,point1))){stream.point(point1[0],point1[1]);}point0=point1,v0=v,c0=c;},lineEnd:function lineEnd(){if(v0)stream.lineEnd();point0=null;},// Rejoin first and last segments if there were intersections and the first
// and last points were visible.
clean:function clean(){return _clean2|(v00&&v0)<<1;}};}// Intersects the great circle between a and b with the clip circle.
function intersect(a,b,two){var pa=cartesian(a),pb=cartesian(b);// We have two planes, n1.p = d1 and n2.p = d2.
// Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
var n1=[1,0,0],// normal
n2=cartesianCross(pa,pb),n2n2=cartesianDot(n2,n2),n1n2=n2[0],// cartesianDot(n1, n2),
determinant=n2n2-n1n2*n1n2;// Two polar points.
if(!determinant)return!two&&a;var c1=cr*n2n2/determinant,c2=-cr*n1n2/determinant,n1xn2=cartesianCross(n1,n2),A=cartesianScale(n1,c1),B=cartesianScale(n2,c2);cartesianAddInPlace(A,B);// Solve |p(t)|^2 = 1.
var u=n1xn2,w=cartesianDot(A,u),uu=cartesianDot(u,u),t2=w*w-uu*(cartesianDot(A,A)-1);if(t2<0)return;var t=sqrt(t2),q=cartesianScale(u,(-w-t)/uu);cartesianAddInPlace(q,A);q=spherical(q);if(!two)return q;// Two intersection points.
var lambda0=a[0],lambda1=b[0],phi0=a[1],phi1=b[1],z;if(lambda1<lambda0)z=lambda0,lambda0=lambda1,lambda1=z;var delta=lambda1-lambda0,polar=abs(delta-pi$3)<epsilon$2,meridian=polar||delta<epsilon$2;if(!polar&&phi1<phi0)z=phi0,phi0=phi1,phi1=z;// Check that the first point is between a and b.
if(meridian?polar?phi0+phi1>0^q[1]<(abs(q[0]-lambda0)<epsilon$2?phi0:phi1):phi0<=q[1]&&q[1]<=phi1:delta>pi$3^(lambda0<=q[0]&&q[0]<=lambda1)){var q1=cartesianScale(u,(-w+t)/uu);cartesianAddInPlace(q1,A);return[q,spherical(q1)];}}// Generates a 4-bit vector representing the location of a point relative to
// the small circle's bounding box.
function code(lambda,phi){var r=smallRadius?radius:pi$3-radius,code=0;if(lambda<-r)code|=1;// left
else if(lambda>r)code|=2;// right
if(phi<-r)code|=4;// below
else if(phi>r)code|=8;// above
return code;}return clip(visible,clipLine,interpolate,smallRadius?[0,-radius]:[-pi$3,radius-pi$3]);}function clipLine(a,b,x0,y0,x1,y1){var ax=a[0],ay=a[1],bx=b[0],by=b[1],t0=0,t1=1,dx=bx-ax,dy=by-ay,r;r=x0-ax;if(!dx&&r>0)return;r/=dx;if(dx<0){if(r<t0)return;if(r<t1)t1=r;}else if(dx>0){if(r>t1)return;if(r>t0)t0=r;}r=x1-ax;if(!dx&&r<0)return;r/=dx;if(dx<0){if(r>t1)return;if(r>t0)t0=r;}else if(dx>0){if(r<t0)return;if(r<t1)t1=r;}r=y0-ay;if(!dy&&r>0)return;r/=dy;if(dy<0){if(r<t0)return;if(r<t1)t1=r;}else if(dy>0){if(r>t1)return;if(r>t0)t0=r;}r=y1-ay;if(!dy&&r<0)return;r/=dy;if(dy<0){if(r>t1)return;if(r>t0)t0=r;}else if(dy>0){if(r<t0)return;if(r<t1)t1=r;}if(t0>0)a[0]=ax+t0*dx,a[1]=ay+t0*dy;if(t1<1)b[0]=ax+t1*dx,b[1]=ay+t1*dy;return true;}var clipMax=1e9,clipMin=-clipMax;// TODO Use d3-polygon’s polygonContains here for the ring check?
// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?
function clipRectangle(x0,y0,x1,y1){function visible(x,y){return x0<=x&&x<=x1&&y0<=y&&y<=y1;}function interpolate(from,to,direction,stream){var a=0,a1=0;if(from==null||(a=corner(from,direction))!==(a1=corner(to,direction))||comparePoint(from,to)<0^direction>0){do{stream.point(a===0||a===3?x0:x1,a>1?y1:y0);}while((a=(a+direction+4)%4)!==a1);}else{stream.point(to[0],to[1]);}}function corner(p,direction){return abs(p[0]-x0)<epsilon$2?direction>0?0:3:abs(p[0]-x1)<epsilon$2?direction>0?2:1:abs(p[1]-y0)<epsilon$2?direction>0?1:0:direction>0?3:2;// abs(p[1] - y1) < epsilon
}function compareIntersection(a,b){return comparePoint(a.x,b.x);}function comparePoint(a,b){var ca=corner(a,1),cb=corner(b,1);return ca!==cb?ca-cb:ca===0?b[1]-a[1]:ca===1?a[0]-b[0]:ca===2?a[1]-b[1]:b[0]-a[0];}return function(stream){var activeStream=stream,bufferStream=clipBuffer(),segments,polygon,ring,x__,y__,v__,// first point
x_,y_,v_,// previous point
first,clean;var clipStream={point:point,lineStart:lineStart,lineEnd:lineEnd,polygonStart:polygonStart,polygonEnd:polygonEnd};function point(x,y){if(visible(x,y))activeStream.point(x,y);}function polygonInside(){var winding=0;for(var i=0,n=polygon.length;i<n;++i){for(var ring=polygon[i],j=1,m=ring.length,point=ring[0],a0,a1,b0=point[0],b1=point[1];j<m;++j){a0=b0,a1=b1,point=ring[j],b0=point[0],b1=point[1];if(a1<=y1){if(b1>y1&&(b0-a0)*(y1-a1)>(b1-a1)*(x0-a0))++winding;}else{if(b1<=y1&&(b0-a0)*(y1-a1)<(b1-a1)*(x0-a0))--winding;}}}return winding;}// Buffer geometry within a polygon and then clip it en masse.
function polygonStart(){activeStream=bufferStream,segments=[],polygon=[],clean=true;}function polygonEnd(){var startInside=polygonInside(),cleanInside=clean&&startInside,visible=(segments=merge(segments)).length;if(cleanInside||visible){stream.polygonStart();if(cleanInside){stream.lineStart();interpolate(null,null,1,stream);stream.lineEnd();}if(visible){clipRejoin(segments,compareIntersection,startInside,interpolate,stream);}stream.polygonEnd();}activeStream=stream,segments=polygon=ring=null;}function lineStart(){clipStream.point=linePoint;if(polygon)polygon.push(ring=[]);first=true;v_=false;x_=y_=NaN;}// TODO rather than special-case polygons, simply handle them separately.
// Ideally, coincident intersection points should be jittered to avoid
// clipping issues.
function lineEnd(){if(segments){linePoint(x__,y__);if(v__&&v_)bufferStream.rejoin();segments.push(bufferStream.result());}clipStream.point=point;if(v_)activeStream.lineEnd();}function linePoint(x,y){var v=visible(x,y);if(polygon)ring.push([x,y]);if(first){x__=x,y__=y,v__=v;first=false;if(v){activeStream.lineStart();activeStream.point(x,y);}}else{if(v&&v_)activeStream.point(x,y);else{var a=[x_=Math.max(clipMin,Math.min(clipMax,x_)),y_=Math.max(clipMin,Math.min(clipMax,y_))],b=[x=Math.max(clipMin,Math.min(clipMax,x)),y=Math.max(clipMin,Math.min(clipMax,y))];if(clipLine(a,b,x0,y0,x1,y1)){if(!v_){activeStream.lineStart();activeStream.point(a[0],a[1]);}activeStream.point(b[0],b[1]);if(!v)activeStream.lineEnd();clean=false;}else if(v){activeStream.lineStart();activeStream.point(x,y);clean=false;}}}x_=x,y_=y,v_=v;}return clipStream;};}function extent$1(){var x0=0,y0=0,x1=960,y1=500,cache,cacheStream,clip;return clip={stream:function stream(_stream){return cache&&cacheStream===_stream?cache:cache=clipRectangle(x0,y0,x1,y1)(cacheStream=_stream);},extent:function extent(_){return arguments.length?(x0=+_[0][0],y0=+_[0][1],x1=+_[1][0],y1=+_[1][1],cache=cacheStream=null,clip):[[x0,y0],[x1,y1]];}};}var lengthSum=adder(),lambda0$2,sinPhi0$1,cosPhi0$1;var lengthStream={sphere:noop$2,point:noop$2,lineStart:lengthLineStart,lineEnd:noop$2,polygonStart:noop$2,polygonEnd:noop$2};function lengthLineStart(){lengthStream.point=lengthPointFirst;lengthStream.lineEnd=lengthLineEnd;}function lengthLineEnd(){lengthStream.point=lengthStream.lineEnd=noop$2;}function lengthPointFirst(lambda,phi){lambda*=radians,phi*=radians;lambda0$2=lambda,sinPhi0$1=sin$1(phi),cosPhi0$1=cos$1(phi);lengthStream.point=lengthPoint;}function lengthPoint(lambda,phi){lambda*=radians,phi*=radians;var sinPhi=sin$1(phi),cosPhi=cos$1(phi),delta=abs(lambda-lambda0$2),cosDelta=cos$1(delta),sinDelta=sin$1(delta),x=cosPhi*sinDelta,y=cosPhi0$1*sinPhi-sinPhi0$1*cosPhi*cosDelta,z=sinPhi0$1*sinPhi+cosPhi0$1*cosPhi*cosDelta;lengthSum.add(atan2(sqrt(x*x+y*y),z));lambda0$2=lambda,sinPhi0$1=sinPhi,cosPhi0$1=cosPhi;}function length$1(object){lengthSum.reset();geoStream(object,lengthStream);return+lengthSum;}var coordinates=[null,null],object$1={type:"LineString",coordinates:coordinates};function distance(a,b){coordinates[0]=a;coordinates[1]=b;return length$1(object$1);}var containsObjectType={Feature:function Feature(object,point){return containsGeometry(object.geometry,point);},FeatureCollection:function FeatureCollection(object,point){var features=object.features,i=-1,n=features.length;while(++i<n){if(containsGeometry(features[i].geometry,point))return true;}return false;}};var containsGeometryType={Sphere:function Sphere(){return true;},Point:function Point(object,point){return containsPoint(object.coordinates,point);},MultiPoint:function MultiPoint(object,point){var coordinates=object.coordinates,i=-1,n=coordinates.length;while(++i<n){if(containsPoint(coordinates[i],point))return true;}return false;},LineString:function LineString(object,point){return containsLine(object.coordinates,point);},MultiLineString:function MultiLineString(object,point){var coordinates=object.coordinates,i=-1,n=coordinates.length;while(++i<n){if(containsLine(coordinates[i],point))return true;}return false;},Polygon:function Polygon(object,point){return containsPolygon(object.coordinates,point);},MultiPolygon:function MultiPolygon(object,point){var coordinates=object.coordinates,i=-1,n=coordinates.length;while(++i<n){if(containsPolygon(coordinates[i],point))return true;}return false;},GeometryCollection:function GeometryCollection(object,point){var geometries=object.geometries,i=-1,n=geometries.length;while(++i<n){if(containsGeometry(geometries[i],point))return true;}return false;}};function containsGeometry(geometry,point){return geometry&&containsGeometryType.hasOwnProperty(geometry.type)?containsGeometryType[geometry.type](geometry,point):false;}function containsPoint(coordinates,point){return distance(coordinates,point)===0;}function containsLine(coordinates,point){var ab=distance(coordinates[0],coordinates[1]),ao=distance(coordinates[0],point),ob=distance(point,coordinates[1]);return ao+ob<=ab+epsilon$2;}function containsPolygon(coordinates,point){return!!polygonContains(coordinates.map(ringRadians),pointRadians(point));}function ringRadians(ring){return ring=ring.map(pointRadians),ring.pop(),ring;}function pointRadians(point){return[point[0]*radians,point[1]*radians];}function contains$1(object,point){return(object&&containsObjectType.hasOwnProperty(object.type)?containsObjectType[object.type]:containsGeometry)(object,point);}function graticuleX(y0,y1,dy){var y=sequence(y0,y1-epsilon$2,dy).concat(y1);return function(x){return y.map(function(y){return[x,y];});};}function graticuleY(x0,x1,dx){var x=sequence(x0,x1-epsilon$2,dx).concat(x1);return function(y){return x.map(function(x){return[x,y];});};}function graticule(){var x1,x0,X1,X0,y1,y0,Y1,Y0,dx=10,dy=dx,DX=90,DY=360,x,y,X,Y,precision=2.5;function graticule(){return{type:"MultiLineString",coordinates:lines()};}function lines(){return sequence(ceil(X0/DX)*DX,X1,DX).map(X).concat(sequence(ceil(Y0/DY)*DY,Y1,DY).map(Y)).concat(sequence(ceil(x0/dx)*dx,x1,dx).filter(function(x){return abs(x%DX)>epsilon$2;}).map(x)).concat(sequence(ceil(y0/dy)*dy,y1,dy).filter(function(y){return abs(y%DY)>epsilon$2;}).map(y));}graticule.lines=function(){return lines().map(function(coordinates){return{type:"LineString",coordinates:coordinates};});};graticule.outline=function(){return{type:"Polygon",coordinates:[X(X0).concat(Y(Y1).slice(1),X(X1).reverse().slice(1),Y(Y0).reverse().slice(1))]};};graticule.extent=function(_){if(!arguments.length)return graticule.extentMinor();return graticule.extentMajor(_).extentMinor(_);};graticule.extentMajor=function(_){if(!arguments.length)return[[X0,Y0],[X1,Y1]];X0=+_[0][0],X1=+_[1][0];Y0=+_[0][1],Y1=+_[1][1];if(X0>X1)_=X0,X0=X1,X1=_;if(Y0>Y1)_=Y0,Y0=Y1,Y1=_;return graticule.precision(precision);};graticule.extentMinor=function(_){if(!arguments.length)return[[x0,y0],[x1,y1]];x0=+_[0][0],x1=+_[1][0];y0=+_[0][1],y1=+_[1][1];if(x0>x1)_=x0,x0=x1,x1=_;if(y0>y1)_=y0,y0=y1,y1=_;return graticule.precision(precision);};graticule.step=function(_){if(!arguments.length)return graticule.stepMinor();return graticule.stepMajor(_).stepMinor(_);};graticule.stepMajor=function(_){if(!arguments.length)return[DX,DY];DX=+_[0],DY=+_[1];return graticule;};graticule.stepMinor=function(_){if(!arguments.length)return[dx,dy];dx=+_[0],dy=+_[1];return graticule;};graticule.precision=function(_){if(!arguments.length)return precision;precision=+_;x=graticuleX(y0,y1,90);y=graticuleY(x0,x1,precision);X=graticuleX(Y0,Y1,90);Y=graticuleY(X0,X1,precision);return graticule;};return graticule.extentMajor([[-180,-90+epsilon$2],[180,90-epsilon$2]]).extentMinor([[-180,-80-epsilon$2],[180,80+epsilon$2]]);}function graticule10(){return graticule()();}function interpolate$1(a,b){var x0=a[0]*radians,y0=a[1]*radians,x1=b[0]*radians,y1=b[1]*radians,cy0=cos$1(y0),sy0=sin$1(y0),cy1=cos$1(y1),sy1=sin$1(y1),kx0=cy0*cos$1(x0),ky0=cy0*sin$1(x0),kx1=cy1*cos$1(x1),ky1=cy1*sin$1(x1),d=2*asin(sqrt(haversin(y1-y0)+cy0*cy1*haversin(x1-x0))),k=sin$1(d);var interpolate=d?function(t){var B=sin$1(t*=d)/k,A=sin$1(d-t)/k,x=A*kx0+B*kx1,y=A*ky0+B*ky1,z=A*sy0+B*sy1;return[atan2(y,x)*degrees$1,atan2(z,sqrt(x*x+y*y))*degrees$1];}:function(){return[x0*degrees$1,y0*degrees$1];};interpolate.distance=d;return interpolate;}function identity$4(x){return x;}var areaSum$1=adder(),areaRingSum$1=adder(),x00,y00,x0$1,y0$1;var areaStream$1={point:noop$2,lineStart:noop$2,lineEnd:noop$2,polygonStart:function polygonStart(){areaStream$1.lineStart=areaRingStart$1;areaStream$1.lineEnd=areaRingEnd$1;},polygonEnd:function polygonEnd(){areaStream$1.lineStart=areaStream$1.lineEnd=areaStream$1.point=noop$2;areaSum$1.add(abs(areaRingSum$1));areaRingSum$1.reset();},result:function result(){var area=areaSum$1/2;areaSum$1.reset();return area;}};function areaRingStart$1(){areaStream$1.point=areaPointFirst$1;}function areaPointFirst$1(x,y){areaStream$1.point=areaPoint$1;x00=x0$1=x,y00=y0$1=y;}function areaPoint$1(x,y){areaRingSum$1.add(y0$1*x-x0$1*y);x0$1=x,y0$1=y;}function areaRingEnd$1(){areaPoint$1(x00,y00);}var x0$2=Infinity,y0$2=x0$2,x1=-x0$2,y1=x1;var boundsStream$1={point:boundsPoint$1,lineStart:noop$2,lineEnd:noop$2,polygonStart:noop$2,polygonEnd:noop$2,result:function result(){var bounds=[[x0$2,y0$2],[x1,y1]];x1=y1=-(y0$2=x0$2=Infinity);return bounds;}};function boundsPoint$1(x,y){if(x<x0$2)x0$2=x;if(x>x1)x1=x;if(y<y0$2)y0$2=y;if(y>y1)y1=y;}// TODO Enforce positive area for exterior, negative area for interior?
var X0$1=0,Y0$1=0,Z0$1=0,X1$1=0,Y1$1=0,Z1$1=0,X2$1=0,Y2$1=0,Z2$1=0,x00$1,y00$1,x0$3,y0$3;var centroidStream$1={point:centroidPoint$1,lineStart:centroidLineStart$1,lineEnd:centroidLineEnd$1,polygonStart:function polygonStart(){centroidStream$1.lineStart=centroidRingStart$1;centroidStream$1.lineEnd=centroidRingEnd$1;},polygonEnd:function polygonEnd(){centroidStream$1.point=centroidPoint$1;centroidStream$1.lineStart=centroidLineStart$1;centroidStream$1.lineEnd=centroidLineEnd$1;},result:function result(){var centroid=Z2$1?[X2$1/Z2$1,Y2$1/Z2$1]:Z1$1?[X1$1/Z1$1,Y1$1/Z1$1]:Z0$1?[X0$1/Z0$1,Y0$1/Z0$1]:[NaN,NaN];X0$1=Y0$1=Z0$1=X1$1=Y1$1=Z1$1=X2$1=Y2$1=Z2$1=0;return centroid;}};function centroidPoint$1(x,y){X0$1+=x;Y0$1+=y;++Z0$1;}function centroidLineStart$1(){centroidStream$1.point=centroidPointFirstLine;}function centroidPointFirstLine(x,y){centroidStream$1.point=centroidPointLine;centroidPoint$1(x0$3=x,y0$3=y);}function centroidPointLine(x,y){var dx=x-x0$3,dy=y-y0$3,z=sqrt(dx*dx+dy*dy);X1$1+=z*(x0$3+x)/2;Y1$1+=z*(y0$3+y)/2;Z1$1+=z;centroidPoint$1(x0$3=x,y0$3=y);}function centroidLineEnd$1(){centroidStream$1.point=centroidPoint$1;}function centroidRingStart$1(){centroidStream$1.point=centroidPointFirstRing;}function centroidRingEnd$1(){centroidPointRing(x00$1,y00$1);}function centroidPointFirstRing(x,y){centroidStream$1.point=centroidPointRing;centroidPoint$1(x00$1=x0$3=x,y00$1=y0$3=y);}function centroidPointRing(x,y){var dx=x-x0$3,dy=y-y0$3,z=sqrt(dx*dx+dy*dy);X1$1+=z*(x0$3+x)/2;Y1$1+=z*(y0$3+y)/2;Z1$1+=z;z=y0$3*x-x0$3*y;X2$1+=z*(x0$3+x);Y2$1+=z*(y0$3+y);Z2$1+=z*3;centroidPoint$1(x0$3=x,y0$3=y);}function PathContext(context){this._context=context;}PathContext.prototype={_radius:4.5,pointRadius:function pointRadius(_){return this._radius=_,this;},polygonStart:function polygonStart(){this._line=0;},polygonEnd:function polygonEnd(){this._line=NaN;},lineStart:function lineStart(){this._point=0;},lineEnd:function lineEnd(){if(this._line===0)this._context.closePath();this._point=NaN;},point:function point(x,y){switch(this._point){case 0:{this._context.moveTo(x,y);this._point=1;break;}case 1:{this._context.lineTo(x,y);break;}default:{this._context.moveTo(x+this._radius,y);this._context.arc(x,y,this._radius,0,tau$3);break;}}},result:noop$2};var lengthSum$1=adder(),lengthRing,x00$2,y00$2,x0$4,y0$4;var lengthStream$1={point:noop$2,lineStart:function lineStart(){lengthStream$1.point=lengthPointFirst$1;},lineEnd:function lineEnd(){if(lengthRing)lengthPoint$1(x00$2,y00$2);lengthStream$1.point=noop$2;},polygonStart:function polygonStart(){lengthRing=true;},polygonEnd:function polygonEnd(){lengthRing=null;},result:function result(){var length=+lengthSum$1;lengthSum$1.reset();return length;}};function lengthPointFirst$1(x,y){lengthStream$1.point=lengthPoint$1;x00$2=x0$4=x,y00$2=y0$4=y;}function lengthPoint$1(x,y){x0$4-=x,y0$4-=y;lengthSum$1.add(sqrt(x0$4*x0$4+y0$4*y0$4));x0$4=x,y0$4=y;}function PathString(){this._string=[];}PathString.prototype={_radius:4.5,_circle:circle$1(4.5),pointRadius:function pointRadius(_){if((_=+_)!==this._radius)this._radius=_,this._circle=null;return this;},polygonStart:function polygonStart(){this._line=0;},polygonEnd:function polygonEnd(){this._line=NaN;},lineStart:function lineStart(){this._point=0;},lineEnd:function lineEnd(){if(this._line===0)this._string.push("Z");this._point=NaN;},point:function point(x,y){switch(this._point){case 0:{this._string.push("M",x,",",y);this._point=1;break;}case 1:{this._string.push("L",x,",",y);break;}default:{if(this._circle==null)this._circle=circle$1(this._radius);this._string.push("M",x,",",y,this._circle);break;}}},result:function result(){if(this._string.length){var result=this._string.join("");this._string=[];return result;}else{return null;}}};function circle$1(radius){return"m0,"+radius+"a"+radius+","+radius+" 0 1,1 0,"+-2*radius+"a"+radius+","+radius+" 0 1,1 0,"+2*radius+"z";}function index$1(projection,context){var pointRadius=4.5,projectionStream,contextStream;function path(object){if(object){if(typeof pointRadius==="function")contextStream.pointRadius(+pointRadius.apply(this,arguments));geoStream(object,projectionStream(contextStream));}return contextStream.result();}path.area=function(object){geoStream(object,projectionStream(areaStream$1));return areaStream$1.result();};path.measure=function(object){geoStream(object,projectionStream(lengthStream$1));return lengthStream$1.result();};path.bounds=function(object){geoStream(object,projectionStream(boundsStream$1));return boundsStream$1.result();};path.centroid=function(object){geoStream(object,projectionStream(centroidStream$1));return centroidStream$1.result();};path.projection=function(_){return arguments.length?(projectionStream=_==null?(projection=null,identity$4):(projection=_).stream,path):projection;};path.context=function(_){if(!arguments.length)return context;contextStream=_==null?(context=null,new PathString()):new PathContext(context=_);if(typeof pointRadius!=="function")contextStream.pointRadius(pointRadius);return path;};path.pointRadius=function(_){if(!arguments.length)return pointRadius;pointRadius=typeof _==="function"?_:(contextStream.pointRadius(+_),+_);return path;};return path.projection(projection).context(context);}function transform(methods){return{stream:transformer(methods)};}function transformer(methods){return function(stream){var s=new TransformStream();for(var key in methods){s[key]=methods[key];}s.stream=stream;return s;};}function TransformStream(){}TransformStream.prototype={constructor:TransformStream,point:function point(x,y){this.stream.point(x,y);},sphere:function sphere(){this.stream.sphere();},lineStart:function lineStart(){this.stream.lineStart();},lineEnd:function lineEnd(){this.stream.lineEnd();},polygonStart:function polygonStart(){this.stream.polygonStart();},polygonEnd:function polygonEnd(){this.stream.polygonEnd();}};function fit(projection,fitBounds,object){var clip=projection.clipExtent&&projection.clipExtent();projection.scale(150).translate([0,0]);if(clip!=null)projection.clipExtent(null);geoStream(object,projection.stream(boundsStream$1));fitBounds(boundsStream$1.result());if(clip!=null)projection.clipExtent(clip);return projection;}function _fitExtent(projection,extent,object){return fit(projection,function(b){var w=extent[1][0]-extent[0][0],h=extent[1][1]-extent[0][1],k=Math.min(w/(b[1][0]-b[0][0]),h/(b[1][1]-b[0][1])),x=+extent[0][0]+(w-k*(b[1][0]+b[0][0]))/2,y=+extent[0][1]+(h-k*(b[1][1]+b[0][1]))/2;projection.scale(150*k).translate([x,y]);},object);}function _fitSize(projection,size,object){return _fitExtent(projection,[[0,0],size],object);}function _fitWidth(projection,width,object){return fit(projection,function(b){var w=+width,k=w/(b[1][0]-b[0][0]),x=(w-k*(b[1][0]+b[0][0]))/2,y=-k*b[0][1];projection.scale(150*k).translate([x,y]);},object);}function _fitHeight(projection,height,object){return fit(projection,function(b){var h=+height,k=h/(b[1][1]-b[0][1]),x=-k*b[0][0],y=(h-k*(b[1][1]+b[0][1]))/2;projection.scale(150*k).translate([x,y]);},object);}var maxDepth=16,// maximum depth of subdivision
cosMinDistance=cos$1(30*radians);// cos(minimum angular distance)
function resample(project,delta2){return+delta2?resample$1(project,delta2):resampleNone(project);}function resampleNone(project){return transformer({point:function point(x,y){x=project(x,y);this.stream.point(x[0],x[1]);}});}function resample$1(project,delta2){function resampleLineTo(x0,y0,lambda0,a0,b0,c0,x1,y1,lambda1,a1,b1,c1,depth,stream){var dx=x1-x0,dy=y1-y0,d2=dx*dx+dy*dy;if(d2>4*delta2&&depth--){var a=a0+a1,b=b0+b1,c=c0+c1,m=sqrt(a*a+b*b+c*c),phi2=asin(c/=m),lambda2=abs(abs(c)-1)<epsilon$2||abs(lambda0-lambda1)<epsilon$2?(lambda0+lambda1)/2:atan2(b,a),p=project(lambda2,phi2),x2=p[0],y2=p[1],dx2=x2-x0,dy2=y2-y0,dz=dy*dx2-dx*dy2;if(dz*dz/d2>delta2// perpendicular projected distance
||abs((dx*dx2+dy*dy2)/d2-0.5)>0.3// midpoint close to an end
||a0*a1+b0*b1+c0*c1<cosMinDistance){// angular distance
resampleLineTo(x0,y0,lambda0,a0,b0,c0,x2,y2,lambda2,a/=m,b/=m,c,depth,stream);stream.point(x2,y2);resampleLineTo(x2,y2,lambda2,a,b,c,x1,y1,lambda1,a1,b1,c1,depth,stream);}}}return function(stream){var lambda00,x00,y00,a00,b00,c00,// first point
lambda0,x0,y0,a0,b0,c0;// previous point
var resampleStream={point:point,lineStart:lineStart,lineEnd:lineEnd,polygonStart:function polygonStart(){stream.polygonStart();resampleStream.lineStart=ringStart;},polygonEnd:function polygonEnd(){stream.polygonEnd();resampleStream.lineStart=lineStart;}};function point(x,y){x=project(x,y);stream.point(x[0],x[1]);}function lineStart(){x0=NaN;resampleStream.point=linePoint;stream.lineStart();}function linePoint(lambda,phi){var c=cartesian([lambda,phi]),p=project(lambda,phi);resampleLineTo(x0,y0,lambda0,a0,b0,c0,x0=p[0],y0=p[1],lambda0=lambda,a0=c[0],b0=c[1],c0=c[2],maxDepth,stream);stream.point(x0,y0);}function lineEnd(){resampleStream.point=point;stream.lineEnd();}function ringStart(){lineStart();resampleStream.point=ringPoint;resampleStream.lineEnd=ringEnd;}function ringPoint(lambda,phi){linePoint(lambda00=lambda,phi),x00=x0,y00=y0,a00=a0,b00=b0,c00=c0;resampleStream.point=linePoint;}function ringEnd(){resampleLineTo(x0,y0,lambda0,a0,b0,c0,x00,y00,lambda00,a00,b00,c00,maxDepth,stream);resampleStream.lineEnd=lineEnd;lineEnd();}return resampleStream;};}var transformRadians=transformer({point:function point(x,y){this.stream.point(x*radians,y*radians);}});function transformRotate(rotate){return transformer({point:function point(x,y){var r=rotate(x,y);return this.stream.point(r[0],r[1]);}});}function scaleTranslate(k,dx,dy){function transform$$1(x,y){return[dx+k*x,dy-k*y];}transform$$1.invert=function(x,y){return[(x-dx)/k,(dy-y)/k];};return transform$$1;}function scaleTranslateRotate(k,dx,dy,alpha){var cosAlpha=cos$1(alpha),sinAlpha=sin$1(alpha),a=cosAlpha*k,b=sinAlpha*k,ai=cosAlpha/k,bi=sinAlpha/k,ci=(sinAlpha*dy-cosAlpha*dx)/k,fi=(sinAlpha*dx+cosAlpha*dy)/k;function transform$$1(x,y){return[a*x-b*y+dx,dy-b*x-a*y];}transform$$1.invert=function(x,y){return[ai*x-bi*y+ci,fi-bi*x-ai*y];};return transform$$1;}function projection(project){return projectionMutator(function(){return project;})();}function projectionMutator(projectAt){var project,k=150,// scale
x=480,y=250,// translate
lambda=0,phi=0,// center
deltaLambda=0,deltaPhi=0,deltaGamma=0,rotate,// pre-rotate
alpha=0,// post-rotate
theta=null,preclip=clipAntimeridian,// pre-clip angle
x0=null,y0,x1,y1,postclip=identity$4,// post-clip extent
delta2=0.5,// precision
projectResample,projectTransform,projectRotateTransform,cache,cacheStream;function projection(point){return projectRotateTransform(point[0]*radians,point[1]*radians);}function invert(point){point=projectRotateTransform.invert(point[0],point[1]);return point&&[point[0]*degrees$1,point[1]*degrees$1];}projection.stream=function(stream){return cache&&cacheStream===stream?cache:cache=transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream=stream)))));};projection.preclip=function(_){return arguments.length?(preclip=_,theta=undefined,reset()):preclip;};projection.postclip=function(_){return arguments.length?(postclip=_,x0=y0=x1=y1=null,reset()):postclip;};projection.clipAngle=function(_){return arguments.length?(preclip=+_?clipCircle(theta=_*radians):(theta=null,clipAntimeridian),reset()):theta*degrees$1;};projection.clipExtent=function(_){return arguments.length?(postclip=_==null?(x0=y0=x1=y1=null,identity$4):clipRectangle(x0=+_[0][0],y0=+_[0][1],x1=+_[1][0],y1=+_[1][1]),reset()):x0==null?null:[[x0,y0],[x1,y1]];};projection.scale=function(_){return arguments.length?(k=+_,recenter()):k;};projection.translate=function(_){return arguments.length?(x=+_[0],y=+_[1],recenter()):[x,y];};projection.center=function(_){return arguments.length?(lambda=_[0]%360*radians,phi=_[1]%360*radians,recenter()):[lambda*degrees$1,phi*degrees$1];};projection.rotate=function(_){return arguments.length?(deltaLambda=_[0]%360*radians,deltaPhi=_[1]%360*radians,deltaGamma=_.length>2?_[2]%360*radians:0,recenter()):[deltaLambda*degrees$1,deltaPhi*degrees$1,deltaGamma*degrees$1];};projection.angle=function(_){return arguments.length?(alpha=_%360*radians,recenter()):alpha*degrees$1;};projection.precision=function(_){return arguments.length?(projectResample=resample(projectTransform,delta2=_*_),reset()):sqrt(delta2);};projection.fitExtent=function(extent,object){return _fitExtent(projection,extent,object);};projection.fitSize=function(size,object){return _fitSize(projection,size,object);};projection.fitWidth=function(width,object){return _fitWidth(projection,width,object);};projection.fitHeight=function(height,object){return _fitHeight(projection,height,object);};function recenter(){var center=scaleTranslateRotate(k,0,0,alpha).apply(null,project(lambda,phi)),transform$$1=(alpha?scaleTranslateRotate:scaleTranslate)(k,x-center[0],y-center[1],alpha);rotate=rotateRadians(deltaLambda,deltaPhi,deltaGamma);projectTransform=compose(project,transform$$1);projectRotateTransform=compose(rotate,projectTransform);projectResample=resample(projectTransform,delta2);return reset();}function reset(){cache=cacheStream=null;return projection;}return function(){project=projectAt.apply(this,arguments);projection.invert=project.invert&&invert;return recenter();};}function conicProjection(projectAt){var phi0=0,phi1=pi$3/3,m=projectionMutator(projectAt),p=m(phi0,phi1);p.parallels=function(_){return arguments.length?m(phi0=_[0]*radians,phi1=_[1]*radians):[phi0*degrees$1,phi1*degrees$1];};return p;}function cylindricalEqualAreaRaw(phi0){var cosPhi0=cos$1(phi0);function forward(lambda,phi){return[lambda*cosPhi0,sin$1(phi)/cosPhi0];}forward.invert=function(x,y){return[x/cosPhi0,asin(y*cosPhi0)];};return forward;}function conicEqualAreaRaw(y0,y1){var sy0=sin$1(y0),n=(sy0+sin$1(y1))/2;// Are the parallels symmetrical around the Equator?
if(abs(n)<epsilon$2)return cylindricalEqualAreaRaw(y0);var c=1+sy0*(2*n-sy0),r0=sqrt(c)/n;function project(x,y){var r=sqrt(c-2*n*sin$1(y))/n;return[r*sin$1(x*=n),r0-r*cos$1(x)];}project.invert=function(x,y){var r0y=r0-y;return[atan2(x,abs(r0y))/n*sign(r0y),asin((c-(x*x+r0y*r0y)*n*n)/(2*n))];};return project;}function conicEqualArea(){return conicProjection(conicEqualAreaRaw).scale(155.424).center([0,33.6442]);}function albers(){return conicEqualArea().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-0.6,38.7]);}// The projections must have mutually exclusive clip regions on the sphere,
// as this will avoid emitting interleaving lines and polygons.
function multiplex(streams){var n=streams.length;return{point:function point(x,y){var i=-1;while(++i<n){streams[i].point(x,y);}},sphere:function sphere(){var i=-1;while(++i<n){streams[i].sphere();}},lineStart:function lineStart(){var i=-1;while(++i<n){streams[i].lineStart();}},lineEnd:function lineEnd(){var i=-1;while(++i<n){streams[i].lineEnd();}},polygonStart:function polygonStart(){var i=-1;while(++i<n){streams[i].polygonStart();}},polygonEnd:function polygonEnd(){var i=-1;while(++i<n){streams[i].polygonEnd();}}};}// A composite projection for the United States, configured by default for
// 960×500. The projection also works quite well at 960×600 if you change the
// scale to 1285 and adjust the translate accordingly. The set of standard
// parallels for each region comes from USGS, which is published here:
// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
function albersUsa(){var cache,cacheStream,lower48=albers(),lower48Point,alaska=conicEqualArea().rotate([154,0]).center([-2,58.5]).parallels([55,65]),alaskaPoint,// EPSG:3338
hawaii=conicEqualArea().rotate([157,0]).center([-3,19.9]).parallels([8,18]),hawaiiPoint,// ESRI:102007
_point,pointStream={point:function point(x,y){_point=[x,y];}};function albersUsa(coordinates){var x=coordinates[0],y=coordinates[1];return _point=null,(lower48Point.point(x,y),_point)||(alaskaPoint.point(x,y),_point)||(hawaiiPoint.point(x,y),_point);}albersUsa.invert=function(coordinates){var k=lower48.scale(),t=lower48.translate(),x=(coordinates[0]-t[0])/k,y=(coordinates[1]-t[1])/k;return(y>=0.120&&y<0.234&&x>=-0.425&&x<-0.214?alaska:y>=0.166&&y<0.234&&x>=-0.214&&x<-0.115?hawaii:lower48).invert(coordinates);};albersUsa.stream=function(stream){return cache&&cacheStream===stream?cache:cache=multiplex([lower48.stream(cacheStream=stream),alaska.stream(stream),hawaii.stream(stream)]);};albersUsa.precision=function(_){if(!arguments.length)return lower48.precision();lower48.precision(_),alaska.precision(_),hawaii.precision(_);return reset();};albersUsa.scale=function(_){if(!arguments.length)return lower48.scale();lower48.scale(_),alaska.scale(_*0.35),hawaii.scale(_);return albersUsa.translate(lower48.translate());};albersUsa.translate=function(_){if(!arguments.length)return lower48.translate();var k=lower48.scale(),x=+_[0],y=+_[1];lower48Point=lower48.translate(_).clipExtent([[x-0.455*k,y-0.238*k],[x+0.455*k,y+0.238*k]]).stream(pointStream);alaskaPoint=alaska.translate([x-0.307*k,y+0.201*k]).clipExtent([[x-0.425*k+epsilon$2,y+0.120*k+epsilon$2],[x-0.214*k-epsilon$2,y+0.234*k-epsilon$2]]).stream(pointStream);hawaiiPoint=hawaii.translate([x-0.205*k,y+0.212*k]).clipExtent([[x-0.214*k+epsilon$2,y+0.166*k+epsilon$2],[x-0.115*k-epsilon$2,y+0.234*k-epsilon$2]]).stream(pointStream);return reset();};albersUsa.fitExtent=function(extent,object){return _fitExtent(albersUsa,extent,object);};albersUsa.fitSize=function(size,object){return _fitSize(albersUsa,size,object);};albersUsa.fitWidth=function(width,object){return _fitWidth(albersUsa,width,object);};albersUsa.fitHeight=function(height,object){return _fitHeight(albersUsa,height,object);};function reset(){cache=cacheStream=null;return albersUsa;}return albersUsa.scale(1070);}function azimuthalRaw(scale){return function(x,y){var cx=cos$1(x),cy=cos$1(y),k=scale(cx*cy);return[k*cy*sin$1(x),k*sin$1(y)];};}function azimuthalInvert(angle){return function(x,y){var z=sqrt(x*x+y*y),c=angle(z),sc=sin$1(c),cc=cos$1(c);return[atan2(x*sc,z*cc),asin(z&&y*sc/z)];};}var azimuthalEqualAreaRaw=azimuthalRaw(function(cxcy){return sqrt(2/(1+cxcy));});azimuthalEqualAreaRaw.invert=azimuthalInvert(function(z){return 2*asin(z/2);});function azimuthalEqualArea(){return projection(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180-1e-3);}var azimuthalEquidistantRaw=azimuthalRaw(function(c){return(c=acos(c))&&c/sin$1(c);});azimuthalEquidistantRaw.invert=azimuthalInvert(function(z){return z;});function azimuthalEquidistant(){return projection(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180-1e-3);}function mercatorRaw(lambda,phi){return[lambda,log(tan((halfPi$2+phi)/2))];}mercatorRaw.invert=function(x,y){return[x,2*atan(exp(y))-halfPi$2];};function mercator(){return mercatorProjection(mercatorRaw).scale(961/tau$3);}function mercatorProjection(project){var m=projection(project),center=m.center,scale=m.scale,translate=m.translate,clipExtent=m.clipExtent,x0=null,y0,x1,y1;// clip extent
m.scale=function(_){return arguments.length?(scale(_),reclip()):scale();};m.translate=function(_){return arguments.length?(translate(_),reclip()):translate();};m.center=function(_){return arguments.length?(center(_),reclip()):center();};m.clipExtent=function(_){return arguments.length?(_==null?x0=y0=x1=y1=null:(x0=+_[0][0],y0=+_[0][1],x1=+_[1][0],y1=+_[1][1]),reclip()):x0==null?null:[[x0,y0],[x1,y1]];};function reclip(){var k=pi$3*scale(),t=m(rotation(m.rotate()).invert([0,0]));return clipExtent(x0==null?[[t[0]-k,t[1]-k],[t[0]+k,t[1]+k]]:project===mercatorRaw?[[Math.max(t[0]-k,x0),y0],[Math.min(t[0]+k,x1),y1]]:[[x0,Math.max(t[1]-k,y0)],[x1,Math.min(t[1]+k,y1)]]);}return reclip();}function tany(y){return tan((halfPi$2+y)/2);}function conicConformalRaw(y0,y1){var cy0=cos$1(y0),n=y0===y1?sin$1(y0):log(cy0/cos$1(y1))/log(tany(y1)/tany(y0)),f=cy0*pow(tany(y0),n)/n;if(!n)return mercatorRaw;function project(x,y){if(f>0){if(y<-halfPi$2+epsilon$2)y=-halfPi$2+epsilon$2;}else{if(y>halfPi$2-epsilon$2)y=halfPi$2-epsilon$2;}var r=f/pow(tany(y),n);return[r*sin$1(n*x),f-r*cos$1(n*x)];}project.invert=function(x,y){var fy=f-y,r=sign(n)*sqrt(x*x+fy*fy);return[atan2(x,abs(fy))/n*sign(fy),2*atan(pow(f/r,1/n))-halfPi$2];};return project;}function conicConformal(){return conicProjection(conicConformalRaw).scale(109.5).parallels([30,30]);}function equirectangularRaw(lambda,phi){return[lambda,phi];}equirectangularRaw.invert=equirectangularRaw;function equirectangular(){return projection(equirectangularRaw).scale(152.63);}function conicEquidistantRaw(y0,y1){var cy0=cos$1(y0),n=y0===y1?sin$1(y0):(cy0-cos$1(y1))/(y1-y0),g=cy0/n+y0;if(abs(n)<epsilon$2)return equirectangularRaw;function project(x,y){var gy=g-y,nx=n*x;return[gy*sin$1(nx),g-gy*cos$1(nx)];}project.invert=function(x,y){var gy=g-y;return[atan2(x,abs(gy))/n*sign(gy),g-sign(n)*sqrt(x*x+gy*gy)];};return project;}function conicEquidistant(){return conicProjection(conicEquidistantRaw).scale(131.154).center([0,13.9389]);}var A1=1.340264,A2=-0.081106,A3=0.000893,A4=0.003796,M=sqrt(3)/2,iterations=12;function equalEarthRaw(lambda,phi){var l=asin(M*sin$1(phi)),l2=l*l,l6=l2*l2*l2;return[lambda*cos$1(l)/(M*(A1+3*A2*l2+l6*(7*A3+9*A4*l2))),l*(A1+A2*l2+l6*(A3+A4*l2))];}equalEarthRaw.invert=function(x,y){var l=y,l2=l*l,l6=l2*l2*l2;for(var i=0,delta,fy,fpy;i<iterations;++i){fy=l*(A1+A2*l2+l6*(A3+A4*l2))-y;fpy=A1+3*A2*l2+l6*(7*A3+9*A4*l2);l-=delta=fy/fpy,l2=l*l,l6=l2*l2*l2;if(abs(delta)<epsilon2$1)break;}return[M*x*(A1+3*A2*l2+l6*(7*A3+9*A4*l2))/cos$1(l),asin(sin$1(l)/M)];};function equalEarth(){return projection(equalEarthRaw).scale(177.158);}function gnomonicRaw(x,y){var cy=cos$1(y),k=cos$1(x)*cy;return[cy*sin$1(x)/k,sin$1(y)/k];}gnomonicRaw.invert=azimuthalInvert(atan);function gnomonic(){return projection(gnomonicRaw).scale(144.049).clipAngle(60);}function scaleTranslate$1(kx,ky,tx,ty){return kx===1&&ky===1&&tx===0&&ty===0?identity$4:transformer({point:function point(x,y){this.stream.point(x*kx+tx,y*ky+ty);}});}function identity$5(){var k=1,tx=0,ty=0,sx=1,sy=1,transform$$1=identity$4,// scale, translate and reflect
x0=null,y0,x1,y1,// clip extent
_postclip=identity$4,cache,cacheStream,projection;function reset(){cache=cacheStream=null;return projection;}return projection={stream:function stream(_stream2){return cache&&cacheStream===_stream2?cache:cache=transform$$1(_postclip(cacheStream=_stream2));},postclip:function postclip(_){return arguments.length?(_postclip=_,x0=y0=x1=y1=null,reset()):_postclip;},clipExtent:function clipExtent(_){return arguments.length?(_postclip=_==null?(x0=y0=x1=y1=null,identity$4):clipRectangle(x0=+_[0][0],y0=+_[0][1],x1=+_[1][0],y1=+_[1][1]),reset()):x0==null?null:[[x0,y0],[x1,y1]];},scale:function scale(_){return arguments.length?(transform$$1=scaleTranslate$1((k=+_)*sx,k*sy,tx,ty),reset()):k;},translate:function translate(_){return arguments.length?(transform$$1=scaleTranslate$1(k*sx,k*sy,tx=+_[0],ty=+_[1]),reset()):[tx,ty];},reflectX:function reflectX(_){return arguments.length?(transform$$1=scaleTranslate$1(k*(sx=_?-1:1),k*sy,tx,ty),reset()):sx<0;},reflectY:function reflectY(_){return arguments.length?(transform$$1=scaleTranslate$1(k*sx,k*(sy=_?-1:1),tx,ty),reset()):sy<0;},fitExtent:function fitExtent(extent,object){return _fitExtent(projection,extent,object);},fitSize:function fitSize(size,object){return _fitSize(projection,size,object);},fitWidth:function fitWidth(width,object){return _fitWidth(projection,width,object);},fitHeight:function fitHeight(height,object){return _fitHeight(projection,height,object);}};}function naturalEarth1Raw(lambda,phi){var phi2=phi*phi,phi4=phi2*phi2;return[lambda*(0.8707-0.131979*phi2+phi4*(-0.013791+phi4*(0.003971*phi2-0.001529*phi4))),phi*(1.007226+phi2*(0.015085+phi4*(-0.044475+0.028874*phi2-0.005916*phi4)))];}naturalEarth1Raw.invert=function(x,y){var phi=y,i=25,delta;do{var phi2=phi*phi,phi4=phi2*phi2;phi-=delta=(phi*(1.007226+phi2*(0.015085+phi4*(-0.044475+0.028874*phi2-0.005916*phi4)))-y)/(1.007226+phi2*(0.015085*3+phi4*(-0.044475*7+0.028874*9*phi2-0.005916*11*phi4)));}while(abs(delta)>epsilon$2&&--i>0);return[x/(0.8707+(phi2=phi*phi)*(-0.131979+phi2*(-0.013791+phi2*phi2*phi2*(0.003971-0.001529*phi2)))),phi];};function naturalEarth1(){return projection(naturalEarth1Raw).scale(175.295);}function orthographicRaw(x,y){return[cos$1(y)*sin$1(x),sin$1(y)];}orthographicRaw.invert=azimuthalInvert(asin);function orthographic(){return projection(orthographicRaw).scale(249.5).clipAngle(90+epsilon$2);}function stereographicRaw(x,y){var cy=cos$1(y),k=1+cos$1(x)*cy;return[cy*sin$1(x)/k,sin$1(y)/k];}stereographicRaw.invert=azimuthalInvert(function(z){return 2*atan(z);});function stereographic(){return projection(stereographicRaw).scale(250).clipAngle(142);}function transverseMercatorRaw(lambda,phi){return[log(tan((halfPi$2+phi)/2)),-lambda];}transverseMercatorRaw.invert=function(x,y){return[-y,2*atan(exp(x))-halfPi$2];};function transverseMercator(){var m=mercatorProjection(transverseMercatorRaw),center=m.center,rotate=m.rotate;m.center=function(_){return arguments.length?center([-_[1],_[0]]):(_=center(),[_[1],-_[0]]);};m.rotate=function(_){return arguments.length?rotate([_[0],_[1],_.length>2?_[2]+90:90]):(_=rotate(),[_[0],_[1],_[2]-90]);};return rotate([0,0,90]).scale(159.155);}function defaultSeparation(a,b){return a.parent===b.parent?1:2;}function meanX(children){return children.reduce(meanXReduce,0)/children.length;}function meanXReduce(x,c){return x+c.x;}function maxY(children){return 1+children.reduce(maxYReduce,0);}function maxYReduce(y,c){return Math.max(y,c.y);}function leafLeft(node){var children;while(children=node.children){node=children[0];}return node;}function leafRight(node){var children;while(children=node.children){node=children[children.length-1];}return node;}function cluster(){var separation=defaultSeparation,dx=1,dy=1,nodeSize=false;function cluster(root){var previousNode,x=0;// First walk, computing the initial x & y values.
root.eachAfter(function(node){var children=node.children;if(children){node.x=meanX(children);node.y=maxY(children);}else{node.x=previousNode?x+=separation(node,previousNode):0;node.y=0;previousNode=node;}});var left=leafLeft(root),right=leafRight(root),x0=left.x-separation(left,right)/2,x1=right.x+separation(right,left)/2;// Second walk, normalizing x & y to the desired size.
return root.eachAfter(nodeSize?function(node){node.x=(node.x-root.x)*dx;node.y=(root.y-node.y)*dy;}:function(node){node.x=(node.x-x0)/(x1-x0)*dx;node.y=(1-(root.y?node.y/root.y:1))*dy;});}cluster.separation=function(x){return arguments.length?(separation=x,cluster):separation;};cluster.size=function(x){return arguments.length?(nodeSize=false,dx=+x[0],dy=+x[1],cluster):nodeSize?null:[dx,dy];};cluster.nodeSize=function(x){return arguments.length?(nodeSize=true,dx=+x[0],dy=+x[1],cluster):nodeSize?[dx,dy]:null;};return cluster;}function count(node){var sum=0,children=node.children,i=children&&children.length;if(!i)sum=1;else while(--i>=0){sum+=children[i].value;}node.value=sum;}function node_count(){return this.eachAfter(count);}function node_each(callback){var node=this,current,next=[node],children,i,n;do{current=next.reverse(),next=[];while(node=current.pop()){callback(node),children=node.children;if(children)for(i=0,n=children.length;i<n;++i){next.push(children[i]);}}}while(next.length);return this;}function node_eachBefore(callback){var node=this,nodes=[node],children,i;while(node=nodes.pop()){callback(node),children=node.children;if(children)for(i=children.length-1;i>=0;--i){nodes.push(children[i]);}}return this;}function node_eachAfter(callback){var node=this,nodes=[node],next=[],children,i,n;while(node=nodes.pop()){next.push(node),children=node.children;if(children)for(i=0,n=children.length;i<n;++i){nodes.push(children[i]);}}while(node=next.pop()){callback(node);}return this;}function node_sum(value){return this.eachAfter(function(node){var sum=+value(node.data)||0,children=node.children,i=children&&children.length;while(--i>=0){sum+=children[i].value;}node.value=sum;});}function node_sort(compare){return this.eachBefore(function(node){if(node.children){node.children.sort(compare);}});}function node_path(end){var start=this,ancestor=leastCommonAncestor(start,end),nodes=[start];while(start!==ancestor){start=start.parent;nodes.push(start);}var k=nodes.length;while(end!==ancestor){nodes.splice(k,0,end);end=end.parent;}return nodes;}function leastCommonAncestor(a,b){if(a===b)return a;var aNodes=a.ancestors(),bNodes=b.ancestors(),c=null;a=aNodes.pop();b=bNodes.pop();while(a===b){c=a;a=aNodes.pop();b=bNodes.pop();}return c;}function node_ancestors(){var node=this,nodes=[node];while(node=node.parent){nodes.push(node);}return nodes;}function node_descendants(){var nodes=[];this.each(function(node){nodes.push(node);});return nodes;}function node_leaves(){var leaves=[];this.eachBefore(function(node){if(!node.children){leaves.push(node);}});return leaves;}function node_links(){var root=this,links=[];root.each(function(node){if(node!==root){// Don’t include the root’s parent, if any.
links.push({source:node.parent,target:node});}});return links;}function hierarchy(data,children){var root=new Node(data),valued=+data.value&&(root.value=data.value),node,nodes=[root],child,childs,i,n;if(children==null)children=defaultChildren;while(node=nodes.pop()){if(valued)node.value=+node.data.value;if((childs=children(node.data))&&(n=childs.length)){node.children=new Array(n);for(i=n-1;i>=0;--i){nodes.push(child=node.children[i]=new Node(childs[i]));child.parent=node;child.depth=node.depth+1;}}}return root.eachBefore(computeHeight);}function node_copy(){return hierarchy(this).eachBefore(copyData);}function defaultChildren(d){return d.children;}function copyData(node){node.data=node.data.data;}function computeHeight(node){var height=0;do{node.height=height;}while((node=node.parent)&&node.height<++height);}function Node(data){this.data=data;this.depth=this.height=0;this.parent=null;}Node.prototype=hierarchy.prototype={constructor:Node,count:node_count,each:node_each,eachAfter:node_eachAfter,eachBefore:node_eachBefore,sum:node_sum,sort:node_sort,path:node_path,ancestors:node_ancestors,descendants:node_descendants,leaves:node_leaves,links:node_links,copy:node_copy};var slice$4=Array.prototype.slice;function shuffle$1(array){var m=array.length,t,i;while(m){i=Math.random()*m--|0;t=array[m];array[m]=array[i];array[i]=t;}return array;}function enclose(circles){var i=0,n=(circles=shuffle$1(slice$4.call(circles))).length,B=[],p,e;while(i<n){p=circles[i];if(e&&enclosesWeak(e,p))++i;else e=encloseBasis(B=extendBasis(B,p)),i=0;}return e;}function extendBasis(B,p){var i,j;if(enclosesWeakAll(p,B))return[p];// If we get here then B must have at least one element.
for(i=0;i<B.length;++i){if(enclosesNot(p,B[i])&&enclosesWeakAll(encloseBasis2(B[i],p),B)){return[B[i],p];}}// If we get here then B must have at least two elements.
for(i=0;i<B.length-1;++i){for(j=i+1;j<B.length;++j){if(enclosesNot(encloseBasis2(B[i],B[j]),p)&&enclosesNot(encloseBasis2(B[i],p),B[j])&&enclosesNot(encloseBasis2(B[j],p),B[i])&&enclosesWeakAll(encloseBasis3(B[i],B[j],p),B)){return[B[i],B[j],p];}}}// If we get here then something is very wrong.
throw new Error();}function enclosesNot(a,b){var dr=a.r-b.r,dx=b.x-a.x,dy=b.y-a.y;return dr<0||dr*dr<dx*dx+dy*dy;}function enclosesWeak(a,b){var dr=a.r-b.r+1e-6,dx=b.x-a.x,dy=b.y-a.y;return dr>0&&dr*dr>dx*dx+dy*dy;}function enclosesWeakAll(a,B){for(var i=0;i<B.length;++i){if(!enclosesWeak(a,B[i])){return false;}}return true;}function encloseBasis(B){switch(B.length){case 1:return encloseBasis1(B[0]);case 2:return encloseBasis2(B[0],B[1]);case 3:return encloseBasis3(B[0],B[1],B[2]);}}function encloseBasis1(a){return{x:a.x,y:a.y,r:a.r};}function encloseBasis2(a,b){var x1=a.x,y1=a.y,r1=a.r,x2=b.x,y2=b.y,r2=b.r,x21=x2-x1,y21=y2-y1,r21=r2-r1,l=Math.sqrt(x21*x21+y21*y21);return{x:(x1+x2+x21/l*r21)/2,y:(y1+y2+y21/l*r21)/2,r:(l+r1+r2)/2};}function encloseBasis3(a,b,c){var x1=a.x,y1=a.y,r1=a.r,x2=b.x,y2=b.y,r2=b.r,x3=c.x,y3=c.y,r3=c.r,a2=x1-x2,a3=x1-x3,b2=y1-y2,b3=y1-y3,c2=r2-r1,c3=r3-r1,d1=x1*x1+y1*y1-r1*r1,d2=d1-x2*x2-y2*y2+r2*r2,d3=d1-x3*x3-y3*y3+r3*r3,ab=a3*b2-a2*b3,xa=(b2*d3-b3*d2)/(ab*2)-x1,xb=(b3*c2-b2*c3)/ab,ya=(a3*d2-a2*d3)/(ab*2)-y1,yb=(a2*c3-a3*c2)/ab,A=xb*xb+yb*yb-1,B=2*(r1+xa*xb+ya*yb),C=xa*xa+ya*ya-r1*r1,r=-(A?(B+Math.sqrt(B*B-4*A*C))/(2*A):C/B);return{x:x1+xa+xb*r,y:y1+ya+yb*r,r:r};}function place(b,a,c){var dx=b.x-a.x,x,a2,dy=b.y-a.y,y,b2,d2=dx*dx+dy*dy;if(d2){a2=a.r+c.r,a2*=a2;b2=b.r+c.r,b2*=b2;if(a2>b2){x=(d2+b2-a2)/(2*d2);y=Math.sqrt(Math.max(0,b2/d2-x*x));c.x=b.x-x*dx-y*dy;c.y=b.y-x*dy+y*dx;}else{x=(d2+a2-b2)/(2*d2);y=Math.sqrt(Math.max(0,a2/d2-x*x));c.x=a.x+x*dx-y*dy;c.y=a.y+x*dy+y*dx;}}else{c.x=a.x+c.r;c.y=a.y;}}function intersects(a,b){var dr=a.r+b.r-1e-6,dx=b.x-a.x,dy=b.y-a.y;return dr>0&&dr*dr>dx*dx+dy*dy;}function score(node){var a=node._,b=node.next._,ab=a.r+b.r,dx=(a.x*b.r+b.x*a.r)/ab,dy=(a.y*b.r+b.y*a.r)/ab;return dx*dx+dy*dy;}function Node$1(circle){this._=circle;this.next=null;this.previous=null;}function packEnclose(circles){if(!(n=circles.length))return 0;var a,b,c,n,aa,ca,i,j,k,sj,sk;// Place the first circle.
a=circles[0],a.x=0,a.y=0;if(!(n>1))return a.r;// Place the second circle.
b=circles[1],a.x=-b.r,b.x=a.r,b.y=0;if(!(n>2))return a.r+b.r;// Place the third circle.
place(b,a,c=circles[2]);// Initialize the front-chain using the first three circles a, b and c.
a=new Node$1(a),b=new Node$1(b),c=new Node$1(c);a.next=c.previous=b;b.next=a.previous=c;c.next=b.previous=a;// Attempt to place each remaining circle…
pack:for(i=3;i<n;++i){place(a._,b._,c=circles[i]),c=new Node$1(c);// Find the closest intersecting circle on the front-chain, if any.
// “Closeness” is determined by linear distance along the front-chain.
// “Ahead” or “behind” is likewise determined by linear distance.
j=b.next,k=a.previous,sj=b._.r,sk=a._.r;do{if(sj<=sk){if(intersects(j._,c._)){b=j,a.next=b,b.previous=a,--i;continue pack;}sj+=j._.r,j=j.next;}else{if(intersects(k._,c._)){a=k,a.next=b,b.previous=a,--i;continue pack;}sk+=k._.r,k=k.previous;}}while(j!==k.next);// Success! Insert the new circle c between a and b.
c.previous=a,c.next=b,a.next=b.previous=b=c;// Compute the new closest circle pair to the centroid.
aa=score(a);while((c=c.next)!==b){if((ca=score(c))<aa){a=c,aa=ca;}}b=a.next;}// Compute the enclosing circle of the front chain.
a=[b._],c=b;while((c=c.next)!==b){a.push(c._);}c=enclose(a);// Translate the circles to put the enclosing circle around the origin.
for(i=0;i<n;++i){a=circles[i],a.x-=c.x,a.y-=c.y;}return c.r;}function siblings(circles){packEnclose(circles);return circles;}function optional(f){return f==null?null:required(f);}function required(f){if(typeof f!=="function")throw new Error();return f;}function constantZero(){return 0;}function constant$9(x){return function(){return x;};}function defaultRadius$1(d){return Math.sqrt(d.value);}function index$2(){var radius=null,dx=1,dy=1,padding=constantZero;function pack(root){root.x=dx/2,root.y=dy/2;if(radius){root.eachBefore(radiusLeaf(radius)).eachAfter(packChildren(padding,0.5)).eachBefore(translateChild(1));}else{root.eachBefore(radiusLeaf(defaultRadius$1)).eachAfter(packChildren(constantZero,1)).eachAfter(packChildren(padding,root.r/Math.min(dx,dy))).eachBefore(translateChild(Math.min(dx,dy)/(2*root.r)));}return root;}pack.radius=function(x){return arguments.length?(radius=optional(x),pack):radius;};pack.size=function(x){return arguments.length?(dx=+x[0],dy=+x[1],pack):[dx,dy];};pack.padding=function(x){return arguments.length?(padding=typeof x==="function"?x:constant$9(+x),pack):padding;};return pack;}function radiusLeaf(radius){return function(node){if(!node.children){node.r=Math.max(0,+radius(node)||0);}};}function packChildren(padding,k){return function(node){if(children=node.children){var children,i,n=children.length,r=padding(node)*k||0,e;if(r)for(i=0;i<n;++i){children[i].r+=r;}e=packEnclose(children);if(r)for(i=0;i<n;++i){children[i].r-=r;}node.r=e+r;}};}function translateChild(k){return function(node){var parent=node.parent;node.r*=k;if(parent){node.x=parent.x+k*node.x;node.y=parent.y+k*node.y;}};}function roundNode(node){node.x0=Math.round(node.x0);node.y0=Math.round(node.y0);node.x1=Math.round(node.x1);node.y1=Math.round(node.y1);}function treemapDice(parent,x0,y0,x1,y1){var nodes=parent.children,node,i=-1,n=nodes.length,k=parent.value&&(x1-x0)/parent.value;while(++i<n){node=nodes[i],node.y0=y0,node.y1=y1;node.x0=x0,node.x1=x0+=node.value*k;}}function partition(){var dx=1,dy=1,padding=0,round=false;function partition(root){var n=root.height+1;root.x0=root.y0=padding;root.x1=dx;root.y1=dy/n;root.eachBefore(positionNode(dy,n));if(round)root.eachBefore(roundNode);return root;}function positionNode(dy,n){return function(node){if(node.children){treemapDice(node,node.x0,dy*(node.depth+1)/n,node.x1,dy*(node.depth+2)/n);}var x0=node.x0,y0=node.y0,x1=node.x1-padding,y1=node.y1-padding;if(x1<x0)x0=x1=(x0+x1)/2;if(y1<y0)y0=y1=(y0+y1)/2;node.x0=x0;node.y0=y0;node.x1=x1;node.y1=y1;};}partition.round=function(x){return arguments.length?(round=!!x,partition):round;};partition.size=function(x){return arguments.length?(dx=+x[0],dy=+x[1],partition):[dx,dy];};partition.padding=function(x){return arguments.length?(padding=+x,partition):padding;};return partition;}var keyPrefix$1="$",// Protect against keys like “__proto__”.
preroot={depth:-1},ambiguous={};function defaultId(d){return d.id;}function defaultParentId(d){return d.parentId;}function stratify(){var id=defaultId,parentId=defaultParentId;function stratify(data){var d,i,n=data.length,root,parent,node,nodes=new Array(n),nodeId,nodeKey,nodeByKey={};for(i=0;i<n;++i){d=data[i],node=nodes[i]=new Node(d);if((nodeId=id(d,i,data))!=null&&(nodeId+="")){nodeKey=keyPrefix$1+(node.id=nodeId);nodeByKey[nodeKey]=nodeKey in nodeByKey?ambiguous:node;}}for(i=0;i<n;++i){node=nodes[i],nodeId=parentId(data[i],i,data);if(nodeId==null||!(nodeId+="")){if(root)throw new Error("multiple roots");root=node;}else{parent=nodeByKey[keyPrefix$1+nodeId];if(!parent)throw new Error("missing: "+nodeId);if(parent===ambiguous)throw new Error("ambiguous: "+nodeId);if(parent.children)parent.children.push(node);else parent.children=[node];node.parent=parent;}}if(!root)throw new Error("no root");root.parent=preroot;root.eachBefore(function(node){node.depth=node.parent.depth+1;--n;}).eachBefore(computeHeight);root.parent=null;if(n>0)throw new Error("cycle");return root;}stratify.id=function(x){return arguments.length?(id=required(x),stratify):id;};stratify.parentId=function(x){return arguments.length?(parentId=required(x),stratify):parentId;};return stratify;}function defaultSeparation$1(a,b){return a.parent===b.parent?1:2;}// function radialSeparation(a, b) {
//   return (a.parent === b.parent ? 1 : 2) / a.depth;
// }
// This function is used to traverse the left contour of a subtree (or
// subforest). It returns the successor of v on this contour. This successor is
// either given by the leftmost child of v or by the thread of v. The function
// returns null if and only if v is on the highest level of its subtree.
function nextLeft(v){var children=v.children;return children?children[0]:v.t;}// This function works analogously to nextLeft.
function nextRight(v){var children=v.children;return children?children[children.length-1]:v.t;}// Shifts the current subtree rooted at w+. This is done by increasing
// prelim(w+) and mod(w+) by shift.
function moveSubtree(wm,wp,shift){var change=shift/(wp.i-wm.i);wp.c-=change;wp.s+=shift;wm.c+=change;wp.z+=shift;wp.m+=shift;}// All other shifts, applied to the smaller subtrees between w- and w+, are
// performed by this function. To prepare the shifts, we have to adjust
// change(w+), shift(w+), and change(w-).
function executeShifts(v){var shift=0,change=0,children=v.children,i=children.length,w;while(--i>=0){w=children[i];w.z+=shift;w.m+=shift;shift+=w.s+(change+=w.c);}}// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
// returns the specified (default) ancestor.
function nextAncestor(vim,v,ancestor){return vim.a.parent===v.parent?vim.a:ancestor;}function TreeNode(node,i){this._=node;this.parent=null;this.children=null;this.A=null;// default ancestor
this.a=this;// ancestor
this.z=0;// prelim
this.m=0;// mod
this.c=0;// change
this.s=0;// shift
this.t=null;// thread
this.i=i;// number
}TreeNode.prototype=Object.create(Node.prototype);function treeRoot(root){var tree=new TreeNode(root,0),node,nodes=[tree],child,children,i,n;while(node=nodes.pop()){if(children=node._.children){node.children=new Array(n=children.length);for(i=n-1;i>=0;--i){nodes.push(child=node.children[i]=new TreeNode(children[i],i));child.parent=node;}}}(tree.parent=new TreeNode(null,0)).children=[tree];return tree;}// Node-link tree diagram using the Reingold-Tilford "tidy" algorithm
function tree(){var separation=defaultSeparation$1,dx=1,dy=1,nodeSize=null;function tree(root){var t=treeRoot(root);// Compute the layout using Buchheim et al.’s algorithm.
t.eachAfter(firstWalk),t.parent.m=-t.z;t.eachBefore(secondWalk);// If a fixed node size is specified, scale x and y.
if(nodeSize)root.eachBefore(sizeNode);// If a fixed tree size is specified, scale x and y based on the extent.
// Compute the left-most, right-most, and depth-most nodes for extents.
else{var left=root,right=root,bottom=root;root.eachBefore(function(node){if(node.x<left.x)left=node;if(node.x>right.x)right=node;if(node.depth>bottom.depth)bottom=node;});var s=left===right?1:separation(left,right)/2,tx=s-left.x,kx=dx/(right.x+s+tx),ky=dy/(bottom.depth||1);root.eachBefore(function(node){node.x=(node.x+tx)*kx;node.y=node.depth*ky;});}return root;}// Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
// applied recursively to the children of v, as well as the function
// APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
// node v is placed to the midpoint of its outermost children.
function firstWalk(v){var children=v.children,siblings=v.parent.children,w=v.i?siblings[v.i-1]:null;if(children){executeShifts(v);var midpoint=(children[0].z+children[children.length-1].z)/2;if(w){v.z=w.z+separation(v._,w._);v.m=v.z-midpoint;}else{v.z=midpoint;}}else if(w){v.z=w.z+separation(v._,w._);}v.parent.A=apportion(v,w,v.parent.A||siblings[0]);}// Computes all real x-coordinates by summing up the modifiers recursively.
function secondWalk(v){v._.x=v.z+v.parent.m;v.m+=v.parent.m;}// The core of the algorithm. Here, a new subtree is combined with the
// previous subtrees. Threads are used to traverse the inside and outside
// contours of the left and right subtree up to the highest common level. The
// vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
// superscript o means outside and i means inside, the subscript - means left
// subtree and + means right subtree. For summing up the modifiers along the
// contour, we use respective variables si+, si-, so-, and so+. Whenever two
// nodes of the inside contours conflict, we compute the left one of the
// greatest uncommon ancestors using the function ANCESTOR and call MOVE
// SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
// Finally, we add a new thread (if necessary).
function apportion(v,w,ancestor){if(w){var vip=v,vop=v,vim=w,vom=vip.parent.children[0],sip=vip.m,sop=vop.m,sim=vim.m,som=vom.m,shift;while(vim=nextRight(vim),vip=nextLeft(vip),vim&&vip){vom=nextLeft(vom);vop=nextRight(vop);vop.a=v;shift=vim.z+sim-vip.z-sip+separation(vim._,vip._);if(shift>0){moveSubtree(nextAncestor(vim,v,ancestor),v,shift);sip+=shift;sop+=shift;}sim+=vim.m;sip+=vip.m;som+=vom.m;sop+=vop.m;}if(vim&&!nextRight(vop)){vop.t=vim;vop.m+=sim-sop;}if(vip&&!nextLeft(vom)){vom.t=vip;vom.m+=sip-som;ancestor=v;}}return ancestor;}function sizeNode(node){node.x*=dx;node.y=node.depth*dy;}tree.separation=function(x){return arguments.length?(separation=x,tree):separation;};tree.size=function(x){return arguments.length?(nodeSize=false,dx=+x[0],dy=+x[1],tree):nodeSize?null:[dx,dy];};tree.nodeSize=function(x){return arguments.length?(nodeSize=true,dx=+x[0],dy=+x[1],tree):nodeSize?[dx,dy]:null;};return tree;}function treemapSlice(parent,x0,y0,x1,y1){var nodes=parent.children,node,i=-1,n=nodes.length,k=parent.value&&(y1-y0)/parent.value;while(++i<n){node=nodes[i],node.x0=x0,node.x1=x1;node.y0=y0,node.y1=y0+=node.value*k;}}var phi=(1+Math.sqrt(5))/2;function squarifyRatio(ratio,parent,x0,y0,x1,y1){var rows=[],nodes=parent.children,row,nodeValue,i0=0,i1=0,n=nodes.length,dx,dy,value=parent.value,sumValue,minValue,maxValue,newRatio,minRatio,alpha,beta;while(i0<n){dx=x1-x0,dy=y1-y0;// Find the next non-empty node.
do{sumValue=nodes[i1++].value;}while(!sumValue&&i1<n);minValue=maxValue=sumValue;alpha=Math.max(dy/dx,dx/dy)/(value*ratio);beta=sumValue*sumValue*alpha;minRatio=Math.max(maxValue/beta,beta/minValue);// Keep adding nodes while the aspect ratio maintains or improves.
for(;i1<n;++i1){sumValue+=nodeValue=nodes[i1].value;if(nodeValue<minValue)minValue=nodeValue;if(nodeValue>maxValue)maxValue=nodeValue;beta=sumValue*sumValue*alpha;newRatio=Math.max(maxValue/beta,beta/minValue);if(newRatio>minRatio){sumValue-=nodeValue;break;}minRatio=newRatio;}// Position and record the row orientation.
rows.push(row={value:sumValue,dice:dx<dy,children:nodes.slice(i0,i1)});if(row.dice)treemapDice(row,x0,y0,x1,value?y0+=dy*sumValue/value:y1);else treemapSlice(row,x0,y0,value?x0+=dx*sumValue/value:x1,y1);value-=sumValue,i0=i1;}return rows;}var squarify=function custom(ratio){function squarify(parent,x0,y0,x1,y1){squarifyRatio(ratio,parent,x0,y0,x1,y1);}squarify.ratio=function(x){return custom((x=+x)>1?x:1);};return squarify;}(phi);function index$3(){var tile=squarify,round=false,dx=1,dy=1,paddingStack=[0],paddingInner=constantZero,paddingTop=constantZero,paddingRight=constantZero,paddingBottom=constantZero,paddingLeft=constantZero;function treemap(root){root.x0=root.y0=0;root.x1=dx;root.y1=dy;root.eachBefore(positionNode);paddingStack=[0];if(round)root.eachBefore(roundNode);return root;}function positionNode(node){var p=paddingStack[node.depth],x0=node.x0+p,y0=node.y0+p,x1=node.x1-p,y1=node.y1-p;if(x1<x0)x0=x1=(x0+x1)/2;if(y1<y0)y0=y1=(y0+y1)/2;node.x0=x0;node.y0=y0;node.x1=x1;node.y1=y1;if(node.children){p=paddingStack[node.depth+1]=paddingInner(node)/2;x0+=paddingLeft(node)-p;y0+=paddingTop(node)-p;x1-=paddingRight(node)-p;y1-=paddingBottom(node)-p;if(x1<x0)x0=x1=(x0+x1)/2;if(y1<y0)y0=y1=(y0+y1)/2;tile(node,x0,y0,x1,y1);}}treemap.round=function(x){return arguments.length?(round=!!x,treemap):round;};treemap.size=function(x){return arguments.length?(dx=+x[0],dy=+x[1],treemap):[dx,dy];};treemap.tile=function(x){return arguments.length?(tile=required(x),treemap):tile;};treemap.padding=function(x){return arguments.length?treemap.paddingInner(x).paddingOuter(x):treemap.paddingInner();};treemap.paddingInner=function(x){return arguments.length?(paddingInner=typeof x==="function"?x:constant$9(+x),treemap):paddingInner;};treemap.paddingOuter=function(x){return arguments.length?treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x):treemap.paddingTop();};treemap.paddingTop=function(x){return arguments.length?(paddingTop=typeof x==="function"?x:constant$9(+x),treemap):paddingTop;};treemap.paddingRight=function(x){return arguments.length?(paddingRight=typeof x==="function"?x:constant$9(+x),treemap):paddingRight;};treemap.paddingBottom=function(x){return arguments.length?(paddingBottom=typeof x==="function"?x:constant$9(+x),treemap):paddingBottom;};treemap.paddingLeft=function(x){return arguments.length?(paddingLeft=typeof x==="function"?x:constant$9(+x),treemap):paddingLeft;};return treemap;}function binary(parent,x0,y0,x1,y1){var nodes=parent.children,i,n=nodes.length,sum,sums=new Array(n+1);for(sums[0]=sum=i=0;i<n;++i){sums[i+1]=sum+=nodes[i].value;}partition(0,n,parent.value,x0,y0,x1,y1);function partition(i,j,value,x0,y0,x1,y1){if(i>=j-1){var node=nodes[i];node.x0=x0,node.y0=y0;node.x1=x1,node.y1=y1;return;}var valueOffset=sums[i],valueTarget=value/2+valueOffset,k=i+1,hi=j-1;while(k<hi){var mid=k+hi>>>1;if(sums[mid]<valueTarget)k=mid+1;else hi=mid;}if(valueTarget-sums[k-1]<sums[k]-valueTarget&&i+1<k)--k;var valueLeft=sums[k]-valueOffset,valueRight=value-valueLeft;if(x1-x0>y1-y0){var xk=(x0*valueRight+x1*valueLeft)/value;partition(i,k,valueLeft,x0,y0,xk,y1);partition(k,j,valueRight,xk,y0,x1,y1);}else{var yk=(y0*valueRight+y1*valueLeft)/value;partition(i,k,valueLeft,x0,y0,x1,yk);partition(k,j,valueRight,x0,yk,x1,y1);}}}function sliceDice(parent,x0,y0,x1,y1){(parent.depth&1?treemapSlice:treemapDice)(parent,x0,y0,x1,y1);}var resquarify=function custom(ratio){function resquarify(parent,x0,y0,x1,y1){if((rows=parent._squarify)&&rows.ratio===ratio){var rows,row,nodes,i,j=-1,n,m=rows.length,value=parent.value;while(++j<m){row=rows[j],nodes=row.children;for(i=row.value=0,n=nodes.length;i<n;++i){row.value+=nodes[i].value;}if(row.dice)treemapDice(row,x0,y0,x1,y0+=(y1-y0)*row.value/value);else treemapSlice(row,x0,y0,x0+=(x1-x0)*row.value/value,y1);value-=row.value;}}else{parent._squarify=rows=squarifyRatio(ratio,parent,x0,y0,x1,y1);rows.ratio=ratio;}}resquarify.ratio=function(x){return custom((x=+x)>1?x:1);};return resquarify;}(phi);function area$2(polygon){var i=-1,n=polygon.length,a,b=polygon[n-1],area=0;while(++i<n){a=b;b=polygon[i];area+=a[1]*b[0]-a[0]*b[1];}return area/2;}function centroid$1(polygon){var i=-1,n=polygon.length,x=0,y=0,a,b=polygon[n-1],c,k=0;while(++i<n){a=b;b=polygon[i];k+=c=a[0]*b[1]-b[0]*a[1];x+=(a[0]+b[0])*c;y+=(a[1]+b[1])*c;}return k*=3,[x/k,y/k];}// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of
// the 3D cross product in a quadrant I Cartesian coordinate system (+x is
// right, +y is up). Returns a positive value if ABC is counter-clockwise,
// negative if clockwise, and zero if the points are collinear.
function cross$1(a,b,c){return(b[0]-a[0])*(c[1]-a[1])-(b[1]-a[1])*(c[0]-a[0]);}function lexicographicOrder(a,b){return a[0]-b[0]||a[1]-b[1];}// Computes the upper convex hull per the monotone chain algorithm.
// Assumes points.length >= 3, is sorted by x, unique in y.
// Returns an array of indices into points in left-to-right order.
function computeUpperHullIndexes(points){var n=points.length,indexes=[0,1],size=2;for(var i=2;i<n;++i){while(size>1&&cross$1(points[indexes[size-2]],points[indexes[size-1]],points[i])<=0){--size;}indexes[size++]=i;}return indexes.slice(0,size);// remove popped points
}function hull(points){if((n=points.length)<3)return null;var i,n,sortedPoints=new Array(n),flippedPoints=new Array(n);for(i=0;i<n;++i){sortedPoints[i]=[+points[i][0],+points[i][1],i];}sortedPoints.sort(lexicographicOrder);for(i=0;i<n;++i){flippedPoints[i]=[sortedPoints[i][0],-sortedPoints[i][1]];}var upperIndexes=computeUpperHullIndexes(sortedPoints),lowerIndexes=computeUpperHullIndexes(flippedPoints);// Construct the hull polygon, removing possible duplicate endpoints.
var skipLeft=lowerIndexes[0]===upperIndexes[0],skipRight=lowerIndexes[lowerIndexes.length-1]===upperIndexes[upperIndexes.length-1],hull=[];// Add upper hull in right-to-l order.
// Then add lower hull in left-to-right order.
for(i=upperIndexes.length-1;i>=0;--i){hull.push(points[sortedPoints[upperIndexes[i]][2]]);}for(i=+skipLeft;i<lowerIndexes.length-skipRight;++i){hull.push(points[sortedPoints[lowerIndexes[i]][2]]);}return hull;}function contains$2(polygon,point){var n=polygon.length,p=polygon[n-1],x=point[0],y=point[1],x0=p[0],y0=p[1],x1,y1,inside=false;for(var i=0;i<n;++i){p=polygon[i],x1=p[0],y1=p[1];if(y1>y!==y0>y&&x<(x0-x1)*(y-y1)/(y0-y1)+x1)inside=!inside;x0=x1,y0=y1;}return inside;}function length$2(polygon){var i=-1,n=polygon.length,b=polygon[n-1],xa,ya,xb=b[0],yb=b[1],perimeter=0;while(++i<n){xa=xb;ya=yb;b=polygon[i];xb=b[0];yb=b[1];xa-=xb;ya-=yb;perimeter+=Math.sqrt(xa*xa+ya*ya);}return perimeter;}function defaultSource$1(){return Math.random();}var uniform=function sourceRandomUniform(source){function randomUniform(min,max){min=min==null?0:+min;max=max==null?1:+max;if(arguments.length===1)max=min,min=0;else max-=min;return function(){return source()*max+min;};}randomUniform.source=sourceRandomUniform;return randomUniform;}(defaultSource$1);var normal=function sourceRandomNormal(source){function randomNormal(mu,sigma){var x,r;mu=mu==null?0:+mu;sigma=sigma==null?1:+sigma;return function(){var y;// If available, use the second previously-generated uniform random.
if(x!=null)y=x,x=null;// Otherwise, generate a new x and y.
else do{x=source()*2-1;y=source()*2-1;r=x*x+y*y;}while(!r||r>1);return mu+sigma*y*Math.sqrt(-2*Math.log(r)/r);};}randomNormal.source=sourceRandomNormal;return randomNormal;}(defaultSource$1);var logNormal=function sourceRandomLogNormal(source){function randomLogNormal(){var randomNormal=normal.source(source).apply(this,arguments);return function(){return Math.exp(randomNormal());};}randomLogNormal.source=sourceRandomLogNormal;return randomLogNormal;}(defaultSource$1);var irwinHall=function sourceRandomIrwinHall(source){function randomIrwinHall(n){return function(){for(var sum=0,i=0;i<n;++i){sum+=source();}return sum;};}randomIrwinHall.source=sourceRandomIrwinHall;return randomIrwinHall;}(defaultSource$1);var bates=function sourceRandomBates(source){function randomBates(n){var randomIrwinHall=irwinHall.source(source)(n);return function(){return randomIrwinHall()/n;};}randomBates.source=sourceRandomBates;return randomBates;}(defaultSource$1);var exponential$1=function sourceRandomExponential(source){function randomExponential(lambda){return function(){return-Math.log(1-source())/lambda;};}randomExponential.source=sourceRandomExponential;return randomExponential;}(defaultSource$1);function initRange(domain,range){switch(arguments.length){case 0:break;case 1:this.range(domain);break;default:this.range(range).domain(domain);break;}return this;}function initInterpolator(domain,interpolator){switch(arguments.length){case 0:break;case 1:this.interpolator(domain);break;default:this.interpolator(interpolator).domain(domain);break;}return this;}var array$3=Array.prototype;var map$2=array$3.map;var slice$5=array$3.slice;var implicit={name:"implicit"};function ordinal(){var index=map$1(),domain=[],range=[],unknown=implicit;function scale(d){var key=d+"",i=index.get(key);if(!i){if(unknown!==implicit)return unknown;index.set(key,i=domain.push(d));}return range[(i-1)%range.length];}scale.domain=function(_){if(!arguments.length)return domain.slice();domain=[],index=map$1();var i=-1,n=_.length,d,key;while(++i<n){if(!index.has(key=(d=_[i])+""))index.set(key,domain.push(d));}return scale;};scale.range=function(_){return arguments.length?(range=slice$5.call(_),scale):range.slice();};scale.unknown=function(_){return arguments.length?(unknown=_,scale):unknown;};scale.copy=function(){return ordinal(domain,range).unknown(unknown);};initRange.apply(scale,arguments);return scale;}function band(){var scale=ordinal().unknown(undefined),domain=scale.domain,ordinalRange=scale.range,range$$1=[0,1],step,bandwidth,round=false,paddingInner=0,paddingOuter=0,align=0.5;delete scale.unknown;function rescale(){var n=domain().length,reverse=range$$1[1]<range$$1[0],start=range$$1[reverse-0],stop=range$$1[1-reverse];step=(stop-start)/Math.max(1,n-paddingInner+paddingOuter*2);if(round)step=Math.floor(step);start+=(stop-start-step*(n-paddingInner))*align;bandwidth=step*(1-paddingInner);if(round)start=Math.round(start),bandwidth=Math.round(bandwidth);var values=sequence(n).map(function(i){return start+step*i;});return ordinalRange(reverse?values.reverse():values);}scale.domain=function(_){return arguments.length?(domain(_),rescale()):domain();};scale.range=function(_){return arguments.length?(range$$1=[+_[0],+_[1]],rescale()):range$$1.slice();};scale.rangeRound=function(_){return range$$1=[+_[0],+_[1]],round=true,rescale();};scale.bandwidth=function(){return bandwidth;};scale.step=function(){return step;};scale.round=function(_){return arguments.length?(round=!!_,rescale()):round;};scale.padding=function(_){return arguments.length?(paddingInner=Math.min(1,paddingOuter=+_),rescale()):paddingInner;};scale.paddingInner=function(_){return arguments.length?(paddingInner=Math.min(1,_),rescale()):paddingInner;};scale.paddingOuter=function(_){return arguments.length?(paddingOuter=+_,rescale()):paddingOuter;};scale.align=function(_){return arguments.length?(align=Math.max(0,Math.min(1,_)),rescale()):align;};scale.copy=function(){return band(domain(),range$$1).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);};return initRange.apply(rescale(),arguments);}function pointish(scale){var copy=scale.copy;scale.padding=scale.paddingOuter;delete scale.paddingInner;delete scale.paddingOuter;scale.copy=function(){return pointish(copy());};return scale;}function point$1(){return pointish(band.apply(null,arguments).paddingInner(1));}function constant$a(x){return function(){return x;};}function number$2(x){return+x;}var unit=[0,1];function identity$6(x){return x;}function normalize(a,b){return(b-=a=+a)?function(x){return(x-a)/b;}:constant$a(isNaN(b)?NaN:0.5);}function clamper(domain){var a=domain[0],b=domain[domain.length-1],t;if(a>b)t=a,a=b,b=t;return function(x){return Math.max(a,Math.min(b,x));};}// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
function bimap(domain,range,interpolate$$1){var d0=domain[0],d1=domain[1],r0=range[0],r1=range[1];if(d1<d0)d0=normalize(d1,d0),r0=interpolate$$1(r1,r0);else d0=normalize(d0,d1),r0=interpolate$$1(r0,r1);return function(x){return r0(d0(x));};}function polymap(domain,range,interpolate$$1){var j=Math.min(domain.length,range.length)-1,d=new Array(j),r=new Array(j),i=-1;// Reverse descending domains.
if(domain[j]<domain[0]){domain=domain.slice().reverse();range=range.slice().reverse();}while(++i<j){d[i]=normalize(domain[i],domain[i+1]);r[i]=interpolate$$1(range[i],range[i+1]);}return function(x){var i=bisectRight(domain,x,1,j)-1;return r[i](d[i](x));};}function copy(source,target){return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());}function transformer$1(){var domain=unit,range=unit,interpolate$$1=interpolateValue,transform,untransform,unknown,clamp=identity$6,piecewise$$1,output,input;function rescale(){piecewise$$1=Math.min(domain.length,range.length)>2?polymap:bimap;output=input=null;return scale;}function scale(x){return isNaN(x=+x)?unknown:(output||(output=piecewise$$1(domain.map(transform),range,interpolate$$1)))(transform(clamp(x)));}scale.invert=function(y){return clamp(untransform((input||(input=piecewise$$1(range,domain.map(transform),interpolateNumber)))(y)));};scale.domain=function(_){return arguments.length?(domain=map$2.call(_,number$2),clamp===identity$6||(clamp=clamper(domain)),rescale()):domain.slice();};scale.range=function(_){return arguments.length?(range=slice$5.call(_),rescale()):range.slice();};scale.rangeRound=function(_){return range=slice$5.call(_),interpolate$$1=interpolateRound,rescale();};scale.clamp=function(_){return arguments.length?(clamp=_?clamper(domain):identity$6,scale):clamp!==identity$6;};scale.interpolate=function(_){return arguments.length?(interpolate$$1=_,rescale()):interpolate$$1;};scale.unknown=function(_){return arguments.length?(unknown=_,scale):unknown;};return function(t,u){transform=t,untransform=u;return rescale();};}function continuous(transform,untransform){return transformer$1()(transform,untransform);}function tickFormat(start,stop,count,specifier){var step=tickStep(start,stop,count),precision;specifier=formatSpecifier(specifier==null?",f":specifier);switch(specifier.type){case"s":{var value=Math.max(Math.abs(start),Math.abs(stop));if(specifier.precision==null&&!isNaN(precision=precisionPrefix(step,value)))specifier.precision=precision;return exports.formatPrefix(specifier,value);}case"":case"e":case"g":case"p":case"r":{if(specifier.precision==null&&!isNaN(precision=precisionRound(step,Math.max(Math.abs(start),Math.abs(stop)))))specifier.precision=precision-(specifier.type==="e");break;}case"f":case"%":{if(specifier.precision==null&&!isNaN(precision=precisionFixed(step)))specifier.precision=precision-(specifier.type==="%")*2;break;}}return exports.format(specifier);}function linearish(scale){var domain=scale.domain;scale.ticks=function(count){var d=domain();return ticks(d[0],d[d.length-1],count==null?10:count);};scale.tickFormat=function(count,specifier){var d=domain();return tickFormat(d[0],d[d.length-1],count==null?10:count,specifier);};scale.nice=function(count){if(count==null)count=10;var d=domain(),i0=0,i1=d.length-1,start=d[i0],stop=d[i1],step;if(stop<start){step=start,start=stop,stop=step;step=i0,i0=i1,i1=step;}step=tickIncrement(start,stop,count);if(step>0){start=Math.floor(start/step)*step;stop=Math.ceil(stop/step)*step;step=tickIncrement(start,stop,count);}else if(step<0){start=Math.ceil(start*step)/step;stop=Math.floor(stop*step)/step;step=tickIncrement(start,stop,count);}if(step>0){d[i0]=Math.floor(start/step)*step;d[i1]=Math.ceil(stop/step)*step;domain(d);}else if(step<0){d[i0]=Math.ceil(start*step)/step;d[i1]=Math.floor(stop*step)/step;domain(d);}return scale;};return scale;}function linear$2(){var scale=continuous(identity$6,identity$6);scale.copy=function(){return copy(scale,linear$2());};initRange.apply(scale,arguments);return linearish(scale);}function identity$7(domain){var unknown;function scale(x){return isNaN(x=+x)?unknown:x;}scale.invert=scale;scale.domain=scale.range=function(_){return arguments.length?(domain=map$2.call(_,number$2),scale):domain.slice();};scale.unknown=function(_){return arguments.length?(unknown=_,scale):unknown;};scale.copy=function(){return identity$7(domain).unknown(unknown);};domain=arguments.length?map$2.call(domain,number$2):[0,1];return linearish(scale);}function nice(domain,interval){domain=domain.slice();var i0=0,i1=domain.length-1,x0=domain[i0],x1=domain[i1],t;if(x1<x0){t=i0,i0=i1,i1=t;t=x0,x0=x1,x1=t;}domain[i0]=interval.floor(x0);domain[i1]=interval.ceil(x1);return domain;}function transformLog(x){return Math.log(x);}function transformExp(x){return Math.exp(x);}function transformLogn(x){return-Math.log(-x);}function transformExpn(x){return-Math.exp(-x);}function pow10(x){return isFinite(x)?+("1e"+x):x<0?0:x;}function powp(base){return base===10?pow10:base===Math.E?Math.exp:function(x){return Math.pow(base,x);};}function logp(base){return base===Math.E?Math.log:base===10&&Math.log10||base===2&&Math.log2||(base=Math.log(base),function(x){return Math.log(x)/base;});}function reflect(f){return function(x){return-f(-x);};}function loggish(transform){var scale=transform(transformLog,transformExp),domain=scale.domain,base=10,logs,pows;function rescale(){logs=logp(base),pows=powp(base);if(domain()[0]<0){logs=reflect(logs),pows=reflect(pows);transform(transformLogn,transformExpn);}else{transform(transformLog,transformExp);}return scale;}scale.base=function(_){return arguments.length?(base=+_,rescale()):base;};scale.domain=function(_){return arguments.length?(domain(_),rescale()):domain();};scale.ticks=function(count){var d=domain(),u=d[0],v=d[d.length-1],r;if(r=v<u)i=u,u=v,v=i;var i=logs(u),j=logs(v),p,k,t,n=count==null?10:+count,z=[];if(!(base%1)&&j-i<n){i=Math.round(i)-1,j=Math.round(j)+1;if(u>0)for(;i<j;++i){for(k=1,p=pows(i);k<base;++k){t=p*k;if(t<u)continue;if(t>v)break;z.push(t);}}else for(;i<j;++i){for(k=base-1,p=pows(i);k>=1;--k){t=p*k;if(t<u)continue;if(t>v)break;z.push(t);}}}else{z=ticks(i,j,Math.min(j-i,n)).map(pows);}return r?z.reverse():z;};scale.tickFormat=function(count,specifier){if(specifier==null)specifier=base===10?".0e":",";if(typeof specifier!=="function")specifier=exports.format(specifier);if(count===Infinity)return specifier;if(count==null)count=10;var k=Math.max(1,base*count/scale.ticks().length);// TODO fast estimate?
return function(d){var i=d/pows(Math.round(logs(d)));if(i*base<base-0.5)i*=base;return i<=k?specifier(d):"";};};scale.nice=function(){return domain(nice(domain(),{floor:function floor(x){return pows(Math.floor(logs(x)));},ceil:function ceil(x){return pows(Math.ceil(logs(x)));}}));};return scale;}function log$1(){var scale=loggish(transformer$1()).domain([1,10]);scale.copy=function(){return copy(scale,log$1()).base(scale.base());};initRange.apply(scale,arguments);return scale;}function transformSymlog(c){return function(x){return Math.sign(x)*Math.log1p(Math.abs(x/c));};}function transformSymexp(c){return function(x){return Math.sign(x)*Math.expm1(Math.abs(x))*c;};}function symlogish(transform){var c=1,scale=transform(transformSymlog(c),transformSymexp(c));scale.constant=function(_){return arguments.length?transform(transformSymlog(c=+_),transformSymexp(c)):c;};return linearish(scale);}function symlog(){var scale=symlogish(transformer$1());scale.copy=function(){return copy(scale,symlog()).constant(scale.constant());};return initRange.apply(scale,arguments);}function transformPow(exponent){return function(x){return x<0?-Math.pow(-x,exponent):Math.pow(x,exponent);};}function transformSqrt(x){return x<0?-Math.sqrt(-x):Math.sqrt(x);}function transformSquare(x){return x<0?-x*x:x*x;}function powish(transform){var scale=transform(identity$6,identity$6),exponent=1;function rescale(){return exponent===1?transform(identity$6,identity$6):exponent===0.5?transform(transformSqrt,transformSquare):transform(transformPow(exponent),transformPow(1/exponent));}scale.exponent=function(_){return arguments.length?(exponent=+_,rescale()):exponent;};return linearish(scale);}function pow$1(){var scale=powish(transformer$1());scale.copy=function(){return copy(scale,pow$1()).exponent(scale.exponent());};initRange.apply(scale,arguments);return scale;}function sqrt$1(){return pow$1.apply(null,arguments).exponent(0.5);}function quantile$$1(){var domain=[],range=[],thresholds=[],unknown;function rescale(){var i=0,n=Math.max(1,range.length);thresholds=new Array(n-1);while(++i<n){thresholds[i-1]=threshold(domain,i/n);}return scale;}function scale(x){return isNaN(x=+x)?unknown:range[bisectRight(thresholds,x)];}scale.invertExtent=function(y){var i=range.indexOf(y);return i<0?[NaN,NaN]:[i>0?thresholds[i-1]:domain[0],i<thresholds.length?thresholds[i]:domain[domain.length-1]];};scale.domain=function(_){if(!arguments.length)return domain.slice();domain=[];for(var i=0,n=_.length,d;i<n;++i){if(d=_[i],d!=null&&!isNaN(d=+d))domain.push(d);}domain.sort(ascending);return rescale();};scale.range=function(_){return arguments.length?(range=slice$5.call(_),rescale()):range.slice();};scale.unknown=function(_){return arguments.length?(unknown=_,scale):unknown;};scale.quantiles=function(){return thresholds.slice();};scale.copy=function(){return quantile$$1().domain(domain).range(range).unknown(unknown);};return initRange.apply(scale,arguments);}function quantize$1(){var x0=0,x1=1,n=1,domain=[0.5],range=[0,1],unknown;function scale(x){return x<=x?range[bisectRight(domain,x,0,n)]:unknown;}function rescale(){var i=-1;domain=new Array(n);while(++i<n){domain[i]=((i+1)*x1-(i-n)*x0)/(n+1);}return scale;}scale.domain=function(_){return arguments.length?(x0=+_[0],x1=+_[1],rescale()):[x0,x1];};scale.range=function(_){return arguments.length?(n=(range=slice$5.call(_)).length-1,rescale()):range.slice();};scale.invertExtent=function(y){var i=range.indexOf(y);return i<0?[NaN,NaN]:i<1?[x0,domain[0]]:i>=n?[domain[n-1],x1]:[domain[i-1],domain[i]];};scale.unknown=function(_){return arguments.length?(unknown=_,scale):scale;};scale.thresholds=function(){return domain.slice();};scale.copy=function(){return quantize$1().domain([x0,x1]).range(range).unknown(unknown);};return initRange.apply(linearish(scale),arguments);}function threshold$1(){var domain=[0.5],range=[0,1],unknown,n=1;function scale(x){return x<=x?range[bisectRight(domain,x,0,n)]:unknown;}scale.domain=function(_){return arguments.length?(domain=slice$5.call(_),n=Math.min(domain.length,range.length-1),scale):domain.slice();};scale.range=function(_){return arguments.length?(range=slice$5.call(_),n=Math.min(domain.length,range.length-1),scale):range.slice();};scale.invertExtent=function(y){var i=range.indexOf(y);return[domain[i-1],domain[i]];};scale.unknown=function(_){return arguments.length?(unknown=_,scale):unknown;};scale.copy=function(){return threshold$1().domain(domain).range(range).unknown(unknown);};return initRange.apply(scale,arguments);}var t0$1=new Date(),t1$1=new Date();function newInterval(floori,offseti,count,field){function interval(date){return floori(date=new Date(+date)),date;}interval.floor=interval;interval.ceil=function(date){return floori(date=new Date(date-1)),offseti(date,1),floori(date),date;};interval.round=function(date){var d0=interval(date),d1=interval.ceil(date);return date-d0<d1-date?d0:d1;};interval.offset=function(date,step){return offseti(date=new Date(+date),step==null?1:Math.floor(step)),date;};interval.range=function(start,stop,step){var range=[],previous;start=interval.ceil(start);step=step==null?1:Math.floor(step);if(!(start<stop)||!(step>0))return range;// also handles Invalid Date
do{range.push(previous=new Date(+start)),offseti(start,step),floori(start);}while(previous<start&&start<stop);return range;};interval.filter=function(test){return newInterval(function(date){if(date>=date)while(floori(date),!test(date)){date.setTime(date-1);}},function(date,step){if(date>=date){if(step<0)while(++step<=0){while(offseti(date,-1),!test(date)){}// eslint-disable-line no-empty
}else while(--step>=0){while(offseti(date,+1),!test(date)){}// eslint-disable-line no-empty
}}});};if(count){interval.count=function(start,end){t0$1.setTime(+start),t1$1.setTime(+end);floori(t0$1),floori(t1$1);return Math.floor(count(t0$1,t1$1));};interval.every=function(step){step=Math.floor(step);return!isFinite(step)||!(step>0)?null:!(step>1)?interval:interval.filter(field?function(d){return field(d)%step===0;}:function(d){return interval.count(0,d)%step===0;});};}return interval;}var millisecond=newInterval(function(){// noop
},function(date,step){date.setTime(+date+step);},function(start,end){return end-start;});// An optimized implementation for this simple case.
millisecond.every=function(k){k=Math.floor(k);if(!isFinite(k)||!(k>0))return null;if(!(k>1))return millisecond;return newInterval(function(date){date.setTime(Math.floor(date/k)*k);},function(date,step){date.setTime(+date+step*k);},function(start,end){return(end-start)/k;});};var milliseconds=millisecond.range;var durationSecond=1e3;var durationMinute=6e4;var durationHour=36e5;var durationDay=864e5;var durationWeek=6048e5;var second=newInterval(function(date){date.setTime(date-date.getMilliseconds());},function(date,step){date.setTime(+date+step*durationSecond);},function(start,end){return(end-start)/durationSecond;},function(date){return date.getUTCSeconds();});var seconds=second.range;var minute=newInterval(function(date){date.setTime(date-date.getMilliseconds()-date.getSeconds()*durationSecond);},function(date,step){date.setTime(+date+step*durationMinute);},function(start,end){return(end-start)/durationMinute;},function(date){return date.getMinutes();});var minutes=minute.range;var hour=newInterval(function(date){date.setTime(date-date.getMilliseconds()-date.getSeconds()*durationSecond-date.getMinutes()*durationMinute);},function(date,step){date.setTime(+date+step*durationHour);},function(start,end){return(end-start)/durationHour;},function(date){return date.getHours();});var hours=hour.range;var day=newInterval(function(date){date.setHours(0,0,0,0);},function(date,step){date.setDate(date.getDate()+step);},function(start,end){return(end-start-(end.getTimezoneOffset()-start.getTimezoneOffset())*durationMinute)/durationDay;},function(date){return date.getDate()-1;});var days=day.range;function weekday(i){return newInterval(function(date){date.setDate(date.getDate()-(date.getDay()+7-i)%7);date.setHours(0,0,0,0);},function(date,step){date.setDate(date.getDate()+step*7);},function(start,end){return(end-start-(end.getTimezoneOffset()-start.getTimezoneOffset())*durationMinute)/durationWeek;});}var sunday=weekday(0);var monday=weekday(1);var tuesday=weekday(2);var wednesday=weekday(3);var thursday=weekday(4);var friday=weekday(5);var saturday=weekday(6);var sundays=sunday.range;var mondays=monday.range;var tuesdays=tuesday.range;var wednesdays=wednesday.range;var thursdays=thursday.range;var fridays=friday.range;var saturdays=saturday.range;var month=newInterval(function(date){date.setDate(1);date.setHours(0,0,0,0);},function(date,step){date.setMonth(date.getMonth()+step);},function(start,end){return end.getMonth()-start.getMonth()+(end.getFullYear()-start.getFullYear())*12;},function(date){return date.getMonth();});var months=month.range;var year=newInterval(function(date){date.setMonth(0,1);date.setHours(0,0,0,0);},function(date,step){date.setFullYear(date.getFullYear()+step);},function(start,end){return end.getFullYear()-start.getFullYear();},function(date){return date.getFullYear();});// An optimized implementation for this simple case.
year.every=function(k){return!isFinite(k=Math.floor(k))||!(k>0)?null:newInterval(function(date){date.setFullYear(Math.floor(date.getFullYear()/k)*k);date.setMonth(0,1);date.setHours(0,0,0,0);},function(date,step){date.setFullYear(date.getFullYear()+step*k);});};var years=year.range;var utcMinute=newInterval(function(date){date.setUTCSeconds(0,0);},function(date,step){date.setTime(+date+step*durationMinute);},function(start,end){return(end-start)/durationMinute;},function(date){return date.getUTCMinutes();});var utcMinutes=utcMinute.range;var utcHour=newInterval(function(date){date.setUTCMinutes(0,0,0);},function(date,step){date.setTime(+date+step*durationHour);},function(start,end){return(end-start)/durationHour;},function(date){return date.getUTCHours();});var utcHours=utcHour.range;var utcDay=newInterval(function(date){date.setUTCHours(0,0,0,0);},function(date,step){date.setUTCDate(date.getUTCDate()+step);},function(start,end){return(end-start)/durationDay;},function(date){return date.getUTCDate()-1;});var utcDays=utcDay.range;function utcWeekday(i){return newInterval(function(date){date.setUTCDate(date.getUTCDate()-(date.getUTCDay()+7-i)%7);date.setUTCHours(0,0,0,0);},function(date,step){date.setUTCDate(date.getUTCDate()+step*7);},function(start,end){return(end-start)/durationWeek;});}var utcSunday=utcWeekday(0);var utcMonday=utcWeekday(1);var utcTuesday=utcWeekday(2);var utcWednesday=utcWeekday(3);var utcThursday=utcWeekday(4);var utcFriday=utcWeekday(5);var utcSaturday=utcWeekday(6);var utcSundays=utcSunday.range;var utcMondays=utcMonday.range;var utcTuesdays=utcTuesday.range;var utcWednesdays=utcWednesday.range;var utcThursdays=utcThursday.range;var utcFridays=utcFriday.range;var utcSaturdays=utcSaturday.range;var utcMonth=newInterval(function(date){date.setUTCDate(1);date.setUTCHours(0,0,0,0);},function(date,step){date.setUTCMonth(date.getUTCMonth()+step);},function(start,end){return end.getUTCMonth()-start.getUTCMonth()+(end.getUTCFullYear()-start.getUTCFullYear())*12;},function(date){return date.getUTCMonth();});var utcMonths=utcMonth.range;var utcYear=newInterval(function(date){date.setUTCMonth(0,1);date.setUTCHours(0,0,0,0);},function(date,step){date.setUTCFullYear(date.getUTCFullYear()+step);},function(start,end){return end.getUTCFullYear()-start.getUTCFullYear();},function(date){return date.getUTCFullYear();});// An optimized implementation for this simple case.
utcYear.every=function(k){return!isFinite(k=Math.floor(k))||!(k>0)?null:newInterval(function(date){date.setUTCFullYear(Math.floor(date.getUTCFullYear()/k)*k);date.setUTCMonth(0,1);date.setUTCHours(0,0,0,0);},function(date,step){date.setUTCFullYear(date.getUTCFullYear()+step*k);});};var utcYears=utcYear.range;function localDate(d){if(0<=d.y&&d.y<100){var date=new Date(-1,d.m,d.d,d.H,d.M,d.S,d.L);date.setFullYear(d.y);return date;}return new Date(d.y,d.m,d.d,d.H,d.M,d.S,d.L);}function utcDate(d){if(0<=d.y&&d.y<100){var date=new Date(Date.UTC(-1,d.m,d.d,d.H,d.M,d.S,d.L));date.setUTCFullYear(d.y);return date;}return new Date(Date.UTC(d.y,d.m,d.d,d.H,d.M,d.S,d.L));}function newYear(y){return{y:y,m:0,d:1,H:0,M:0,S:0,L:0};}function formatLocale$1(locale){var locale_dateTime=locale.dateTime,locale_date=locale.date,locale_time=locale.time,locale_periods=locale.periods,locale_weekdays=locale.days,locale_shortWeekdays=locale.shortDays,locale_months=locale.months,locale_shortMonths=locale.shortMonths;var periodRe=formatRe(locale_periods),periodLookup=formatLookup(locale_periods),weekdayRe=formatRe(locale_weekdays),weekdayLookup=formatLookup(locale_weekdays),shortWeekdayRe=formatRe(locale_shortWeekdays),shortWeekdayLookup=formatLookup(locale_shortWeekdays),monthRe=formatRe(locale_months),monthLookup=formatLookup(locale_months),shortMonthRe=formatRe(locale_shortMonths),shortMonthLookup=formatLookup(locale_shortMonths);var formats={"a":formatShortWeekday,"A":formatWeekday,"b":formatShortMonth,"B":formatMonth,"c":null,"d":formatDayOfMonth,"e":formatDayOfMonth,"f":formatMicroseconds,"H":formatHour24,"I":formatHour12,"j":formatDayOfYear,"L":formatMilliseconds,"m":formatMonthNumber,"M":formatMinutes,"p":formatPeriod,"Q":formatUnixTimestamp,"s":formatUnixTimestampSeconds,"S":formatSeconds,"u":formatWeekdayNumberMonday,"U":formatWeekNumberSunday,"V":formatWeekNumberISO,"w":formatWeekdayNumberSunday,"W":formatWeekNumberMonday,"x":null,"X":null,"y":formatYear$1,"Y":formatFullYear,"Z":formatZone,"%":formatLiteralPercent};var utcFormats={"a":formatUTCShortWeekday,"A":formatUTCWeekday,"b":formatUTCShortMonth,"B":formatUTCMonth,"c":null,"d":formatUTCDayOfMonth,"e":formatUTCDayOfMonth,"f":formatUTCMicroseconds,"H":formatUTCHour24,"I":formatUTCHour12,"j":formatUTCDayOfYear,"L":formatUTCMilliseconds,"m":formatUTCMonthNumber,"M":formatUTCMinutes,"p":formatUTCPeriod,"Q":formatUnixTimestamp,"s":formatUnixTimestampSeconds,"S":formatUTCSeconds,"u":formatUTCWeekdayNumberMonday,"U":formatUTCWeekNumberSunday,"V":formatUTCWeekNumberISO,"w":formatUTCWeekdayNumberSunday,"W":formatUTCWeekNumberMonday,"x":null,"X":null,"y":formatUTCYear,"Y":formatUTCFullYear,"Z":formatUTCZone,"%":formatLiteralPercent};var parses={"a":parseShortWeekday,"A":parseWeekday,"b":parseShortMonth,"B":parseMonth,"c":parseLocaleDateTime,"d":parseDayOfMonth,"e":parseDayOfMonth,"f":parseMicroseconds,"H":parseHour24,"I":parseHour24,"j":parseDayOfYear,"L":parseMilliseconds,"m":parseMonthNumber,"M":parseMinutes,"p":parsePeriod,"Q":parseUnixTimestamp,"s":parseUnixTimestampSeconds,"S":parseSeconds,"u":parseWeekdayNumberMonday,"U":parseWeekNumberSunday,"V":parseWeekNumberISO,"w":parseWeekdayNumberSunday,"W":parseWeekNumberMonday,"x":parseLocaleDate,"X":parseLocaleTime,"y":parseYear,"Y":parseFullYear,"Z":parseZone,"%":parseLiteralPercent};// These recursive directive definitions must be deferred.
formats.x=newFormat(locale_date,formats);formats.X=newFormat(locale_time,formats);formats.c=newFormat(locale_dateTime,formats);utcFormats.x=newFormat(locale_date,utcFormats);utcFormats.X=newFormat(locale_time,utcFormats);utcFormats.c=newFormat(locale_dateTime,utcFormats);function newFormat(specifier,formats){return function(date){var string=[],i=-1,j=0,n=specifier.length,c,pad,format;if(!(date instanceof Date))date=new Date(+date);while(++i<n){if(specifier.charCodeAt(i)===37){string.push(specifier.slice(j,i));if((pad=pads[c=specifier.charAt(++i)])!=null)c=specifier.charAt(++i);else pad=c==="e"?" ":"0";if(format=formats[c])c=format(date,pad);string.push(c);j=i+1;}}string.push(specifier.slice(j,i));return string.join("");};}function newParse(specifier,newDate){return function(string){var d=newYear(1900),i=parseSpecifier(d,specifier,string+="",0),week,day$$1;if(i!=string.length)return null;// If a UNIX timestamp is specified, return it.
if("Q"in d)return new Date(d.Q);// The am-pm flag is 0 for AM, and 1 for PM.
if("p"in d)d.H=d.H%12+d.p*12;// Convert day-of-week and week-of-year to day-of-year.
if("V"in d){if(d.V<1||d.V>53)return null;if(!("w"in d))d.w=1;if("Z"in d){week=utcDate(newYear(d.y)),day$$1=week.getUTCDay();week=day$$1>4||day$$1===0?utcMonday.ceil(week):utcMonday(week);week=utcDay.offset(week,(d.V-1)*7);d.y=week.getUTCFullYear();d.m=week.getUTCMonth();d.d=week.getUTCDate()+(d.w+6)%7;}else{week=newDate(newYear(d.y)),day$$1=week.getDay();week=day$$1>4||day$$1===0?monday.ceil(week):monday(week);week=day.offset(week,(d.V-1)*7);d.y=week.getFullYear();d.m=week.getMonth();d.d=week.getDate()+(d.w+6)%7;}}else if("W"in d||"U"in d){if(!("w"in d))d.w="u"in d?d.u%7:"W"in d?1:0;day$$1="Z"in d?utcDate(newYear(d.y)).getUTCDay():newDate(newYear(d.y)).getDay();d.m=0;d.d="W"in d?(d.w+6)%7+d.W*7-(day$$1+5)%7:d.w+d.U*7-(day$$1+6)%7;}// If a time zone is specified, all fields are interpreted as UTC and then
// offset according to the specified time zone.
if("Z"in d){d.H+=d.Z/100|0;d.M+=d.Z%100;return utcDate(d);}// Otherwise, all fields are in local time.
return newDate(d);};}function parseSpecifier(d,specifier,string,j){var i=0,n=specifier.length,m=string.length,c,parse;while(i<n){if(j>=m)return-1;c=specifier.charCodeAt(i++);if(c===37){c=specifier.charAt(i++);parse=parses[c in pads?specifier.charAt(i++):c];if(!parse||(j=parse(d,string,j))<0)return-1;}else if(c!=string.charCodeAt(j++)){return-1;}}return j;}function parsePeriod(d,string,i){var n=periodRe.exec(string.slice(i));return n?(d.p=periodLookup[n[0].toLowerCase()],i+n[0].length):-1;}function parseShortWeekday(d,string,i){var n=shortWeekdayRe.exec(string.slice(i));return n?(d.w=shortWeekdayLookup[n[0].toLowerCase()],i+n[0].length):-1;}function parseWeekday(d,string,i){var n=weekdayRe.exec(string.slice(i));return n?(d.w=weekdayLookup[n[0].toLowerCase()],i+n[0].length):-1;}function parseShortMonth(d,string,i){var n=shortMonthRe.exec(string.slice(i));return n?(d.m=shortMonthLookup[n[0].toLowerCase()],i+n[0].length):-1;}function parseMonth(d,string,i){var n=monthRe.exec(string.slice(i));return n?(d.m=monthLookup[n[0].toLowerCase()],i+n[0].length):-1;}function parseLocaleDateTime(d,string,i){return parseSpecifier(d,locale_dateTime,string,i);}function parseLocaleDate(d,string,i){return parseSpecifier(d,locale_date,string,i);}function parseLocaleTime(d,string,i){return parseSpecifier(d,locale_time,string,i);}function formatShortWeekday(d){return locale_shortWeekdays[d.getDay()];}function formatWeekday(d){return locale_weekdays[d.getDay()];}function formatShortMonth(d){return locale_shortMonths[d.getMonth()];}function formatMonth(d){return locale_months[d.getMonth()];}function formatPeriod(d){return locale_periods[+(d.getHours()>=12)];}function formatUTCShortWeekday(d){return locale_shortWeekdays[d.getUTCDay()];}function formatUTCWeekday(d){return locale_weekdays[d.getUTCDay()];}function formatUTCShortMonth(d){return locale_shortMonths[d.getUTCMonth()];}function formatUTCMonth(d){return locale_months[d.getUTCMonth()];}function formatUTCPeriod(d){return locale_periods[+(d.getUTCHours()>=12)];}return{format:function format(specifier){var f=newFormat(specifier+="",formats);f.toString=function(){return specifier;};return f;},parse:function parse(specifier){var p=newParse(specifier+="",localDate);p.toString=function(){return specifier;};return p;},utcFormat:function utcFormat(specifier){var f=newFormat(specifier+="",utcFormats);f.toString=function(){return specifier;};return f;},utcParse:function utcParse(specifier){var p=newParse(specifier,utcDate);p.toString=function(){return specifier;};return p;}};}var pads={"-":"","_":" ","0":"0"},numberRe=/^\s*\d+/,// note: ignores next directive
percentRe=/^%/,requoteRe=/[\\^$*+?|[\]().{}]/g;function pad$1(value,fill,width){var sign=value<0?"-":"",string=(sign?-value:value)+"",length=string.length;return sign+(length<width?new Array(width-length+1).join(fill)+string:string);}function requote(s){return s.replace(requoteRe,"\\$&");}function formatRe(names){return new RegExp("^(?:"+names.map(requote).join("|")+")","i");}function formatLookup(names){var map={},i=-1,n=names.length;while(++i<n){map[names[i].toLowerCase()]=i;}return map;}function parseWeekdayNumberSunday(d,string,i){var n=numberRe.exec(string.slice(i,i+1));return n?(d.w=+n[0],i+n[0].length):-1;}function parseWeekdayNumberMonday(d,string,i){var n=numberRe.exec(string.slice(i,i+1));return n?(d.u=+n[0],i+n[0].length):-1;}function parseWeekNumberSunday(d,string,i){var n=numberRe.exec(string.slice(i,i+2));return n?(d.U=+n[0],i+n[0].length):-1;}function parseWeekNumberISO(d,string,i){var n=numberRe.exec(string.slice(i,i+2));return n?(d.V=+n[0],i+n[0].length):-1;}function parseWeekNumberMonday(d,string,i){var n=numberRe.exec(string.slice(i,i+2));return n?(d.W=+n[0],i+n[0].length):-1;}function parseFullYear(d,string,i){var n=numberRe.exec(string.slice(i,i+4));return n?(d.y=+n[0],i+n[0].length):-1;}function parseYear(d,string,i){var n=numberRe.exec(string.slice(i,i+2));return n?(d.y=+n[0]+(+n[0]>68?1900:2000),i+n[0].length):-1;}function parseZone(d,string,i){var n=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i,i+6));return n?(d.Z=n[1]?0:-(n[2]+(n[3]||"00")),i+n[0].length):-1;}function parseMonthNumber(d,string,i){var n=numberRe.exec(string.slice(i,i+2));return n?(d.m=n[0]-1,i+n[0].length):-1;}function parseDayOfMonth(d,string,i){var n=numberRe.exec(string.slice(i,i+2));return n?(d.d=+n[0],i+n[0].length):-1;}function parseDayOfYear(d,string,i){var n=numberRe.exec(string.slice(i,i+3));return n?(d.m=0,d.d=+n[0],i+n[0].length):-1;}function parseHour24(d,string,i){var n=numberRe.exec(string.slice(i,i+2));return n?(d.H=+n[0],i+n[0].length):-1;}function parseMinutes(d,string,i){var n=numberRe.exec(string.slice(i,i+2));return n?(d.M=+n[0],i+n[0].length):-1;}function parseSeconds(d,string,i){var n=numberRe.exec(string.slice(i,i+2));return n?(d.S=+n[0],i+n[0].length):-1;}function parseMilliseconds(d,string,i){var n=numberRe.exec(string.slice(i,i+3));return n?(d.L=+n[0],i+n[0].length):-1;}function parseMicroseconds(d,string,i){var n=numberRe.exec(string.slice(i,i+6));return n?(d.L=Math.floor(n[0]/1000),i+n[0].length):-1;}function parseLiteralPercent(d,string,i){var n=percentRe.exec(string.slice(i,i+1));return n?i+n[0].length:-1;}function parseUnixTimestamp(d,string,i){var n=numberRe.exec(string.slice(i));return n?(d.Q=+n[0],i+n[0].length):-1;}function parseUnixTimestampSeconds(d,string,i){var n=numberRe.exec(string.slice(i));return n?(d.Q=+n[0]*1000,i+n[0].length):-1;}function formatDayOfMonth(d,p){return pad$1(d.getDate(),p,2);}function formatHour24(d,p){return pad$1(d.getHours(),p,2);}function formatHour12(d,p){return pad$1(d.getHours()%12||12,p,2);}function formatDayOfYear(d,p){return pad$1(1+day.count(year(d),d),p,3);}function formatMilliseconds(d,p){return pad$1(d.getMilliseconds(),p,3);}function formatMicroseconds(d,p){return formatMilliseconds(d,p)+"000";}function formatMonthNumber(d,p){return pad$1(d.getMonth()+1,p,2);}function formatMinutes(d,p){return pad$1(d.getMinutes(),p,2);}function formatSeconds(d,p){return pad$1(d.getSeconds(),p,2);}function formatWeekdayNumberMonday(d){var day$$1=d.getDay();return day$$1===0?7:day$$1;}function formatWeekNumberSunday(d,p){return pad$1(sunday.count(year(d),d),p,2);}function formatWeekNumberISO(d,p){var day$$1=d.getDay();d=day$$1>=4||day$$1===0?thursday(d):thursday.ceil(d);return pad$1(thursday.count(year(d),d)+(year(d).getDay()===4),p,2);}function formatWeekdayNumberSunday(d){return d.getDay();}function formatWeekNumberMonday(d,p){return pad$1(monday.count(year(d),d),p,2);}function formatYear$1(d,p){return pad$1(d.getFullYear()%100,p,2);}function formatFullYear(d,p){return pad$1(d.getFullYear()%10000,p,4);}function formatZone(d){var z=d.getTimezoneOffset();return(z>0?"-":(z*=-1,"+"))+pad$1(z/60|0,"0",2)+pad$1(z%60,"0",2);}function formatUTCDayOfMonth(d,p){return pad$1(d.getUTCDate(),p,2);}function formatUTCHour24(d,p){return pad$1(d.getUTCHours(),p,2);}function formatUTCHour12(d,p){return pad$1(d.getUTCHours()%12||12,p,2);}function formatUTCDayOfYear(d,p){return pad$1(1+utcDay.count(utcYear(d),d),p,3);}function formatUTCMilliseconds(d,p){return pad$1(d.getUTCMilliseconds(),p,3);}function formatUTCMicroseconds(d,p){return formatUTCMilliseconds(d,p)+"000";}function formatUTCMonthNumber(d,p){return pad$1(d.getUTCMonth()+1,p,2);}function formatUTCMinutes(d,p){return pad$1(d.getUTCMinutes(),p,2);}function formatUTCSeconds(d,p){return pad$1(d.getUTCSeconds(),p,2);}function formatUTCWeekdayNumberMonday(d){var dow=d.getUTCDay();return dow===0?7:dow;}function formatUTCWeekNumberSunday(d,p){return pad$1(utcSunday.count(utcYear(d),d),p,2);}function formatUTCWeekNumberISO(d,p){var day$$1=d.getUTCDay();d=day$$1>=4||day$$1===0?utcThursday(d):utcThursday.ceil(d);return pad$1(utcThursday.count(utcYear(d),d)+(utcYear(d).getUTCDay()===4),p,2);}function formatUTCWeekdayNumberSunday(d){return d.getUTCDay();}function formatUTCWeekNumberMonday(d,p){return pad$1(utcMonday.count(utcYear(d),d),p,2);}function formatUTCYear(d,p){return pad$1(d.getUTCFullYear()%100,p,2);}function formatUTCFullYear(d,p){return pad$1(d.getUTCFullYear()%10000,p,4);}function formatUTCZone(){return"+0000";}function formatLiteralPercent(){return"%";}function formatUnixTimestamp(d){return+d;}function formatUnixTimestampSeconds(d){return Math.floor(+d/1000);}var locale$1;defaultLocale$1({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});function defaultLocale$1(definition){locale$1=formatLocale$1(definition);exports.timeFormat=locale$1.format;exports.timeParse=locale$1.parse;exports.utcFormat=locale$1.utcFormat;exports.utcParse=locale$1.utcParse;return locale$1;}var isoSpecifier="%Y-%m-%dT%H:%M:%S.%LZ";function formatIsoNative(date){return date.toISOString();}var formatIso=Date.prototype.toISOString?formatIsoNative:exports.utcFormat(isoSpecifier);function parseIsoNative(string){var date=new Date(string);return isNaN(date)?null:date;}var parseIso=+new Date("2000-01-01T00:00:00.000Z")?parseIsoNative:exports.utcParse(isoSpecifier);var durationSecond$1=1000,durationMinute$1=durationSecond$1*60,durationHour$1=durationMinute$1*60,durationDay$1=durationHour$1*24,durationWeek$1=durationDay$1*7,durationMonth=durationDay$1*30,durationYear=durationDay$1*365;function date$1(t){return new Date(t);}function number$3(t){return t instanceof Date?+t:+new Date(+t);}function calendar(year$$1,month$$1,week,day$$1,hour$$1,minute$$1,second$$1,millisecond$$1,format){var scale=continuous(identity$6,identity$6),invert=scale.invert,domain=scale.domain;var formatMillisecond=format(".%L"),formatSecond=format(":%S"),formatMinute=format("%I:%M"),formatHour=format("%I %p"),formatDay=format("%a %d"),formatWeek=format("%b %d"),formatMonth=format("%B"),formatYear=format("%Y");var tickIntervals=[[second$$1,1,durationSecond$1],[second$$1,5,5*durationSecond$1],[second$$1,15,15*durationSecond$1],[second$$1,30,30*durationSecond$1],[minute$$1,1,durationMinute$1],[minute$$1,5,5*durationMinute$1],[minute$$1,15,15*durationMinute$1],[minute$$1,30,30*durationMinute$1],[hour$$1,1,durationHour$1],[hour$$1,3,3*durationHour$1],[hour$$1,6,6*durationHour$1],[hour$$1,12,12*durationHour$1],[day$$1,1,durationDay$1],[day$$1,2,2*durationDay$1],[week,1,durationWeek$1],[month$$1,1,durationMonth],[month$$1,3,3*durationMonth],[year$$1,1,durationYear]];function tickFormat(date){return(second$$1(date)<date?formatMillisecond:minute$$1(date)<date?formatSecond:hour$$1(date)<date?formatMinute:day$$1(date)<date?formatHour:month$$1(date)<date?week(date)<date?formatDay:formatWeek:year$$1(date)<date?formatMonth:formatYear)(date);}function tickInterval(interval,start,stop,step){if(interval==null)interval=10;// If a desired tick count is specified, pick a reasonable tick interval
// based on the extent of the domain and a rough estimate of tick size.
// Otherwise, assume interval is already a time interval and use it.
if(typeof interval==="number"){var target=Math.abs(stop-start)/interval,i=bisector(function(i){return i[2];}).right(tickIntervals,target);if(i===tickIntervals.length){step=tickStep(start/durationYear,stop/durationYear,interval);interval=year$$1;}else if(i){i=tickIntervals[target/tickIntervals[i-1][2]<tickIntervals[i][2]/target?i-1:i];step=i[1];interval=i[0];}else{step=Math.max(tickStep(start,stop,interval),1);interval=millisecond$$1;}}return step==null?interval:interval.every(step);}scale.invert=function(y){return new Date(invert(y));};scale.domain=function(_){return arguments.length?domain(map$2.call(_,number$3)):domain().map(date$1);};scale.ticks=function(interval,step){var d=domain(),t0=d[0],t1=d[d.length-1],r=t1<t0,t;if(r)t=t0,t0=t1,t1=t;t=tickInterval(interval,t0,t1,step);t=t?t.range(t0,t1+1):[];// inclusive stop
return r?t.reverse():t;};scale.tickFormat=function(count,specifier){return specifier==null?tickFormat:format(specifier);};scale.nice=function(interval,step){var d=domain();return(interval=tickInterval(interval,d[0],d[d.length-1],step))?domain(nice(d,interval)):scale;};scale.copy=function(){return copy(scale,calendar(year$$1,month$$1,week,day$$1,hour$$1,minute$$1,second$$1,millisecond$$1,format));};return scale;}function time(){return initRange.apply(calendar(year,month,sunday,day,hour,minute,second,millisecond,exports.timeFormat).domain([new Date(2000,0,1),new Date(2000,0,2)]),arguments);}function utcTime(){return initRange.apply(calendar(utcYear,utcMonth,utcSunday,utcDay,utcHour,utcMinute,second,millisecond,exports.utcFormat).domain([Date.UTC(2000,0,1),Date.UTC(2000,0,2)]),arguments);}function transformer$2(){var x0=0,x1=1,t0,t1,k10,transform,interpolator=identity$6,clamp=false,unknown;function scale(x){return isNaN(x=+x)?unknown:interpolator(k10===0?0.5:(x=(transform(x)-t0)*k10,clamp?Math.max(0,Math.min(1,x)):x));}scale.domain=function(_){return arguments.length?(t0=transform(x0=+_[0]),t1=transform(x1=+_[1]),k10=t0===t1?0:1/(t1-t0),scale):[x0,x1];};scale.clamp=function(_){return arguments.length?(clamp=!!_,scale):clamp;};scale.interpolator=function(_){return arguments.length?(interpolator=_,scale):interpolator;};scale.unknown=function(_){return arguments.length?(unknown=_,scale):unknown;};return function(t){transform=t,t0=t(x0),t1=t(x1),k10=t0===t1?0:1/(t1-t0);return scale;};}function copy$1(source,target){return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());}function sequential(){var scale=linearish(transformer$2()(identity$6));scale.copy=function(){return copy$1(scale,sequential());};return initInterpolator.apply(scale,arguments);}function sequentialLog(){var scale=loggish(transformer$2()).domain([1,10]);scale.copy=function(){return copy$1(scale,sequentialLog()).base(scale.base());};return initInterpolator.apply(scale,arguments);}function sequentialSymlog(){var scale=symlogish(transformer$2());scale.copy=function(){return copy$1(scale,sequentialSymlog()).constant(scale.constant());};return initInterpolator.apply(scale,arguments);}function sequentialPow(){var scale=powish(transformer$2());scale.copy=function(){return copy$1(scale,sequentialPow()).exponent(scale.exponent());};return initInterpolator.apply(scale,arguments);}function sequentialSqrt(){return sequentialPow.apply(null,arguments).exponent(0.5);}function sequentialQuantile(){var domain=[],interpolator=identity$6;function scale(x){if(!isNaN(x=+x))return interpolator((bisectRight(domain,x)-1)/(domain.length-1));}scale.domain=function(_){if(!arguments.length)return domain.slice();domain=[];for(var i=0,n=_.length,d;i<n;++i){if(d=_[i],d!=null&&!isNaN(d=+d))domain.push(d);}domain.sort(ascending);return scale;};scale.interpolator=function(_){return arguments.length?(interpolator=_,scale):interpolator;};scale.copy=function(){return sequentialQuantile(interpolator).domain(domain);};return initInterpolator.apply(scale,arguments);}function transformer$3(){var x0=0,x1=0.5,x2=1,t0,t1,t2,k10,k21,interpolator=identity$6,transform,clamp=false,unknown;function scale(x){return isNaN(x=+x)?unknown:(x=0.5+((x=+transform(x))-t1)*(x<t1?k10:k21),interpolator(clamp?Math.max(0,Math.min(1,x)):x));}scale.domain=function(_){return arguments.length?(t0=transform(x0=+_[0]),t1=transform(x1=+_[1]),t2=transform(x2=+_[2]),k10=t0===t1?0:0.5/(t1-t0),k21=t1===t2?0:0.5/(t2-t1),scale):[x0,x1,x2];};scale.clamp=function(_){return arguments.length?(clamp=!!_,scale):clamp;};scale.interpolator=function(_){return arguments.length?(interpolator=_,scale):interpolator;};scale.unknown=function(_){return arguments.length?(unknown=_,scale):unknown;};return function(t){transform=t,t0=t(x0),t1=t(x1),t2=t(x2),k10=t0===t1?0:0.5/(t1-t0),k21=t1===t2?0:0.5/(t2-t1);return scale;};}function diverging(){var scale=linearish(transformer$3()(identity$6));scale.copy=function(){return copy$1(scale,diverging());};return initInterpolator.apply(scale,arguments);}function divergingLog(){var scale=loggish(transformer$3()).domain([0.1,1,10]);scale.copy=function(){return copy$1(scale,divergingLog()).base(scale.base());};return initInterpolator.apply(scale,arguments);}function divergingSymlog(){var scale=symlogish(transformer$3());scale.copy=function(){return copy$1(scale,divergingSymlog()).constant(scale.constant());};return initInterpolator.apply(scale,arguments);}function divergingPow(){var scale=powish(transformer$3());scale.copy=function(){return copy$1(scale,divergingPow()).exponent(scale.exponent());};return initInterpolator.apply(scale,arguments);}function divergingSqrt(){return divergingPow.apply(null,arguments).exponent(0.5);}function colors(specifier){var n=specifier.length/6|0,colors=new Array(n),i=0;while(i<n){colors[i]="#"+specifier.slice(i*6,++i*6);}return colors;}var category10=colors("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");var Accent=colors("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");var Dark2=colors("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");var Paired=colors("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");var Pastel1=colors("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");var Pastel2=colors("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");var Set1=colors("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");var Set2=colors("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");var Set3=colors("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");function ramp(scheme){return rgbBasis(scheme[scheme.length-1]);}var scheme=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(colors);var BrBG=ramp(scheme);var scheme$1=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(colors);var PRGn=ramp(scheme$1);var scheme$2=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(colors);var PiYG=ramp(scheme$2);var scheme$3=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(colors);var PuOr=ramp(scheme$3);var scheme$4=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(colors);var RdBu=ramp(scheme$4);var scheme$5=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(colors);var RdGy=ramp(scheme$5);var scheme$6=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(colors);var RdYlBu=ramp(scheme$6);var scheme$7=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(colors);var RdYlGn=ramp(scheme$7);var scheme$8=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(colors);var Spectral=ramp(scheme$8);var scheme$9=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(colors);var BuGn=ramp(scheme$9);var scheme$a=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(colors);var BuPu=ramp(scheme$a);var scheme$b=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(colors);var GnBu=ramp(scheme$b);var scheme$c=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(colors);var OrRd=ramp(scheme$c);var scheme$d=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(colors);var PuBuGn=ramp(scheme$d);var scheme$e=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(colors);var PuBu=ramp(scheme$e);var scheme$f=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(colors);var PuRd=ramp(scheme$f);var scheme$g=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(colors);var RdPu=ramp(scheme$g);var scheme$h=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(colors);var YlGnBu=ramp(scheme$h);var scheme$i=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(colors);var YlGn=ramp(scheme$i);var scheme$j=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(colors);var YlOrBr=ramp(scheme$j);var scheme$k=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(colors);var YlOrRd=ramp(scheme$k);var scheme$l=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(colors);var Blues=ramp(scheme$l);var scheme$m=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(colors);var Greens=ramp(scheme$m);var scheme$n=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(colors);var Greys=ramp(scheme$n);var scheme$o=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(colors);var Purples=ramp(scheme$o);var scheme$p=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(colors);var Reds=ramp(scheme$p);var scheme$q=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(colors);var Oranges=ramp(scheme$q);var cubehelix$3=cubehelixLong(cubehelix(300,0.5,0.0),cubehelix(-240,0.5,1.0));var warm=cubehelixLong(cubehelix(-100,0.75,0.35),cubehelix(80,1.50,0.8));var cool=cubehelixLong(cubehelix(260,0.75,0.35),cubehelix(80,1.50,0.8));var c=cubehelix();function rainbow(t){if(t<0||t>1)t-=Math.floor(t);var ts=Math.abs(t-0.5);c.h=360*t-100;c.s=1.5-1.5*ts;c.l=0.8-0.9*ts;return c+"";}var c$1=rgb(),pi_1_3=Math.PI/3,pi_2_3=Math.PI*2/3;function sinebow(t){var x;t=(0.5-t)*Math.PI;c$1.r=255*(x=Math.sin(t))*x;c$1.g=255*(x=Math.sin(t+pi_1_3))*x;c$1.b=255*(x=Math.sin(t+pi_2_3))*x;return c$1+"";}function ramp$1(range){var n=range.length;return function(t){return range[Math.max(0,Math.min(n-1,Math.floor(t*n)))];};}var viridis=ramp$1(colors("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));var magma=ramp$1(colors("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));var inferno=ramp$1(colors("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));var plasma=ramp$1(colors("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function constant$b(x){return function constant(){return x;};}var abs$1=Math.abs;var atan2$1=Math.atan2;var cos$2=Math.cos;var max$2=Math.max;var min$1=Math.min;var sin$2=Math.sin;var sqrt$2=Math.sqrt;var epsilon$3=1e-12;var pi$4=Math.PI;var halfPi$3=pi$4/2;var tau$4=2*pi$4;function acos$1(x){return x>1?0:x<-1?pi$4:Math.acos(x);}function asin$1(x){return x>=1?halfPi$3:x<=-1?-halfPi$3:Math.asin(x);}function arcInnerRadius(d){return d.innerRadius;}function arcOuterRadius(d){return d.outerRadius;}function arcStartAngle(d){return d.startAngle;}function arcEndAngle(d){return d.endAngle;}function arcPadAngle(d){return d&&d.padAngle;// Note: optional!
}function intersect(x0,y0,x1,y1,x2,y2,x3,y3){var x10=x1-x0,y10=y1-y0,x32=x3-x2,y32=y3-y2,t=y32*x10-x32*y10;if(t*t<epsilon$3)return;t=(x32*(y0-y2)-y32*(x0-x2))/t;return[x0+t*x10,y0+t*y10];}// Compute perpendicular offset line of length rc.
// http://mathworld.wolfram.com/Circle-LineIntersection.html
function cornerTangents(x0,y0,x1,y1,r1,rc,cw){var x01=x0-x1,y01=y0-y1,lo=(cw?rc:-rc)/sqrt$2(x01*x01+y01*y01),ox=lo*y01,oy=-lo*x01,x11=x0+ox,y11=y0+oy,x10=x1+ox,y10=y1+oy,x00=(x11+x10)/2,y00=(y11+y10)/2,dx=x10-x11,dy=y10-y11,d2=dx*dx+dy*dy,r=r1-rc,D=x11*y10-x10*y11,d=(dy<0?-1:1)*sqrt$2(max$2(0,r*r*d2-D*D)),cx0=(D*dy-dx*d)/d2,cy0=(-D*dx-dy*d)/d2,cx1=(D*dy+dx*d)/d2,cy1=(-D*dx+dy*d)/d2,dx0=cx0-x00,dy0=cy0-y00,dx1=cx1-x00,dy1=cy1-y00;// Pick the closer of the two intersection points.
// TODO Is there a faster way to determine which intersection to use?
if(dx0*dx0+dy0*dy0>dx1*dx1+dy1*dy1)cx0=cx1,cy0=cy1;return{cx:cx0,cy:cy0,x01:-ox,y01:-oy,x11:cx0*(r1/r-1),y11:cy0*(r1/r-1)};}function arc(){var innerRadius=arcInnerRadius,outerRadius=arcOuterRadius,cornerRadius=constant$b(0),padRadius=null,startAngle=arcStartAngle,endAngle=arcEndAngle,padAngle=arcPadAngle,context=null;function arc(){var buffer,r,r0=+innerRadius.apply(this,arguments),r1=+outerRadius.apply(this,arguments),a0=startAngle.apply(this,arguments)-halfPi$3,a1=endAngle.apply(this,arguments)-halfPi$3,da=abs$1(a1-a0),cw=a1>a0;if(!context)context=buffer=path();// Ensure that the outer radius is always larger than the inner radius.
if(r1<r0)r=r1,r1=r0,r0=r;// Is it a point?
if(!(r1>epsilon$3))context.moveTo(0,0);// Or is it a circle or annulus?
else if(da>tau$4-epsilon$3){context.moveTo(r1*cos$2(a0),r1*sin$2(a0));context.arc(0,0,r1,a0,a1,!cw);if(r0>epsilon$3){context.moveTo(r0*cos$2(a1),r0*sin$2(a1));context.arc(0,0,r0,a1,a0,cw);}}// Or is it a circular or annular sector?
else{var a01=a0,a11=a1,a00=a0,a10=a1,da0=da,da1=da,ap=padAngle.apply(this,arguments)/2,rp=ap>epsilon$3&&(padRadius?+padRadius.apply(this,arguments):sqrt$2(r0*r0+r1*r1)),rc=min$1(abs$1(r1-r0)/2,+cornerRadius.apply(this,arguments)),rc0=rc,rc1=rc,t0,t1;// Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
if(rp>epsilon$3){var p0=asin$1(rp/r0*sin$2(ap)),p1=asin$1(rp/r1*sin$2(ap));if((da0-=p0*2)>epsilon$3)p0*=cw?1:-1,a00+=p0,a10-=p0;else da0=0,a00=a10=(a0+a1)/2;if((da1-=p1*2)>epsilon$3)p1*=cw?1:-1,a01+=p1,a11-=p1;else da1=0,a01=a11=(a0+a1)/2;}var x01=r1*cos$2(a01),y01=r1*sin$2(a01),x10=r0*cos$2(a10),y10=r0*sin$2(a10);// Apply rounded corners?
if(rc>epsilon$3){var x11=r1*cos$2(a11),y11=r1*sin$2(a11),x00=r0*cos$2(a00),y00=r0*sin$2(a00),oc;// Restrict the corner radius according to the sector angle.
if(da<pi$4&&(oc=intersect(x01,y01,x00,y00,x11,y11,x10,y10))){var ax=x01-oc[0],ay=y01-oc[1],bx=x11-oc[0],by=y11-oc[1],kc=1/sin$2(acos$1((ax*bx+ay*by)/(sqrt$2(ax*ax+ay*ay)*sqrt$2(bx*bx+by*by)))/2),lc=sqrt$2(oc[0]*oc[0]+oc[1]*oc[1]);rc0=min$1(rc,(r0-lc)/(kc-1));rc1=min$1(rc,(r1-lc)/(kc+1));}}// Is the sector collapsed to a line?
if(!(da1>epsilon$3))context.moveTo(x01,y01);// Does the sector’s outer ring have rounded corners?
else if(rc1>epsilon$3){t0=cornerTangents(x00,y00,x01,y01,r1,rc1,cw);t1=cornerTangents(x11,y11,x10,y10,r1,rc1,cw);context.moveTo(t0.cx+t0.x01,t0.cy+t0.y01);// Have the corners merged?
if(rc1<rc)context.arc(t0.cx,t0.cy,rc1,atan2$1(t0.y01,t0.x01),atan2$1(t1.y01,t1.x01),!cw);// Otherwise, draw the two corners and the ring.
else{context.arc(t0.cx,t0.cy,rc1,atan2$1(t0.y01,t0.x01),atan2$1(t0.y11,t0.x11),!cw);context.arc(0,0,r1,atan2$1(t0.cy+t0.y11,t0.cx+t0.x11),atan2$1(t1.cy+t1.y11,t1.cx+t1.x11),!cw);context.arc(t1.cx,t1.cy,rc1,atan2$1(t1.y11,t1.x11),atan2$1(t1.y01,t1.x01),!cw);}}// Or is the outer ring just a circular arc?
else context.moveTo(x01,y01),context.arc(0,0,r1,a01,a11,!cw);// Is there no inner ring, and it’s a circular sector?
// Or perhaps it’s an annular sector collapsed due to padding?
if(!(r0>epsilon$3)||!(da0>epsilon$3))context.lineTo(x10,y10);// Does the sector’s inner ring (or point) have rounded corners?
else if(rc0>epsilon$3){t0=cornerTangents(x10,y10,x11,y11,r0,-rc0,cw);t1=cornerTangents(x01,y01,x00,y00,r0,-rc0,cw);context.lineTo(t0.cx+t0.x01,t0.cy+t0.y01);// Have the corners merged?
if(rc0<rc)context.arc(t0.cx,t0.cy,rc0,atan2$1(t0.y01,t0.x01),atan2$1(t1.y01,t1.x01),!cw);// Otherwise, draw the two corners and the ring.
else{context.arc(t0.cx,t0.cy,rc0,atan2$1(t0.y01,t0.x01),atan2$1(t0.y11,t0.x11),!cw);context.arc(0,0,r0,atan2$1(t0.cy+t0.y11,t0.cx+t0.x11),atan2$1(t1.cy+t1.y11,t1.cx+t1.x11),cw);context.arc(t1.cx,t1.cy,rc0,atan2$1(t1.y11,t1.x11),atan2$1(t1.y01,t1.x01),!cw);}}// Or is the inner ring just a circular arc?
else context.arc(0,0,r0,a10,a00,cw);}context.closePath();if(buffer)return context=null,buffer+""||null;}arc.centroid=function(){var r=(+innerRadius.apply(this,arguments)+ +outerRadius.apply(this,arguments))/2,a=(+startAngle.apply(this,arguments)+ +endAngle.apply(this,arguments))/2-pi$4/2;return[cos$2(a)*r,sin$2(a)*r];};arc.innerRadius=function(_){return arguments.length?(innerRadius=typeof _==="function"?_:constant$b(+_),arc):innerRadius;};arc.outerRadius=function(_){return arguments.length?(outerRadius=typeof _==="function"?_:constant$b(+_),arc):outerRadius;};arc.cornerRadius=function(_){return arguments.length?(cornerRadius=typeof _==="function"?_:constant$b(+_),arc):cornerRadius;};arc.padRadius=function(_){return arguments.length?(padRadius=_==null?null:typeof _==="function"?_:constant$b(+_),arc):padRadius;};arc.startAngle=function(_){return arguments.length?(startAngle=typeof _==="function"?_:constant$b(+_),arc):startAngle;};arc.endAngle=function(_){return arguments.length?(endAngle=typeof _==="function"?_:constant$b(+_),arc):endAngle;};arc.padAngle=function(_){return arguments.length?(padAngle=typeof _==="function"?_:constant$b(+_),arc):padAngle;};arc.context=function(_){return arguments.length?(context=_==null?null:_,arc):context;};return arc;}function Linear(context){this._context=context;}Linear.prototype={areaStart:function areaStart(){this._line=0;},areaEnd:function areaEnd(){this._line=NaN;},lineStart:function lineStart(){this._point=0;},lineEnd:function lineEnd(){if(this._line||this._line!==0&&this._point===1)this._context.closePath();this._line=1-this._line;},point:function point(x,y){x=+x,y=+y;switch(this._point){case 0:this._point=1;this._line?this._context.lineTo(x,y):this._context.moveTo(x,y);break;case 1:this._point=2;// proceed
default:this._context.lineTo(x,y);break;}}};function curveLinear(context){return new Linear(context);}function x$3(p){return p[0];}function y$3(p){return p[1];}function line(){var x$$1=x$3,y$$1=y$3,defined=constant$b(true),context=null,curve=curveLinear,output=null;function line(data){var i,n=data.length,d,defined0=false,buffer;if(context==null)output=curve(buffer=path());for(i=0;i<=n;++i){if(!(i<n&&defined(d=data[i],i,data))===defined0){if(defined0=!defined0)output.lineStart();else output.lineEnd();}if(defined0)output.point(+x$$1(d,i,data),+y$$1(d,i,data));}if(buffer)return output=null,buffer+""||null;}line.x=function(_){return arguments.length?(x$$1=typeof _==="function"?_:constant$b(+_),line):x$$1;};line.y=function(_){return arguments.length?(y$$1=typeof _==="function"?_:constant$b(+_),line):y$$1;};line.defined=function(_){return arguments.length?(defined=typeof _==="function"?_:constant$b(!!_),line):defined;};line.curve=function(_){return arguments.length?(curve=_,context!=null&&(output=curve(context)),line):curve;};line.context=function(_){return arguments.length?(_==null?context=output=null:output=curve(context=_),line):context;};return line;}function area$3(){var x0=x$3,x1=null,y0=constant$b(0),y1=y$3,defined=constant$b(true),context=null,curve=curveLinear,output=null;function area(data){var i,j,k,n=data.length,d,defined0=false,buffer,x0z=new Array(n),y0z=new Array(n);if(context==null)output=curve(buffer=path());for(i=0;i<=n;++i){if(!(i<n&&defined(d=data[i],i,data))===defined0){if(defined0=!defined0){j=i;output.areaStart();output.lineStart();}else{output.lineEnd();output.lineStart();for(k=i-1;k>=j;--k){output.point(x0z[k],y0z[k]);}output.lineEnd();output.areaEnd();}}if(defined0){x0z[i]=+x0(d,i,data),y0z[i]=+y0(d,i,data);output.point(x1?+x1(d,i,data):x0z[i],y1?+y1(d,i,data):y0z[i]);}}if(buffer)return output=null,buffer+""||null;}function arealine(){return line().defined(defined).curve(curve).context(context);}area.x=function(_){return arguments.length?(x0=typeof _==="function"?_:constant$b(+_),x1=null,area):x0;};area.x0=function(_){return arguments.length?(x0=typeof _==="function"?_:constant$b(+_),area):x0;};area.x1=function(_){return arguments.length?(x1=_==null?null:typeof _==="function"?_:constant$b(+_),area):x1;};area.y=function(_){return arguments.length?(y0=typeof _==="function"?_:constant$b(+_),y1=null,area):y0;};area.y0=function(_){return arguments.length?(y0=typeof _==="function"?_:constant$b(+_),area):y0;};area.y1=function(_){return arguments.length?(y1=_==null?null:typeof _==="function"?_:constant$b(+_),area):y1;};area.lineX0=area.lineY0=function(){return arealine().x(x0).y(y0);};area.lineY1=function(){return arealine().x(x0).y(y1);};area.lineX1=function(){return arealine().x(x1).y(y0);};area.defined=function(_){return arguments.length?(defined=typeof _==="function"?_:constant$b(!!_),area):defined;};area.curve=function(_){return arguments.length?(curve=_,context!=null&&(output=curve(context)),area):curve;};area.context=function(_){return arguments.length?(_==null?context=output=null:output=curve(context=_),area):context;};return area;}function descending$1(a,b){return b<a?-1:b>a?1:b>=a?0:NaN;}function identity$8(d){return d;}function pie(){var value=identity$8,sortValues=descending$1,sort=null,startAngle=constant$b(0),endAngle=constant$b(tau$4),padAngle=constant$b(0);function pie(data){var i,n=data.length,j,k,sum=0,index=new Array(n),arcs=new Array(n),a0=+startAngle.apply(this,arguments),da=Math.min(tau$4,Math.max(-tau$4,endAngle.apply(this,arguments)-a0)),a1,p=Math.min(Math.abs(da)/n,padAngle.apply(this,arguments)),pa=p*(da<0?-1:1),v;for(i=0;i<n;++i){if((v=arcs[index[i]=i]=+value(data[i],i,data))>0){sum+=v;}}// Optionally sort the arcs by previously-computed values or by data.
if(sortValues!=null)index.sort(function(i,j){return sortValues(arcs[i],arcs[j]);});else if(sort!=null)index.sort(function(i,j){return sort(data[i],data[j]);});// Compute the arcs! They are stored in the original data's order.
for(i=0,k=sum?(da-n*pa)/sum:0;i<n;++i,a0=a1){j=index[i],v=arcs[j],a1=a0+(v>0?v*k:0)+pa,arcs[j]={data:data[j],index:i,value:v,startAngle:a0,endAngle:a1,padAngle:p};}return arcs;}pie.value=function(_){return arguments.length?(value=typeof _==="function"?_:constant$b(+_),pie):value;};pie.sortValues=function(_){return arguments.length?(sortValues=_,sort=null,pie):sortValues;};pie.sort=function(_){return arguments.length?(sort=_,sortValues=null,pie):sort;};pie.startAngle=function(_){return arguments.length?(startAngle=typeof _==="function"?_:constant$b(+_),pie):startAngle;};pie.endAngle=function(_){return arguments.length?(endAngle=typeof _==="function"?_:constant$b(+_),pie):endAngle;};pie.padAngle=function(_){return arguments.length?(padAngle=typeof _==="function"?_:constant$b(+_),pie):padAngle;};return pie;}var curveRadialLinear=curveRadial(curveLinear);function Radial(curve){this._curve=curve;}Radial.prototype={areaStart:function areaStart(){this._curve.areaStart();},areaEnd:function areaEnd(){this._curve.areaEnd();},lineStart:function lineStart(){this._curve.lineStart();},lineEnd:function lineEnd(){this._curve.lineEnd();},point:function point(a,r){this._curve.point(r*Math.sin(a),r*-Math.cos(a));}};function curveRadial(curve){function radial(context){return new Radial(curve(context));}radial._curve=curve;return radial;}function lineRadial(l){var c=l.curve;l.angle=l.x,delete l.x;l.radius=l.y,delete l.y;l.curve=function(_){return arguments.length?c(curveRadial(_)):c()._curve;};return l;}function lineRadial$1(){return lineRadial(line().curve(curveRadialLinear));}function areaRadial(){var a=area$3().curve(curveRadialLinear),c=a.curve,x0=a.lineX0,x1=a.lineX1,y0=a.lineY0,y1=a.lineY1;a.angle=a.x,delete a.x;a.startAngle=a.x0,delete a.x0;a.endAngle=a.x1,delete a.x1;a.radius=a.y,delete a.y;a.innerRadius=a.y0,delete a.y0;a.outerRadius=a.y1,delete a.y1;a.lineStartAngle=function(){return lineRadial(x0());},delete a.lineX0;a.lineEndAngle=function(){return lineRadial(x1());},delete a.lineX1;a.lineInnerRadius=function(){return lineRadial(y0());},delete a.lineY0;a.lineOuterRadius=function(){return lineRadial(y1());},delete a.lineY1;a.curve=function(_){return arguments.length?c(curveRadial(_)):c()._curve;};return a;}function pointRadial(x,y){return[(y=+y)*Math.cos(x-=Math.PI/2),y*Math.sin(x)];}var slice$6=Array.prototype.slice;function linkSource(d){return d.source;}function linkTarget(d){return d.target;}function link$2(curve){var source=linkSource,target=linkTarget,x$$1=x$3,y$$1=y$3,context=null;function link(){var buffer,argv=slice$6.call(arguments),s=source.apply(this,argv),t=target.apply(this,argv);if(!context)context=buffer=path();curve(context,+x$$1.apply(this,(argv[0]=s,argv)),+y$$1.apply(this,argv),+x$$1.apply(this,(argv[0]=t,argv)),+y$$1.apply(this,argv));if(buffer)return context=null,buffer+""||null;}link.source=function(_){return arguments.length?(source=_,link):source;};link.target=function(_){return arguments.length?(target=_,link):target;};link.x=function(_){return arguments.length?(x$$1=typeof _==="function"?_:constant$b(+_),link):x$$1;};link.y=function(_){return arguments.length?(y$$1=typeof _==="function"?_:constant$b(+_),link):y$$1;};link.context=function(_){return arguments.length?(context=_==null?null:_,link):context;};return link;}function curveHorizontal(context,x0,y0,x1,y1){context.moveTo(x0,y0);context.bezierCurveTo(x0=(x0+x1)/2,y0,x0,y1,x1,y1);}function curveVertical(context,x0,y0,x1,y1){context.moveTo(x0,y0);context.bezierCurveTo(x0,y0=(y0+y1)/2,x1,y0,x1,y1);}function curveRadial$1(context,x0,y0,x1,y1){var p0=pointRadial(x0,y0),p1=pointRadial(x0,y0=(y0+y1)/2),p2=pointRadial(x1,y0),p3=pointRadial(x1,y1);context.moveTo(p0[0],p0[1]);context.bezierCurveTo(p1[0],p1[1],p2[0],p2[1],p3[0],p3[1]);}function linkHorizontal(){return link$2(curveHorizontal);}function linkVertical(){return link$2(curveVertical);}function linkRadial(){var l=link$2(curveRadial$1);l.angle=l.x,delete l.x;l.radius=l.y,delete l.y;return l;}var circle$2={draw:function draw(context,size){var r=Math.sqrt(size/pi$4);context.moveTo(r,0);context.arc(0,0,r,0,tau$4);}};var cross$2={draw:function draw(context,size){var r=Math.sqrt(size/5)/2;context.moveTo(-3*r,-r);context.lineTo(-r,-r);context.lineTo(-r,-3*r);context.lineTo(r,-3*r);context.lineTo(r,-r);context.lineTo(3*r,-r);context.lineTo(3*r,r);context.lineTo(r,r);context.lineTo(r,3*r);context.lineTo(-r,3*r);context.lineTo(-r,r);context.lineTo(-3*r,r);context.closePath();}};var tan30=Math.sqrt(1/3),tan30_2=tan30*2;var diamond={draw:function draw(context,size){var y=Math.sqrt(size/tan30_2),x=y*tan30;context.moveTo(0,-y);context.lineTo(x,0);context.lineTo(0,y);context.lineTo(-x,0);context.closePath();}};var ka=0.89081309152928522810,kr=Math.sin(pi$4/10)/Math.sin(7*pi$4/10),kx=Math.sin(tau$4/10)*kr,ky=-Math.cos(tau$4/10)*kr;var star={draw:function draw(context,size){var r=Math.sqrt(size*ka),x=kx*r,y=ky*r;context.moveTo(0,-r);context.lineTo(x,y);for(var i=1;i<5;++i){var a=tau$4*i/5,c=Math.cos(a),s=Math.sin(a);context.lineTo(s*r,-c*r);context.lineTo(c*x-s*y,s*x+c*y);}context.closePath();}};var square={draw:function draw(context,size){var w=Math.sqrt(size),x=-w/2;context.rect(x,x,w,w);}};var sqrt3=Math.sqrt(3);var triangle={draw:function draw(context,size){var y=-Math.sqrt(size/(sqrt3*3));context.moveTo(0,y*2);context.lineTo(-sqrt3*y,-y);context.lineTo(sqrt3*y,-y);context.closePath();}};var c$2=-0.5,s=Math.sqrt(3)/2,k=1/Math.sqrt(12),a=(k/2+1)*3;var wye={draw:function draw(context,size){var r=Math.sqrt(size/a),x0=r/2,y0=r*k,x1=x0,y1=r*k+r,x2=-x1,y2=y1;context.moveTo(x0,y0);context.lineTo(x1,y1);context.lineTo(x2,y2);context.lineTo(c$2*x0-s*y0,s*x0+c$2*y0);context.lineTo(c$2*x1-s*y1,s*x1+c$2*y1);context.lineTo(c$2*x2-s*y2,s*x2+c$2*y2);context.lineTo(c$2*x0+s*y0,c$2*y0-s*x0);context.lineTo(c$2*x1+s*y1,c$2*y1-s*x1);context.lineTo(c$2*x2+s*y2,c$2*y2-s*x2);context.closePath();}};var symbols=[circle$2,cross$2,diamond,square,star,triangle,wye];function symbol(){var type=constant$b(circle$2),size=constant$b(64),context=null;function symbol(){var buffer;if(!context)context=buffer=path();type.apply(this,arguments).draw(context,+size.apply(this,arguments));if(buffer)return context=null,buffer+""||null;}symbol.type=function(_){return arguments.length?(type=typeof _==="function"?_:constant$b(_),symbol):type;};symbol.size=function(_){return arguments.length?(size=typeof _==="function"?_:constant$b(+_),symbol):size;};symbol.context=function(_){return arguments.length?(context=_==null?null:_,symbol):context;};return symbol;}function noop$3(){}function point$2(that,x,y){that._context.bezierCurveTo((2*that._x0+that._x1)/3,(2*that._y0+that._y1)/3,(that._x0+2*that._x1)/3,(that._y0+2*that._y1)/3,(that._x0+4*that._x1+x)/6,(that._y0+4*that._y1+y)/6);}function Basis(context){this._context=context;}Basis.prototype={areaStart:function areaStart(){this._line=0;},areaEnd:function areaEnd(){this._line=NaN;},lineStart:function lineStart(){this._x0=this._x1=this._y0=this._y1=NaN;this._point=0;},lineEnd:function lineEnd(){switch(this._point){case 3:point$2(this,this._x1,this._y1);// proceed
case 2:this._context.lineTo(this._x1,this._y1);break;}if(this._line||this._line!==0&&this._point===1)this._context.closePath();this._line=1-this._line;},point:function point(x,y){x=+x,y=+y;switch(this._point){case 0:this._point=1;this._line?this._context.lineTo(x,y):this._context.moveTo(x,y);break;case 1:this._point=2;break;case 2:this._point=3;this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);// proceed
default:point$2(this,x,y);break;}this._x0=this._x1,this._x1=x;this._y0=this._y1,this._y1=y;}};function basis$2(context){return new Basis(context);}function BasisClosed(context){this._context=context;}BasisClosed.prototype={areaStart:noop$3,areaEnd:noop$3,lineStart:function lineStart(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN;this._point=0;},lineEnd:function lineEnd(){switch(this._point){case 1:{this._context.moveTo(this._x2,this._y2);this._context.closePath();break;}case 2:{this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3);this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3);this._context.closePath();break;}case 3:{this.point(this._x2,this._y2);this.point(this._x3,this._y3);this.point(this._x4,this._y4);break;}}},point:function point(x,y){x=+x,y=+y;switch(this._point){case 0:this._point=1;this._x2=x,this._y2=y;break;case 1:this._point=2;this._x3=x,this._y3=y;break;case 2:this._point=3;this._x4=x,this._y4=y;this._context.moveTo((this._x0+4*this._x1+x)/6,(this._y0+4*this._y1+y)/6);break;default:point$2(this,x,y);break;}this._x0=this._x1,this._x1=x;this._y0=this._y1,this._y1=y;}};function basisClosed$1(context){return new BasisClosed(context);}function BasisOpen(context){this._context=context;}BasisOpen.prototype={areaStart:function areaStart(){this._line=0;},areaEnd:function areaEnd(){this._line=NaN;},lineStart:function lineStart(){this._x0=this._x1=this._y0=this._y1=NaN;this._point=0;},lineEnd:function lineEnd(){if(this._line||this._line!==0&&this._point===3)this._context.closePath();this._line=1-this._line;},point:function point(x,y){x=+x,y=+y;switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var x0=(this._x0+4*this._x1+x)/6,y0=(this._y0+4*this._y1+y)/6;this._line?this._context.lineTo(x0,y0):this._context.moveTo(x0,y0);break;case 3:this._point=4;// proceed
default:point$2(this,x,y);break;}this._x0=this._x1,this._x1=x;this._y0=this._y1,this._y1=y;}};function basisOpen(context){return new BasisOpen(context);}function Bundle(context,beta){this._basis=new Basis(context);this._beta=beta;}Bundle.prototype={lineStart:function lineStart(){this._x=[];this._y=[];this._basis.lineStart();},lineEnd:function lineEnd(){var x=this._x,y=this._y,j=x.length-1;if(j>0){var x0=x[0],y0=y[0],dx=x[j]-x0,dy=y[j]-y0,i=-1,t;while(++i<=j){t=i/j;this._basis.point(this._beta*x[i]+(1-this._beta)*(x0+t*dx),this._beta*y[i]+(1-this._beta)*(y0+t*dy));}}this._x=this._y=null;this._basis.lineEnd();},point:function point(x,y){this._x.push(+x);this._y.push(+y);}};var bundle=function custom(beta){function bundle(context){return beta===1?new Basis(context):new Bundle(context,beta);}bundle.beta=function(beta){return custom(+beta);};return bundle;}(0.85);function point$3(that,x,y){that._context.bezierCurveTo(that._x1+that._k*(that._x2-that._x0),that._y1+that._k*(that._y2-that._y0),that._x2+that._k*(that._x1-x),that._y2+that._k*(that._y1-y),that._x2,that._y2);}function Cardinal(context,tension){this._context=context;this._k=(1-tension)/6;}Cardinal.prototype={areaStart:function areaStart(){this._line=0;},areaEnd:function areaEnd(){this._line=NaN;},lineStart:function lineStart(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN;this._point=0;},lineEnd:function lineEnd(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:point$3(this,this._x1,this._y1);break;}if(this._line||this._line!==0&&this._point===1)this._context.closePath();this._line=1-this._line;},point:function point(x,y){x=+x,y=+y;switch(this._point){case 0:this._point=1;this._line?this._context.lineTo(x,y):this._context.moveTo(x,y);break;case 1:this._point=2;this._x1=x,this._y1=y;break;case 2:this._point=3;// proceed
default:point$3(this,x,y);break;}this._x0=this._x1,this._x1=this._x2,this._x2=x;this._y0=this._y1,this._y1=this._y2,this._y2=y;}};var cardinal=function custom(tension){function cardinal(context){return new Cardinal(context,tension);}cardinal.tension=function(tension){return custom(+tension);};return cardinal;}(0);function CardinalClosed(context,tension){this._context=context;this._k=(1-tension)/6;}CardinalClosed.prototype={areaStart:noop$3,areaEnd:noop$3,lineStart:function lineStart(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN;this._point=0;},lineEnd:function lineEnd(){switch(this._point){case 1:{this._context.moveTo(this._x3,this._y3);this._context.closePath();break;}case 2:{this._context.lineTo(this._x3,this._y3);this._context.closePath();break;}case 3:{this.point(this._x3,this._y3);this.point(this._x4,this._y4);this.point(this._x5,this._y5);break;}}},point:function point(x,y){x=+x,y=+y;switch(this._point){case 0:this._point=1;this._x3=x,this._y3=y;break;case 1:this._point=2;this._context.moveTo(this._x4=x,this._y4=y);break;case 2:this._point=3;this._x5=x,this._y5=y;break;default:point$3(this,x,y);break;}this._x0=this._x1,this._x1=this._x2,this._x2=x;this._y0=this._y1,this._y1=this._y2,this._y2=y;}};var cardinalClosed=function custom(tension){function cardinal$$1(context){return new CardinalClosed(context,tension);}cardinal$$1.tension=function(tension){return custom(+tension);};return cardinal$$1;}(0);function CardinalOpen(context,tension){this._context=context;this._k=(1-tension)/6;}CardinalOpen.prototype={areaStart:function areaStart(){this._line=0;},areaEnd:function areaEnd(){this._line=NaN;},lineStart:function lineStart(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN;this._point=0;},lineEnd:function lineEnd(){if(this._line||this._line!==0&&this._point===3)this._context.closePath();this._line=1-this._line;},point:function point(x,y){x=+x,y=+y;switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;// proceed
default:point$3(this,x,y);break;}this._x0=this._x1,this._x1=this._x2,this._x2=x;this._y0=this._y1,this._y1=this._y2,this._y2=y;}};var cardinalOpen=function custom(tension){function cardinal$$1(context){return new CardinalOpen(context,tension);}cardinal$$1.tension=function(tension){return custom(+tension);};return cardinal$$1;}(0);function point$4(that,x,y){var x1=that._x1,y1=that._y1,x2=that._x2,y2=that._y2;if(that._l01_a>epsilon$3){var a=2*that._l01_2a+3*that._l01_a*that._l12_a+that._l12_2a,n=3*that._l01_a*(that._l01_a+that._l12_a);x1=(x1*a-that._x0*that._l12_2a+that._x2*that._l01_2a)/n;y1=(y1*a-that._y0*that._l12_2a+that._y2*that._l01_2a)/n;}if(that._l23_a>epsilon$3){var b=2*that._l23_2a+3*that._l23_a*that._l12_a+that._l12_2a,m=3*that._l23_a*(that._l23_a+that._l12_a);x2=(x2*b+that._x1*that._l23_2a-x*that._l12_2a)/m;y2=(y2*b+that._y1*that._l23_2a-y*that._l12_2a)/m;}that._context.bezierCurveTo(x1,y1,x2,y2,that._x2,that._y2);}function CatmullRom(context,alpha){this._context=context;this._alpha=alpha;}CatmullRom.prototype={areaStart:function areaStart(){this._line=0;},areaEnd:function areaEnd(){this._line=NaN;},lineStart:function lineStart(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN;this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0;},lineEnd:function lineEnd(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2);break;}if(this._line||this._line!==0&&this._point===1)this._context.closePath();this._line=1-this._line;},point:function point(x,y){x=+x,y=+y;if(this._point){var x23=this._x2-x,y23=this._y2-y;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(x23*x23+y23*y23,this._alpha));}switch(this._point){case 0:this._point=1;this._line?this._context.lineTo(x,y):this._context.moveTo(x,y);break;case 1:this._point=2;break;case 2:this._point=3;// proceed
default:point$4(this,x,y);break;}this._l01_a=this._l12_a,this._l12_a=this._l23_a;this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a;this._x0=this._x1,this._x1=this._x2,this._x2=x;this._y0=this._y1,this._y1=this._y2,this._y2=y;}};var catmullRom=function custom(alpha){function catmullRom(context){return alpha?new CatmullRom(context,alpha):new Cardinal(context,0);}catmullRom.alpha=function(alpha){return custom(+alpha);};return catmullRom;}(0.5);function CatmullRomClosed(context,alpha){this._context=context;this._alpha=alpha;}CatmullRomClosed.prototype={areaStart:noop$3,areaEnd:noop$3,lineStart:function lineStart(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN;this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0;},lineEnd:function lineEnd(){switch(this._point){case 1:{this._context.moveTo(this._x3,this._y3);this._context.closePath();break;}case 2:{this._context.lineTo(this._x3,this._y3);this._context.closePath();break;}case 3:{this.point(this._x3,this._y3);this.point(this._x4,this._y4);this.point(this._x5,this._y5);break;}}},point:function point(x,y){x=+x,y=+y;if(this._point){var x23=this._x2-x,y23=this._y2-y;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(x23*x23+y23*y23,this._alpha));}switch(this._point){case 0:this._point=1;this._x3=x,this._y3=y;break;case 1:this._point=2;this._context.moveTo(this._x4=x,this._y4=y);break;case 2:this._point=3;this._x5=x,this._y5=y;break;default:point$4(this,x,y);break;}this._l01_a=this._l12_a,this._l12_a=this._l23_a;this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a;this._x0=this._x1,this._x1=this._x2,this._x2=x;this._y0=this._y1,this._y1=this._y2,this._y2=y;}};var catmullRomClosed=function custom(alpha){function catmullRom$$1(context){return alpha?new CatmullRomClosed(context,alpha):new CardinalClosed(context,0);}catmullRom$$1.alpha=function(alpha){return custom(+alpha);};return catmullRom$$1;}(0.5);function CatmullRomOpen(context,alpha){this._context=context;this._alpha=alpha;}CatmullRomOpen.prototype={areaStart:function areaStart(){this._line=0;},areaEnd:function areaEnd(){this._line=NaN;},lineStart:function lineStart(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN;this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0;},lineEnd:function lineEnd(){if(this._line||this._line!==0&&this._point===3)this._context.closePath();this._line=1-this._line;},point:function point(x,y){x=+x,y=+y;if(this._point){var x23=this._x2-x,y23=this._y2-y;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(x23*x23+y23*y23,this._alpha));}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;// proceed
default:point$4(this,x,y);break;}this._l01_a=this._l12_a,this._l12_a=this._l23_a;this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a;this._x0=this._x1,this._x1=this._x2,this._x2=x;this._y0=this._y1,this._y1=this._y2,this._y2=y;}};var catmullRomOpen=function custom(alpha){function catmullRom$$1(context){return alpha?new CatmullRomOpen(context,alpha):new CardinalOpen(context,0);}catmullRom$$1.alpha=function(alpha){return custom(+alpha);};return catmullRom$$1;}(0.5);function LinearClosed(context){this._context=context;}LinearClosed.prototype={areaStart:noop$3,areaEnd:noop$3,lineStart:function lineStart(){this._point=0;},lineEnd:function lineEnd(){if(this._point)this._context.closePath();},point:function point(x,y){x=+x,y=+y;if(this._point)this._context.lineTo(x,y);else this._point=1,this._context.moveTo(x,y);}};function linearClosed(context){return new LinearClosed(context);}function sign$1(x){return x<0?-1:1;}// Calculate the slopes of the tangents (Hermite-type interpolation) based on
// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
// NOV(II), P. 443, 1990.
function slope3(that,x2,y2){var h0=that._x1-that._x0,h1=x2-that._x1,s0=(that._y1-that._y0)/(h0||h1<0&&-0),s1=(y2-that._y1)/(h1||h0<0&&-0),p=(s0*h1+s1*h0)/(h0+h1);return(sign$1(s0)+sign$1(s1))*Math.min(Math.abs(s0),Math.abs(s1),0.5*Math.abs(p))||0;}// Calculate a one-sided slope.
function slope2(that,t){var h=that._x1-that._x0;return h?(3*(that._y1-that._y0)/h-t)/2:t;}// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
function point$5(that,t0,t1){var x0=that._x0,y0=that._y0,x1=that._x1,y1=that._y1,dx=(x1-x0)/3;that._context.bezierCurveTo(x0+dx,y0+dx*t0,x1-dx,y1-dx*t1,x1,y1);}function MonotoneX(context){this._context=context;}MonotoneX.prototype={areaStart:function areaStart(){this._line=0;},areaEnd:function areaEnd(){this._line=NaN;},lineStart:function lineStart(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN;this._point=0;},lineEnd:function lineEnd(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:point$5(this,this._t0,slope2(this,this._t0));break;}if(this._line||this._line!==0&&this._point===1)this._context.closePath();this._line=1-this._line;},point:function point(x,y){var t1=NaN;x=+x,y=+y;if(x===this._x1&&y===this._y1)return;// Ignore coincident points.
switch(this._point){case 0:this._point=1;this._line?this._context.lineTo(x,y):this._context.moveTo(x,y);break;case 1:this._point=2;break;case 2:this._point=3;point$5(this,slope2(this,t1=slope3(this,x,y)),t1);break;default:point$5(this,this._t0,t1=slope3(this,x,y));break;}this._x0=this._x1,this._x1=x;this._y0=this._y1,this._y1=y;this._t0=t1;}};function MonotoneY(context){this._context=new ReflectContext(context);}(MonotoneY.prototype=Object.create(MonotoneX.prototype)).point=function(x,y){MonotoneX.prototype.point.call(this,y,x);};function ReflectContext(context){this._context=context;}ReflectContext.prototype={moveTo:function moveTo(x,y){this._context.moveTo(y,x);},closePath:function closePath(){this._context.closePath();},lineTo:function lineTo(x,y){this._context.lineTo(y,x);},bezierCurveTo:function bezierCurveTo(x1,y1,x2,y2,x,y){this._context.bezierCurveTo(y1,x1,y2,x2,y,x);}};function monotoneX(context){return new MonotoneX(context);}function monotoneY(context){return new MonotoneY(context);}function Natural(context){this._context=context;}Natural.prototype={areaStart:function areaStart(){this._line=0;},areaEnd:function areaEnd(){this._line=NaN;},lineStart:function lineStart(){this._x=[];this._y=[];},lineEnd:function lineEnd(){var x=this._x,y=this._y,n=x.length;if(n){this._line?this._context.lineTo(x[0],y[0]):this._context.moveTo(x[0],y[0]);if(n===2){this._context.lineTo(x[1],y[1]);}else{var px=controlPoints(x),py=controlPoints(y);for(var i0=0,i1=1;i1<n;++i0,++i1){this._context.bezierCurveTo(px[0][i0],py[0][i0],px[1][i0],py[1][i0],x[i1],y[i1]);}}}if(this._line||this._line!==0&&n===1)this._context.closePath();this._line=1-this._line;this._x=this._y=null;},point:function point(x,y){this._x.push(+x);this._y.push(+y);}};// See https://www.particleincell.com/2012/bezier-splines/ for derivation.
function controlPoints(x){var i,n=x.length-1,m,a=new Array(n),b=new Array(n),r=new Array(n);a[0]=0,b[0]=2,r[0]=x[0]+2*x[1];for(i=1;i<n-1;++i){a[i]=1,b[i]=4,r[i]=4*x[i]+2*x[i+1];}a[n-1]=2,b[n-1]=7,r[n-1]=8*x[n-1]+x[n];for(i=1;i<n;++i){m=a[i]/b[i-1],b[i]-=m,r[i]-=m*r[i-1];}a[n-1]=r[n-1]/b[n-1];for(i=n-2;i>=0;--i){a[i]=(r[i]-a[i+1])/b[i];}b[n-1]=(x[n]+a[n-1])/2;for(i=0;i<n-1;++i){b[i]=2*x[i+1]-a[i+1];}return[a,b];}function natural(context){return new Natural(context);}function Step(context,t){this._context=context;this._t=t;}Step.prototype={areaStart:function areaStart(){this._line=0;},areaEnd:function areaEnd(){this._line=NaN;},lineStart:function lineStart(){this._x=this._y=NaN;this._point=0;},lineEnd:function lineEnd(){if(0<this._t&&this._t<1&&this._point===2)this._context.lineTo(this._x,this._y);if(this._line||this._line!==0&&this._point===1)this._context.closePath();if(this._line>=0)this._t=1-this._t,this._line=1-this._line;},point:function point(x,y){x=+x,y=+y;switch(this._point){case 0:this._point=1;this._line?this._context.lineTo(x,y):this._context.moveTo(x,y);break;case 1:this._point=2;// proceed
default:{if(this._t<=0){this._context.lineTo(this._x,y);this._context.lineTo(x,y);}else{var x1=this._x*(1-this._t)+x*this._t;this._context.lineTo(x1,this._y);this._context.lineTo(x1,y);}break;}}this._x=x,this._y=y;}};function step(context){return new Step(context,0.5);}function stepBefore(context){return new Step(context,0);}function stepAfter(context){return new Step(context,1);}function none$1(series,order){if(!((n=series.length)>1))return;for(var i=1,j,s0,s1=series[order[0]],n,m=s1.length;i<n;++i){s0=s1,s1=series[order[i]];for(j=0;j<m;++j){s1[j][1]+=s1[j][0]=isNaN(s0[j][1])?s0[j][0]:s0[j][1];}}}function none$2(series){var n=series.length,o=new Array(n);while(--n>=0){o[n]=n;}return o;}function stackValue(d,key){return d[key];}function stack(){var keys=constant$b([]),order=none$2,offset=none$1,value=stackValue;function stack(data){var kz=keys.apply(this,arguments),i,m=data.length,n=kz.length,sz=new Array(n),oz;for(i=0;i<n;++i){for(var ki=kz[i],si=sz[i]=new Array(m),j=0,sij;j<m;++j){si[j]=sij=[0,+value(data[j],ki,j,data)];sij.data=data[j];}si.key=ki;}for(i=0,oz=order(sz);i<n;++i){sz[oz[i]].index=i;}offset(sz,oz);return sz;}stack.keys=function(_){return arguments.length?(keys=typeof _==="function"?_:constant$b(slice$6.call(_)),stack):keys;};stack.value=function(_){return arguments.length?(value=typeof _==="function"?_:constant$b(+_),stack):value;};stack.order=function(_){return arguments.length?(order=_==null?none$2:typeof _==="function"?_:constant$b(slice$6.call(_)),stack):order;};stack.offset=function(_){return arguments.length?(offset=_==null?none$1:_,stack):offset;};return stack;}function expand(series,order){if(!((n=series.length)>0))return;for(var i,n,j=0,m=series[0].length,y;j<m;++j){for(y=i=0;i<n;++i){y+=series[i][j][1]||0;}if(y)for(i=0;i<n;++i){series[i][j][1]/=y;}}none$1(series,order);}function diverging$1(series,order){if(!((n=series.length)>1))return;for(var i,j=0,d,dy,yp,yn,n,m=series[order[0]].length;j<m;++j){for(yp=yn=0,i=0;i<n;++i){if((dy=(d=series[order[i]][j])[1]-d[0])>=0){d[0]=yp,d[1]=yp+=dy;}else if(dy<0){d[1]=yn,d[0]=yn+=dy;}else{d[0]=yp;}}}}function silhouette(series,order){if(!((n=series.length)>0))return;for(var j=0,s0=series[order[0]],n,m=s0.length;j<m;++j){for(var i=0,y=0;i<n;++i){y+=series[i][j][1]||0;}s0[j][1]+=s0[j][0]=-y/2;}none$1(series,order);}function wiggle(series,order){if(!((n=series.length)>0)||!((m=(s0=series[order[0]]).length)>0))return;for(var y=0,j=1,s0,m,n;j<m;++j){for(var i=0,s1=0,s2=0;i<n;++i){var si=series[order[i]],sij0=si[j][1]||0,sij1=si[j-1][1]||0,s3=(sij0-sij1)/2;for(var k=0;k<i;++k){var sk=series[order[k]],skj0=sk[j][1]||0,skj1=sk[j-1][1]||0;s3+=skj0-skj1;}s1+=sij0,s2+=s3*sij0;}s0[j-1][1]+=s0[j-1][0]=y;if(s1)y-=s2/s1;}s0[j-1][1]+=s0[j-1][0]=y;none$1(series,order);}function appearance(series){var peaks=series.map(peak);return none$2(series).sort(function(a,b){return peaks[a]-peaks[b];});}function peak(series){var i=-1,j=0,n=series.length,vi,vj=-Infinity;while(++i<n){if((vi=+series[i][1])>vj)vj=vi,j=i;}return j;}function ascending$3(series){var sums=series.map(sum$2);return none$2(series).sort(function(a,b){return sums[a]-sums[b];});}function sum$2(series){var s=0,i=-1,n=series.length,v;while(++i<n){if(v=+series[i][1])s+=v;}return s;}function descending$2(series){return ascending$3(series).reverse();}function insideOut(series){var n=series.length,i,j,sums=series.map(sum$2),order=appearance(series),top=0,bottom=0,tops=[],bottoms=[];for(i=0;i<n;++i){j=order[i];if(top<bottom){top+=sums[j];tops.push(j);}else{bottom+=sums[j];bottoms.push(j);}}return bottoms.reverse().concat(tops);}function reverse(series){return none$2(series).reverse();}function constant$c(x){return function(){return x;};}function x$4(d){return d[0];}function y$4(d){return d[1];}function RedBlackTree(){this._=null;// root node
}function RedBlackNode(node){node.U=// parent node
node.C=// color - true for red, false for black
node.L=// left node
node.R=// right node
node.P=// previous node
node.N=null;// next node
}RedBlackTree.prototype={constructor:RedBlackTree,insert:function insert(after,node){var parent,grandpa,uncle;if(after){node.P=after;node.N=after.N;if(after.N)after.N.P=node;after.N=node;if(after.R){after=after.R;while(after.L){after=after.L;}after.L=node;}else{after.R=node;}parent=after;}else if(this._){after=RedBlackFirst(this._);node.P=null;node.N=after;after.P=after.L=node;parent=after;}else{node.P=node.N=null;this._=node;parent=null;}node.L=node.R=null;node.U=parent;node.C=true;after=node;while(parent&&parent.C){grandpa=parent.U;if(parent===grandpa.L){uncle=grandpa.R;if(uncle&&uncle.C){parent.C=uncle.C=false;grandpa.C=true;after=grandpa;}else{if(after===parent.R){RedBlackRotateLeft(this,parent);after=parent;parent=after.U;}parent.C=false;grandpa.C=true;RedBlackRotateRight(this,grandpa);}}else{uncle=grandpa.L;if(uncle&&uncle.C){parent.C=uncle.C=false;grandpa.C=true;after=grandpa;}else{if(after===parent.L){RedBlackRotateRight(this,parent);after=parent;parent=after.U;}parent.C=false;grandpa.C=true;RedBlackRotateLeft(this,grandpa);}}parent=after.U;}this._.C=false;},remove:function remove(node){if(node.N)node.N.P=node.P;if(node.P)node.P.N=node.N;node.N=node.P=null;var parent=node.U,sibling,left=node.L,right=node.R,next,red;if(!left)next=right;else if(!right)next=left;else next=RedBlackFirst(right);if(parent){if(parent.L===node)parent.L=next;else parent.R=next;}else{this._=next;}if(left&&right){red=next.C;next.C=node.C;next.L=left;left.U=next;if(next!==right){parent=next.U;next.U=node.U;node=next.R;parent.L=node;next.R=right;right.U=next;}else{next.U=parent;parent=next;node=next.R;}}else{red=node.C;node=next;}if(node)node.U=parent;if(red)return;if(node&&node.C){node.C=false;return;}do{if(node===this._)break;if(node===parent.L){sibling=parent.R;if(sibling.C){sibling.C=false;parent.C=true;RedBlackRotateLeft(this,parent);sibling=parent.R;}if(sibling.L&&sibling.L.C||sibling.R&&sibling.R.C){if(!sibling.R||!sibling.R.C){sibling.L.C=false;sibling.C=true;RedBlackRotateRight(this,sibling);sibling=parent.R;}sibling.C=parent.C;parent.C=sibling.R.C=false;RedBlackRotateLeft(this,parent);node=this._;break;}}else{sibling=parent.L;if(sibling.C){sibling.C=false;parent.C=true;RedBlackRotateRight(this,parent);sibling=parent.L;}if(sibling.L&&sibling.L.C||sibling.R&&sibling.R.C){if(!sibling.L||!sibling.L.C){sibling.R.C=false;sibling.C=true;RedBlackRotateLeft(this,sibling);sibling=parent.L;}sibling.C=parent.C;parent.C=sibling.L.C=false;RedBlackRotateRight(this,parent);node=this._;break;}}sibling.C=true;node=parent;parent=parent.U;}while(!node.C);if(node)node.C=false;}};function RedBlackRotateLeft(tree,node){var p=node,q=node.R,parent=p.U;if(parent){if(parent.L===p)parent.L=q;else parent.R=q;}else{tree._=q;}q.U=parent;p.U=q;p.R=q.L;if(p.R)p.R.U=p;q.L=p;}function RedBlackRotateRight(tree,node){var p=node,q=node.L,parent=p.U;if(parent){if(parent.L===p)parent.L=q;else parent.R=q;}else{tree._=q;}q.U=parent;p.U=q;p.L=q.R;if(p.L)p.L.U=p;q.R=p;}function RedBlackFirst(node){while(node.L){node=node.L;}return node;}function createEdge(left,right,v0,v1){var edge=[null,null],index=edges.push(edge)-1;edge.left=left;edge.right=right;if(v0)setEdgeEnd(edge,left,right,v0);if(v1)setEdgeEnd(edge,right,left,v1);cells[left.index].halfedges.push(index);cells[right.index].halfedges.push(index);return edge;}function createBorderEdge(left,v0,v1){var edge=[v0,v1];edge.left=left;return edge;}function setEdgeEnd(edge,left,right,vertex){if(!edge[0]&&!edge[1]){edge[0]=vertex;edge.left=left;edge.right=right;}else if(edge.left===right){edge[1]=vertex;}else{edge[0]=vertex;}}// Liang–Barsky line clipping.
function clipEdge(edge,x0,y0,x1,y1){var a=edge[0],b=edge[1],ax=a[0],ay=a[1],bx=b[0],by=b[1],t0=0,t1=1,dx=bx-ax,dy=by-ay,r;r=x0-ax;if(!dx&&r>0)return;r/=dx;if(dx<0){if(r<t0)return;if(r<t1)t1=r;}else if(dx>0){if(r>t1)return;if(r>t0)t0=r;}r=x1-ax;if(!dx&&r<0)return;r/=dx;if(dx<0){if(r>t1)return;if(r>t0)t0=r;}else if(dx>0){if(r<t0)return;if(r<t1)t1=r;}r=y0-ay;if(!dy&&r>0)return;r/=dy;if(dy<0){if(r<t0)return;if(r<t1)t1=r;}else if(dy>0){if(r>t1)return;if(r>t0)t0=r;}r=y1-ay;if(!dy&&r<0)return;r/=dy;if(dy<0){if(r>t1)return;if(r>t0)t0=r;}else if(dy>0){if(r<t0)return;if(r<t1)t1=r;}if(!(t0>0)&&!(t1<1))return true;// TODO Better check?
if(t0>0)edge[0]=[ax+t0*dx,ay+t0*dy];if(t1<1)edge[1]=[ax+t1*dx,ay+t1*dy];return true;}function connectEdge(edge,x0,y0,x1,y1){var v1=edge[1];if(v1)return true;var v0=edge[0],left=edge.left,right=edge.right,lx=left[0],ly=left[1],rx=right[0],ry=right[1],fx=(lx+rx)/2,fy=(ly+ry)/2,fm,fb;if(ry===ly){if(fx<x0||fx>=x1)return;if(lx>rx){if(!v0)v0=[fx,y0];else if(v0[1]>=y1)return;v1=[fx,y1];}else{if(!v0)v0=[fx,y1];else if(v0[1]<y0)return;v1=[fx,y0];}}else{fm=(lx-rx)/(ry-ly);fb=fy-fm*fx;if(fm<-1||fm>1){if(lx>rx){if(!v0)v0=[(y0-fb)/fm,y0];else if(v0[1]>=y1)return;v1=[(y1-fb)/fm,y1];}else{if(!v0)v0=[(y1-fb)/fm,y1];else if(v0[1]<y0)return;v1=[(y0-fb)/fm,y0];}}else{if(ly<ry){if(!v0)v0=[x0,fm*x0+fb];else if(v0[0]>=x1)return;v1=[x1,fm*x1+fb];}else{if(!v0)v0=[x1,fm*x1+fb];else if(v0[0]<x0)return;v1=[x0,fm*x0+fb];}}}edge[0]=v0;edge[1]=v1;return true;}function clipEdges(x0,y0,x1,y1){var i=edges.length,edge;while(i--){if(!connectEdge(edge=edges[i],x0,y0,x1,y1)||!clipEdge(edge,x0,y0,x1,y1)||!(Math.abs(edge[0][0]-edge[1][0])>epsilon$4||Math.abs(edge[0][1]-edge[1][1])>epsilon$4)){delete edges[i];}}}function createCell(site){return cells[site.index]={site:site,halfedges:[]};}function cellHalfedgeAngle(cell,edge){var site=cell.site,va=edge.left,vb=edge.right;if(site===vb)vb=va,va=site;if(vb)return Math.atan2(vb[1]-va[1],vb[0]-va[0]);if(site===va)va=edge[1],vb=edge[0];else va=edge[0],vb=edge[1];return Math.atan2(va[0]-vb[0],vb[1]-va[1]);}function cellHalfedgeStart(cell,edge){return edge[+(edge.left!==cell.site)];}function cellHalfedgeEnd(cell,edge){return edge[+(edge.left===cell.site)];}function sortCellHalfedges(){for(var i=0,n=cells.length,cell,halfedges,j,m;i<n;++i){if((cell=cells[i])&&(m=(halfedges=cell.halfedges).length)){var index=new Array(m),array=new Array(m);for(j=0;j<m;++j){index[j]=j,array[j]=cellHalfedgeAngle(cell,edges[halfedges[j]]);}index.sort(function(i,j){return array[j]-array[i];});for(j=0;j<m;++j){array[j]=halfedges[index[j]];}for(j=0;j<m;++j){halfedges[j]=array[j];}}}}function clipCells(x0,y0,x1,y1){var nCells=cells.length,iCell,cell,site,iHalfedge,halfedges,nHalfedges,start,startX,startY,end,endX,endY,cover=true;for(iCell=0;iCell<nCells;++iCell){if(cell=cells[iCell]){site=cell.site;halfedges=cell.halfedges;iHalfedge=halfedges.length;// Remove any dangling clipped edges.
while(iHalfedge--){if(!edges[halfedges[iHalfedge]]){halfedges.splice(iHalfedge,1);}}// Insert any border edges as necessary.
iHalfedge=0,nHalfedges=halfedges.length;while(iHalfedge<nHalfedges){end=cellHalfedgeEnd(cell,edges[halfedges[iHalfedge]]),endX=end[0],endY=end[1];start=cellHalfedgeStart(cell,edges[halfedges[++iHalfedge%nHalfedges]]),startX=start[0],startY=start[1];if(Math.abs(endX-startX)>epsilon$4||Math.abs(endY-startY)>epsilon$4){halfedges.splice(iHalfedge,0,edges.push(createBorderEdge(site,end,Math.abs(endX-x0)<epsilon$4&&y1-endY>epsilon$4?[x0,Math.abs(startX-x0)<epsilon$4?startY:y1]:Math.abs(endY-y1)<epsilon$4&&x1-endX>epsilon$4?[Math.abs(startY-y1)<epsilon$4?startX:x1,y1]:Math.abs(endX-x1)<epsilon$4&&endY-y0>epsilon$4?[x1,Math.abs(startX-x1)<epsilon$4?startY:y0]:Math.abs(endY-y0)<epsilon$4&&endX-x0>epsilon$4?[Math.abs(startY-y0)<epsilon$4?startX:x0,y0]:null))-1);++nHalfedges;}}if(nHalfedges)cover=false;}}// If there weren’t any edges, have the closest site cover the extent.
// It doesn’t matter which corner of the extent we measure!
if(cover){var dx,dy,d2,dc=Infinity;for(iCell=0,cover=null;iCell<nCells;++iCell){if(cell=cells[iCell]){site=cell.site;dx=site[0]-x0;dy=site[1]-y0;d2=dx*dx+dy*dy;if(d2<dc)dc=d2,cover=cell;}}if(cover){var v00=[x0,y0],v01=[x0,y1],v11=[x1,y1],v10=[x1,y0];cover.halfedges.push(edges.push(createBorderEdge(site=cover.site,v00,v01))-1,edges.push(createBorderEdge(site,v01,v11))-1,edges.push(createBorderEdge(site,v11,v10))-1,edges.push(createBorderEdge(site,v10,v00))-1);}}// Lastly delete any cells with no edges; these were entirely clipped.
for(iCell=0;iCell<nCells;++iCell){if(cell=cells[iCell]){if(!cell.halfedges.length){delete cells[iCell];}}}}var circlePool=[];var firstCircle;function Circle(){RedBlackNode(this);this.x=this.y=this.arc=this.site=this.cy=null;}function attachCircle(arc){var lArc=arc.P,rArc=arc.N;if(!lArc||!rArc)return;var lSite=lArc.site,cSite=arc.site,rSite=rArc.site;if(lSite===rSite)return;var bx=cSite[0],by=cSite[1],ax=lSite[0]-bx,ay=lSite[1]-by,cx=rSite[0]-bx,cy=rSite[1]-by;var d=2*(ax*cy-ay*cx);if(d>=-epsilon2$2)return;var ha=ax*ax+ay*ay,hc=cx*cx+cy*cy,x=(cy*ha-ay*hc)/d,y=(ax*hc-cx*ha)/d;var circle=circlePool.pop()||new Circle();circle.arc=arc;circle.site=cSite;circle.x=x+bx;circle.y=(circle.cy=y+by)+Math.sqrt(x*x+y*y);// y bottom
arc.circle=circle;var before=null,node=circles._;while(node){if(circle.y<node.y||circle.y===node.y&&circle.x<=node.x){if(node.L)node=node.L;else{before=node.P;break;}}else{if(node.R)node=node.R;else{before=node;break;}}}circles.insert(before,circle);if(!before)firstCircle=circle;}function detachCircle(arc){var circle=arc.circle;if(circle){if(!circle.P)firstCircle=circle.N;circles.remove(circle);circlePool.push(circle);RedBlackNode(circle);arc.circle=null;}}var beachPool=[];function Beach(){RedBlackNode(this);this.edge=this.site=this.circle=null;}function createBeach(site){var beach=beachPool.pop()||new Beach();beach.site=site;return beach;}function detachBeach(beach){detachCircle(beach);beaches.remove(beach);beachPool.push(beach);RedBlackNode(beach);}function removeBeach(beach){var circle=beach.circle,x=circle.x,y=circle.cy,vertex=[x,y],previous=beach.P,next=beach.N,disappearing=[beach];detachBeach(beach);var lArc=previous;while(lArc.circle&&Math.abs(x-lArc.circle.x)<epsilon$4&&Math.abs(y-lArc.circle.cy)<epsilon$4){previous=lArc.P;disappearing.unshift(lArc);detachBeach(lArc);lArc=previous;}disappearing.unshift(lArc);detachCircle(lArc);var rArc=next;while(rArc.circle&&Math.abs(x-rArc.circle.x)<epsilon$4&&Math.abs(y-rArc.circle.cy)<epsilon$4){next=rArc.N;disappearing.push(rArc);detachBeach(rArc);rArc=next;}disappearing.push(rArc);detachCircle(rArc);var nArcs=disappearing.length,iArc;for(iArc=1;iArc<nArcs;++iArc){rArc=disappearing[iArc];lArc=disappearing[iArc-1];setEdgeEnd(rArc.edge,lArc.site,rArc.site,vertex);}lArc=disappearing[0];rArc=disappearing[nArcs-1];rArc.edge=createEdge(lArc.site,rArc.site,null,vertex);attachCircle(lArc);attachCircle(rArc);}function addBeach(site){var x=site[0],directrix=site[1],lArc,rArc,dxl,dxr,node=beaches._;while(node){dxl=leftBreakPoint(node,directrix)-x;if(dxl>epsilon$4)node=node.L;else{dxr=x-rightBreakPoint(node,directrix);if(dxr>epsilon$4){if(!node.R){lArc=node;break;}node=node.R;}else{if(dxl>-epsilon$4){lArc=node.P;rArc=node;}else if(dxr>-epsilon$4){lArc=node;rArc=node.N;}else{lArc=rArc=node;}break;}}}createCell(site);var newArc=createBeach(site);beaches.insert(lArc,newArc);if(!lArc&&!rArc)return;if(lArc===rArc){detachCircle(lArc);rArc=createBeach(lArc.site);beaches.insert(newArc,rArc);newArc.edge=rArc.edge=createEdge(lArc.site,newArc.site);attachCircle(lArc);attachCircle(rArc);return;}if(!rArc){// && lArc
newArc.edge=createEdge(lArc.site,newArc.site);return;}// else lArc !== rArc
detachCircle(lArc);detachCircle(rArc);var lSite=lArc.site,ax=lSite[0],ay=lSite[1],bx=site[0]-ax,by=site[1]-ay,rSite=rArc.site,cx=rSite[0]-ax,cy=rSite[1]-ay,d=2*(bx*cy-by*cx),hb=bx*bx+by*by,hc=cx*cx+cy*cy,vertex=[(cy*hb-by*hc)/d+ax,(bx*hc-cx*hb)/d+ay];setEdgeEnd(rArc.edge,lSite,rSite,vertex);newArc.edge=createEdge(lSite,site,null,vertex);rArc.edge=createEdge(site,rSite,null,vertex);attachCircle(lArc);attachCircle(rArc);}function leftBreakPoint(arc,directrix){var site=arc.site,rfocx=site[0],rfocy=site[1],pby2=rfocy-directrix;if(!pby2)return rfocx;var lArc=arc.P;if(!lArc)return-Infinity;site=lArc.site;var lfocx=site[0],lfocy=site[1],plby2=lfocy-directrix;if(!plby2)return lfocx;var hl=lfocx-rfocx,aby2=1/pby2-1/plby2,b=hl/plby2;if(aby2)return(-b+Math.sqrt(b*b-2*aby2*(hl*hl/(-2*plby2)-lfocy+plby2/2+rfocy-pby2/2)))/aby2+rfocx;return(rfocx+lfocx)/2;}function rightBreakPoint(arc,directrix){var rArc=arc.N;if(rArc)return leftBreakPoint(rArc,directrix);var site=arc.site;return site[1]===directrix?site[0]:Infinity;}var epsilon$4=1e-6;var epsilon2$2=1e-12;var beaches;var cells;var circles;var edges;function triangleArea(a,b,c){return(a[0]-c[0])*(b[1]-a[1])-(a[0]-b[0])*(c[1]-a[1]);}function lexicographic(a,b){return b[1]-a[1]||b[0]-a[0];}function Diagram(sites,extent){var site=sites.sort(lexicographic).pop(),x,y,circle;edges=[];cells=new Array(sites.length);beaches=new RedBlackTree();circles=new RedBlackTree();while(true){circle=firstCircle;if(site&&(!circle||site[1]<circle.y||site[1]===circle.y&&site[0]<circle.x)){if(site[0]!==x||site[1]!==y){addBeach(site);x=site[0],y=site[1];}site=sites.pop();}else if(circle){removeBeach(circle.arc);}else{break;}}sortCellHalfedges();if(extent){var x0=+extent[0][0],y0=+extent[0][1],x1=+extent[1][0],y1=+extent[1][1];clipEdges(x0,y0,x1,y1);clipCells(x0,y0,x1,y1);}this.edges=edges;this.cells=cells;beaches=circles=edges=cells=null;}Diagram.prototype={constructor:Diagram,polygons:function polygons(){var edges=this.edges;return this.cells.map(function(cell){var polygon=cell.halfedges.map(function(i){return cellHalfedgeStart(cell,edges[i]);});polygon.data=cell.site.data;return polygon;});},triangles:function triangles(){var triangles=[],edges=this.edges;this.cells.forEach(function(cell,i){if(!(m=(halfedges=cell.halfedges).length))return;var site=cell.site,halfedges,j=-1,m,s0,e1=edges[halfedges[m-1]],s1=e1.left===site?e1.right:e1.left;while(++j<m){s0=s1;e1=edges[halfedges[j]];s1=e1.left===site?e1.right:e1.left;if(s0&&s1&&i<s0.index&&i<s1.index&&triangleArea(site,s0,s1)<0){triangles.push([site.data,s0.data,s1.data]);}}});return triangles;},links:function links(){return this.edges.filter(function(edge){return edge.right;}).map(function(edge){return{source:edge.left.data,target:edge.right.data};});},find:function find(x,y,radius){var that=this,i0,i1=that._found||0,n=that.cells.length,cell;// Use the previously-found cell, or start with an arbitrary one.
while(!(cell=that.cells[i1])){if(++i1>=n)return null;}var dx=x-cell.site[0],dy=y-cell.site[1],d2=dx*dx+dy*dy;// Traverse the half-edges to find a closer cell, if any.
do{cell=that.cells[i0=i1],i1=null;cell.halfedges.forEach(function(e){var edge=that.edges[e],v=edge.left;if((v===cell.site||!v)&&!(v=edge.right))return;var vx=x-v[0],vy=y-v[1],v2=vx*vx+vy*vy;if(v2<d2)d2=v2,i1=v.index;});}while(i1!==null);that._found=i0;return radius==null||d2<=radius*radius?cell.site:null;}};function voronoi(){var x$$1=x$4,y$$1=y$4,extent=null;function voronoi(data){return new Diagram(data.map(function(d,i){var s=[Math.round(x$$1(d,i,data)/epsilon$4)*epsilon$4,Math.round(y$$1(d,i,data)/epsilon$4)*epsilon$4];s.index=i;s.data=d;return s;}),extent);}voronoi.polygons=function(data){return voronoi(data).polygons();};voronoi.links=function(data){return voronoi(data).links();};voronoi.triangles=function(data){return voronoi(data).triangles();};voronoi.x=function(_){return arguments.length?(x$$1=typeof _==="function"?_:constant$c(+_),voronoi):x$$1;};voronoi.y=function(_){return arguments.length?(y$$1=typeof _==="function"?_:constant$c(+_),voronoi):y$$1;};voronoi.extent=function(_){return arguments.length?(extent=_==null?null:[[+_[0][0],+_[0][1]],[+_[1][0],+_[1][1]]],voronoi):extent&&[[extent[0][0],extent[0][1]],[extent[1][0],extent[1][1]]];};voronoi.size=function(_){return arguments.length?(extent=_==null?null:[[0,0],[+_[0],+_[1]]],voronoi):extent&&[extent[1][0]-extent[0][0],extent[1][1]-extent[0][1]];};return voronoi;}function constant$d(x){return function(){return x;};}function ZoomEvent(target,type,transform){this.target=target;this.type=type;this.transform=transform;}function Transform(k,x,y){this.k=k;this.x=x;this.y=y;}Transform.prototype={constructor:Transform,scale:function scale(k){return k===1?this:new Transform(this.k*k,this.x,this.y);},translate:function translate(x,y){return x===0&y===0?this:new Transform(this.k,this.x+this.k*x,this.y+this.k*y);},apply:function apply(point){return[point[0]*this.k+this.x,point[1]*this.k+this.y];},applyX:function applyX(x){return x*this.k+this.x;},applyY:function applyY(y){return y*this.k+this.y;},invert:function invert(location){return[(location[0]-this.x)/this.k,(location[1]-this.y)/this.k];},invertX:function invertX(x){return(x-this.x)/this.k;},invertY:function invertY(y){return(y-this.y)/this.k;},rescaleX:function rescaleX(x){return x.copy().domain(x.range().map(this.invertX,this).map(x.invert,x));},rescaleY:function rescaleY(y){return y.copy().domain(y.range().map(this.invertY,this).map(y.invert,y));},toString:function toString(){return"translate("+this.x+","+this.y+") scale("+this.k+")";}};var identity$9=new Transform(1,0,0);transform$1.prototype=Transform.prototype;function transform$1(node){return node.__zoom||identity$9;}function nopropagation$2(){exports.event.stopImmediatePropagation();}function noevent$2(){exports.event.preventDefault();exports.event.stopImmediatePropagation();}// Ignore right-click, since that should open the context menu.
function defaultFilter$2(){return!exports.event.button;}function defaultExtent$1(){var e=this,w,h;if(e instanceof SVGElement){e=e.ownerSVGElement||e;w=e.width.baseVal.value;h=e.height.baseVal.value;}else{w=e.clientWidth;h=e.clientHeight;}return[[0,0],[w,h]];}function defaultTransform(){return this.__zoom||identity$9;}function defaultWheelDelta(){return-exports.event.deltaY*(exports.event.deltaMode?120:1)/500;}function defaultTouchable$1(){return"ontouchstart"in this;}function defaultConstrain(transform,extent,translateExtent){var dx0=transform.invertX(extent[0][0])-translateExtent[0][0],dx1=transform.invertX(extent[1][0])-translateExtent[1][0],dy0=transform.invertY(extent[0][1])-translateExtent[0][1],dy1=transform.invertY(extent[1][1])-translateExtent[1][1];return transform.translate(dx1>dx0?(dx0+dx1)/2:Math.min(0,dx0)||Math.max(0,dx1),dy1>dy0?(dy0+dy1)/2:Math.min(0,dy0)||Math.max(0,dy1));}function zoom(){var filter=defaultFilter$2,extent=defaultExtent$1,constrain=defaultConstrain,wheelDelta=defaultWheelDelta,touchable=defaultTouchable$1,scaleExtent=[0,Infinity],translateExtent=[[-Infinity,-Infinity],[Infinity,Infinity]],duration=250,interpolate=interpolateZoom,gestures=[],listeners=dispatch("start","zoom","end"),touchstarting,touchending,touchDelay=500,wheelDelay=150,clickDistance2=0;function zoom(selection$$1){selection$$1.property("__zoom",defaultTransform).on("wheel.zoom",wheeled).on("mousedown.zoom",mousedowned).on("dblclick.zoom",dblclicked).filter(touchable).on("touchstart.zoom",touchstarted).on("touchmove.zoom",touchmoved).on("touchend.zoom touchcancel.zoom",touchended).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)");}zoom.transform=function(collection,transform){var selection$$1=collection.selection?collection.selection():collection;selection$$1.property("__zoom",defaultTransform);if(collection!==selection$$1){schedule(collection,transform);}else{selection$$1.interrupt().each(function(){gesture(this,arguments).start().zoom(null,typeof transform==="function"?transform.apply(this,arguments):transform).end();});}};zoom.scaleBy=function(selection$$1,k){zoom.scaleTo(selection$$1,function(){var k0=this.__zoom.k,k1=typeof k==="function"?k.apply(this,arguments):k;return k0*k1;});};zoom.scaleTo=function(selection$$1,k){zoom.transform(selection$$1,function(){var e=extent.apply(this,arguments),t0=this.__zoom,p0=centroid(e),p1=t0.invert(p0),k1=typeof k==="function"?k.apply(this,arguments):k;return constrain(translate(scale(t0,k1),p0,p1),e,translateExtent);});};zoom.translateBy=function(selection$$1,x,y){zoom.transform(selection$$1,function(){return constrain(this.__zoom.translate(typeof x==="function"?x.apply(this,arguments):x,typeof y==="function"?y.apply(this,arguments):y),extent.apply(this,arguments),translateExtent);});};zoom.translateTo=function(selection$$1,x,y){zoom.transform(selection$$1,function(){var e=extent.apply(this,arguments),t=this.__zoom,p=centroid(e);return constrain(identity$9.translate(p[0],p[1]).scale(t.k).translate(typeof x==="function"?-x.apply(this,arguments):-x,typeof y==="function"?-y.apply(this,arguments):-y),e,translateExtent);});};function scale(transform,k){k=Math.max(scaleExtent[0],Math.min(scaleExtent[1],k));return k===transform.k?transform:new Transform(k,transform.x,transform.y);}function translate(transform,p0,p1){var x=p0[0]-p1[0]*transform.k,y=p0[1]-p1[1]*transform.k;return x===transform.x&&y===transform.y?transform:new Transform(transform.k,x,y);}function centroid(extent){return[(+extent[0][0]+ +extent[1][0])/2,(+extent[0][1]+ +extent[1][1])/2];}function schedule(transition$$1,transform,center){transition$$1.on("start.zoom",function(){gesture(this,arguments).start();}).on("interrupt.zoom end.zoom",function(){gesture(this,arguments).end();}).tween("zoom",function(){var that=this,args=arguments,g=gesture(that,args),e=extent.apply(that,args),p=center||centroid(e),w=Math.max(e[1][0]-e[0][0],e[1][1]-e[0][1]),a=that.__zoom,b=typeof transform==="function"?transform.apply(that,args):transform,i=interpolate(a.invert(p).concat(w/a.k),b.invert(p).concat(w/b.k));return function(t){if(t===1)t=b;// Avoid rounding error on end.
else{var l=i(t),k=w/l[2];t=new Transform(k,p[0]-l[0]*k,p[1]-l[1]*k);}g.zoom(null,t);};});}function gesture(that,args){for(var i=0,n=gestures.length,g;i<n;++i){if((g=gestures[i]).that===that){return g;}}return new Gesture(that,args);}function Gesture(that,args){this.that=that;this.args=args;this.index=-1;this.active=0;this.extent=extent.apply(that,args);}Gesture.prototype={start:function start(){if(++this.active===1){this.index=gestures.push(this)-1;this.emit("start");}return this;},zoom:function zoom(key,transform){if(this.mouse&&key!=="mouse")this.mouse[1]=transform.invert(this.mouse[0]);if(this.touch0&&key!=="touch")this.touch0[1]=transform.invert(this.touch0[0]);if(this.touch1&&key!=="touch")this.touch1[1]=transform.invert(this.touch1[0]);this.that.__zoom=transform;this.emit("zoom");return this;},end:function end(){if(--this.active===0){gestures.splice(this.index,1);this.index=-1;this.emit("end");}return this;},emit:function emit(type){customEvent(new ZoomEvent(zoom,type,this.that.__zoom),listeners.apply,listeners,[type,this.that,this.args]);}};function wheeled(){if(!filter.apply(this,arguments))return;var g=gesture(this,arguments),t=this.__zoom,k=Math.max(scaleExtent[0],Math.min(scaleExtent[1],t.k*Math.pow(2,wheelDelta.apply(this,arguments)))),p=mouse(this);// If the mouse is in the same location as before, reuse it.
// If there were recent wheel events, reset the wheel idle timeout.
if(g.wheel){if(g.mouse[0][0]!==p[0]||g.mouse[0][1]!==p[1]){g.mouse[1]=t.invert(g.mouse[0]=p);}clearTimeout(g.wheel);}// If this wheel event won’t trigger a transform change, ignore it.
else if(t.k===k)return;// Otherwise, capture the mouse point and location at the start.
else{g.mouse=[p,t.invert(p)];interrupt(this);g.start();}noevent$2();g.wheel=setTimeout(wheelidled,wheelDelay);g.zoom("mouse",constrain(translate(scale(t,k),g.mouse[0],g.mouse[1]),g.extent,translateExtent));function wheelidled(){g.wheel=null;g.end();}}function mousedowned(){if(touchending||!filter.apply(this,arguments))return;var g=gesture(this,arguments),v=select(exports.event.view).on("mousemove.zoom",mousemoved,true).on("mouseup.zoom",mouseupped,true),p=mouse(this),x0=exports.event.clientX,y0=exports.event.clientY;dragDisable(exports.event.view);nopropagation$2();g.mouse=[p,this.__zoom.invert(p)];interrupt(this);g.start();function mousemoved(){noevent$2();if(!g.moved){var dx=exports.event.clientX-x0,dy=exports.event.clientY-y0;g.moved=dx*dx+dy*dy>clickDistance2;}g.zoom("mouse",constrain(translate(g.that.__zoom,g.mouse[0]=mouse(g.that),g.mouse[1]),g.extent,translateExtent));}function mouseupped(){v.on("mousemove.zoom mouseup.zoom",null);yesdrag(exports.event.view,g.moved);noevent$2();g.end();}}function dblclicked(){if(!filter.apply(this,arguments))return;var t0=this.__zoom,p0=mouse(this),p1=t0.invert(p0),k1=t0.k*(exports.event.shiftKey?0.5:2),t1=constrain(translate(scale(t0,k1),p0,p1),extent.apply(this,arguments),translateExtent);noevent$2();if(duration>0)select(this).transition().duration(duration).call(schedule,t1,p0);else select(this).call(zoom.transform,t1);}function touchstarted(){if(!filter.apply(this,arguments))return;var g=gesture(this,arguments),touches$$1=exports.event.changedTouches,started,n=touches$$1.length,i,t,p;nopropagation$2();for(i=0;i<n;++i){t=touches$$1[i],p=touch(this,touches$$1,t.identifier);p=[p,this.__zoom.invert(p),t.identifier];if(!g.touch0)g.touch0=p,started=true;else if(!g.touch1)g.touch1=p;}// If this is a dbltap, reroute to the (optional) dblclick.zoom handler.
if(touchstarting){touchstarting=clearTimeout(touchstarting);if(!g.touch1){g.end();p=select(this).on("dblclick.zoom");if(p)p.apply(this,arguments);return;}}if(started){touchstarting=setTimeout(function(){touchstarting=null;},touchDelay);interrupt(this);g.start();}}function touchmoved(){var g=gesture(this,arguments),touches$$1=exports.event.changedTouches,n=touches$$1.length,i,t,p,l;noevent$2();if(touchstarting)touchstarting=clearTimeout(touchstarting);for(i=0;i<n;++i){t=touches$$1[i],p=touch(this,touches$$1,t.identifier);if(g.touch0&&g.touch0[2]===t.identifier)g.touch0[0]=p;else if(g.touch1&&g.touch1[2]===t.identifier)g.touch1[0]=p;}t=g.that.__zoom;if(g.touch1){var p0=g.touch0[0],l0=g.touch0[1],p1=g.touch1[0],l1=g.touch1[1],dp=(dp=p1[0]-p0[0])*dp+(dp=p1[1]-p0[1])*dp,dl=(dl=l1[0]-l0[0])*dl+(dl=l1[1]-l0[1])*dl;t=scale(t,Math.sqrt(dp/dl));p=[(p0[0]+p1[0])/2,(p0[1]+p1[1])/2];l=[(l0[0]+l1[0])/2,(l0[1]+l1[1])/2];}else if(g.touch0)p=g.touch0[0],l=g.touch0[1];else return;g.zoom("touch",constrain(translate(t,p,l),g.extent,translateExtent));}function touchended(){var g=gesture(this,arguments),touches$$1=exports.event.changedTouches,n=touches$$1.length,i,t;nopropagation$2();if(touchending)clearTimeout(touchending);touchending=setTimeout(function(){touchending=null;},touchDelay);for(i=0;i<n;++i){t=touches$$1[i];if(g.touch0&&g.touch0[2]===t.identifier)delete g.touch0;else if(g.touch1&&g.touch1[2]===t.identifier)delete g.touch1;}if(g.touch1&&!g.touch0)g.touch0=g.touch1,delete g.touch1;if(g.touch0)g.touch0[1]=this.__zoom.invert(g.touch0[0]);else g.end();}zoom.wheelDelta=function(_){return arguments.length?(wheelDelta=typeof _==="function"?_:constant$d(+_),zoom):wheelDelta;};zoom.filter=function(_){return arguments.length?(filter=typeof _==="function"?_:constant$d(!!_),zoom):filter;};zoom.touchable=function(_){return arguments.length?(touchable=typeof _==="function"?_:constant$d(!!_),zoom):touchable;};zoom.extent=function(_){return arguments.length?(extent=typeof _==="function"?_:constant$d([[+_[0][0],+_[0][1]],[+_[1][0],+_[1][1]]]),zoom):extent;};zoom.scaleExtent=function(_){return arguments.length?(scaleExtent[0]=+_[0],scaleExtent[1]=+_[1],zoom):[scaleExtent[0],scaleExtent[1]];};zoom.translateExtent=function(_){return arguments.length?(translateExtent[0][0]=+_[0][0],translateExtent[1][0]=+_[1][0],translateExtent[0][1]=+_[0][1],translateExtent[1][1]=+_[1][1],zoom):[[translateExtent[0][0],translateExtent[0][1]],[translateExtent[1][0],translateExtent[1][1]]];};zoom.constrain=function(_){return arguments.length?(constrain=_,zoom):constrain;};zoom.duration=function(_){return arguments.length?(duration=+_,zoom):duration;};zoom.interpolate=function(_){return arguments.length?(interpolate=_,zoom):interpolate;};zoom.on=function(){var value=listeners.on.apply(listeners,arguments);return value===listeners?zoom:value;};zoom.clickDistance=function(_){return arguments.length?(clickDistance2=(_=+_)*_,zoom):Math.sqrt(clickDistance2);};return zoom;}exports.version=version;exports.bisect=bisectRight;exports.bisectRight=bisectRight;exports.bisectLeft=bisectLeft;exports.ascending=ascending;exports.bisector=bisector;exports.cross=cross;exports.descending=descending;exports.deviation=deviation;exports.extent=extent;exports.histogram=histogram;exports.thresholdFreedmanDiaconis=freedmanDiaconis;exports.thresholdScott=scott;exports.thresholdSturges=thresholdSturges;exports.max=max;exports.mean=mean;exports.median=median;exports.merge=merge;exports.min=min;exports.pairs=pairs;exports.permute=permute;exports.quantile=threshold;exports.range=sequence;exports.scan=scan;exports.shuffle=shuffle;exports.sum=sum;exports.ticks=ticks;exports.tickIncrement=tickIncrement;exports.tickStep=tickStep;exports.transpose=transpose;exports.variance=variance;exports.zip=zip;exports.axisTop=axisTop;exports.axisRight=axisRight;exports.axisBottom=axisBottom;exports.axisLeft=axisLeft;exports.brush=brush;exports.brushX=brushX;exports.brushY=brushY;exports.brushSelection=brushSelection;exports.chord=chord;exports.ribbon=ribbon;exports.nest=nest;exports.set=set$2;exports.map=map$1;exports.keys=keys;exports.values=values;exports.entries=entries;exports.color=color;exports.rgb=rgb;exports.hsl=hsl;exports.lab=lab;exports.hcl=hcl;exports.lch=lch;exports.gray=gray;exports.cubehelix=cubehelix;exports.contours=contours;exports.contourDensity=density;exports.dispatch=dispatch;exports.drag=drag;exports.dragDisable=dragDisable;exports.dragEnable=yesdrag;exports.dsvFormat=dsvFormat;exports.csvParse=csvParse;exports.csvParseRows=csvParseRows;exports.csvFormat=csvFormat;exports.csvFormatBody=csvFormatBody;exports.csvFormatRows=csvFormatRows;exports.tsvParse=tsvParse;exports.tsvParseRows=tsvParseRows;exports.tsvFormat=tsvFormat;exports.tsvFormatBody=tsvFormatBody;exports.tsvFormatRows=tsvFormatRows;exports.autoType=autoType;exports.easeLinear=linear$1;exports.easeQuad=quadInOut;exports.easeQuadIn=quadIn;exports.easeQuadOut=quadOut;exports.easeQuadInOut=quadInOut;exports.easeCubic=cubicInOut;exports.easeCubicIn=cubicIn;exports.easeCubicOut=cubicOut;exports.easeCubicInOut=cubicInOut;exports.easePoly=polyInOut;exports.easePolyIn=polyIn;exports.easePolyOut=polyOut;exports.easePolyInOut=polyInOut;exports.easeSin=sinInOut;exports.easeSinIn=sinIn;exports.easeSinOut=sinOut;exports.easeSinInOut=sinInOut;exports.easeExp=expInOut;exports.easeExpIn=expIn;exports.easeExpOut=expOut;exports.easeExpInOut=expInOut;exports.easeCircle=circleInOut;exports.easeCircleIn=circleIn;exports.easeCircleOut=circleOut;exports.easeCircleInOut=circleInOut;exports.easeBounce=bounceOut;exports.easeBounceIn=bounceIn;exports.easeBounceOut=bounceOut;exports.easeBounceInOut=bounceInOut;exports.easeBack=backInOut;exports.easeBackIn=backIn;exports.easeBackOut=backOut;exports.easeBackInOut=backInOut;exports.easeElastic=elasticOut;exports.easeElasticIn=elasticIn;exports.easeElasticOut=elasticOut;exports.easeElasticInOut=elasticInOut;exports.blob=blob;exports.buffer=buffer;exports.dsv=dsv;exports.csv=csv$1;exports.tsv=tsv$1;exports.image=image;exports.json=json;exports.text=text;exports.xml=xml;exports.html=html;exports.svg=svg;exports.forceCenter=center$1;exports.forceCollide=collide;exports.forceLink=link;exports.forceManyBody=manyBody;exports.forceRadial=radial;exports.forceSimulation=simulation;exports.forceX=x$2;exports.forceY=y$2;exports.formatDefaultLocale=defaultLocale;exports.formatLocale=formatLocale;exports.formatSpecifier=formatSpecifier;exports.precisionFixed=precisionFixed;exports.precisionPrefix=precisionPrefix;exports.precisionRound=precisionRound;exports.geoArea=area$1;exports.geoBounds=bounds;exports.geoCentroid=centroid;exports.geoCircle=circle;exports.geoClipAntimeridian=clipAntimeridian;exports.geoClipCircle=clipCircle;exports.geoClipExtent=extent$1;exports.geoClipRectangle=clipRectangle;exports.geoContains=contains$1;exports.geoDistance=distance;exports.geoGraticule=graticule;exports.geoGraticule10=graticule10;exports.geoInterpolate=interpolate$1;exports.geoLength=length$1;exports.geoPath=index$1;exports.geoAlbers=albers;exports.geoAlbersUsa=albersUsa;exports.geoAzimuthalEqualArea=azimuthalEqualArea;exports.geoAzimuthalEqualAreaRaw=azimuthalEqualAreaRaw;exports.geoAzimuthalEquidistant=azimuthalEquidistant;exports.geoAzimuthalEquidistantRaw=azimuthalEquidistantRaw;exports.geoConicConformal=conicConformal;exports.geoConicConformalRaw=conicConformalRaw;exports.geoConicEqualArea=conicEqualArea;exports.geoConicEqualAreaRaw=conicEqualAreaRaw;exports.geoConicEquidistant=conicEquidistant;exports.geoConicEquidistantRaw=conicEquidistantRaw;exports.geoEqualEarth=equalEarth;exports.geoEqualEarthRaw=equalEarthRaw;exports.geoEquirectangular=equirectangular;exports.geoEquirectangularRaw=equirectangularRaw;exports.geoGnomonic=gnomonic;exports.geoGnomonicRaw=gnomonicRaw;exports.geoIdentity=identity$5;exports.geoProjection=projection;exports.geoProjectionMutator=projectionMutator;exports.geoMercator=mercator;exports.geoMercatorRaw=mercatorRaw;exports.geoNaturalEarth1=naturalEarth1;exports.geoNaturalEarth1Raw=naturalEarth1Raw;exports.geoOrthographic=orthographic;exports.geoOrthographicRaw=orthographicRaw;exports.geoStereographic=stereographic;exports.geoStereographicRaw=stereographicRaw;exports.geoTransverseMercator=transverseMercator;exports.geoTransverseMercatorRaw=transverseMercatorRaw;exports.geoRotation=rotation;exports.geoStream=geoStream;exports.geoTransform=transform;exports.cluster=cluster;exports.hierarchy=hierarchy;exports.pack=index$2;exports.packSiblings=siblings;exports.packEnclose=enclose;exports.partition=partition;exports.stratify=stratify;exports.tree=tree;exports.treemap=index$3;exports.treemapBinary=binary;exports.treemapDice=treemapDice;exports.treemapSlice=treemapSlice;exports.treemapSliceDice=sliceDice;exports.treemapSquarify=squarify;exports.treemapResquarify=resquarify;exports.interpolate=interpolateValue;exports.interpolateArray=array$1;exports.interpolateBasis=basis$1;exports.interpolateBasisClosed=basisClosed;exports.interpolateDate=date;exports.interpolateDiscrete=discrete;exports.interpolateHue=hue$1;exports.interpolateNumber=interpolateNumber;exports.interpolateObject=object;exports.interpolateRound=interpolateRound;exports.interpolateString=interpolateString;exports.interpolateTransformCss=interpolateTransformCss;exports.interpolateTransformSvg=interpolateTransformSvg;exports.interpolateZoom=interpolateZoom;exports.interpolateRgb=interpolateRgb;exports.interpolateRgbBasis=rgbBasis;exports.interpolateRgbBasisClosed=rgbBasisClosed;exports.interpolateHsl=hsl$2;exports.interpolateHslLong=hslLong;exports.interpolateLab=lab$1;exports.interpolateHcl=hcl$2;exports.interpolateHclLong=hclLong;exports.interpolateCubehelix=cubehelix$2;exports.interpolateCubehelixLong=cubehelixLong;exports.piecewise=piecewise;exports.quantize=quantize;exports.path=path;exports.polygonArea=area$2;exports.polygonCentroid=centroid$1;exports.polygonHull=hull;exports.polygonContains=contains$2;exports.polygonLength=length$2;exports.quadtree=quadtree;exports.randomUniform=uniform;exports.randomNormal=normal;exports.randomLogNormal=logNormal;exports.randomBates=bates;exports.randomIrwinHall=irwinHall;exports.randomExponential=exponential$1;exports.scaleBand=band;exports.scalePoint=point$1;exports.scaleIdentity=identity$7;exports.scaleLinear=linear$2;exports.scaleLog=log$1;exports.scaleSymlog=symlog;exports.scaleOrdinal=ordinal;exports.scaleImplicit=implicit;exports.scalePow=pow$1;exports.scaleSqrt=sqrt$1;exports.scaleQuantile=quantile$$1;exports.scaleQuantize=quantize$1;exports.scaleThreshold=threshold$1;exports.scaleTime=time;exports.scaleUtc=utcTime;exports.scaleSequential=sequential;exports.scaleSequentialLog=sequentialLog;exports.scaleSequentialPow=sequentialPow;exports.scaleSequentialSqrt=sequentialSqrt;exports.scaleSequentialSymlog=sequentialSymlog;exports.scaleSequentialQuantile=sequentialQuantile;exports.scaleDiverging=diverging;exports.scaleDivergingLog=divergingLog;exports.scaleDivergingPow=divergingPow;exports.scaleDivergingSqrt=divergingSqrt;exports.scaleDivergingSymlog=divergingSymlog;exports.tickFormat=tickFormat;exports.schemeCategory10=category10;exports.schemeAccent=Accent;exports.schemeDark2=Dark2;exports.schemePaired=Paired;exports.schemePastel1=Pastel1;exports.schemePastel2=Pastel2;exports.schemeSet1=Set1;exports.schemeSet2=Set2;exports.schemeSet3=Set3;exports.interpolateBrBG=BrBG;exports.schemeBrBG=scheme;exports.interpolatePRGn=PRGn;exports.schemePRGn=scheme$1;exports.interpolatePiYG=PiYG;exports.schemePiYG=scheme$2;exports.interpolatePuOr=PuOr;exports.schemePuOr=scheme$3;exports.interpolateRdBu=RdBu;exports.schemeRdBu=scheme$4;exports.interpolateRdGy=RdGy;exports.schemeRdGy=scheme$5;exports.interpolateRdYlBu=RdYlBu;exports.schemeRdYlBu=scheme$6;exports.interpolateRdYlGn=RdYlGn;exports.schemeRdYlGn=scheme$7;exports.interpolateSpectral=Spectral;exports.schemeSpectral=scheme$8;exports.interpolateBuGn=BuGn;exports.schemeBuGn=scheme$9;exports.interpolateBuPu=BuPu;exports.schemeBuPu=scheme$a;exports.interpolateGnBu=GnBu;exports.schemeGnBu=scheme$b;exports.interpolateOrRd=OrRd;exports.schemeOrRd=scheme$c;exports.interpolatePuBuGn=PuBuGn;exports.schemePuBuGn=scheme$d;exports.interpolatePuBu=PuBu;exports.schemePuBu=scheme$e;exports.interpolatePuRd=PuRd;exports.schemePuRd=scheme$f;exports.interpolateRdPu=RdPu;exports.schemeRdPu=scheme$g;exports.interpolateYlGnBu=YlGnBu;exports.schemeYlGnBu=scheme$h;exports.interpolateYlGn=YlGn;exports.schemeYlGn=scheme$i;exports.interpolateYlOrBr=YlOrBr;exports.schemeYlOrBr=scheme$j;exports.interpolateYlOrRd=YlOrRd;exports.schemeYlOrRd=scheme$k;exports.interpolateBlues=Blues;exports.schemeBlues=scheme$l;exports.interpolateGreens=Greens;exports.schemeGreens=scheme$m;exports.interpolateGreys=Greys;exports.schemeGreys=scheme$n;exports.interpolatePurples=Purples;exports.schemePurples=scheme$o;exports.interpolateReds=Reds;exports.schemeReds=scheme$p;exports.interpolateOranges=Oranges;exports.schemeOranges=scheme$q;exports.interpolateCubehelixDefault=cubehelix$3;exports.interpolateRainbow=rainbow;exports.interpolateWarm=warm;exports.interpolateCool=cool;exports.interpolateSinebow=sinebow;exports.interpolateViridis=viridis;exports.interpolateMagma=magma;exports.interpolateInferno=inferno;exports.interpolatePlasma=plasma;exports.create=create;exports.creator=creator;exports.local=local;exports.matcher=matcher;exports.mouse=mouse;exports.namespace=namespace;exports.namespaces=namespaces;exports.clientPoint=point;exports.select=select;exports.selectAll=selectAll;exports.selection=selection;exports.selector=selector;exports.selectorAll=selectorAll;exports.style=styleValue;exports.touch=touch;exports.touches=touches;exports.window=defaultView;exports.customEvent=customEvent;exports.arc=arc;exports.area=area$3;exports.line=line;exports.pie=pie;exports.areaRadial=areaRadial;exports.radialArea=areaRadial;exports.lineRadial=lineRadial$1;exports.radialLine=lineRadial$1;exports.pointRadial=pointRadial;exports.linkHorizontal=linkHorizontal;exports.linkVertical=linkVertical;exports.linkRadial=linkRadial;exports.symbol=symbol;exports.symbols=symbols;exports.symbolCircle=circle$2;exports.symbolCross=cross$2;exports.symbolDiamond=diamond;exports.symbolSquare=square;exports.symbolStar=star;exports.symbolTriangle=triangle;exports.symbolWye=wye;exports.curveBasisClosed=basisClosed$1;exports.curveBasisOpen=basisOpen;exports.curveBasis=basis$2;exports.curveBundle=bundle;exports.curveCardinalClosed=cardinalClosed;exports.curveCardinalOpen=cardinalOpen;exports.curveCardinal=cardinal;exports.curveCatmullRomClosed=catmullRomClosed;exports.curveCatmullRomOpen=catmullRomOpen;exports.curveCatmullRom=catmullRom;exports.curveLinearClosed=linearClosed;exports.curveLinear=curveLinear;exports.curveMonotoneX=monotoneX;exports.curveMonotoneY=monotoneY;exports.curveNatural=natural;exports.curveStep=step;exports.curveStepAfter=stepAfter;exports.curveStepBefore=stepBefore;exports.stack=stack;exports.stackOffsetExpand=expand;exports.stackOffsetDiverging=diverging$1;exports.stackOffsetNone=none$1;exports.stackOffsetSilhouette=silhouette;exports.stackOffsetWiggle=wiggle;exports.stackOrderAppearance=appearance;exports.stackOrderAscending=ascending$3;exports.stackOrderDescending=descending$2;exports.stackOrderInsideOut=insideOut;exports.stackOrderNone=none$2;exports.stackOrderReverse=reverse;exports.timeInterval=newInterval;exports.timeMillisecond=millisecond;exports.timeMilliseconds=milliseconds;exports.utcMillisecond=millisecond;exports.utcMilliseconds=milliseconds;exports.timeSecond=second;exports.timeSeconds=seconds;exports.utcSecond=second;exports.utcSeconds=seconds;exports.timeMinute=minute;exports.timeMinutes=minutes;exports.timeHour=hour;exports.timeHours=hours;exports.timeDay=day;exports.timeDays=days;exports.timeWeek=sunday;exports.timeWeeks=sundays;exports.timeSunday=sunday;exports.timeSundays=sundays;exports.timeMonday=monday;exports.timeMondays=mondays;exports.timeTuesday=tuesday;exports.timeTuesdays=tuesdays;exports.timeWednesday=wednesday;exports.timeWednesdays=wednesdays;exports.timeThursday=thursday;exports.timeThursdays=thursdays;exports.timeFriday=friday;exports.timeFridays=fridays;exports.timeSaturday=saturday;exports.timeSaturdays=saturdays;exports.timeMonth=month;exports.timeMonths=months;exports.timeYear=year;exports.timeYears=years;exports.utcMinute=utcMinute;exports.utcMinutes=utcMinutes;exports.utcHour=utcHour;exports.utcHours=utcHours;exports.utcDay=utcDay;exports.utcDays=utcDays;exports.utcWeek=utcSunday;exports.utcWeeks=utcSundays;exports.utcSunday=utcSunday;exports.utcSundays=utcSundays;exports.utcMonday=utcMonday;exports.utcMondays=utcMondays;exports.utcTuesday=utcTuesday;exports.utcTuesdays=utcTuesdays;exports.utcWednesday=utcWednesday;exports.utcWednesdays=utcWednesdays;exports.utcThursday=utcThursday;exports.utcThursdays=utcThursdays;exports.utcFriday=utcFriday;exports.utcFridays=utcFridays;exports.utcSaturday=utcSaturday;exports.utcSaturdays=utcSaturdays;exports.utcMonth=utcMonth;exports.utcMonths=utcMonths;exports.utcYear=utcYear;exports.utcYears=utcYears;exports.timeFormatDefaultLocale=defaultLocale$1;exports.timeFormatLocale=formatLocale$1;exports.isoFormat=formatIso;exports.isoParse=parseIso;exports.now=now;exports.timer=timer;exports.timerFlush=timerFlush;exports.timeout=timeout$1;exports.interval=interval$1;exports.transition=transition;exports.active=active;exports.interrupt=interrupt;exports.voronoi=voronoi;exports.zoom=zoom;exports.zoomTransform=transform$1;exports.zoomIdentity=identity$9;Object.defineProperty(exports,'__esModule',{value:true});});

/***/ }),

/***/ "./node_modules/ion-sound/js/ion.sound.js":
/*!************************************************!*\
  !*** ./node_modules/ion-sound/js/ion.sound.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Ion.Sound
 * version 3.0.7 Build 89
 * © Denis Ineshin, 2016
 *
 * Project page:    http://ionden.com/a/plugins/ion.sound/en.html
 * GitHub page:     https://github.com/IonDen/ion.sound
 *
 * Released under MIT licence:
 * http://ionden.com/a/plugins/licence-en.html
 */
;

(function (window, navigator, $, undefined) {
  "use strict";

  window.ion = window.ion || {};

  if (ion.sound) {
    return;
  }

  var warn = function warn(text) {
    if (!text) text = "undefined";

    if (window.console) {
      if (console.warn && typeof console.warn === "function") {
        console.warn(text);
      } else if (console.log && typeof console.log === "function") {
        console.log(text);
      }

      var d = $ && $("#debug");

      if (d && d.length) {
        var a = d.html();
        d.html(a + text + '<br/>');
      }
    }
  };

  var extend = function extend(parent, child) {
    var prop;
    child = child || {};

    for (prop in parent) {
      if (parent.hasOwnProperty(prop)) {
        child[prop] = parent[prop];
      }
    }

    return child;
  };
  /**
   * DISABLE for unsupported browsers
   */


  if (typeof Audio !== "function" && (typeof Audio === "undefined" ? "undefined" : _typeof(Audio)) !== "object") {
    var func = function func() {
      warn("HTML5 Audio is not supported in this browser");
    };

    ion.sound = func;
    ion.sound.play = func;
    ion.sound.stop = func;
    ion.sound.pause = func;
    ion.sound.preload = func;
    ion.sound.destroy = func;
    func();
    return;
  }
  /**
   * CORE
   * - creating sounds collection
   * - public methods
   */


  var is_iOS = /iPad|iPhone|iPod/.test(navigator.appVersion),
      sounds_num = 0,
      settings = {},
      sounds = {},
      i;

  if (!settings.supported && is_iOS) {
    settings.supported = ["mp3", "mp4", "aac"];
  } else if (!settings.supported) {
    settings.supported = ["mp3", "ogg", "mp4", "aac", "wav"];
  }

  var createSound = function createSound(obj) {
    var name = obj.alias || obj.name;

    if (!sounds[name]) {
      sounds[name] = new Sound(obj);
      sounds[name].init();
    }
  };

  ion.sound = function (options) {
    extend(options, settings);
    settings.path = settings.path || "";
    settings.volume = settings.volume || 1;
    settings.preload = settings.preload || false;
    settings.multiplay = settings.multiplay || false;
    settings.loop = settings.loop || false;
    settings.sprite = settings.sprite || null;
    settings.scope = settings.scope || null;
    settings.ready_callback = settings.ready_callback || null;
    settings.ended_callback = settings.ended_callback || null;
    sounds_num = settings.sounds.length;

    if (!sounds_num) {
      warn("No sound-files provided!");
      return;
    }

    for (i = 0; i < sounds_num; i++) {
      createSound(settings.sounds[i]);
    }
  };

  ion.sound.VERSION = "3.0.7";

  ion.sound._method = function (method, name, options) {
    if (name) {
      sounds[name] && sounds[name][method](options);
    } else {
      for (i in sounds) {
        if (!sounds.hasOwnProperty(i) || !sounds[i]) {
          continue;
        }

        sounds[i][method](options);
      }
    }
  };

  ion.sound.preload = function (name, options) {
    options = options || {};
    extend({
      preload: true
    }, options);

    ion.sound._method("init", name, options);
  };

  ion.sound.destroy = function (name) {
    ion.sound._method("destroy", name);

    if (name) {
      sounds[name] = null;
    } else {
      for (i in sounds) {
        if (!sounds.hasOwnProperty(i)) {
          continue;
        }

        if (sounds[i]) {
          sounds[i] = null;
        }
      }
    }
  };

  ion.sound.play = function (name, options) {
    ion.sound._method("play", name, options);
  };

  ion.sound.stop = function (name, options) {
    ion.sound._method("stop", name, options);
  };

  ion.sound.pause = function (name, options) {
    ion.sound._method("pause", name, options);
  };

  ion.sound.volume = function (name, options) {
    ion.sound._method("volume", name, options);
  };

  if ($) {
    $.ionSound = ion.sound;
  }
  /**
   * Web Audio API core
   * - for most advanced browsers
   */


  var AudioContext = window.AudioContext || window.webkitAudioContext,
      audio;

  if (AudioContext) {
    audio = new AudioContext();
  }

  var Sound = function Sound(options) {
    this.options = extend(settings);
    delete this.options.sounds;
    extend(options, this.options);
    this.request = null;
    this.streams = {};
    this.result = {};
    this.ext = 0;
    this.url = "";
    this.loaded = false;
    this.decoded = false;
    this.no_file = false;
    this.autoplay = false;
  };

  Sound.prototype = {
    init: function init(options) {
      if (options) {
        extend(options, this.options);
      }

      if (this.options.preload) {
        this.load();
      }
    },
    destroy: function destroy() {
      var stream;

      for (i in this.streams) {
        stream = this.streams[i];

        if (stream) {
          stream.destroy();
          stream = null;
        }
      }

      this.streams = {};
      this.result = null;
      this.options.buffer = null;
      this.options = null;

      if (this.request) {
        this.request.removeEventListener("load", this.ready.bind(this), false);
        this.request.removeEventListener("error", this.error.bind(this), false);
        this.request.abort();
        this.request = null;
      }
    },
    createUrl: function createUrl() {
      var no_cache = new Date().valueOf();
      this.url = this.options.path + encodeURIComponent(this.options.name) + "." + this.options.supported[this.ext] + "?" + no_cache;
    },
    load: function load() {
      if (this.no_file) {
        warn("No sources for \"" + this.options.name + "\" sound :(");
        return;
      }

      if (this.request) {
        return;
      }

      this.createUrl();
      this.request = new XMLHttpRequest();
      this.request.open("GET", this.url, true);
      this.request.responseType = "arraybuffer";
      this.request.addEventListener("load", this.ready.bind(this), false);
      this.request.addEventListener("error", this.error.bind(this), false);
      this.request.send();
    },
    reload: function reload() {
      this.ext++;

      if (this.options.supported[this.ext]) {
        this.load();
      } else {
        this.no_file = true;
        warn("No sources for \"" + this.options.name + "\" sound :(");
      }
    },
    ready: function ready(data) {
      this.result = data.target;

      if (this.result.readyState !== 4) {
        this.reload();
        return;
      }

      if (this.result.status !== 200 && this.result.status !== 0) {
        warn(this.url + " was not found on server!");
        this.reload();
        return;
      }

      this.request.removeEventListener("load", this.ready.bind(this), false);
      this.request.removeEventListener("error", this.error.bind(this), false);
      this.request = null;
      this.loaded = true; //warn("Loaded: " + this.options.name + "." + settings.supported[this.ext]);

      this.decode();
    },
    decode: function decode() {
      if (!audio) {
        return;
      }

      audio.decodeAudioData(this.result.response, this.setBuffer.bind(this), this.error.bind(this));
    },
    setBuffer: function setBuffer(buffer) {
      this.options.buffer = buffer;
      this.decoded = true; //warn("Decoded: " + this.options.name + "." + settings.supported[this.ext]);

      var config = {
        name: this.options.name,
        alias: this.options.alias,
        ext: this.options.supported[this.ext],
        duration: this.options.buffer.duration
      };

      if (this.options.ready_callback && typeof this.options.ready_callback === "function") {
        this.options.ready_callback.call(this.options.scope, config);
      }

      if (this.options.sprite) {
        for (i in this.options.sprite) {
          this.options.start = this.options.sprite[i][0];
          this.options.end = this.options.sprite[i][1];
          this.streams[i] = new Stream(this.options, i);
        }
      } else {
        this.streams[0] = new Stream(this.options);
      }

      if (this.autoplay) {
        this.autoplay = false;
        this.play();
      }
    },
    error: function error() {
      this.reload();
    },
    play: function play(options) {
      delete this.options.part;

      if (options) {
        extend(options, this.options);
      }

      if (!this.loaded) {
        this.autoplay = true;
        this.load();
        return;
      }

      if (this.no_file || !this.decoded) {
        return;
      }

      if (this.options.sprite) {
        if (this.options.part) {
          this.streams[this.options.part].play(this.options);
        } else {
          for (i in this.options.sprite) {
            this.streams[i].play(this.options);
          }
        }
      } else {
        this.streams[0].play(this.options);
      }
    },
    stop: function stop(options) {
      if (this.options.sprite) {
        if (options) {
          this.streams[options.part].stop();
        } else {
          for (i in this.options.sprite) {
            this.streams[i].stop();
          }
        }
      } else {
        this.streams[0].stop();
      }
    },
    pause: function pause(options) {
      if (this.options.sprite) {
        if (options) {
          this.streams[options.part].pause();
        } else {
          for (i in this.options.sprite) {
            this.streams[i].pause();
          }
        }
      } else {
        this.streams[0].pause();
      }
    },
    volume: function volume(options) {
      var stream;

      if (options) {
        extend(options, this.options);
      } else {
        return;
      }

      if (this.options.sprite) {
        if (this.options.part) {
          stream = this.streams[this.options.part];
          stream && stream.setVolume(this.options);
        } else {
          for (i in this.options.sprite) {
            stream = this.streams[i];
            stream && stream.setVolume(this.options);
          }
        }
      } else {
        stream = this.streams[0];
        stream && stream.setVolume(this.options);
      }
    }
  };

  var Stream = function Stream(options, sprite_part) {
    this.alias = options.alias;
    this.name = options.name;
    this.sprite_part = sprite_part;
    this.buffer = options.buffer;
    this.start = options.start || 0;
    this.end = options.end || this.buffer.duration;
    this.multiplay = options.multiplay || false;
    this.volume = options.volume || 1;
    this.scope = options.scope;
    this.ended_callback = options.ended_callback;
    this.setLoop(options);
    this.source = null;
    this.gain = null;
    this.playing = false;
    this.paused = false;
    this.time_started = 0;
    this.time_ended = 0;
    this.time_played = 0;
    this.time_offset = 0;
  };

  Stream.prototype = {
    destroy: function destroy() {
      this.stop();
      this.buffer = null;
      this.source = null;
      this.gain && this.gain.disconnect();
      this.source && this.source.disconnect();
      this.gain = null;
      this.source = null;
    },
    setLoop: function setLoop(options) {
      if (options.loop === true) {
        this.loop = 9999999;
      } else if (typeof options.loop === "number") {
        this.loop = +options.loop - 1;
      } else {
        this.loop = false;
      }
    },
    update: function update(options) {
      this.setLoop(options);

      if ("volume" in options) {
        this.volume = options.volume;
      }
    },
    play: function play(options) {
      if (options) {
        this.update(options);
      }

      if (!this.multiplay && this.playing) {
        return;
      }

      this.gain = audio.createGain();
      this.source = audio.createBufferSource();
      this.source.buffer = this.buffer;
      this.source.connect(this.gain);
      this.gain.connect(audio.destination);
      this.gain.gain.value = this.volume;
      this.source.onended = this.ended.bind(this);

      this._play();
    },
    _play: function _play() {
      var start, end;

      if (this.paused) {
        start = this.start + this.time_offset;
        end = this.end - this.time_offset;
      } else {
        start = this.start;
        end = this.end;
      }

      if (end <= 0) {
        this.clear();
        return;
      }

      if (typeof this.source.start === "function") {
        this.source.start(0, start, end);
      } else {
        this.source.noteOn(0, start, end);
      }

      this.playing = true;
      this.paused = false;
      this.time_started = new Date().valueOf();
    },
    stop: function stop() {
      if (this.playing && this.source) {
        if (typeof this.source.stop === "function") {
          this.source.stop(0);
        } else {
          this.source.noteOff(0);
        }
      }

      this.clear();
    },
    pause: function pause() {
      if (this.paused) {
        this.play();
        return;
      }

      if (!this.playing) {
        return;
      }

      this.source && this.source.stop(0);
      this.paused = true;
    },
    ended: function ended() {
      this.playing = false;
      this.time_ended = new Date().valueOf();
      this.time_played = (this.time_ended - this.time_started) / 1000;
      this.time_offset += this.time_played;

      if (this.time_offset >= this.end || this.end - this.time_offset < 0.015) {
        this._ended();

        this.clear();

        if (this.loop) {
          this.loop--;
          this.play();
        }
      }
    },
    _ended: function _ended() {
      var config = {
        name: this.name,
        alias: this.alias,
        part: this.sprite_part,
        start: this.start,
        duration: this.end
      };

      if (this.ended_callback && typeof this.ended_callback === "function") {
        this.ended_callback.call(this.scope, config);
      }
    },
    clear: function clear() {
      this.time_played = 0;
      this.time_offset = 0;
      this.paused = false;
      this.playing = false;
    },
    setVolume: function setVolume(options) {
      this.volume = options.volume;

      if (this.gain) {
        this.gain.gain.value = this.volume;
      }
    }
  };

  if (audio) {
    return;
  }
  /**
   * Fallback for HTML5 audio
   * - for not so modern browsers
   */


  var checkSupport = function checkSupport() {
    var sound = new Audio(),
        can_play_mp3 = sound.canPlayType('audio/mpeg'),
        can_play_ogg = sound.canPlayType('audio/ogg'),
        can_play_aac = sound.canPlayType('audio/mp4; codecs="mp4a.40.2"'),
        item,
        i;

    for (i = 0; i < settings.supported.length; i++) {
      item = settings.supported[i];

      if (!can_play_mp3 && item === "mp3") {
        settings.supported.splice(i, 1);
      }

      if (!can_play_ogg && item === "ogg") {
        settings.supported.splice(i, 1);
      }

      if (!can_play_aac && item === "aac") {
        settings.supported.splice(i, 1);
      }

      if (!can_play_aac && item === "mp4") {
        settings.supported.splice(i, 1);
      }
    }

    sound = null;
  };

  checkSupport();
  Sound.prototype = {
    init: function init(options) {
      if (options) {
        extend(options, this.options);
      }

      this.inited = true;

      if (this.options.preload) {
        this.load();
      }
    },
    destroy: function destroy() {
      var stream;

      for (i in this.streams) {
        stream = this.streams[i];

        if (stream) {
          stream.destroy();
          stream = null;
        }
      }

      this.streams = {};
      this.loaded = false;
      this.inited = false;
    },
    load: function load() {
      var part;
      this.options.preload = true;
      this.options._ready = this.ready;
      this.options._scope = this;

      if (this.options.sprite) {
        for (i in this.options.sprite) {
          part = this.options.sprite[i];
          this.options.start = part[0];
          this.options.end = part[1];
          this.streams[i] = new Stream(this.options, i);
        }
      } else {
        this.streams[0] = new Stream(this.options);
      }
    },
    ready: function ready(duration) {
      if (this.loaded) {
        return;
      }

      this.loaded = true;
      var config = {
        name: this.options.name,
        alias: this.options.alias,
        ext: this.options.supported[this.ext],
        duration: duration
      };

      if (this.options.ready_callback && typeof this.options.ready_callback === "function") {
        this.options.ready_callback.call(this.options.scope, config);
      }

      if (this.autoplay) {
        this.autoplay = false;
        this.play();
      }
    },
    play: function play(options) {
      if (!this.inited) {
        return;
      }

      delete this.options.part;

      if (options) {
        extend(options, this.options);
      }

      console.log(1);

      if (!this.loaded) {
        if (!this.options.preload) {
          this.autoplay = true;
          this.load();
        } else {
          this.autoplay = true;
        }

        return;
      }

      if (this.options.sprite) {
        if (this.options.part) {
          this.streams[this.options.part].play(this.options);
        } else {
          for (i in this.options.sprite) {
            this.streams[i].play(this.options);
          }
        }
      } else {
        this.streams[0].play(this.options);
      }
    },
    stop: function stop(options) {
      if (!this.inited) {
        return;
      }

      if (this.options.sprite) {
        if (options) {
          this.streams[options.part].stop();
        } else {
          for (i in this.options.sprite) {
            this.streams[i].stop();
          }
        }
      } else {
        this.streams[0].stop();
      }
    },
    pause: function pause(options) {
      if (!this.inited) {
        return;
      }

      if (this.options.sprite) {
        if (options) {
          this.streams[options.part].pause();
        } else {
          for (i in this.options.sprite) {
            this.streams[i].pause();
          }
        }
      } else {
        this.streams[0].pause();
      }
    },
    volume: function volume(options) {
      var stream;

      if (options) {
        extend(options, this.options);
      } else {
        return;
      }

      if (this.options.sprite) {
        if (this.options.part) {
          stream = this.streams[this.options.part];
          stream && stream.setVolume(this.options);
        } else {
          for (i in this.options.sprite) {
            stream = this.streams[i];
            stream && stream.setVolume(this.options);
          }
        }
      } else {
        stream = this.streams[0];
        stream && stream.setVolume(this.options);
      }
    }
  };

  Stream = function Stream(options, sprite_part) {
    this.name = options.name;
    this.alias = options.alias;
    this.sprite_part = sprite_part;
    this.multiplay = options.multiplay;
    this.volume = options.volume;
    this.preload = options.preload;
    this.path = settings.path;
    this.start = options.start || 0;
    this.end = options.end || 0;
    this.scope = options.scope;
    this.ended_callback = options.ended_callback;
    this._scope = options._scope;
    this._ready = options._ready;
    this.setLoop(options);
    this.sound = null;
    this.url = null;
    this.loaded = false;
    this.start_time = 0;
    this.paused_time = 0;
    this.played_time = 0;
    this.init();
  };

  Stream.prototype = {
    init: function init() {
      this.sound = new Audio();
      this.sound.volume = this.volume;
      this.createUrl();
      this.sound.addEventListener("ended", this.ended.bind(this), false);
      this.sound.addEventListener("canplaythrough", this.can_play_through.bind(this), false);
      this.sound.addEventListener("timeupdate", this._update.bind(this), false);
      this.load();
    },
    destroy: function destroy() {
      this.stop();
      this.sound.removeEventListener("ended", this.ended.bind(this), false);
      this.sound.removeEventListener("canplaythrough", this.can_play_through.bind(this), false);
      this.sound.removeEventListener("timeupdate", this._update.bind(this), false);
      this.sound = null;
      this.loaded = false;
    },
    createUrl: function createUrl() {
      var rand = new Date().valueOf();
      this.url = this.path + encodeURIComponent(this.name) + "." + settings.supported[0] + "?" + rand;
    },
    can_play_through: function can_play_through() {
      if (this.preload) {
        this.ready();
      }
    },
    load: function load() {
      this.sound.src = this.url;
      this.sound.preload = this.preload ? "auto" : "none";

      if (this.preload) {
        this.sound.load();
      }
    },
    setLoop: function setLoop(options) {
      if (options.loop === true) {
        this.loop = 9999999;
      } else if (typeof options.loop === "number") {
        this.loop = +options.loop - 1;
      } else {
        this.loop = false;
      }
    },
    update: function update(options) {
      this.setLoop(options);

      if ("volume" in options) {
        this.volume = options.volume;
      }
    },
    ready: function ready() {
      if (this.loaded || !this.sound) {
        return;
      }

      this.loaded = true;

      this._ready.call(this._scope, this.sound.duration);

      if (!this.end) {
        this.end = this.sound.duration;
      }
    },
    play: function play(options) {
      if (options) {
        this.update(options);
      }

      if (!this.multiplay && this.playing) {
        return;
      }

      this._play();
    },
    _play: function _play() {
      if (this.paused) {
        this.paused = false;
      } else {
        try {
          this.sound.currentTime = this.start;
        } catch (e) {}
      }

      this.playing = true;
      this.start_time = new Date().valueOf();
      this.sound.volume = this.volume;
      this.sound.play();
    },
    stop: function stop() {
      if (!this.playing) {
        return;
      }

      this.playing = false;
      this.paused = false;
      this.sound.pause();
      this.clear();

      try {
        this.sound.currentTime = this.start;
      } catch (e) {}
    },
    pause: function pause() {
      if (this.paused) {
        this._play();
      } else {
        this.playing = false;
        this.paused = true;
        this.sound.pause();
        this.paused_time = new Date().valueOf();
        this.played_time += this.paused_time - this.start_time;
      }
    },
    _update: function _update() {
      if (!this.start_time) {
        return;
      }

      var current_time = new Date().valueOf(),
          played_time = current_time - this.start_time,
          played = (this.played_time + played_time) / 1000;

      if (played >= this.end) {
        if (this.playing) {
          this.stop();

          this._ended();
        }
      }
    },
    ended: function ended() {
      if (this.playing) {
        this.stop();

        this._ended();
      }
    },
    _ended: function _ended() {
      this.playing = false;
      var config = {
        name: this.name,
        alias: this.alias,
        part: this.sprite_part,
        start: this.start,
        duration: this.end
      };

      if (this.ended_callback && typeof this.ended_callback === "function") {
        this.ended_callback.call(this.scope, config);
      }

      if (this.loop) {
        setTimeout(this.looper.bind(this), 15);
      }
    },
    looper: function looper() {
      this.loop--;
      this.play();
    },
    clear: function clear() {
      this.start_time = 0;
      this.played_time = 0;
      this.paused_time = 0;
    },
    setVolume: function setVolume(options) {
      this.volume = options.volume;

      if (this.sound) {
        this.sound.volume = this.volume;
      }
    }
  };
})(window, navigator, window.jQuery || window.$);

/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * jQuery JavaScript Library v2.2.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-05-20T17:23Z
 */
(function (global, factory) {
  if (( false ? undefined : _typeof(module)) === "object" && _typeof(module.exports) === "object") {
    // For CommonJS and CommonJS-like environments where a proper `window`
    // is present, execute the factory and get jQuery.
    // For environments that do not have a `window` with a `document`
    // (such as Node.js), expose a factory as module.exports.
    // This accentuates the need for the creation of a real `window`.
    // e.g. var jQuery = require("jquery")(window);
    // See ticket #14549 for more info.
    module.exports = global.document ? factory(global, true) : function (w) {
      if (!w.document) {
        throw new Error("jQuery requires a window with a document");
      }

      return factory(w);
    };
  } else {
    factory(global);
  } // Pass this if window is not defined yet

})(typeof window !== "undefined" ? window : this, function (window, noGlobal) {
  // Support: Firefox 18+
  // Can't be in strict mode, several libs including ASP.NET trace
  // the stack via arguments.caller.callee and Firefox dies if
  // you try to trace through "use strict" call chains. (#13335)
  //"use strict";
  var arr = [];
  var document = window.document;
  var _slice = arr.slice;
  var concat = arr.concat;
  var push = arr.push;
  var indexOf = arr.indexOf;
  var class2type = {};
  var toString = class2type.toString;
  var hasOwn = class2type.hasOwnProperty;
  var support = {};

  var version = "2.2.4",
      // Define a local copy of jQuery
  jQuery = function jQuery(selector, context) {
    // The jQuery object is actually just the init constructor 'enhanced'
    // Need init if jQuery is called (just allow error to be thrown if not included)
    return new jQuery.fn.init(selector, context);
  },
      // Support: Android<4.1
  // Make sure we trim BOM and NBSP
  rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
      // Matches dashed string for camelizing
  rmsPrefix = /^-ms-/,
      rdashAlpha = /-([\da-z])/gi,
      // Used by jQuery.camelCase as callback to replace()
  fcamelCase = function fcamelCase(all, letter) {
    return letter.toUpperCase();
  };

  jQuery.fn = jQuery.prototype = {
    // The current version of jQuery being used
    jquery: version,
    constructor: jQuery,
    // Start with an empty selector
    selector: "",
    // The default length of a jQuery object is 0
    length: 0,
    toArray: function toArray() {
      return _slice.call(this);
    },
    // Get the Nth element in the matched element set OR
    // Get the whole matched element set as a clean array
    get: function get(num) {
      return num != null ? // Return just the one element from the set
      num < 0 ? this[num + this.length] : this[num] : // Return all the elements in a clean array
      _slice.call(this);
    },
    // Take an array of elements and push it onto the stack
    // (returning the new matched element set)
    pushStack: function pushStack(elems) {
      // Build a new jQuery matched element set
      var ret = jQuery.merge(this.constructor(), elems); // Add the old object onto the stack (as a reference)

      ret.prevObject = this;
      ret.context = this.context; // Return the newly-formed element set

      return ret;
    },
    // Execute a callback for every element in the matched set.
    each: function each(callback) {
      return jQuery.each(this, callback);
    },
    map: function map(callback) {
      return this.pushStack(jQuery.map(this, function (elem, i) {
        return callback.call(elem, i, elem);
      }));
    },
    slice: function slice() {
      return this.pushStack(_slice.apply(this, arguments));
    },
    first: function first() {
      return this.eq(0);
    },
    last: function last() {
      return this.eq(-1);
    },
    eq: function eq(i) {
      var len = this.length,
          j = +i + (i < 0 ? len : 0);
      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
    },
    end: function end() {
      return this.prevObject || this.constructor();
    },
    // For internal use only.
    // Behaves like an Array's method, not like a jQuery method.
    push: push,
    sort: arr.sort,
    splice: arr.splice
  };

  jQuery.extend = jQuery.fn.extend = function () {
    var options,
        name,
        src,
        copy,
        copyIsArray,
        clone,
        target = arguments[0] || {},
        i = 1,
        length = arguments.length,
        deep = false; // Handle a deep copy situation

    if (typeof target === "boolean") {
      deep = target; // Skip the boolean and the target

      target = arguments[i] || {};
      i++;
    } // Handle case when target is a string or something (possible in deep copy)


    if (_typeof(target) !== "object" && !jQuery.isFunction(target)) {
      target = {};
    } // Extend jQuery itself if only one argument is passed


    if (i === length) {
      target = this;
      i--;
    }

    for (; i < length; i++) {
      // Only deal with non-null/undefined values
      if ((options = arguments[i]) != null) {
        // Extend the base object
        for (name in options) {
          src = target[name];
          copy = options[name]; // Prevent never-ending loop

          if (target === copy) {
            continue;
          } // Recurse if we're merging plain objects or arrays


          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
            if (copyIsArray) {
              copyIsArray = false;
              clone = src && jQuery.isArray(src) ? src : [];
            } else {
              clone = src && jQuery.isPlainObject(src) ? src : {};
            } // Never move original objects, clone them


            target[name] = jQuery.extend(deep, clone, copy); // Don't bring in undefined values
          } else if (copy !== undefined) {
            target[name] = copy;
          }
        }
      }
    } // Return the modified object


    return target;
  };

  jQuery.extend({
    // Unique for each copy of jQuery on the page
    expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
    // Assume jQuery is ready without the ready module
    isReady: true,
    error: function error(msg) {
      throw new Error(msg);
    },
    noop: function noop() {},
    isFunction: function isFunction(obj) {
      return jQuery.type(obj) === "function";
    },
    isArray: Array.isArray,
    isWindow: function isWindow(obj) {
      return obj != null && obj === obj.window;
    },
    isNumeric: function isNumeric(obj) {
      // parseFloat NaNs numeric-cast false positives (null|true|false|"")
      // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
      // subtraction forces infinities to NaN
      // adding 1 corrects loss of precision from parseFloat (#15100)
      var realStringObj = obj && obj.toString();
      return !jQuery.isArray(obj) && realStringObj - parseFloat(realStringObj) + 1 >= 0;
    },
    isPlainObject: function isPlainObject(obj) {
      var key; // Not plain objects:
      // - Any object or value whose internal [[Class]] property is not "[object Object]"
      // - DOM nodes
      // - window

      if (jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
        return false;
      } // Not own constructor property must be Object


      if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype || {}, "isPrototypeOf")) {
        return false;
      } // Own properties are enumerated firstly, so to speed up,
      // if last one is own, then all properties are own


      for (key in obj) {}

      return key === undefined || hasOwn.call(obj, key);
    },
    isEmptyObject: function isEmptyObject(obj) {
      var name;

      for (name in obj) {
        return false;
      }

      return true;
    },
    type: function type(obj) {
      if (obj == null) {
        return obj + "";
      } // Support: Android<4.0, iOS<6 (functionish RegExp)


      return _typeof(obj) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : _typeof(obj);
    },
    // Evaluates a script in a global context
    globalEval: function globalEval(code) {
      var script,
          indirect = eval;
      code = jQuery.trim(code);

      if (code) {
        // If the code includes a valid, prologue position
        // strict mode pragma, execute code by injecting a
        // script tag into the document.
        if (code.indexOf("use strict") === 1) {
          script = document.createElement("script");
          script.text = code;
          document.head.appendChild(script).parentNode.removeChild(script);
        } else {
          // Otherwise, avoid the DOM node creation, insertion
          // and removal by using an indirect global eval
          indirect(code);
        }
      }
    },
    // Convert dashed to camelCase; used by the css and data modules
    // Support: IE9-11+
    // Microsoft forgot to hump their vendor prefix (#9572)
    camelCase: function camelCase(string) {
      return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
    },
    nodeName: function nodeName(elem, name) {
      return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
    },
    each: function each(obj, callback) {
      var length,
          i = 0;

      if (isArrayLike(obj)) {
        length = obj.length;

        for (; i < length; i++) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      } else {
        for (i in obj) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      }

      return obj;
    },
    // Support: Android<4.1
    trim: function trim(text) {
      return text == null ? "" : (text + "").replace(rtrim, "");
    },
    // results is for internal usage only
    makeArray: function makeArray(arr, results) {
      var ret = results || [];

      if (arr != null) {
        if (isArrayLike(Object(arr))) {
          jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
        } else {
          push.call(ret, arr);
        }
      }

      return ret;
    },
    inArray: function inArray(elem, arr, i) {
      return arr == null ? -1 : indexOf.call(arr, elem, i);
    },
    merge: function merge(first, second) {
      var len = +second.length,
          j = 0,
          i = first.length;

      for (; j < len; j++) {
        first[i++] = second[j];
      }

      first.length = i;
      return first;
    },
    grep: function grep(elems, callback, invert) {
      var callbackInverse,
          matches = [],
          i = 0,
          length = elems.length,
          callbackExpect = !invert; // Go through the array, only saving the items
      // that pass the validator function

      for (; i < length; i++) {
        callbackInverse = !callback(elems[i], i);

        if (callbackInverse !== callbackExpect) {
          matches.push(elems[i]);
        }
      }

      return matches;
    },
    // arg is for internal usage only
    map: function map(elems, callback, arg) {
      var length,
          value,
          i = 0,
          ret = []; // Go through the array, translating each of the items to their new values

      if (isArrayLike(elems)) {
        length = elems.length;

        for (; i < length; i++) {
          value = callback(elems[i], i, arg);

          if (value != null) {
            ret.push(value);
          }
        } // Go through every key on the object,

      } else {
        for (i in elems) {
          value = callback(elems[i], i, arg);

          if (value != null) {
            ret.push(value);
          }
        }
      } // Flatten any nested arrays


      return concat.apply([], ret);
    },
    // A global GUID counter for objects
    guid: 1,
    // Bind a function to a context, optionally partially applying any
    // arguments.
    proxy: function proxy(fn, context) {
      var tmp, args, proxy;

      if (typeof context === "string") {
        tmp = fn[context];
        context = fn;
        fn = tmp;
      } // Quick check to determine if target is callable, in the spec
      // this throws a TypeError, but we will just return undefined.


      if (!jQuery.isFunction(fn)) {
        return undefined;
      } // Simulated bind


      args = _slice.call(arguments, 2);

      proxy = function proxy() {
        return fn.apply(context || this, args.concat(_slice.call(arguments)));
      }; // Set the guid of unique handler to the same of original handler, so it can be removed


      proxy.guid = fn.guid = fn.guid || jQuery.guid++;
      return proxy;
    },
    now: Date.now,
    // jQuery.support is not used in Core but other projects attach their
    // properties to it so it needs to exist.
    support: support
  }); // JSHint would error on this code due to the Symbol not being defined in ES5.
  // Defining this global in .jshintrc would create a danger of using the global
  // unguarded in another place, it seems safer to just disable JSHint for these
  // three lines.

  /* jshint ignore: start */

  if (typeof Symbol === "function") {
    jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
  }
  /* jshint ignore: end */
  // Populate the class2type map


  jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (i, name) {
    class2type["[object " + name + "]"] = name.toLowerCase();
  });

  function isArrayLike(obj) {
    // Support: iOS 8.2 (not reproducible in simulator)
    // `in` check used to prevent JIT error (gh-2145)
    // hasOwn isn't used here due to false negatives
    // regarding Nodelist length in IE
    var length = !!obj && "length" in obj && obj.length,
        type = jQuery.type(obj);

    if (type === "function" || jQuery.isWindow(obj)) {
      return false;
    }

    return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
  }

  var Sizzle =
  /*!
   * Sizzle CSS Selector Engine v2.2.1
   * http://sizzlejs.com/
   *
   * Copyright jQuery Foundation and other contributors
   * Released under the MIT license
   * http://jquery.org/license
   *
   * Date: 2015-10-17
   */
  function (window) {
    var i,
        support,
        Expr,
        getText,
        isXML,
        tokenize,
        compile,
        select,
        outermostContext,
        sortInput,
        hasDuplicate,
        // Local document vars
    setDocument,
        document,
        docElem,
        documentIsHTML,
        rbuggyQSA,
        rbuggyMatches,
        matches,
        contains,
        // Instance-specific data
    expando = "sizzle" + 1 * new Date(),
        preferredDoc = window.document,
        dirruns = 0,
        done = 0,
        classCache = createCache(),
        tokenCache = createCache(),
        compilerCache = createCache(),
        sortOrder = function sortOrder(a, b) {
      if (a === b) {
        hasDuplicate = true;
      }

      return 0;
    },
        // General-purpose constants
    MAX_NEGATIVE = 1 << 31,
        // Instance methods
    hasOwn = {}.hasOwnProperty,
        arr = [],
        pop = arr.pop,
        push_native = arr.push,
        push = arr.push,
        slice = arr.slice,
        // Use a stripped-down indexOf as it's faster than native
    // http://jsperf.com/thor-indexof-vs-for/5
    indexOf = function indexOf(list, elem) {
      var i = 0,
          len = list.length;

      for (; i < len; i++) {
        if (list[i] === elem) {
          return i;
        }
      }

      return -1;
    },
        booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
        // Regular expressions
    // http://www.w3.org/TR/css3-selectors/#whitespace
    whitespace = "[\\x20\\t\\r\\n\\f]",
        // http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
    identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
        // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
    attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + // Operator (capture 2)
    "*([*^$|!~]?=)" + whitespace + // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
    "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
        pseudos = ":(" + identifier + ")(?:\\((" + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
    // 1. quoted (capture 3; capture 4 or capture 5)
    "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + // 2. simple (capture 6)
    "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + // 3. anything else (capture 2)
    ".*" + ")\\)|)",
        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
    rwhitespace = new RegExp(whitespace + "+", "g"),
        rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
        rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
        rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
        rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
        rpseudo = new RegExp(pseudos),
        ridentifier = new RegExp("^" + identifier + "$"),
        matchExpr = {
      "ID": new RegExp("^#(" + identifier + ")"),
      "CLASS": new RegExp("^\\.(" + identifier + ")"),
      "TAG": new RegExp("^(" + identifier + "|[*])"),
      "ATTR": new RegExp("^" + attributes),
      "PSEUDO": new RegExp("^" + pseudos),
      "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
      "bool": new RegExp("^(?:" + booleans + ")$", "i"),
      // For use in libraries implementing .is()
      // We use this for POS matching in `select`
      "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
    },
        rinputs = /^(?:input|select|textarea|button)$/i,
        rheader = /^h\d$/i,
        rnative = /^[^{]+\{\s*\[native \w/,
        // Easily-parseable/retrievable ID or TAG or CLASS selectors
    rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
        rsibling = /[+~]/,
        rescape = /'|\\/g,
        // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
    runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
        funescape = function funescape(_, escaped, escapedWhitespace) {
      var high = "0x" + escaped - 0x10000; // NaN means non-codepoint
      // Support: Firefox<24
      // Workaround erroneous numeric interpretation of +"0x"

      return high !== high || escapedWhitespace ? escaped : high < 0 ? // BMP codepoint
      String.fromCharCode(high + 0x10000) : // Supplemental Plane codepoint (surrogate pair)
      String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
    },
        // Used for iframes
    // See setDocument()
    // Removing the function wrapper causes a "Permission Denied"
    // error in IE
    unloadHandler = function unloadHandler() {
      setDocument();
    }; // Optimize for push.apply( _, NodeList )


    try {
      push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes); // Support: Android<4.0
      // Detect silently failing push.apply

      arr[preferredDoc.childNodes.length].nodeType;
    } catch (e) {
      push = {
        apply: arr.length ? // Leverage slice if possible
        function (target, els) {
          push_native.apply(target, slice.call(els));
        } : // Support: IE<9
        // Otherwise append directly
        function (target, els) {
          var j = target.length,
              i = 0; // Can't trust NodeList.length

          while (target[j++] = els[i++]) {}

          target.length = j - 1;
        }
      };
    }

    function Sizzle(selector, context, results, seed) {
      var m,
          i,
          elem,
          nid,
          nidselect,
          match,
          groups,
          newSelector,
          newContext = context && context.ownerDocument,
          // nodeType defaults to 9, since context defaults to document
      nodeType = context ? context.nodeType : 9;
      results = results || []; // Return early from calls with invalid selector or context

      if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
        return results;
      } // Try to shortcut find operations (as opposed to filters) in HTML documents


      if (!seed) {
        if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
          setDocument(context);
        }

        context = context || document;

        if (documentIsHTML) {
          // If the selector is sufficiently simple, try using a "get*By*" DOM method
          // (excepting DocumentFragment context, where the methods don't exist)
          if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
            // ID selector
            if (m = match[1]) {
              // Document context
              if (nodeType === 9) {
                if (elem = context.getElementById(m)) {
                  // Support: IE, Opera, Webkit
                  // TODO: identify versions
                  // getElementById can match elements by name instead of ID
                  if (elem.id === m) {
                    results.push(elem);
                    return results;
                  }
                } else {
                  return results;
                } // Element context

              } else {
                // Support: IE, Opera, Webkit
                // TODO: identify versions
                // getElementById can match elements by name instead of ID
                if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                  results.push(elem);
                  return results;
                }
              } // Type selector

            } else if (match[2]) {
              push.apply(results, context.getElementsByTagName(selector));
              return results; // Class selector
            } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
              push.apply(results, context.getElementsByClassName(m));
              return results;
            }
          } // Take advantage of querySelectorAll


          if (support.qsa && !compilerCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
            if (nodeType !== 1) {
              newContext = context;
              newSelector = selector; // qSA looks outside Element context, which is not what we want
              // Thanks to Andrew Dupont for this workaround technique
              // Support: IE <=8
              // Exclude object elements
            } else if (context.nodeName.toLowerCase() !== "object") {
              // Capture the context ID, setting it first if necessary
              if (nid = context.getAttribute("id")) {
                nid = nid.replace(rescape, "\\$&");
              } else {
                context.setAttribute("id", nid = expando);
              } // Prefix every selector in the list


              groups = tokenize(selector);
              i = groups.length;
              nidselect = ridentifier.test(nid) ? "#" + nid : "[id='" + nid + "']";

              while (i--) {
                groups[i] = nidselect + " " + toSelector(groups[i]);
              }

              newSelector = groups.join(","); // Expand context for sibling selectors

              newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
            }

            if (newSelector) {
              try {
                push.apply(results, newContext.querySelectorAll(newSelector));
                return results;
              } catch (qsaError) {} finally {
                if (nid === expando) {
                  context.removeAttribute("id");
                }
              }
            }
          }
        }
      } // All others


      return select(selector.replace(rtrim, "$1"), context, results, seed);
    }
    /**
     * Create key-value caches of limited size
     * @returns {function(string, object)} Returns the Object data after storing it on itself with
     *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
     *	deleting the oldest entry
     */


    function createCache() {
      var keys = [];

      function cache(key, value) {
        // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
        if (keys.push(key + " ") > Expr.cacheLength) {
          // Only keep the most recent entries
          delete cache[keys.shift()];
        }

        return cache[key + " "] = value;
      }

      return cache;
    }
    /**
     * Mark a function for special use by Sizzle
     * @param {Function} fn The function to mark
     */


    function markFunction(fn) {
      fn[expando] = true;
      return fn;
    }
    /**
     * Support testing using an element
     * @param {Function} fn Passed the created div and expects a boolean result
     */


    function assert(fn) {
      var div = document.createElement("div");

      try {
        return !!fn(div);
      } catch (e) {
        return false;
      } finally {
        // Remove from its parent by default
        if (div.parentNode) {
          div.parentNode.removeChild(div);
        } // release memory in IE


        div = null;
      }
    }
    /**
     * Adds the same handler for all of the specified attrs
     * @param {String} attrs Pipe-separated list of attributes
     * @param {Function} handler The method that will be applied
     */


    function addHandle(attrs, handler) {
      var arr = attrs.split("|"),
          i = arr.length;

      while (i--) {
        Expr.attrHandle[arr[i]] = handler;
      }
    }
    /**
     * Checks document order of two siblings
     * @param {Element} a
     * @param {Element} b
     * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
     */


    function siblingCheck(a, b) {
      var cur = b && a,
          diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE); // Use IE sourceIndex if available on both nodes

      if (diff) {
        return diff;
      } // Check if b follows a


      if (cur) {
        while (cur = cur.nextSibling) {
          if (cur === b) {
            return -1;
          }
        }
      }

      return a ? 1 : -1;
    }
    /**
     * Returns a function to use in pseudos for input types
     * @param {String} type
     */


    function createInputPseudo(type) {
      return function (elem) {
        var name = elem.nodeName.toLowerCase();
        return name === "input" && elem.type === type;
      };
    }
    /**
     * Returns a function to use in pseudos for buttons
     * @param {String} type
     */


    function createButtonPseudo(type) {
      return function (elem) {
        var name = elem.nodeName.toLowerCase();
        return (name === "input" || name === "button") && elem.type === type;
      };
    }
    /**
     * Returns a function to use in pseudos for positionals
     * @param {Function} fn
     */


    function createPositionalPseudo(fn) {
      return markFunction(function (argument) {
        argument = +argument;
        return markFunction(function (seed, matches) {
          var j,
              matchIndexes = fn([], seed.length, argument),
              i = matchIndexes.length; // Match elements found at the specified indexes

          while (i--) {
            if (seed[j = matchIndexes[i]]) {
              seed[j] = !(matches[j] = seed[j]);
            }
          }
        });
      });
    }
    /**
     * Checks a node for validity as a Sizzle context
     * @param {Element|Object=} context
     * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
     */


    function testContext(context) {
      return context && typeof context.getElementsByTagName !== "undefined" && context;
    } // Expose support vars for convenience


    support = Sizzle.support = {};
    /**
     * Detects XML nodes
     * @param {Element|Object} elem An element or a document
     * @returns {Boolean} True iff elem is a non-HTML XML node
     */

    isXML = Sizzle.isXML = function (elem) {
      // documentElement is verified for cases where it doesn't yet exist
      // (such as loading iframes in IE - #4833)
      var documentElement = elem && (elem.ownerDocument || elem).documentElement;
      return documentElement ? documentElement.nodeName !== "HTML" : false;
    };
    /**
     * Sets document-related variables once based on the current document
     * @param {Element|Object} [doc] An element or document object to use to set the document
     * @returns {Object} Returns the current document
     */


    setDocument = Sizzle.setDocument = function (node) {
      var hasCompare,
          parent,
          doc = node ? node.ownerDocument || node : preferredDoc; // Return early if doc is invalid or already selected

      if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
        return document;
      } // Update global variables


      document = doc;
      docElem = document.documentElement;
      documentIsHTML = !isXML(document); // Support: IE 9-11, Edge
      // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)

      if ((parent = document.defaultView) && parent.top !== parent) {
        // Support: IE 11
        if (parent.addEventListener) {
          parent.addEventListener("unload", unloadHandler, false); // Support: IE 9 - 10 only
        } else if (parent.attachEvent) {
          parent.attachEvent("onunload", unloadHandler);
        }
      }
      /* Attributes
      ---------------------------------------------------------------------- */
      // Support: IE<8
      // Verify that getAttribute really returns attributes and not properties
      // (excepting IE8 booleans)


      support.attributes = assert(function (div) {
        div.className = "i";
        return !div.getAttribute("className");
      });
      /* getElement(s)By*
      ---------------------------------------------------------------------- */
      // Check if getElementsByTagName("*") returns only elements

      support.getElementsByTagName = assert(function (div) {
        div.appendChild(document.createComment(""));
        return !div.getElementsByTagName("*").length;
      }); // Support: IE<9

      support.getElementsByClassName = rnative.test(document.getElementsByClassName); // Support: IE<10
      // Check if getElementById returns elements by name
      // The broken getElementById methods don't pick up programatically-set names,
      // so use a roundabout getElementsByName test

      support.getById = assert(function (div) {
        docElem.appendChild(div).id = expando;
        return !document.getElementsByName || !document.getElementsByName(expando).length;
      }); // ID find and filter

      if (support.getById) {
        Expr.find["ID"] = function (id, context) {
          if (typeof context.getElementById !== "undefined" && documentIsHTML) {
            var m = context.getElementById(id);
            return m ? [m] : [];
          }
        };

        Expr.filter["ID"] = function (id) {
          var attrId = id.replace(runescape, funescape);
          return function (elem) {
            return elem.getAttribute("id") === attrId;
          };
        };
      } else {
        // Support: IE6/7
        // getElementById is not reliable as a find shortcut
        delete Expr.find["ID"];

        Expr.filter["ID"] = function (id) {
          var attrId = id.replace(runescape, funescape);
          return function (elem) {
            var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
            return node && node.value === attrId;
          };
        };
      } // Tag


      Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
        if (typeof context.getElementsByTagName !== "undefined") {
          return context.getElementsByTagName(tag); // DocumentFragment nodes don't have gEBTN
        } else if (support.qsa) {
          return context.querySelectorAll(tag);
        }
      } : function (tag, context) {
        var elem,
            tmp = [],
            i = 0,
            // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
        results = context.getElementsByTagName(tag); // Filter out possible comments

        if (tag === "*") {
          while (elem = results[i++]) {
            if (elem.nodeType === 1) {
              tmp.push(elem);
            }
          }

          return tmp;
        }

        return results;
      }; // Class

      Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
        if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
          return context.getElementsByClassName(className);
        }
      };
      /* QSA/matchesSelector
      ---------------------------------------------------------------------- */
      // QSA and matchesSelector support
      // matchesSelector(:active) reports false when true (IE9/Opera 11.5)


      rbuggyMatches = []; // qSa(:focus) reports false when true (Chrome 21)
      // We allow this because of a bug in IE8/9 that throws an error
      // whenever `document.activeElement` is accessed on an iframe
      // So, we allow :focus to pass through QSA all the time to avoid the IE error
      // See http://bugs.jquery.com/ticket/13378

      rbuggyQSA = [];

      if (support.qsa = rnative.test(document.querySelectorAll)) {
        // Build QSA regex
        // Regex strategy adopted from Diego Perini
        assert(function (div) {
          // Select is set to empty string on purpose
          // This is to test IE's treatment of not explicitly
          // setting a boolean content attribute,
          // since its presence should be enough
          // http://bugs.jquery.com/ticket/12359
          docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>"; // Support: IE8, Opera 11-12.16
          // Nothing should be selected when empty strings follow ^= or $= or *=
          // The test attribute must be unknown in Opera but "safe" for WinRT
          // http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section

          if (div.querySelectorAll("[msallowcapture^='']").length) {
            rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
          } // Support: IE8
          // Boolean attributes and "value" are not treated correctly


          if (!div.querySelectorAll("[selected]").length) {
            rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
          } // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+


          if (!div.querySelectorAll("[id~=" + expando + "-]").length) {
            rbuggyQSA.push("~=");
          } // Webkit/Opera - :checked should return selected option elements
          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
          // IE8 throws error here and will not see later tests


          if (!div.querySelectorAll(":checked").length) {
            rbuggyQSA.push(":checked");
          } // Support: Safari 8+, iOS 8+
          // https://bugs.webkit.org/show_bug.cgi?id=136851
          // In-page `selector#id sibing-combinator selector` fails


          if (!div.querySelectorAll("a#" + expando + "+*").length) {
            rbuggyQSA.push(".#.+[+~]");
          }
        });
        assert(function (div) {
          // Support: Windows 8 Native Apps
          // The type and name attributes are restricted during .innerHTML assignment
          var input = document.createElement("input");
          input.setAttribute("type", "hidden");
          div.appendChild(input).setAttribute("name", "D"); // Support: IE8
          // Enforce case-sensitivity of name attribute

          if (div.querySelectorAll("[name=d]").length) {
            rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
          } // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
          // IE8 throws error here and will not see later tests


          if (!div.querySelectorAll(":enabled").length) {
            rbuggyQSA.push(":enabled", ":disabled");
          } // Opera 10-11 does not throw on post-comma invalid pseudos


          div.querySelectorAll("*,:x");
          rbuggyQSA.push(",.*:");
        });
      }

      if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
        assert(function (div) {
          // Check to see if it's possible to do matchesSelector
          // on a disconnected node (IE 9)
          support.disconnectedMatch = matches.call(div, "div"); // This should fail with an exception
          // Gecko does not error, returns false instead

          matches.call(div, "[s!='']:x");
          rbuggyMatches.push("!=", pseudos);
        });
      }

      rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
      rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
      /* Contains
      ---------------------------------------------------------------------- */

      hasCompare = rnative.test(docElem.compareDocumentPosition); // Element contains another
      // Purposefully self-exclusive
      // As in, an element does not contain itself

      contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
        var adown = a.nodeType === 9 ? a.documentElement : a,
            bup = b && b.parentNode;
        return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
      } : function (a, b) {
        if (b) {
          while (b = b.parentNode) {
            if (b === a) {
              return true;
            }
          }
        }

        return false;
      };
      /* Sorting
      ---------------------------------------------------------------------- */
      // Document order sorting

      sortOrder = hasCompare ? function (a, b) {
        // Flag for duplicate removal
        if (a === b) {
          hasDuplicate = true;
          return 0;
        } // Sort on method existence if only one input has compareDocumentPosition


        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;

        if (compare) {
          return compare;
        } // Calculate position if both inputs belong to the same document


        compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected
        1; // Disconnected nodes

        if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
          // Choose the first element that is related to our preferred document
          if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
            return -1;
          }

          if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
            return 1;
          } // Maintain original order


          return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
        }

        return compare & 4 ? -1 : 1;
      } : function (a, b) {
        // Exit early if the nodes are identical
        if (a === b) {
          hasDuplicate = true;
          return 0;
        }

        var cur,
            i = 0,
            aup = a.parentNode,
            bup = b.parentNode,
            ap = [a],
            bp = [b]; // Parentless nodes are either documents or disconnected

        if (!aup || !bup) {
          return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0; // If the nodes are siblings, we can do a quick check
        } else if (aup === bup) {
          return siblingCheck(a, b);
        } // Otherwise we need full lists of their ancestors for comparison


        cur = a;

        while (cur = cur.parentNode) {
          ap.unshift(cur);
        }

        cur = b;

        while (cur = cur.parentNode) {
          bp.unshift(cur);
        } // Walk down the tree looking for a discrepancy


        while (ap[i] === bp[i]) {
          i++;
        }

        return i ? // Do a sibling check if the nodes have a common ancestor
        siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first
        ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
      };
      return document;
    };

    Sizzle.matches = function (expr, elements) {
      return Sizzle(expr, null, null, elements);
    };

    Sizzle.matchesSelector = function (elem, expr) {
      // Set document vars if needed
      if ((elem.ownerDocument || elem) !== document) {
        setDocument(elem);
      } // Make sure that attribute selectors are quoted


      expr = expr.replace(rattributeQuotes, "='$1']");

      if (support.matchesSelector && documentIsHTML && !compilerCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
        try {
          var ret = matches.call(elem, expr); // IE 9's matchesSelector returns false on disconnected nodes

          if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document
          // fragment in IE 9
          elem.document && elem.document.nodeType !== 11) {
            return ret;
          }
        } catch (e) {}
      }

      return Sizzle(expr, document, null, [elem]).length > 0;
    };

    Sizzle.contains = function (context, elem) {
      // Set document vars if needed
      if ((context.ownerDocument || context) !== document) {
        setDocument(context);
      }

      return contains(context, elem);
    };

    Sizzle.attr = function (elem, name) {
      // Set document vars if needed
      if ((elem.ownerDocument || elem) !== document) {
        setDocument(elem);
      }

      var fn = Expr.attrHandle[name.toLowerCase()],
          // Don't get fooled by Object.prototype properties (jQuery #13807)
      val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
      return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
    };

    Sizzle.error = function (msg) {
      throw new Error("Syntax error, unrecognized expression: " + msg);
    };
    /**
     * Document sorting and removing duplicates
     * @param {ArrayLike} results
     */


    Sizzle.uniqueSort = function (results) {
      var elem,
          duplicates = [],
          j = 0,
          i = 0; // Unless we *know* we can detect duplicates, assume their presence

      hasDuplicate = !support.detectDuplicates;
      sortInput = !support.sortStable && results.slice(0);
      results.sort(sortOrder);

      if (hasDuplicate) {
        while (elem = results[i++]) {
          if (elem === results[i]) {
            j = duplicates.push(i);
          }
        }

        while (j--) {
          results.splice(duplicates[j], 1);
        }
      } // Clear input after sorting to release objects
      // See https://github.com/jquery/sizzle/pull/225


      sortInput = null;
      return results;
    };
    /**
     * Utility function for retrieving the text value of an array of DOM nodes
     * @param {Array|Element} elem
     */


    getText = Sizzle.getText = function (elem) {
      var node,
          ret = "",
          i = 0,
          nodeType = elem.nodeType;

      if (!nodeType) {
        // If no nodeType, this is expected to be an array
        while (node = elem[i++]) {
          // Do not traverse comment nodes
          ret += getText(node);
        }
      } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
        // Use textContent for elements
        // innerText usage removed for consistency of new lines (jQuery #11153)
        if (typeof elem.textContent === "string") {
          return elem.textContent;
        } else {
          // Traverse its children
          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
            ret += getText(elem);
          }
        }
      } else if (nodeType === 3 || nodeType === 4) {
        return elem.nodeValue;
      } // Do not include comment or processing instruction nodes


      return ret;
    };

    Expr = Sizzle.selectors = {
      // Can be adjusted by the user
      cacheLength: 50,
      createPseudo: markFunction,
      match: matchExpr,
      attrHandle: {},
      find: {},
      relative: {
        ">": {
          dir: "parentNode",
          first: true
        },
        " ": {
          dir: "parentNode"
        },
        "+": {
          dir: "previousSibling",
          first: true
        },
        "~": {
          dir: "previousSibling"
        }
      },
      preFilter: {
        "ATTR": function ATTR(match) {
          match[1] = match[1].replace(runescape, funescape); // Move the given value to match[3] whether quoted or unquoted

          match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

          if (match[2] === "~=") {
            match[3] = " " + match[3] + " ";
          }

          return match.slice(0, 4);
        },
        "CHILD": function CHILD(match) {
          /* matches from matchExpr["CHILD"]
          	1 type (only|nth|...)
          	2 what (child|of-type)
          	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
          	4 xn-component of xn+y argument ([+-]?\d*n|)
          	5 sign of xn-component
          	6 x of xn-component
          	7 sign of y-component
          	8 y of y-component
          */
          match[1] = match[1].toLowerCase();

          if (match[1].slice(0, 3) === "nth") {
            // nth-* requires argument
            if (!match[3]) {
              Sizzle.error(match[0]);
            } // numeric x and y parameters for Expr.filter.CHILD
            // remember that false/true cast respectively to 0/1


            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
            match[5] = +(match[7] + match[8] || match[3] === "odd"); // other types prohibit arguments
          } else if (match[3]) {
            Sizzle.error(match[0]);
          }

          return match;
        },
        "PSEUDO": function PSEUDO(match) {
          var excess,
              unquoted = !match[6] && match[2];

          if (matchExpr["CHILD"].test(match[0])) {
            return null;
          } // Accept quoted arguments as-is


          if (match[3]) {
            match[2] = match[4] || match[5] || ""; // Strip excess characters from unquoted arguments
          } else if (unquoted && rpseudo.test(unquoted) && ( // Get excess from tokenize (recursively)
          excess = tokenize(unquoted, true)) && ( // advance to the next closing parenthesis
          excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
            // excess is a negative index
            match[0] = match[0].slice(0, excess);
            match[2] = unquoted.slice(0, excess);
          } // Return only captures needed by the pseudo filter method (type and argument)


          return match.slice(0, 3);
        }
      },
      filter: {
        "TAG": function TAG(nodeNameSelector) {
          var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
          return nodeNameSelector === "*" ? function () {
            return true;
          } : function (elem) {
            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
          };
        },
        "CLASS": function CLASS(className) {
          var pattern = classCache[className + " "];
          return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
            return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
          });
        },
        "ATTR": function ATTR(name, operator, check) {
          return function (elem) {
            var result = Sizzle.attr(elem, name);

            if (result == null) {
              return operator === "!=";
            }

            if (!operator) {
              return true;
            }

            result += "";
            return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
          };
        },
        "CHILD": function CHILD(type, what, argument, first, last) {
          var simple = type.slice(0, 3) !== "nth",
              forward = type.slice(-4) !== "last",
              ofType = what === "of-type";
          return first === 1 && last === 0 ? // Shortcut for :nth-*(n)
          function (elem) {
            return !!elem.parentNode;
          } : function (elem, context, xml) {
            var cache,
                uniqueCache,
                outerCache,
                node,
                nodeIndex,
                start,
                dir = simple !== forward ? "nextSibling" : "previousSibling",
                parent = elem.parentNode,
                name = ofType && elem.nodeName.toLowerCase(),
                useCache = !xml && !ofType,
                diff = false;

            if (parent) {
              // :(first|last|only)-(child|of-type)
              if (simple) {
                while (dir) {
                  node = elem;

                  while (node = node[dir]) {
                    if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                      return false;
                    }
                  } // Reverse direction for :only-* (if we haven't yet done so)


                  start = dir = type === "only" && !start && "nextSibling";
                }

                return true;
              }

              start = [forward ? parent.firstChild : parent.lastChild]; // non-xml :nth-child(...) stores cache data on `parent`

              if (forward && useCache) {
                // Seek `elem` from a previously-cached index
                // ...in a gzip-friendly way
                node = parent;
                outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                // Defend against cloned attroperties (jQuery gh-1709)

                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                cache = uniqueCache[type] || [];
                nodeIndex = cache[0] === dirruns && cache[1];
                diff = nodeIndex && cache[2];
                node = nodeIndex && parent.childNodes[nodeIndex];

                while (node = ++nodeIndex && node && node[dir] || ( // Fallback to seeking `elem` from the start
                diff = nodeIndex = 0) || start.pop()) {
                  // When found, cache indexes on `parent` and break
                  if (node.nodeType === 1 && ++diff && node === elem) {
                    uniqueCache[type] = [dirruns, nodeIndex, diff];
                    break;
                  }
                }
              } else {
                // Use previously-cached element index if available
                if (useCache) {
                  // ...in a gzip-friendly way
                  node = elem;
                  outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                  // Defend against cloned attroperties (jQuery gh-1709)

                  uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                  cache = uniqueCache[type] || [];
                  nodeIndex = cache[0] === dirruns && cache[1];
                  diff = nodeIndex;
                } // xml :nth-child(...)
                // or :nth-last-child(...) or :nth(-last)?-of-type(...)


                if (diff === false) {
                  // Use the same loop as above to seek `elem` from the start
                  while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                    if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                      // Cache the index of each encountered element
                      if (useCache) {
                        outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                        // Defend against cloned attroperties (jQuery gh-1709)

                        uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                        uniqueCache[type] = [dirruns, diff];
                      }

                      if (node === elem) {
                        break;
                      }
                    }
                  }
                }
              } // Incorporate the offset, then check against cycle size


              diff -= last;
              return diff === first || diff % first === 0 && diff / first >= 0;
            }
          };
        },
        "PSEUDO": function PSEUDO(pseudo, argument) {
          // pseudo-class names are case-insensitive
          // http://www.w3.org/TR/selectors/#pseudo-classes
          // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
          // Remember that setFilters inherits from pseudos
          var args,
              fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo); // The user may use createPseudo to indicate that
          // arguments are needed to create the filter function
          // just as Sizzle does

          if (fn[expando]) {
            return fn(argument);
          } // But maintain support for old signatures


          if (fn.length > 1) {
            args = [pseudo, pseudo, "", argument];
            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
              var idx,
                  matched = fn(seed, argument),
                  i = matched.length;

              while (i--) {
                idx = indexOf(seed, matched[i]);
                seed[idx] = !(matches[idx] = matched[i]);
              }
            }) : function (elem) {
              return fn(elem, 0, args);
            };
          }

          return fn;
        }
      },
      pseudos: {
        // Potentially complex pseudos
        "not": markFunction(function (selector) {
          // Trim the selector passed to compile
          // to avoid treating leading and trailing
          // spaces as combinators
          var input = [],
              results = [],
              matcher = compile(selector.replace(rtrim, "$1"));
          return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
            var elem,
                unmatched = matcher(seed, null, xml, []),
                i = seed.length; // Match elements unmatched by `matcher`

            while (i--) {
              if (elem = unmatched[i]) {
                seed[i] = !(matches[i] = elem);
              }
            }
          }) : function (elem, context, xml) {
            input[0] = elem;
            matcher(input, null, xml, results); // Don't keep the element (issue #299)

            input[0] = null;
            return !results.pop();
          };
        }),
        "has": markFunction(function (selector) {
          return function (elem) {
            return Sizzle(selector, elem).length > 0;
          };
        }),
        "contains": markFunction(function (text) {
          text = text.replace(runescape, funescape);
          return function (elem) {
            return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
          };
        }),
        // "Whether an element is represented by a :lang() selector
        // is based solely on the element's language value
        // being equal to the identifier C,
        // or beginning with the identifier C immediately followed by "-".
        // The matching of C against the element's language value is performed case-insensitively.
        // The identifier C does not have to be a valid language name."
        // http://www.w3.org/TR/selectors/#lang-pseudo
        "lang": markFunction(function (lang) {
          // lang value must be a valid identifier
          if (!ridentifier.test(lang || "")) {
            Sizzle.error("unsupported lang: " + lang);
          }

          lang = lang.replace(runescape, funescape).toLowerCase();
          return function (elem) {
            var elemLang;

            do {
              if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                elemLang = elemLang.toLowerCase();
                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
              }
            } while ((elem = elem.parentNode) && elem.nodeType === 1);

            return false;
          };
        }),
        // Miscellaneous
        "target": function target(elem) {
          var hash = window.location && window.location.hash;
          return hash && hash.slice(1) === elem.id;
        },
        "root": function root(elem) {
          return elem === docElem;
        },
        "focus": function focus(elem) {
          return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
        },
        // Boolean properties
        "enabled": function enabled(elem) {
          return elem.disabled === false;
        },
        "disabled": function disabled(elem) {
          return elem.disabled === true;
        },
        "checked": function checked(elem) {
          // In CSS3, :checked should return both checked and selected elements
          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
          var nodeName = elem.nodeName.toLowerCase();
          return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
        },
        "selected": function selected(elem) {
          // Accessing this property makes selected-by-default
          // options in Safari work properly
          if (elem.parentNode) {
            elem.parentNode.selectedIndex;
          }

          return elem.selected === true;
        },
        // Contents
        "empty": function empty(elem) {
          // http://www.w3.org/TR/selectors/#empty-pseudo
          // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
          //   but not by others (comment: 8; processing instruction: 7; etc.)
          // nodeType < 6 works because attributes (2) do not appear as children
          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
            if (elem.nodeType < 6) {
              return false;
            }
          }

          return true;
        },
        "parent": function parent(elem) {
          return !Expr.pseudos["empty"](elem);
        },
        // Element/input types
        "header": function header(elem) {
          return rheader.test(elem.nodeName);
        },
        "input": function input(elem) {
          return rinputs.test(elem.nodeName);
        },
        "button": function button(elem) {
          var name = elem.nodeName.toLowerCase();
          return name === "input" && elem.type === "button" || name === "button";
        },
        "text": function text(elem) {
          var attr;
          return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ( // Support: IE<8
          // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
          (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
        },
        // Position-in-collection
        "first": createPositionalPseudo(function () {
          return [0];
        }),
        "last": createPositionalPseudo(function (matchIndexes, length) {
          return [length - 1];
        }),
        "eq": createPositionalPseudo(function (matchIndexes, length, argument) {
          return [argument < 0 ? argument + length : argument];
        }),
        "even": createPositionalPseudo(function (matchIndexes, length) {
          var i = 0;

          for (; i < length; i += 2) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        }),
        "odd": createPositionalPseudo(function (matchIndexes, length) {
          var i = 1;

          for (; i < length; i += 2) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        }),
        "lt": createPositionalPseudo(function (matchIndexes, length, argument) {
          var i = argument < 0 ? argument + length : argument;

          for (; --i >= 0;) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        }),
        "gt": createPositionalPseudo(function (matchIndexes, length, argument) {
          var i = argument < 0 ? argument + length : argument;

          for (; ++i < length;) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        })
      }
    };
    Expr.pseudos["nth"] = Expr.pseudos["eq"]; // Add button/input type pseudos

    for (i in {
      radio: true,
      checkbox: true,
      file: true,
      password: true,
      image: true
    }) {
      Expr.pseudos[i] = createInputPseudo(i);
    }

    for (i in {
      submit: true,
      reset: true
    }) {
      Expr.pseudos[i] = createButtonPseudo(i);
    } // Easy API for creating new setFilters


    function setFilters() {}

    setFilters.prototype = Expr.filters = Expr.pseudos;
    Expr.setFilters = new setFilters();

    tokenize = Sizzle.tokenize = function (selector, parseOnly) {
      var matched,
          match,
          tokens,
          type,
          soFar,
          groups,
          preFilters,
          cached = tokenCache[selector + " "];

      if (cached) {
        return parseOnly ? 0 : cached.slice(0);
      }

      soFar = selector;
      groups = [];
      preFilters = Expr.preFilter;

      while (soFar) {
        // Comma and first run
        if (!matched || (match = rcomma.exec(soFar))) {
          if (match) {
            // Don't consume trailing commas as valid
            soFar = soFar.slice(match[0].length) || soFar;
          }

          groups.push(tokens = []);
        }

        matched = false; // Combinators

        if (match = rcombinators.exec(soFar)) {
          matched = match.shift();
          tokens.push({
            value: matched,
            // Cast descendant combinators to space
            type: match[0].replace(rtrim, " ")
          });
          soFar = soFar.slice(matched.length);
        } // Filters


        for (type in Expr.filter) {
          if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
            matched = match.shift();
            tokens.push({
              value: matched,
              type: type,
              matches: match
            });
            soFar = soFar.slice(matched.length);
          }
        }

        if (!matched) {
          break;
        }
      } // Return the length of the invalid excess
      // if we're just parsing
      // Otherwise, throw an error or return tokens


      return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens
      tokenCache(selector, groups).slice(0);
    };

    function toSelector(tokens) {
      var i = 0,
          len = tokens.length,
          selector = "";

      for (; i < len; i++) {
        selector += tokens[i].value;
      }

      return selector;
    }

    function addCombinator(matcher, combinator, base) {
      var dir = combinator.dir,
          checkNonElements = base && dir === "parentNode",
          doneName = done++;
      return combinator.first ? // Check against closest ancestor/preceding element
      function (elem, context, xml) {
        while (elem = elem[dir]) {
          if (elem.nodeType === 1 || checkNonElements) {
            return matcher(elem, context, xml);
          }
        }
      } : // Check against all ancestor/preceding elements
      function (elem, context, xml) {
        var oldCache,
            uniqueCache,
            outerCache,
            newCache = [dirruns, doneName]; // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching

        if (xml) {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              if (matcher(elem, context, xml)) {
                return true;
              }
            }
          }
        } else {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              outerCache = elem[expando] || (elem[expando] = {}); // Support: IE <9 only
              // Defend against cloned attroperties (jQuery gh-1709)

              uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

              if ((oldCache = uniqueCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                // Assign to newCache so results back-propagate to previous elements
                return newCache[2] = oldCache[2];
              } else {
                // Reuse newcache so results back-propagate to previous elements
                uniqueCache[dir] = newCache; // A match means we're done; a fail means we have to keep checking

                if (newCache[2] = matcher(elem, context, xml)) {
                  return true;
                }
              }
            }
          }
        }
      };
    }

    function elementMatcher(matchers) {
      return matchers.length > 1 ? function (elem, context, xml) {
        var i = matchers.length;

        while (i--) {
          if (!matchers[i](elem, context, xml)) {
            return false;
          }
        }

        return true;
      } : matchers[0];
    }

    function multipleContexts(selector, contexts, results) {
      var i = 0,
          len = contexts.length;

      for (; i < len; i++) {
        Sizzle(selector, contexts[i], results);
      }

      return results;
    }

    function condense(unmatched, map, filter, context, xml) {
      var elem,
          newUnmatched = [],
          i = 0,
          len = unmatched.length,
          mapped = map != null;

      for (; i < len; i++) {
        if (elem = unmatched[i]) {
          if (!filter || filter(elem, context, xml)) {
            newUnmatched.push(elem);

            if (mapped) {
              map.push(i);
            }
          }
        }
      }

      return newUnmatched;
    }

    function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
      if (postFilter && !postFilter[expando]) {
        postFilter = setMatcher(postFilter);
      }

      if (postFinder && !postFinder[expando]) {
        postFinder = setMatcher(postFinder, postSelector);
      }

      return markFunction(function (seed, results, context, xml) {
        var temp,
            i,
            elem,
            preMap = [],
            postMap = [],
            preexisting = results.length,
            // Get initial elements from seed or context
        elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
            // Prefilter to get matcher input, preserving a map for seed-results synchronization
        matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
            matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
        postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary
        [] : // ...otherwise use results directly
        results : matcherIn; // Find primary matches

        if (matcher) {
          matcher(matcherIn, matcherOut, context, xml);
        } // Apply postFilter


        if (postFilter) {
          temp = condense(matcherOut, postMap);
          postFilter(temp, [], context, xml); // Un-match failing elements by moving them back to matcherIn

          i = temp.length;

          while (i--) {
            if (elem = temp[i]) {
              matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
            }
          }
        }

        if (seed) {
          if (postFinder || preFilter) {
            if (postFinder) {
              // Get the final matcherOut by condensing this intermediate into postFinder contexts
              temp = [];
              i = matcherOut.length;

              while (i--) {
                if (elem = matcherOut[i]) {
                  // Restore matcherIn since elem is not yet a final match
                  temp.push(matcherIn[i] = elem);
                }
              }

              postFinder(null, matcherOut = [], temp, xml);
            } // Move matched elements from seed to results to keep them synchronized


            i = matcherOut.length;

            while (i--) {
              if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
                seed[temp] = !(results[temp] = elem);
              }
            }
          } // Add elements to results, through postFinder if defined

        } else {
          matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);

          if (postFinder) {
            postFinder(null, results, matcherOut, xml);
          } else {
            push.apply(results, matcherOut);
          }
        }
      });
    }

    function matcherFromTokens(tokens) {
      var checkContext,
          matcher,
          j,
          len = tokens.length,
          leadingRelative = Expr.relative[tokens[0].type],
          implicitRelative = leadingRelative || Expr.relative[" "],
          i = leadingRelative ? 1 : 0,
          // The foundational matcher ensures that elements are reachable from top-level context(s)
      matchContext = addCombinator(function (elem) {
        return elem === checkContext;
      }, implicitRelative, true),
          matchAnyContext = addCombinator(function (elem) {
        return indexOf(checkContext, elem) > -1;
      }, implicitRelative, true),
          matchers = [function (elem, context, xml) {
        var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml)); // Avoid hanging onto element (issue #299)

        checkContext = null;
        return ret;
      }];

      for (; i < len; i++) {
        if (matcher = Expr.relative[tokens[i].type]) {
          matchers = [addCombinator(elementMatcher(matchers), matcher)];
        } else {
          matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches); // Return special upon seeing a positional matcher

          if (matcher[expando]) {
            // Find the next relative operator (if any) for proper handling
            j = ++i;

            for (; j < len; j++) {
              if (Expr.relative[tokens[j].type]) {
                break;
              }
            }

            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector( // If the preceding token was a descendant combinator, insert an implicit any-element `*`
            tokens.slice(0, i - 1).concat({
              value: tokens[i - 2].type === " " ? "*" : ""
            })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
          }

          matchers.push(matcher);
        }
      }

      return elementMatcher(matchers);
    }

    function matcherFromGroupMatchers(elementMatchers, setMatchers) {
      var bySet = setMatchers.length > 0,
          byElement = elementMatchers.length > 0,
          superMatcher = function superMatcher(seed, context, xml, results, outermost) {
        var elem,
            j,
            matcher,
            matchedCount = 0,
            i = "0",
            unmatched = seed && [],
            setMatched = [],
            contextBackup = outermostContext,
            // We must always have either seed elements or outermost context
        elems = seed || byElement && Expr.find["TAG"]("*", outermost),
            // Use integer dirruns iff this is the outermost matcher
        dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
            len = elems.length;

        if (outermost) {
          outermostContext = context === document || context || outermost;
        } // Add elements passing elementMatchers directly to results
        // Support: IE<9, Safari
        // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id


        for (; i !== len && (elem = elems[i]) != null; i++) {
          if (byElement && elem) {
            j = 0;

            if (!context && elem.ownerDocument !== document) {
              setDocument(elem);
              xml = !documentIsHTML;
            }

            while (matcher = elementMatchers[j++]) {
              if (matcher(elem, context || document, xml)) {
                results.push(elem);
                break;
              }
            }

            if (outermost) {
              dirruns = dirrunsUnique;
            }
          } // Track unmatched elements for set filters


          if (bySet) {
            // They will have gone through all possible matchers
            if (elem = !matcher && elem) {
              matchedCount--;
            } // Lengthen the array for every element, matched or not


            if (seed) {
              unmatched.push(elem);
            }
          }
        } // `i` is now the count of elements visited above, and adding it to `matchedCount`
        // makes the latter nonnegative.


        matchedCount += i; // Apply set filters to unmatched elements
        // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
        // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
        // no element matchers and no seed.
        // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
        // case, which will result in a "00" `matchedCount` that differs from `i` but is also
        // numerically zero.

        if (bySet && i !== matchedCount) {
          j = 0;

          while (matcher = setMatchers[j++]) {
            matcher(unmatched, setMatched, context, xml);
          }

          if (seed) {
            // Reintegrate element matches to eliminate the need for sorting
            if (matchedCount > 0) {
              while (i--) {
                if (!(unmatched[i] || setMatched[i])) {
                  setMatched[i] = pop.call(results);
                }
              }
            } // Discard index placeholder values to get only actual matches


            setMatched = condense(setMatched);
          } // Add matches to results


          push.apply(results, setMatched); // Seedless set matches succeeding multiple successful matchers stipulate sorting

          if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
            Sizzle.uniqueSort(results);
          }
        } // Override manipulation of globals by nested matchers


        if (outermost) {
          dirruns = dirrunsUnique;
          outermostContext = contextBackup;
        }

        return unmatched;
      };

      return bySet ? markFunction(superMatcher) : superMatcher;
    }

    compile = Sizzle.compile = function (selector, match
    /* Internal Use Only */
    ) {
      var i,
          setMatchers = [],
          elementMatchers = [],
          cached = compilerCache[selector + " "];

      if (!cached) {
        // Generate a function of recursive functions that can be used to check each element
        if (!match) {
          match = tokenize(selector);
        }

        i = match.length;

        while (i--) {
          cached = matcherFromTokens(match[i]);

          if (cached[expando]) {
            setMatchers.push(cached);
          } else {
            elementMatchers.push(cached);
          }
        } // Cache the compiled function


        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers)); // Save selector and tokenization

        cached.selector = selector;
      }

      return cached;
    };
    /**
     * A low-level selection function that works with Sizzle's compiled
     *  selector functions
     * @param {String|Function} selector A selector or a pre-compiled
     *  selector function built with Sizzle.compile
     * @param {Element} context
     * @param {Array} [results]
     * @param {Array} [seed] A set of elements to match against
     */


    select = Sizzle.select = function (selector, context, results, seed) {
      var i,
          tokens,
          token,
          type,
          find,
          compiled = typeof selector === "function" && selector,
          match = !seed && tokenize(selector = compiled.selector || selector);
      results = results || []; // Try to minimize operations if there is only one selector in the list and no seed
      // (the latter of which guarantees us context)

      if (match.length === 1) {
        // Reduce context if the leading compound selector is an ID
        tokens = match[0] = match[0].slice(0);

        if (tokens.length > 2 && (token = tokens[0]).type === "ID" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
          context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];

          if (!context) {
            return results; // Precompiled matchers will still verify ancestry, so step up a level
          } else if (compiled) {
            context = context.parentNode;
          }

          selector = selector.slice(tokens.shift().value.length);
        } // Fetch a seed set for right-to-left matching


        i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;

        while (i--) {
          token = tokens[i]; // Abort if we hit a combinator

          if (Expr.relative[type = token.type]) {
            break;
          }

          if (find = Expr.find[type]) {
            // Search, expanding context for leading sibling combinators
            if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
              // If seed is empty or no tokens remain, we can return early
              tokens.splice(i, 1);
              selector = seed.length && toSelector(tokens);

              if (!selector) {
                push.apply(results, seed);
                return results;
              }

              break;
            }
          }
        }
      } // Compile and execute a filtering function if one is not provided
      // Provide `match` to avoid retokenization if we modified the selector above


      (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
      return results;
    }; // One-time assignments
    // Sort stability


    support.sortStable = expando.split("").sort(sortOrder).join("") === expando; // Support: Chrome 14-35+
    // Always assume duplicates if they aren't passed to the comparison function

    support.detectDuplicates = !!hasDuplicate; // Initialize against the default document

    setDocument(); // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
    // Detached nodes confoundingly follow *each other*

    support.sortDetached = assert(function (div1) {
      // Should return 1, but returns 4 (following)
      return div1.compareDocumentPosition(document.createElement("div")) & 1;
    }); // Support: IE<8
    // Prevent attribute/property "interpolation"
    // http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx

    if (!assert(function (div) {
      div.innerHTML = "<a href='#'></a>";
      return div.firstChild.getAttribute("href") === "#";
    })) {
      addHandle("type|href|height|width", function (elem, name, isXML) {
        if (!isXML) {
          return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
        }
      });
    } // Support: IE<9
    // Use defaultValue in place of getAttribute("value")


    if (!support.attributes || !assert(function (div) {
      div.innerHTML = "<input/>";
      div.firstChild.setAttribute("value", "");
      return div.firstChild.getAttribute("value") === "";
    })) {
      addHandle("value", function (elem, name, isXML) {
        if (!isXML && elem.nodeName.toLowerCase() === "input") {
          return elem.defaultValue;
        }
      });
    } // Support: IE<9
    // Use getAttributeNode to fetch booleans when getAttribute lies


    if (!assert(function (div) {
      return div.getAttribute("disabled") == null;
    })) {
      addHandle(booleans, function (elem, name, isXML) {
        var val;

        if (!isXML) {
          return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        }
      });
    }

    return Sizzle;
  }(window);

  jQuery.find = Sizzle;
  jQuery.expr = Sizzle.selectors;
  jQuery.expr[":"] = jQuery.expr.pseudos;
  jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
  jQuery.text = Sizzle.getText;
  jQuery.isXMLDoc = Sizzle.isXML;
  jQuery.contains = Sizzle.contains;

  var dir = function dir(elem, _dir, until) {
    var matched = [],
        truncate = until !== undefined;

    while ((elem = elem[_dir]) && elem.nodeType !== 9) {
      if (elem.nodeType === 1) {
        if (truncate && jQuery(elem).is(until)) {
          break;
        }

        matched.push(elem);
      }
    }

    return matched;
  };

  var _siblings = function siblings(n, elem) {
    var matched = [];

    for (; n; n = n.nextSibling) {
      if (n.nodeType === 1 && n !== elem) {
        matched.push(n);
      }
    }

    return matched;
  };

  var rneedsContext = jQuery.expr.match.needsContext;
  var rsingleTag = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;
  var risSimple = /^.[^:#\[\.,]*$/; // Implement the identical functionality for filter and not

  function winnow(elements, qualifier, not) {
    if (jQuery.isFunction(qualifier)) {
      return jQuery.grep(elements, function (elem, i) {
        /* jshint -W018 */
        return !!qualifier.call(elem, i, elem) !== not;
      });
    }

    if (qualifier.nodeType) {
      return jQuery.grep(elements, function (elem) {
        return elem === qualifier !== not;
      });
    }

    if (typeof qualifier === "string") {
      if (risSimple.test(qualifier)) {
        return jQuery.filter(qualifier, elements, not);
      }

      qualifier = jQuery.filter(qualifier, elements);
    }

    return jQuery.grep(elements, function (elem) {
      return indexOf.call(qualifier, elem) > -1 !== not;
    });
  }

  jQuery.filter = function (expr, elems, not) {
    var elem = elems[0];

    if (not) {
      expr = ":not(" + expr + ")";
    }

    return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
      return elem.nodeType === 1;
    }));
  };

  jQuery.fn.extend({
    find: function find(selector) {
      var i,
          len = this.length,
          ret = [],
          self = this;

      if (typeof selector !== "string") {
        return this.pushStack(jQuery(selector).filter(function () {
          for (i = 0; i < len; i++) {
            if (jQuery.contains(self[i], this)) {
              return true;
            }
          }
        }));
      }

      for (i = 0; i < len; i++) {
        jQuery.find(selector, self[i], ret);
      } // Needed because $( selector, context ) becomes $( context ).find( selector )


      ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
      ret.selector = this.selector ? this.selector + " " + selector : selector;
      return ret;
    },
    filter: function filter(selector) {
      return this.pushStack(winnow(this, selector || [], false));
    },
    not: function not(selector) {
      return this.pushStack(winnow(this, selector || [], true));
    },
    is: function is(selector) {
      return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set
      // so $("p:first").is("p:last") won't return true for a doc with two "p".
      typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
    }
  }); // Initialize a jQuery object
  // A central reference to the root jQuery(document)

  var rootjQuery,
      // A simple way to check for HTML strings
  // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
  // Strict HTML recognition (#11290: must start with <)
  rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
      init = jQuery.fn.init = function (selector, context, root) {
    var match, elem; // HANDLE: $(""), $(null), $(undefined), $(false)

    if (!selector) {
      return this;
    } // Method init() accepts an alternate rootjQuery
    // so migrate can support jQuery.sub (gh-2101)


    root = root || rootjQuery; // Handle HTML strings

    if (typeof selector === "string") {
      if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
        // Assume that strings that start and end with <> are HTML and skip the regex check
        match = [null, selector, null];
      } else {
        match = rquickExpr.exec(selector);
      } // Match html or make sure no context is specified for #id


      if (match && (match[1] || !context)) {
        // HANDLE: $(html) -> $(array)
        if (match[1]) {
          context = context instanceof jQuery ? context[0] : context; // Option to run scripts is true for back-compat
          // Intentionally let the error be thrown if parseHTML is not present

          jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true)); // HANDLE: $(html, props)

          if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
            for (match in context) {
              // Properties of context are called as methods if possible
              if (jQuery.isFunction(this[match])) {
                this[match](context[match]); // ...and otherwise set as attributes
              } else {
                this.attr(match, context[match]);
              }
            }
          }

          return this; // HANDLE: $(#id)
        } else {
          elem = document.getElementById(match[2]); // Support: Blackberry 4.6
          // gEBID returns nodes no longer in the document (#6963)

          if (elem && elem.parentNode) {
            // Inject the element directly into the jQuery object
            this.length = 1;
            this[0] = elem;
          }

          this.context = document;
          this.selector = selector;
          return this;
        } // HANDLE: $(expr, $(...))

      } else if (!context || context.jquery) {
        return (context || root).find(selector); // HANDLE: $(expr, context)
        // (which is just equivalent to: $(context).find(expr)
      } else {
        return this.constructor(context).find(selector);
      } // HANDLE: $(DOMElement)

    } else if (selector.nodeType) {
      this.context = this[0] = selector;
      this.length = 1;
      return this; // HANDLE: $(function)
      // Shortcut for document ready
    } else if (jQuery.isFunction(selector)) {
      return root.ready !== undefined ? root.ready(selector) : // Execute immediately if ready is not present
      selector(jQuery);
    }

    if (selector.selector !== undefined) {
      this.selector = selector.selector;
      this.context = selector.context;
    }

    return jQuery.makeArray(selector, this);
  }; // Give the init function the jQuery prototype for later instantiation


  init.prototype = jQuery.fn; // Initialize central reference

  rootjQuery = jQuery(document);
  var rparentsprev = /^(?:parents|prev(?:Until|All))/,
      // Methods guaranteed to produce a unique set when starting from a unique set
  guaranteedUnique = {
    children: true,
    contents: true,
    next: true,
    prev: true
  };
  jQuery.fn.extend({
    has: function has(target) {
      var targets = jQuery(target, this),
          l = targets.length;
      return this.filter(function () {
        var i = 0;

        for (; i < l; i++) {
          if (jQuery.contains(this, targets[i])) {
            return true;
          }
        }
      });
    },
    closest: function closest(selectors, context) {
      var cur,
          i = 0,
          l = this.length,
          matched = [],
          pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;

      for (; i < l; i++) {
        for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
          // Always skip document fragments
          if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : // Don't pass non-elements to Sizzle
          cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
            matched.push(cur);
            break;
          }
        }
      }

      return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
    },
    // Determine the position of an element within the set
    index: function index(elem) {
      // No argument, return index in parent
      if (!elem) {
        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
      } // Index in selector


      if (typeof elem === "string") {
        return indexOf.call(jQuery(elem), this[0]);
      } // Locate the position of the desired element


      return indexOf.call(this, // If it receives a jQuery object, the first element is used
      elem.jquery ? elem[0] : elem);
    },
    add: function add(selector, context) {
      return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
    },
    addBack: function addBack(selector) {
      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
    }
  });

  function sibling(cur, dir) {
    while ((cur = cur[dir]) && cur.nodeType !== 1) {}

    return cur;
  }

  jQuery.each({
    parent: function parent(elem) {
      var parent = elem.parentNode;
      return parent && parent.nodeType !== 11 ? parent : null;
    },
    parents: function parents(elem) {
      return dir(elem, "parentNode");
    },
    parentsUntil: function parentsUntil(elem, i, until) {
      return dir(elem, "parentNode", until);
    },
    next: function next(elem) {
      return sibling(elem, "nextSibling");
    },
    prev: function prev(elem) {
      return sibling(elem, "previousSibling");
    },
    nextAll: function nextAll(elem) {
      return dir(elem, "nextSibling");
    },
    prevAll: function prevAll(elem) {
      return dir(elem, "previousSibling");
    },
    nextUntil: function nextUntil(elem, i, until) {
      return dir(elem, "nextSibling", until);
    },
    prevUntil: function prevUntil(elem, i, until) {
      return dir(elem, "previousSibling", until);
    },
    siblings: function siblings(elem) {
      return _siblings((elem.parentNode || {}).firstChild, elem);
    },
    children: function children(elem) {
      return _siblings(elem.firstChild);
    },
    contents: function contents(elem) {
      return elem.contentDocument || jQuery.merge([], elem.childNodes);
    }
  }, function (name, fn) {
    jQuery.fn[name] = function (until, selector) {
      var matched = jQuery.map(this, fn, until);

      if (name.slice(-5) !== "Until") {
        selector = until;
      }

      if (selector && typeof selector === "string") {
        matched = jQuery.filter(selector, matched);
      }

      if (this.length > 1) {
        // Remove duplicates
        if (!guaranteedUnique[name]) {
          jQuery.uniqueSort(matched);
        } // Reverse order for parents* and prev-derivatives


        if (rparentsprev.test(name)) {
          matched.reverse();
        }
      }

      return this.pushStack(matched);
    };
  });
  var rnotwhite = /\S+/g; // Convert String-formatted options into Object-formatted ones

  function createOptions(options) {
    var object = {};
    jQuery.each(options.match(rnotwhite) || [], function (_, flag) {
      object[flag] = true;
    });
    return object;
  }
  /*
   * Create a callback list using the following parameters:
   *
   *	options: an optional list of space-separated options that will change how
   *			the callback list behaves or a more traditional option object
   *
   * By default a callback list will act like an event callback list and can be
   * "fired" multiple times.
   *
   * Possible options:
   *
   *	once:			will ensure the callback list can only be fired once (like a Deferred)
   *
   *	memory:			will keep track of previous values and will call any callback added
   *					after the list has been fired right away with the latest "memorized"
   *					values (like a Deferred)
   *
   *	unique:			will ensure a callback can only be added once (no duplicate in the list)
   *
   *	stopOnFalse:	interrupt callings when a callback returns false
   *
   */


  jQuery.Callbacks = function (options) {
    // Convert options from String-formatted to Object-formatted if needed
    // (we check in cache first)
    options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);

    var // Flag to know if list is currently firing
    firing,
        // Last fire value for non-forgettable lists
    memory,
        // Flag to know if list was already fired
    _fired,
        // Flag to prevent firing
    _locked,
        // Actual callback list
    list = [],
        // Queue of execution data for repeatable lists
    queue = [],
        // Index of currently firing callback (modified by add/remove as needed)
    firingIndex = -1,
        // Fire callbacks
    fire = function fire() {
      // Enforce single-firing
      _locked = options.once; // Execute callbacks for all pending executions,
      // respecting firingIndex overrides and runtime changes

      _fired = firing = true;

      for (; queue.length; firingIndex = -1) {
        memory = queue.shift();

        while (++firingIndex < list.length) {
          // Run callback and check for early termination
          if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
            // Jump to end and forget the data so .add doesn't re-fire
            firingIndex = list.length;
            memory = false;
          }
        }
      } // Forget the data if we're done with it


      if (!options.memory) {
        memory = false;
      }

      firing = false; // Clean up if we're done firing for good

      if (_locked) {
        // Keep an empty list if we have data for future add calls
        if (memory) {
          list = []; // Otherwise, this object is spent
        } else {
          list = "";
        }
      }
    },
        // Actual Callbacks object
    self = {
      // Add a callback or a collection of callbacks to the list
      add: function add() {
        if (list) {
          // If we have memory from a past run, we should fire after adding
          if (memory && !firing) {
            firingIndex = list.length - 1;
            queue.push(memory);
          }

          (function add(args) {
            jQuery.each(args, function (_, arg) {
              if (jQuery.isFunction(arg)) {
                if (!options.unique || !self.has(arg)) {
                  list.push(arg);
                }
              } else if (arg && arg.length && jQuery.type(arg) !== "string") {
                // Inspect recursively
                add(arg);
              }
            });
          })(arguments);

          if (memory && !firing) {
            fire();
          }
        }

        return this;
      },
      // Remove a callback from the list
      remove: function remove() {
        jQuery.each(arguments, function (_, arg) {
          var index;

          while ((index = jQuery.inArray(arg, list, index)) > -1) {
            list.splice(index, 1); // Handle firing indexes

            if (index <= firingIndex) {
              firingIndex--;
            }
          }
        });
        return this;
      },
      // Check if a given callback is in the list.
      // If no argument is given, return whether or not list has callbacks attached.
      has: function has(fn) {
        return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
      },
      // Remove all callbacks from the list
      empty: function empty() {
        if (list) {
          list = [];
        }

        return this;
      },
      // Disable .fire and .add
      // Abort any current/pending executions
      // Clear all callbacks and values
      disable: function disable() {
        _locked = queue = [];
        list = memory = "";
        return this;
      },
      disabled: function disabled() {
        return !list;
      },
      // Disable .fire
      // Also disable .add unless we have memory (since it would have no effect)
      // Abort any pending executions
      lock: function lock() {
        _locked = queue = [];

        if (!memory) {
          list = memory = "";
        }

        return this;
      },
      locked: function locked() {
        return !!_locked;
      },
      // Call all callbacks with the given context and arguments
      fireWith: function fireWith(context, args) {
        if (!_locked) {
          args = args || [];
          args = [context, args.slice ? args.slice() : args];
          queue.push(args);

          if (!firing) {
            fire();
          }
        }

        return this;
      },
      // Call all the callbacks with the given arguments
      fire: function fire() {
        self.fireWith(this, arguments);
        return this;
      },
      // To know if the callbacks have already been called at least once
      fired: function fired() {
        return !!_fired;
      }
    };

    return self;
  };

  jQuery.extend({
    Deferred: function Deferred(func) {
      var tuples = [// action, add listener, listener list, final state
      ["resolve", "done", jQuery.Callbacks("once memory"), "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"], ["notify", "progress", jQuery.Callbacks("memory")]],
          _state = "pending",
          _promise = {
        state: function state() {
          return _state;
        },
        always: function always() {
          deferred.done(arguments).fail(arguments);
          return this;
        },
        then: function then()
        /* fnDone, fnFail, fnProgress */
        {
          var fns = arguments;
          return jQuery.Deferred(function (newDefer) {
            jQuery.each(tuples, function (i, tuple) {
              var fn = jQuery.isFunction(fns[i]) && fns[i]; // deferred[ done | fail | progress ] for forwarding actions to newDefer

              deferred[tuple[1]](function () {
                var returned = fn && fn.apply(this, arguments);

                if (returned && jQuery.isFunction(returned.promise)) {
                  returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                } else {
                  newDefer[tuple[0] + "With"](this === _promise ? newDefer.promise() : this, fn ? [returned] : arguments);
                }
              });
            });
            fns = null;
          }).promise();
        },
        // Get a promise for this deferred
        // If obj is provided, the promise aspect is added to the object
        promise: function promise(obj) {
          return obj != null ? jQuery.extend(obj, _promise) : _promise;
        }
      },
          deferred = {}; // Keep pipe for back-compat

      _promise.pipe = _promise.then; // Add list-specific methods

      jQuery.each(tuples, function (i, tuple) {
        var list = tuple[2],
            stateString = tuple[3]; // promise[ done | fail | progress ] = list.add

        _promise[tuple[1]] = list.add; // Handle state

        if (stateString) {
          list.add(function () {
            // state = [ resolved | rejected ]
            _state = stateString; // [ reject_list | resolve_list ].disable; progress_list.lock
          }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
        } // deferred[ resolve | reject | notify ]


        deferred[tuple[0]] = function () {
          deferred[tuple[0] + "With"](this === deferred ? _promise : this, arguments);
          return this;
        };

        deferred[tuple[0] + "With"] = list.fireWith;
      }); // Make the deferred a promise

      _promise.promise(deferred); // Call given func if any


      if (func) {
        func.call(deferred, deferred);
      } // All done!


      return deferred;
    },
    // Deferred helper
    when: function when(subordinate
    /* , ..., subordinateN */
    ) {
      var i = 0,
          resolveValues = _slice.call(arguments),
          length = resolveValues.length,
          // the count of uncompleted subordinates
      remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,
          // the master Deferred.
      // If resolveValues consist of only a single Deferred, just use that.
      deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
          // Update function for both resolve and progress values
      updateFunc = function updateFunc(i, contexts, values) {
        return function (value) {
          contexts[i] = this;
          values[i] = arguments.length > 1 ? _slice.call(arguments) : value;

          if (values === progressValues) {
            deferred.notifyWith(contexts, values);
          } else if (! --remaining) {
            deferred.resolveWith(contexts, values);
          }
        };
      },
          progressValues,
          progressContexts,
          resolveContexts; // Add listeners to Deferred subordinates; treat others as resolved


      if (length > 1) {
        progressValues = new Array(length);
        progressContexts = new Array(length);
        resolveContexts = new Array(length);

        for (; i < length; i++) {
          if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
            resolveValues[i].promise().progress(updateFunc(i, progressContexts, progressValues)).done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject);
          } else {
            --remaining;
          }
        }
      } // If we're not waiting on anything, resolve the master


      if (!remaining) {
        deferred.resolveWith(resolveContexts, resolveValues);
      }

      return deferred.promise();
    }
  }); // The deferred used on DOM ready

  var readyList;

  jQuery.fn.ready = function (fn) {
    // Add the callback
    jQuery.ready.promise().done(fn);
    return this;
  };

  jQuery.extend({
    // Is the DOM ready to be used? Set to true once it occurs.
    isReady: false,
    // A counter to track how many items to wait for before
    // the ready event fires. See #6781
    readyWait: 1,
    // Hold (or release) the ready event
    holdReady: function holdReady(hold) {
      if (hold) {
        jQuery.readyWait++;
      } else {
        jQuery.ready(true);
      }
    },
    // Handle when the DOM is ready
    ready: function ready(wait) {
      // Abort if there are pending holds or we're already ready
      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
        return;
      } // Remember that the DOM is ready


      jQuery.isReady = true; // If a normal DOM Ready event fired, decrement, and wait if need be

      if (wait !== true && --jQuery.readyWait > 0) {
        return;
      } // If there are functions bound, to execute


      readyList.resolveWith(document, [jQuery]); // Trigger any bound ready events

      if (jQuery.fn.triggerHandler) {
        jQuery(document).triggerHandler("ready");
        jQuery(document).off("ready");
      }
    }
  });
  /**
   * The ready event handler and self cleanup method
   */

  function completed() {
    document.removeEventListener("DOMContentLoaded", completed);
    window.removeEventListener("load", completed);
    jQuery.ready();
  }

  jQuery.ready.promise = function (obj) {
    if (!readyList) {
      readyList = jQuery.Deferred(); // Catch cases where $(document).ready() is called
      // after the browser event has already occurred.
      // Support: IE9-10 only
      // Older IE sometimes signals "interactive" too soon

      if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {
        // Handle it asynchronously to allow scripts the opportunity to delay ready
        window.setTimeout(jQuery.ready);
      } else {
        // Use the handy event callback
        document.addEventListener("DOMContentLoaded", completed); // A fallback to window.onload, that will always work

        window.addEventListener("load", completed);
      }
    }

    return readyList.promise(obj);
  }; // Kick off the DOM ready check even if the user does not


  jQuery.ready.promise(); // Multifunctional method to get and set values of a collection
  // The value/s can optionally be executed if it's a function

  var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {
    var i = 0,
        len = elems.length,
        bulk = key == null; // Sets many values

    if (jQuery.type(key) === "object") {
      chainable = true;

      for (i in key) {
        access(elems, fn, i, key[i], true, emptyGet, raw);
      } // Sets one value

    } else if (value !== undefined) {
      chainable = true;

      if (!jQuery.isFunction(value)) {
        raw = true;
      }

      if (bulk) {
        // Bulk operations run against the entire set
        if (raw) {
          fn.call(elems, value);
          fn = null; // ...except when executing function values
        } else {
          bulk = fn;

          fn = function fn(elem, key, value) {
            return bulk.call(jQuery(elem), value);
          };
        }
      }

      if (fn) {
        for (; i < len; i++) {
          fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
        }
      }
    }

    return chainable ? elems : // Gets
    bulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet;
  };

  var acceptData = function acceptData(owner) {
    // Accepts only:
    //  - Node
    //    - Node.ELEMENT_NODE
    //    - Node.DOCUMENT_NODE
    //  - Object
    //    - Any

    /* jshint -W018 */
    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
  };

  function Data() {
    this.expando = jQuery.expando + Data.uid++;
  }

  Data.uid = 1;
  Data.prototype = {
    register: function register(owner, initial) {
      var value = initial || {}; // If it is a node unlikely to be stringify-ed or looped over
      // use plain assignment

      if (owner.nodeType) {
        owner[this.expando] = value; // Otherwise secure it in a non-enumerable, non-writable property
        // configurability must be true to allow the property to be
        // deleted with the delete operator
      } else {
        Object.defineProperty(owner, this.expando, {
          value: value,
          writable: true,
          configurable: true
        });
      }

      return owner[this.expando];
    },
    cache: function cache(owner) {
      // We can accept data for non-element nodes in modern browsers,
      // but we should not, see #8335.
      // Always return an empty object.
      if (!acceptData(owner)) {
        return {};
      } // Check if the owner object already has a cache


      var value = owner[this.expando]; // If not, create one

      if (!value) {
        value = {}; // We can accept data for non-element nodes in modern browsers,
        // but we should not, see #8335.
        // Always return an empty object.

        if (acceptData(owner)) {
          // If it is a node unlikely to be stringify-ed or looped over
          // use plain assignment
          if (owner.nodeType) {
            owner[this.expando] = value; // Otherwise secure it in a non-enumerable property
            // configurable must be true to allow the property to be
            // deleted when data is removed
          } else {
            Object.defineProperty(owner, this.expando, {
              value: value,
              configurable: true
            });
          }
        }
      }

      return value;
    },
    set: function set(owner, data, value) {
      var prop,
          cache = this.cache(owner); // Handle: [ owner, key, value ] args

      if (typeof data === "string") {
        cache[data] = value; // Handle: [ owner, { properties } ] args
      } else {
        // Copy the properties one-by-one to the cache object
        for (prop in data) {
          cache[prop] = data[prop];
        }
      }

      return cache;
    },
    get: function get(owner, key) {
      return key === undefined ? this.cache(owner) : owner[this.expando] && owner[this.expando][key];
    },
    access: function access(owner, key, value) {
      var stored; // In cases where either:
      //
      //   1. No key was specified
      //   2. A string key was specified, but no value provided
      //
      // Take the "read" path and allow the get method to determine
      // which value to return, respectively either:
      //
      //   1. The entire cache object
      //   2. The data stored at the key
      //

      if (key === undefined || key && typeof key === "string" && value === undefined) {
        stored = this.get(owner, key);
        return stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key));
      } // When the key is not a string, or both a key and value
      // are specified, set or extend (existing objects) with either:
      //
      //   1. An object of properties
      //   2. A key and value
      //


      this.set(owner, key, value); // Since the "set" path can have two possible entry points
      // return the expected data based on which path was taken[*]

      return value !== undefined ? value : key;
    },
    remove: function remove(owner, key) {
      var i,
          name,
          camel,
          cache = owner[this.expando];

      if (cache === undefined) {
        return;
      }

      if (key === undefined) {
        this.register(owner);
      } else {
        // Support array or space separated string of keys
        if (jQuery.isArray(key)) {
          // If "name" is an array of keys...
          // When data is initially created, via ("key", "val") signature,
          // keys will be converted to camelCase.
          // Since there is no way to tell _how_ a key was added, remove
          // both plain key and camelCase key. #12786
          // This will only penalize the array argument path.
          name = key.concat(key.map(jQuery.camelCase));
        } else {
          camel = jQuery.camelCase(key); // Try the string as a key before any manipulation

          if (key in cache) {
            name = [key, camel];
          } else {
            // If a key with the spaces exists, use it.
            // Otherwise, create an array by matching non-whitespace
            name = camel;
            name = name in cache ? [name] : name.match(rnotwhite) || [];
          }
        }

        i = name.length;

        while (i--) {
          delete cache[name[i]];
        }
      } // Remove the expando if there's no more data


      if (key === undefined || jQuery.isEmptyObject(cache)) {
        // Support: Chrome <= 35-45+
        // Webkit & Blink performance suffers when deleting properties
        // from DOM nodes, so set to undefined instead
        // https://code.google.com/p/chromium/issues/detail?id=378607
        if (owner.nodeType) {
          owner[this.expando] = undefined;
        } else {
          delete owner[this.expando];
        }
      }
    },
    hasData: function hasData(owner) {
      var cache = owner[this.expando];
      return cache !== undefined && !jQuery.isEmptyObject(cache);
    }
  };
  var dataPriv = new Data();
  var dataUser = new Data(); //	Implementation Summary
  //
  //	1. Enforce API surface and semantic compatibility with 1.9.x branch
  //	2. Improve the module's maintainability by reducing the storage
  //		paths to a single mechanism.
  //	3. Use the same single mechanism to support "private" and "user" data.
  //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
  //	5. Avoid exposing implementation details on user objects (eg. expando properties)
  //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

  var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
      rmultiDash = /[A-Z]/g;

  function dataAttr(elem, key, data) {
    var name; // If nothing was found internally, try to fetch any
    // data from the HTML5 data-* attribute

    if (data === undefined && elem.nodeType === 1) {
      name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
      data = elem.getAttribute(name);

      if (typeof data === "string") {
        try {
          data = data === "true" ? true : data === "false" ? false : data === "null" ? null : // Only convert to a number if it doesn't change the string
          +data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
        } catch (e) {} // Make sure we set the data so it isn't changed later


        dataUser.set(elem, key, data);
      } else {
        data = undefined;
      }
    }

    return data;
  }

  jQuery.extend({
    hasData: function hasData(elem) {
      return dataUser.hasData(elem) || dataPriv.hasData(elem);
    },
    data: function data(elem, name, _data) {
      return dataUser.access(elem, name, _data);
    },
    removeData: function removeData(elem, name) {
      dataUser.remove(elem, name);
    },
    // TODO: Now that all calls to _data and _removeData have been replaced
    // with direct calls to dataPriv methods, these can be deprecated.
    _data: function _data(elem, name, data) {
      return dataPriv.access(elem, name, data);
    },
    _removeData: function _removeData(elem, name) {
      dataPriv.remove(elem, name);
    }
  });
  jQuery.fn.extend({
    data: function data(key, value) {
      var i,
          name,
          data,
          elem = this[0],
          attrs = elem && elem.attributes; // Gets all values

      if (key === undefined) {
        if (this.length) {
          data = dataUser.get(elem);

          if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
            i = attrs.length;

            while (i--) {
              // Support: IE11+
              // The attrs elements can be null (#14894)
              if (attrs[i]) {
                name = attrs[i].name;

                if (name.indexOf("data-") === 0) {
                  name = jQuery.camelCase(name.slice(5));
                  dataAttr(elem, name, data[name]);
                }
              }
            }

            dataPriv.set(elem, "hasDataAttrs", true);
          }
        }

        return data;
      } // Sets multiple values


      if (_typeof(key) === "object") {
        return this.each(function () {
          dataUser.set(this, key);
        });
      }

      return access(this, function (value) {
        var data, camelKey; // The calling jQuery object (element matches) is not empty
        // (and therefore has an element appears at this[ 0 ]) and the
        // `value` parameter was not undefined. An empty jQuery object
        // will result in `undefined` for elem = this[ 0 ] which will
        // throw an exception if an attempt to read a data cache is made.

        if (elem && value === undefined) {
          // Attempt to get data from the cache
          // with the key as-is
          data = dataUser.get(elem, key) || // Try to find dashed key if it exists (gh-2779)
          // This is for 2.2.x only
          dataUser.get(elem, key.replace(rmultiDash, "-$&").toLowerCase());

          if (data !== undefined) {
            return data;
          }

          camelKey = jQuery.camelCase(key); // Attempt to get data from the cache
          // with the key camelized

          data = dataUser.get(elem, camelKey);

          if (data !== undefined) {
            return data;
          } // Attempt to "discover" the data in
          // HTML5 custom data-* attrs


          data = dataAttr(elem, camelKey, undefined);

          if (data !== undefined) {
            return data;
          } // We tried really hard, but the data doesn't exist.


          return;
        } // Set the data...


        camelKey = jQuery.camelCase(key);
        this.each(function () {
          // First, attempt to store a copy or reference of any
          // data that might've been store with a camelCased key.
          var data = dataUser.get(this, camelKey); // For HTML5 data-* attribute interop, we have to
          // store property names with dashes in a camelCase form.
          // This might not apply to all properties...*

          dataUser.set(this, camelKey, value); // *... In the case of properties that might _actually_
          // have dashes, we need to also store a copy of that
          // unchanged property.

          if (key.indexOf("-") > -1 && data !== undefined) {
            dataUser.set(this, key, value);
          }
        });
      }, null, value, arguments.length > 1, null, true);
    },
    removeData: function removeData(key) {
      return this.each(function () {
        dataUser.remove(this, key);
      });
    }
  });
  jQuery.extend({
    queue: function queue(elem, type, data) {
      var queue;

      if (elem) {
        type = (type || "fx") + "queue";
        queue = dataPriv.get(elem, type); // Speed up dequeue by getting out quickly if this is just a lookup

        if (data) {
          if (!queue || jQuery.isArray(data)) {
            queue = dataPriv.access(elem, type, jQuery.makeArray(data));
          } else {
            queue.push(data);
          }
        }

        return queue || [];
      }
    },
    dequeue: function dequeue(elem, type) {
      type = type || "fx";

      var queue = jQuery.queue(elem, type),
          startLength = queue.length,
          fn = queue.shift(),
          hooks = jQuery._queueHooks(elem, type),
          next = function next() {
        jQuery.dequeue(elem, type);
      }; // If the fx queue is dequeued, always remove the progress sentinel


      if (fn === "inprogress") {
        fn = queue.shift();
        startLength--;
      }

      if (fn) {
        // Add a progress sentinel to prevent the fx queue from being
        // automatically dequeued
        if (type === "fx") {
          queue.unshift("inprogress");
        } // Clear up the last queue stop function


        delete hooks.stop;
        fn.call(elem, next, hooks);
      }

      if (!startLength && hooks) {
        hooks.empty.fire();
      }
    },
    // Not public - generate a queueHooks object, or return the current one
    _queueHooks: function _queueHooks(elem, type) {
      var key = type + "queueHooks";
      return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
        empty: jQuery.Callbacks("once memory").add(function () {
          dataPriv.remove(elem, [type + "queue", key]);
        })
      });
    }
  });
  jQuery.fn.extend({
    queue: function queue(type, data) {
      var setter = 2;

      if (typeof type !== "string") {
        data = type;
        type = "fx";
        setter--;
      }

      if (arguments.length < setter) {
        return jQuery.queue(this[0], type);
      }

      return data === undefined ? this : this.each(function () {
        var queue = jQuery.queue(this, type, data); // Ensure a hooks for this queue

        jQuery._queueHooks(this, type);

        if (type === "fx" && queue[0] !== "inprogress") {
          jQuery.dequeue(this, type);
        }
      });
    },
    dequeue: function dequeue(type) {
      return this.each(function () {
        jQuery.dequeue(this, type);
      });
    },
    clearQueue: function clearQueue(type) {
      return this.queue(type || "fx", []);
    },
    // Get a promise resolved when queues of a certain type
    // are emptied (fx is the type by default)
    promise: function promise(type, obj) {
      var tmp,
          count = 1,
          defer = jQuery.Deferred(),
          elements = this,
          i = this.length,
          resolve = function resolve() {
        if (! --count) {
          defer.resolveWith(elements, [elements]);
        }
      };

      if (typeof type !== "string") {
        obj = type;
        type = undefined;
      }

      type = type || "fx";

      while (i--) {
        tmp = dataPriv.get(elements[i], type + "queueHooks");

        if (tmp && tmp.empty) {
          count++;
          tmp.empty.add(resolve);
        }
      }

      resolve();
      return defer.promise(obj);
    }
  });
  var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
  var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
  var cssExpand = ["Top", "Right", "Bottom", "Left"];

  var isHidden = function isHidden(elem, el) {
    // isHidden might be called from jQuery#filter function;
    // in that case, element will be second argument
    elem = el || elem;
    return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem);
  };

  function adjustCSS(elem, prop, valueParts, tween) {
    var adjusted,
        scale = 1,
        maxIterations = 20,
        currentValue = tween ? function () {
      return tween.cur();
    } : function () {
      return jQuery.css(elem, prop, "");
    },
        initial = currentValue(),
        unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),
        // Starting value computation is required for potential unit mismatches
    initialInUnit = (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));

    if (initialInUnit && initialInUnit[3] !== unit) {
      // Trust units reported by jQuery.css
      unit = unit || initialInUnit[3]; // Make sure we update the tween properties later on

      valueParts = valueParts || []; // Iteratively approximate from a nonzero starting point

      initialInUnit = +initial || 1;

      do {
        // If previous iteration zeroed out, double until we get *something*.
        // Use string for doubling so we don't accidentally see scale as unchanged below
        scale = scale || ".5"; // Adjust and apply

        initialInUnit = initialInUnit / scale;
        jQuery.style(elem, prop, initialInUnit + unit); // Update scale, tolerating zero or NaN from tween.cur()
        // Break the loop if scale is unchanged or perfect, or if we've just had enough.
      } while (scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations);
    }

    if (valueParts) {
      initialInUnit = +initialInUnit || +initial || 0; // Apply relative offset (+=/-=) if specified

      adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];

      if (tween) {
        tween.unit = unit;
        tween.start = initialInUnit;
        tween.end = adjusted;
      }
    }

    return adjusted;
  }

  var rcheckableType = /^(?:checkbox|radio)$/i;
  var rtagName = /<([\w:-]+)/;
  var rscriptType = /^$|\/(?:java|ecma)script/i; // We have to close these tags to support XHTML (#13200)

  var wrapMap = {
    // Support: IE9
    option: [1, "<select multiple='multiple'>", "</select>"],
    // XHTML parsers do not magically insert elements in the
    // same way that tag soup parsers do. So we cannot shorten
    // this by omitting <tbody> or other required elements.
    thead: [1, "<table>", "</table>"],
    col: [2, "<table><colgroup>", "</colgroup></table>"],
    tr: [2, "<table><tbody>", "</tbody></table>"],
    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
    _default: [0, "", ""]
  }; // Support: IE9

  wrapMap.optgroup = wrapMap.option;
  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  wrapMap.th = wrapMap.td;

  function getAll(context, tag) {
    // Support: IE9-11+
    // Use typeof to avoid zero-argument method invocation on host objects (#15151)
    var ret = typeof context.getElementsByTagName !== "undefined" ? context.getElementsByTagName(tag || "*") : typeof context.querySelectorAll !== "undefined" ? context.querySelectorAll(tag || "*") : [];
    return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret;
  } // Mark scripts as having already been evaluated


  function setGlobalEval(elems, refElements) {
    var i = 0,
        l = elems.length;

    for (; i < l; i++) {
      dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
    }
  }

  var rhtml = /<|&#?\w+;/;

  function buildFragment(elems, context, scripts, selection, ignored) {
    var elem,
        tmp,
        tag,
        wrap,
        contains,
        j,
        fragment = context.createDocumentFragment(),
        nodes = [],
        i = 0,
        l = elems.length;

    for (; i < l; i++) {
      elem = elems[i];

      if (elem || elem === 0) {
        // Add nodes directly
        if (jQuery.type(elem) === "object") {
          // Support: Android<4.1, PhantomJS<2
          // push.apply(_, arraylike) throws on ancient WebKit
          jQuery.merge(nodes, elem.nodeType ? [elem] : elem); // Convert non-html into a text node
        } else if (!rhtml.test(elem)) {
          nodes.push(context.createTextNode(elem)); // Convert html into DOM nodes
        } else {
          tmp = tmp || fragment.appendChild(context.createElement("div")); // Deserialize a standard representation

          tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
          wrap = wrapMap[tag] || wrapMap._default;
          tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2]; // Descend through wrappers to the right content

          j = wrap[0];

          while (j--) {
            tmp = tmp.lastChild;
          } // Support: Android<4.1, PhantomJS<2
          // push.apply(_, arraylike) throws on ancient WebKit


          jQuery.merge(nodes, tmp.childNodes); // Remember the top-level container

          tmp = fragment.firstChild; // Ensure the created nodes are orphaned (#12392)

          tmp.textContent = "";
        }
      }
    } // Remove wrapper from fragment


    fragment.textContent = "";
    i = 0;

    while (elem = nodes[i++]) {
      // Skip elements already in the context collection (trac-4087)
      if (selection && jQuery.inArray(elem, selection) > -1) {
        if (ignored) {
          ignored.push(elem);
        }

        continue;
      }

      contains = jQuery.contains(elem.ownerDocument, elem); // Append to fragment

      tmp = getAll(fragment.appendChild(elem), "script"); // Preserve script evaluation history

      if (contains) {
        setGlobalEval(tmp);
      } // Capture executables


      if (scripts) {
        j = 0;

        while (elem = tmp[j++]) {
          if (rscriptType.test(elem.type || "")) {
            scripts.push(elem);
          }
        }
      }
    }

    return fragment;
  }

  (function () {
    var fragment = document.createDocumentFragment(),
        div = fragment.appendChild(document.createElement("div")),
        input = document.createElement("input"); // Support: Android 4.0-4.3, Safari<=5.1
    // Check state lost if the name is set (#11217)
    // Support: Windows Web Apps (WWA)
    // `name` and `type` must use .setAttribute for WWA (#14901)

    input.setAttribute("type", "radio");
    input.setAttribute("checked", "checked");
    input.setAttribute("name", "t");
    div.appendChild(input); // Support: Safari<=5.1, Android<4.2
    // Older WebKit doesn't clone checked state correctly in fragments

    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked; // Support: IE<=11+
    // Make sure textarea (and checkbox) defaultValue is properly cloned

    div.innerHTML = "<textarea>x</textarea>";
    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
  })();

  var rkeyEvent = /^key/,
      rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
      rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

  function returnTrue() {
    return true;
  }

  function returnFalse() {
    return false;
  } // Support: IE9
  // See #13393 for more info


  function safeActiveElement() {
    try {
      return document.activeElement;
    } catch (err) {}
  }

  function _on(elem, types, selector, data, fn, one) {
    var origFn, type; // Types can be a map of types/handlers

    if (_typeof(types) === "object") {
      // ( types-Object, selector, data )
      if (typeof selector !== "string") {
        // ( types-Object, data )
        data = data || selector;
        selector = undefined;
      }

      for (type in types) {
        _on(elem, type, selector, data, types[type], one);
      }

      return elem;
    }

    if (data == null && fn == null) {
      // ( types, fn )
      fn = selector;
      data = selector = undefined;
    } else if (fn == null) {
      if (typeof selector === "string") {
        // ( types, selector, fn )
        fn = data;
        data = undefined;
      } else {
        // ( types, data, fn )
        fn = data;
        data = selector;
        selector = undefined;
      }
    }

    if (fn === false) {
      fn = returnFalse;
    } else if (!fn) {
      return elem;
    }

    if (one === 1) {
      origFn = fn;

      fn = function fn(event) {
        // Can use an empty set, since event contains the info
        jQuery().off(event);
        return origFn.apply(this, arguments);
      }; // Use same guid so caller can remove using origFn


      fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
    }

    return elem.each(function () {
      jQuery.event.add(this, types, fn, data, selector);
    });
  }
  /*
   * Helper functions for managing events -- not part of the public interface.
   * Props to Dean Edwards' addEvent library for many of the ideas.
   */


  jQuery.event = {
    global: {},
    add: function add(elem, types, handler, data, selector) {
      var handleObjIn,
          eventHandle,
          tmp,
          events,
          t,
          handleObj,
          special,
          handlers,
          type,
          namespaces,
          origType,
          elemData = dataPriv.get(elem); // Don't attach events to noData or text/comment nodes (but allow plain objects)

      if (!elemData) {
        return;
      } // Caller can pass in an object of custom data in lieu of the handler


      if (handler.handler) {
        handleObjIn = handler;
        handler = handleObjIn.handler;
        selector = handleObjIn.selector;
      } // Make sure that the handler has a unique ID, used to find/remove it later


      if (!handler.guid) {
        handler.guid = jQuery.guid++;
      } // Init the element's event structure and main handler, if this is the first


      if (!(events = elemData.events)) {
        events = elemData.events = {};
      }

      if (!(eventHandle = elemData.handle)) {
        eventHandle = elemData.handle = function (e) {
          // Discard the second event of a jQuery.event.trigger() and
          // when an event is called after a page has unloaded
          return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
        };
      } // Handle multiple events separated by a space


      types = (types || "").match(rnotwhite) || [""];
      t = types.length;

      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort(); // There *must* be a type, no attaching namespace-only handlers

        if (!type) {
          continue;
        } // If event changes its type, use the special event handlers for the changed type


        special = jQuery.event.special[type] || {}; // If selector defined, determine special event api type, otherwise given type

        type = (selector ? special.delegateType : special.bindType) || type; // Update special based on newly reset type

        special = jQuery.event.special[type] || {}; // handleObj is passed to all event handlers

        handleObj = jQuery.extend({
          type: type,
          origType: origType,
          data: data,
          handler: handler,
          guid: handler.guid,
          selector: selector,
          needsContext: selector && jQuery.expr.match.needsContext.test(selector),
          namespace: namespaces.join(".")
        }, handleObjIn); // Init the event handler queue if we're the first

        if (!(handlers = events[type])) {
          handlers = events[type] = [];
          handlers.delegateCount = 0; // Only use addEventListener if the special events handler returns false

          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
            if (elem.addEventListener) {
              elem.addEventListener(type, eventHandle);
            }
          }
        }

        if (special.add) {
          special.add.call(elem, handleObj);

          if (!handleObj.handler.guid) {
            handleObj.handler.guid = handler.guid;
          }
        } // Add to the element's handler list, delegates in front


        if (selector) {
          handlers.splice(handlers.delegateCount++, 0, handleObj);
        } else {
          handlers.push(handleObj);
        } // Keep track of which events have ever been used, for event optimization


        jQuery.event.global[type] = true;
      }
    },
    // Detach an event or set of events from an element
    remove: function remove(elem, types, handler, selector, mappedTypes) {
      var j,
          origCount,
          tmp,
          events,
          t,
          handleObj,
          special,
          handlers,
          type,
          namespaces,
          origType,
          elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

      if (!elemData || !(events = elemData.events)) {
        return;
      } // Once for each type.namespace in types; type may be omitted


      types = (types || "").match(rnotwhite) || [""];
      t = types.length;

      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort(); // Unbind all events (on this namespace, if provided) for the element

        if (!type) {
          for (type in events) {
            jQuery.event.remove(elem, type + types[t], handler, selector, true);
          }

          continue;
        }

        special = jQuery.event.special[type] || {};
        type = (selector ? special.delegateType : special.bindType) || type;
        handlers = events[type] || [];
        tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)"); // Remove matching events

        origCount = j = handlers.length;

        while (j--) {
          handleObj = handlers[j];

          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
            handlers.splice(j, 1);

            if (handleObj.selector) {
              handlers.delegateCount--;
            }

            if (special.remove) {
              special.remove.call(elem, handleObj);
            }
          }
        } // Remove generic event handler if we removed something and no more handlers exist
        // (avoids potential for endless recursion during removal of special event handlers)


        if (origCount && !handlers.length) {
          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
            jQuery.removeEvent(elem, type, elemData.handle);
          }

          delete events[type];
        }
      } // Remove data and the expando if it's no longer used


      if (jQuery.isEmptyObject(events)) {
        dataPriv.remove(elem, "handle events");
      }
    },
    dispatch: function dispatch(event) {
      // Make a writable jQuery.Event from the native event object
      event = jQuery.event.fix(event);

      var i,
          j,
          ret,
          matched,
          handleObj,
          handlerQueue = [],
          args = _slice.call(arguments),
          handlers = (dataPriv.get(this, "events") || {})[event.type] || [],
          special = jQuery.event.special[event.type] || {}; // Use the fix-ed jQuery.Event rather than the (read-only) native event


      args[0] = event;
      event.delegateTarget = this; // Call the preDispatch hook for the mapped type, and let it bail if desired

      if (special.preDispatch && special.preDispatch.call(this, event) === false) {
        return;
      } // Determine handlers


      handlerQueue = jQuery.event.handlers.call(this, event, handlers); // Run delegates first; they may want to stop propagation beneath us

      i = 0;

      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
        event.currentTarget = matched.elem;
        j = 0;

        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
          // Triggered event must either 1) have no namespace, or 2) have namespace(s)
          // a subset or equal to those in the bound event (both can have no namespace).
          if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {
            event.handleObj = handleObj;
            event.data = handleObj.data;
            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

            if (ret !== undefined) {
              if ((event.result = ret) === false) {
                event.preventDefault();
                event.stopPropagation();
              }
            }
          }
        }
      } // Call the postDispatch hook for the mapped type


      if (special.postDispatch) {
        special.postDispatch.call(this, event);
      }

      return event.result;
    },
    handlers: function handlers(event, _handlers) {
      var i,
          matches,
          sel,
          handleObj,
          handlerQueue = [],
          delegateCount = _handlers.delegateCount,
          cur = event.target; // Support (at least): Chrome, IE9
      // Find delegate handlers
      // Black-hole SVG <use> instance trees (#13180)
      //
      // Support: Firefox<=42+
      // Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)

      if (delegateCount && cur.nodeType && (event.type !== "click" || isNaN(event.button) || event.button < 1)) {
        for (; cur !== this; cur = cur.parentNode || this) {
          // Don't check non-elements (#13208)
          // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
          if (cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click")) {
            matches = [];

            for (i = 0; i < delegateCount; i++) {
              handleObj = _handlers[i]; // Don't conflict with Object.prototype properties (#13203)

              sel = handleObj.selector + " ";

              if (matches[sel] === undefined) {
                matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
              }

              if (matches[sel]) {
                matches.push(handleObj);
              }
            }

            if (matches.length) {
              handlerQueue.push({
                elem: cur,
                handlers: matches
              });
            }
          }
        }
      } // Add the remaining (directly-bound) handlers


      if (delegateCount < _handlers.length) {
        handlerQueue.push({
          elem: this,
          handlers: _handlers.slice(delegateCount)
        });
      }

      return handlerQueue;
    },
    // Includes some event props shared by KeyEvent and MouseEvent
    props: ("altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " + "metaKey relatedTarget shiftKey target timeStamp view which").split(" "),
    fixHooks: {},
    keyHooks: {
      props: "char charCode key keyCode".split(" "),
      filter: function filter(event, original) {
        // Add which for key events
        if (event.which == null) {
          event.which = original.charCode != null ? original.charCode : original.keyCode;
        }

        return event;
      }
    },
    mouseHooks: {
      props: ("button buttons clientX clientY offsetX offsetY pageX pageY " + "screenX screenY toElement").split(" "),
      filter: function filter(event, original) {
        var eventDoc,
            doc,
            body,
            button = original.button; // Calculate pageX/Y if missing and clientX/Y available

        if (event.pageX == null && original.clientX != null) {
          eventDoc = event.target.ownerDocument || document;
          doc = eventDoc.documentElement;
          body = eventDoc.body;
          event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
          event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
        } // Add which for click: 1 === left; 2 === middle; 3 === right
        // Note: button is not normalized, so don't use it


        if (!event.which && button !== undefined) {
          event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
        }

        return event;
      }
    },
    fix: function fix(event) {
      if (event[jQuery.expando]) {
        return event;
      } // Create a writable copy of the event object and normalize some properties


      var i,
          prop,
          copy,
          type = event.type,
          originalEvent = event,
          fixHook = this.fixHooks[type];

      if (!fixHook) {
        this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
      }

      copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
      event = new jQuery.Event(originalEvent);
      i = copy.length;

      while (i--) {
        prop = copy[i];
        event[prop] = originalEvent[prop];
      } // Support: Cordova 2.5 (WebKit) (#13255)
      // All events should have a target; Cordova deviceready doesn't


      if (!event.target) {
        event.target = document;
      } // Support: Safari 6.0+, Chrome<28
      // Target should not be a text node (#504, #13143)


      if (event.target.nodeType === 3) {
        event.target = event.target.parentNode;
      }

      return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
    },
    special: {
      load: {
        // Prevent triggered image.load events from bubbling to window.load
        noBubble: true
      },
      focus: {
        // Fire native event if possible so blur/focus sequence is correct
        trigger: function trigger() {
          if (this !== safeActiveElement() && this.focus) {
            this.focus();
            return false;
          }
        },
        delegateType: "focusin"
      },
      blur: {
        trigger: function trigger() {
          if (this === safeActiveElement() && this.blur) {
            this.blur();
            return false;
          }
        },
        delegateType: "focusout"
      },
      click: {
        // For checkbox, fire native event so checked state will be right
        trigger: function trigger() {
          if (this.type === "checkbox" && this.click && jQuery.nodeName(this, "input")) {
            this.click();
            return false;
          }
        },
        // For cross-browser consistency, don't fire native .click() on links
        _default: function _default(event) {
          return jQuery.nodeName(event.target, "a");
        }
      },
      beforeunload: {
        postDispatch: function postDispatch(event) {
          // Support: Firefox 20+
          // Firefox doesn't alert if the returnValue field is not set.
          if (event.result !== undefined && event.originalEvent) {
            event.originalEvent.returnValue = event.result;
          }
        }
      }
    }
  };

  jQuery.removeEvent = function (elem, type, handle) {
    // This "if" is needed for plain objects
    if (elem.removeEventListener) {
      elem.removeEventListener(type, handle);
    }
  };

  jQuery.Event = function (src, props) {
    // Allow instantiation without the 'new' keyword
    if (!(this instanceof jQuery.Event)) {
      return new jQuery.Event(src, props);
    } // Event object


    if (src && src.type) {
      this.originalEvent = src;
      this.type = src.type; // Events bubbling up the document may have been marked as prevented
      // by a handler lower down the tree; reflect the correct value.

      this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: Android<4.0
      src.returnValue === false ? returnTrue : returnFalse; // Event type
    } else {
      this.type = src;
    } // Put explicitly provided properties onto the event object


    if (props) {
      jQuery.extend(this, props);
    } // Create a timestamp if incoming event doesn't have one


    this.timeStamp = src && src.timeStamp || jQuery.now(); // Mark it as fixed

    this[jQuery.expando] = true;
  }; // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
  // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html


  jQuery.Event.prototype = {
    constructor: jQuery.Event,
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse,
    isSimulated: false,
    preventDefault: function preventDefault() {
      var e = this.originalEvent;
      this.isDefaultPrevented = returnTrue;

      if (e && !this.isSimulated) {
        e.preventDefault();
      }
    },
    stopPropagation: function stopPropagation() {
      var e = this.originalEvent;
      this.isPropagationStopped = returnTrue;

      if (e && !this.isSimulated) {
        e.stopPropagation();
      }
    },
    stopImmediatePropagation: function stopImmediatePropagation() {
      var e = this.originalEvent;
      this.isImmediatePropagationStopped = returnTrue;

      if (e && !this.isSimulated) {
        e.stopImmediatePropagation();
      }

      this.stopPropagation();
    }
  }; // Create mouseenter/leave events using mouseover/out and event-time checks
  // so that event delegation works in jQuery.
  // Do the same for pointerenter/pointerleave and pointerover/pointerout
  //
  // Support: Safari 7 only
  // Safari sends mouseenter too often; see:
  // https://code.google.com/p/chromium/issues/detail?id=470258
  // for the description of the bug (it existed in older Chrome versions as well).

  jQuery.each({
    mouseenter: "mouseover",
    mouseleave: "mouseout",
    pointerenter: "pointerover",
    pointerleave: "pointerout"
  }, function (orig, fix) {
    jQuery.event.special[orig] = {
      delegateType: fix,
      bindType: fix,
      handle: function handle(event) {
        var ret,
            target = this,
            related = event.relatedTarget,
            handleObj = event.handleObj; // For mouseenter/leave call the handler if related is outside the target.
        // NB: No relatedTarget if the mouse left/entered the browser window

        if (!related || related !== target && !jQuery.contains(target, related)) {
          event.type = handleObj.origType;
          ret = handleObj.handler.apply(this, arguments);
          event.type = fix;
        }

        return ret;
      }
    };
  });
  jQuery.fn.extend({
    on: function on(types, selector, data, fn) {
      return _on(this, types, selector, data, fn);
    },
    one: function one(types, selector, data, fn) {
      return _on(this, types, selector, data, fn, 1);
    },
    off: function off(types, selector, fn) {
      var handleObj, type;

      if (types && types.preventDefault && types.handleObj) {
        // ( event )  dispatched jQuery.Event
        handleObj = types.handleObj;
        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
        return this;
      }

      if (_typeof(types) === "object") {
        // ( types-object [, selector] )
        for (type in types) {
          this.off(type, selector, types[type]);
        }

        return this;
      }

      if (selector === false || typeof selector === "function") {
        // ( types [, fn] )
        fn = selector;
        selector = undefined;
      }

      if (fn === false) {
        fn = returnFalse;
      }

      return this.each(function () {
        jQuery.event.remove(this, types, fn, selector);
      });
    }
  });
  var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,
      // Support: IE 10-11, Edge 10240+
  // In IE/Edge using regex groups here causes severe slowdowns.
  // See https://connect.microsoft.com/IE/feedback/details/1736512/
  rnoInnerhtml = /<script|<style|<link/i,
      // checked="checked" or checked
  rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
      rscriptTypeMasked = /^true\/(.*)/,
      rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g; // Manipulating tables requires a tbody

  function manipulationTarget(elem, content) {
    return jQuery.nodeName(elem, "table") && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
  } // Replace/restore the type attribute of script elements for safe DOM manipulation


  function disableScript(elem) {
    elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
    return elem;
  }

  function restoreScript(elem) {
    var match = rscriptTypeMasked.exec(elem.type);

    if (match) {
      elem.type = match[1];
    } else {
      elem.removeAttribute("type");
    }

    return elem;
  }

  function cloneCopyEvent(src, dest) {
    var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

    if (dest.nodeType !== 1) {
      return;
    } // 1. Copy private data: events, handlers, etc.


    if (dataPriv.hasData(src)) {
      pdataOld = dataPriv.access(src);
      pdataCur = dataPriv.set(dest, pdataOld);
      events = pdataOld.events;

      if (events) {
        delete pdataCur.handle;
        pdataCur.events = {};

        for (type in events) {
          for (i = 0, l = events[type].length; i < l; i++) {
            jQuery.event.add(dest, type, events[type][i]);
          }
        }
      }
    } // 2. Copy user data


    if (dataUser.hasData(src)) {
      udataOld = dataUser.access(src);
      udataCur = jQuery.extend({}, udataOld);
      dataUser.set(dest, udataCur);
    }
  } // Fix IE bugs, see support tests


  function fixInput(src, dest) {
    var nodeName = dest.nodeName.toLowerCase(); // Fails to persist the checked state of a cloned checkbox or radio button.

    if (nodeName === "input" && rcheckableType.test(src.type)) {
      dest.checked = src.checked; // Fails to return the selected option to the default selected state when cloning options
    } else if (nodeName === "input" || nodeName === "textarea") {
      dest.defaultValue = src.defaultValue;
    }
  }

  function domManip(collection, args, callback, ignored) {
    // Flatten any nested arrays
    args = concat.apply([], args);
    var fragment,
        first,
        scripts,
        hasScripts,
        node,
        doc,
        i = 0,
        l = collection.length,
        iNoClone = l - 1,
        value = args[0],
        isFunction = jQuery.isFunction(value); // We can't cloneNode fragments that contain checked, in WebKit

    if (isFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
      return collection.each(function (index) {
        var self = collection.eq(index);

        if (isFunction) {
          args[0] = value.call(this, index, self.html());
        }

        domManip(self, args, callback, ignored);
      });
    }

    if (l) {
      fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
      first = fragment.firstChild;

      if (fragment.childNodes.length === 1) {
        fragment = first;
      } // Require either new content or an interest in ignored elements to invoke the callback


      if (first || ignored) {
        scripts = jQuery.map(getAll(fragment, "script"), disableScript);
        hasScripts = scripts.length; // Use the original fragment for the last item
        // instead of the first because it can end up
        // being emptied incorrectly in certain situations (#8070).

        for (; i < l; i++) {
          node = fragment;

          if (i !== iNoClone) {
            node = jQuery.clone(node, true, true); // Keep references to cloned scripts for later restoration

            if (hasScripts) {
              // Support: Android<4.1, PhantomJS<2
              // push.apply(_, arraylike) throws on ancient WebKit
              jQuery.merge(scripts, getAll(node, "script"));
            }
          }

          callback.call(collection[i], node, i);
        }

        if (hasScripts) {
          doc = scripts[scripts.length - 1].ownerDocument; // Reenable scripts

          jQuery.map(scripts, restoreScript); // Evaluate executable scripts on first document insertion

          for (i = 0; i < hasScripts; i++) {
            node = scripts[i];

            if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {
              if (node.src) {
                // Optional AJAX dependency, but won't run scripts if not present
                if (jQuery._evalUrl) {
                  jQuery._evalUrl(node.src);
                }
              } else {
                jQuery.globalEval(node.textContent.replace(rcleanScript, ""));
              }
            }
          }
        }
      }
    }

    return collection;
  }

  function _remove(elem, selector, keepData) {
    var node,
        nodes = selector ? jQuery.filter(selector, elem) : elem,
        i = 0;

    for (; (node = nodes[i]) != null; i++) {
      if (!keepData && node.nodeType === 1) {
        jQuery.cleanData(getAll(node));
      }

      if (node.parentNode) {
        if (keepData && jQuery.contains(node.ownerDocument, node)) {
          setGlobalEval(getAll(node, "script"));
        }

        node.parentNode.removeChild(node);
      }
    }

    return elem;
  }

  jQuery.extend({
    htmlPrefilter: function htmlPrefilter(html) {
      return html.replace(rxhtmlTag, "<$1></$2>");
    },
    clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
      var i,
          l,
          srcElements,
          destElements,
          clone = elem.cloneNode(true),
          inPage = jQuery.contains(elem.ownerDocument, elem); // Fix IE cloning issues

      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
        // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
        destElements = getAll(clone);
        srcElements = getAll(elem);

        for (i = 0, l = srcElements.length; i < l; i++) {
          fixInput(srcElements[i], destElements[i]);
        }
      } // Copy the events from the original to the clone


      if (dataAndEvents) {
        if (deepDataAndEvents) {
          srcElements = srcElements || getAll(elem);
          destElements = destElements || getAll(clone);

          for (i = 0, l = srcElements.length; i < l; i++) {
            cloneCopyEvent(srcElements[i], destElements[i]);
          }
        } else {
          cloneCopyEvent(elem, clone);
        }
      } // Preserve script evaluation history


      destElements = getAll(clone, "script");

      if (destElements.length > 0) {
        setGlobalEval(destElements, !inPage && getAll(elem, "script"));
      } // Return the cloned set


      return clone;
    },
    cleanData: function cleanData(elems) {
      var data,
          elem,
          type,
          special = jQuery.event.special,
          i = 0;

      for (; (elem = elems[i]) !== undefined; i++) {
        if (acceptData(elem)) {
          if (data = elem[dataPriv.expando]) {
            if (data.events) {
              for (type in data.events) {
                if (special[type]) {
                  jQuery.event.remove(elem, type); // This is a shortcut to avoid jQuery.event.remove's overhead
                } else {
                  jQuery.removeEvent(elem, type, data.handle);
                }
              }
            } // Support: Chrome <= 35-45+
            // Assign undefined instead of using delete, see Data#remove


            elem[dataPriv.expando] = undefined;
          }

          if (elem[dataUser.expando]) {
            // Support: Chrome <= 35-45+
            // Assign undefined instead of using delete, see Data#remove
            elem[dataUser.expando] = undefined;
          }
        }
      }
    }
  });
  jQuery.fn.extend({
    // Keep domManip exposed until 3.0 (gh-2225)
    domManip: domManip,
    detach: function detach(selector) {
      return _remove(this, selector, true);
    },
    remove: function remove(selector) {
      return _remove(this, selector);
    },
    text: function text(value) {
      return access(this, function (value) {
        return value === undefined ? jQuery.text(this) : this.empty().each(function () {
          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
            this.textContent = value;
          }
        });
      }, null, value, arguments.length);
    },
    append: function append() {
      return domManip(this, arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.appendChild(elem);
        }
      });
    },
    prepend: function prepend() {
      return domManip(this, arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.insertBefore(elem, target.firstChild);
        }
      });
    },
    before: function before() {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this);
        }
      });
    },
    after: function after() {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this.nextSibling);
        }
      });
    },
    empty: function empty() {
      var elem,
          i = 0;

      for (; (elem = this[i]) != null; i++) {
        if (elem.nodeType === 1) {
          // Prevent memory leaks
          jQuery.cleanData(getAll(elem, false)); // Remove any remaining nodes

          elem.textContent = "";
        }
      }

      return this;
    },
    clone: function clone(dataAndEvents, deepDataAndEvents) {
      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
      return this.map(function () {
        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
      });
    },
    html: function html(value) {
      return access(this, function (value) {
        var elem = this[0] || {},
            i = 0,
            l = this.length;

        if (value === undefined && elem.nodeType === 1) {
          return elem.innerHTML;
        } // See if we can take a shortcut and just use innerHTML


        if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
          value = jQuery.htmlPrefilter(value);

          try {
            for (; i < l; i++) {
              elem = this[i] || {}; // Remove element nodes and prevent memory leaks

              if (elem.nodeType === 1) {
                jQuery.cleanData(getAll(elem, false));
                elem.innerHTML = value;
              }
            }

            elem = 0; // If using innerHTML throws an exception, use the fallback method
          } catch (e) {}
        }

        if (elem) {
          this.empty().append(value);
        }
      }, null, value, arguments.length);
    },
    replaceWith: function replaceWith() {
      var ignored = []; // Make the changes, replacing each non-ignored context element with the new content

      return domManip(this, arguments, function (elem) {
        var parent = this.parentNode;

        if (jQuery.inArray(this, ignored) < 0) {
          jQuery.cleanData(getAll(this));

          if (parent) {
            parent.replaceChild(elem, this);
          }
        } // Force callback invocation

      }, ignored);
    }
  });
  jQuery.each({
    appendTo: "append",
    prependTo: "prepend",
    insertBefore: "before",
    insertAfter: "after",
    replaceAll: "replaceWith"
  }, function (name, original) {
    jQuery.fn[name] = function (selector) {
      var elems,
          ret = [],
          insert = jQuery(selector),
          last = insert.length - 1,
          i = 0;

      for (; i <= last; i++) {
        elems = i === last ? this : this.clone(true);
        jQuery(insert[i])[original](elems); // Support: QtWebKit
        // .get() because push.apply(_, arraylike) throws

        push.apply(ret, elems.get());
      }

      return this.pushStack(ret);
    };
  });
  var iframe,
      elemdisplay = {
    // Support: Firefox
    // We have to pre-define these values for FF (#10227)
    HTML: "block",
    BODY: "block"
  };
  /**
   * Retrieve the actual display of a element
   * @param {String} name nodeName of the element
   * @param {Object} doc Document object
   */
  // Called only from within defaultDisplay

  function actualDisplay(name, doc) {
    var elem = jQuery(doc.createElement(name)).appendTo(doc.body),
        display = jQuery.css(elem[0], "display"); // We don't have any data stored on the element,
    // so use "detach" method as fast way to get rid of the element

    elem.detach();
    return display;
  }
  /**
   * Try to determine the default display value of an element
   * @param {String} nodeName
   */


  function defaultDisplay(nodeName) {
    var doc = document,
        display = elemdisplay[nodeName];

    if (!display) {
      display = actualDisplay(nodeName, doc); // If the simple way fails, read from inside an iframe

      if (display === "none" || !display) {
        // Use the already-created iframe if possible
        iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement); // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse

        doc = iframe[0].contentDocument; // Support: IE

        doc.write();
        doc.close();
        display = actualDisplay(nodeName, doc);
        iframe.detach();
      } // Store the correct default display


      elemdisplay[nodeName] = display;
    }

    return display;
  }

  var rmargin = /^margin/;
  var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

  var getStyles = function getStyles(elem) {
    // Support: IE<=11+, Firefox<=30+ (#15098, #14150)
    // IE throws on elements created in popups
    // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
    var view = elem.ownerDocument.defaultView;

    if (!view || !view.opener) {
      view = window;
    }

    return view.getComputedStyle(elem);
  };

  var swap = function swap(elem, options, callback, args) {
    var ret,
        name,
        old = {}; // Remember the old values, and insert the new ones

    for (name in options) {
      old[name] = elem.style[name];
      elem.style[name] = options[name];
    }

    ret = callback.apply(elem, args || []); // Revert the old values

    for (name in options) {
      elem.style[name] = old[name];
    }

    return ret;
  };

  var documentElement = document.documentElement;

  (function () {
    var pixelPositionVal,
        boxSizingReliableVal,
        pixelMarginRightVal,
        reliableMarginLeftVal,
        container = document.createElement("div"),
        div = document.createElement("div"); // Finish early in limited (non-browser) environments

    if (!div.style) {
      return;
    } // Support: IE9-11+
    // Style of cloned element affects source element cloned (#8908)


    div.style.backgroundClip = "content-box";
    div.cloneNode(true).style.backgroundClip = "";
    support.clearCloneStyle = div.style.backgroundClip === "content-box";
    container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" + "padding:0;margin-top:1px;position:absolute";
    container.appendChild(div); // Executing both pixelPosition & boxSizingReliable tests require only one layout
    // so they're executed at the same time to save the second computation.

    function computeStyleTests() {
      div.style.cssText = // Support: Firefox<29, Android 2.3
      // Vendor-prefix box-sizing
      "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" + "position:relative;display:block;" + "margin:auto;border:1px;padding:1px;" + "top:1%;width:50%";
      div.innerHTML = "";
      documentElement.appendChild(container);
      var divStyle = window.getComputedStyle(div);
      pixelPositionVal = divStyle.top !== "1%";
      reliableMarginLeftVal = divStyle.marginLeft === "2px";
      boxSizingReliableVal = divStyle.width === "4px"; // Support: Android 4.0 - 4.3 only
      // Some styles come back with percentage values, even though they shouldn't

      div.style.marginRight = "50%";
      pixelMarginRightVal = divStyle.marginRight === "4px";
      documentElement.removeChild(container);
    }

    jQuery.extend(support, {
      pixelPosition: function pixelPosition() {
        // This test is executed only once but we still do memoizing
        // since we can use the boxSizingReliable pre-computing.
        // No need to check if the test was already performed, though.
        computeStyleTests();
        return pixelPositionVal;
      },
      boxSizingReliable: function boxSizingReliable() {
        if (boxSizingReliableVal == null) {
          computeStyleTests();
        }

        return boxSizingReliableVal;
      },
      pixelMarginRight: function pixelMarginRight() {
        // Support: Android 4.0-4.3
        // We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
        // since that compresses better and they're computed together anyway.
        if (boxSizingReliableVal == null) {
          computeStyleTests();
        }

        return pixelMarginRightVal;
      },
      reliableMarginLeft: function reliableMarginLeft() {
        // Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
        if (boxSizingReliableVal == null) {
          computeStyleTests();
        }

        return reliableMarginLeftVal;
      },
      reliableMarginRight: function reliableMarginRight() {
        // Support: Android 2.3
        // Check if div with explicit width and no margin-right incorrectly
        // gets computed margin-right based on width of container. (#3333)
        // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
        // This support function is only executed once so no memoizing is needed.
        var ret,
            marginDiv = div.appendChild(document.createElement("div")); // Reset CSS: box-sizing; display; margin; border; padding

        marginDiv.style.cssText = div.style.cssText = // Support: Android 2.3
        // Vendor-prefix box-sizing
        "-webkit-box-sizing:content-box;box-sizing:content-box;" + "display:block;margin:0;border:0;padding:0";
        marginDiv.style.marginRight = marginDiv.style.width = "0";
        div.style.width = "1px";
        documentElement.appendChild(container);
        ret = !parseFloat(window.getComputedStyle(marginDiv).marginRight);
        documentElement.removeChild(container);
        div.removeChild(marginDiv);
        return ret;
      }
    });
  })();

  function curCSS(elem, name, computed) {
    var width,
        minWidth,
        maxWidth,
        ret,
        style = elem.style;
    computed = computed || getStyles(elem);
    ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined; // Support: Opera 12.1x only
    // Fall back to style even without computed
    // computed is undefined for elems on document fragments

    if ((ret === "" || ret === undefined) && !jQuery.contains(elem.ownerDocument, elem)) {
      ret = jQuery.style(elem, name);
    } // Support: IE9
    // getPropertyValue is only needed for .css('filter') (#12537)


    if (computed) {
      // A tribute to the "awesome hack by Dean Edwards"
      // Android Browser returns percentage for some values,
      // but width seems to be reliably pixels.
      // This is against the CSSOM draft spec:
      // http://dev.w3.org/csswg/cssom/#resolved-values
      if (!support.pixelMarginRight() && rnumnonpx.test(ret) && rmargin.test(name)) {
        // Remember the original values
        width = style.width;
        minWidth = style.minWidth;
        maxWidth = style.maxWidth; // Put in the new values to get a computed value out

        style.minWidth = style.maxWidth = style.width = ret;
        ret = computed.width; // Revert the changed values

        style.width = width;
        style.minWidth = minWidth;
        style.maxWidth = maxWidth;
      }
    }

    return ret !== undefined ? // Support: IE9-11+
    // IE returns zIndex value as an integer.
    ret + "" : ret;
  }

  function addGetHookIf(conditionFn, hookFn) {
    // Define the hook, we'll check on the first run if it's really needed.
    return {
      get: function get() {
        if (conditionFn()) {
          // Hook not needed (or it's not possible to use it due
          // to missing dependency), remove it.
          delete this.get;
          return;
        } // Hook needed; redefine it so that the support test is not executed again.


        return (this.get = hookFn).apply(this, arguments);
      }
    };
  }

  var // Swappable if display is none or starts with table
  // except "table", "table-cell", or "table-caption"
  // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
  rdisplayswap = /^(none|table(?!-c[ea]).+)/,
      cssShow = {
    position: "absolute",
    visibility: "hidden",
    display: "block"
  },
      cssNormalTransform = {
    letterSpacing: "0",
    fontWeight: "400"
  },
      cssPrefixes = ["Webkit", "O", "Moz", "ms"],
      emptyStyle = document.createElement("div").style; // Return a css property mapped to a potentially vendor prefixed property

  function vendorPropName(name) {
    // Shortcut for names that are not vendor prefixed
    if (name in emptyStyle) {
      return name;
    } // Check for vendor prefixed names


    var capName = name[0].toUpperCase() + name.slice(1),
        i = cssPrefixes.length;

    while (i--) {
      name = cssPrefixes[i] + capName;

      if (name in emptyStyle) {
        return name;
      }
    }
  }

  function setPositiveNumber(elem, value, subtract) {
    // Any relative (+/-) values have already been
    // normalized at this point
    var matches = rcssNum.exec(value);
    return matches ? // Guard against undefined "subtract", e.g., when used as in cssHooks
    Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
  }

  function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
    var i = extra === (isBorderBox ? "border" : "content") ? // If we already have the right measurement, avoid augmentation
    4 : // Otherwise initialize for horizontal or vertical properties
    name === "width" ? 1 : 0,
        val = 0;

    for (; i < 4; i += 2) {
      // Both box models exclude margin, so add it if we want it
      if (extra === "margin") {
        val += jQuery.css(elem, extra + cssExpand[i], true, styles);
      }

      if (isBorderBox) {
        // border-box includes padding, so remove it if we want content
        if (extra === "content") {
          val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
        } // At this point, extra isn't border nor margin, so remove border


        if (extra !== "margin") {
          val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        }
      } else {
        // At this point, extra isn't content, so add padding
        val += jQuery.css(elem, "padding" + cssExpand[i], true, styles); // At this point, extra isn't content nor padding, so add border

        if (extra !== "padding") {
          val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        }
      }
    }

    return val;
  }

  function getWidthOrHeight(elem, name, extra) {
    // Start with offset property, which is equivalent to the border-box value
    var valueIsBorderBox = true,
        val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
        styles = getStyles(elem),
        isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box"; // Some non-html elements return undefined for offsetWidth, so check for null/undefined
    // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
    // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668

    if (val <= 0 || val == null) {
      // Fall back to computed then uncomputed css if necessary
      val = curCSS(elem, name, styles);

      if (val < 0 || val == null) {
        val = elem.style[name];
      } // Computed unit is not pixels. Stop here and return.


      if (rnumnonpx.test(val)) {
        return val;
      } // Check for style in case a browser which returns unreliable values
      // for getComputedStyle silently falls back to the reliable elem.style


      valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]); // Normalize "", auto, and prepare for extra

      val = parseFloat(val) || 0;
    } // Use the active box-sizing model to add/subtract irrelevant styles


    return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
  }

  function showHide(elements, show) {
    var display,
        elem,
        hidden,
        values = [],
        index = 0,
        length = elements.length;

    for (; index < length; index++) {
      elem = elements[index];

      if (!elem.style) {
        continue;
      }

      values[index] = dataPriv.get(elem, "olddisplay");
      display = elem.style.display;

      if (show) {
        // Reset the inline display of this element to learn if it is
        // being hidden by cascaded rules or not
        if (!values[index] && display === "none") {
          elem.style.display = "";
        } // Set elements which have been overridden with display: none
        // in a stylesheet to whatever the default browser style is
        // for such an element


        if (elem.style.display === "" && isHidden(elem)) {
          values[index] = dataPriv.access(elem, "olddisplay", defaultDisplay(elem.nodeName));
        }
      } else {
        hidden = isHidden(elem);

        if (display !== "none" || !hidden) {
          dataPriv.set(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
        }
      }
    } // Set the display of most of the elements in a second loop
    // to avoid the constant reflow


    for (index = 0; index < length; index++) {
      elem = elements[index];

      if (!elem.style) {
        continue;
      }

      if (!show || elem.style.display === "none" || elem.style.display === "") {
        elem.style.display = show ? values[index] || "" : "none";
      }
    }

    return elements;
  }

  jQuery.extend({
    // Add in style property hooks for overriding the default
    // behavior of getting and setting a style property
    cssHooks: {
      opacity: {
        get: function get(elem, computed) {
          if (computed) {
            // We should always get a number back from opacity
            var ret = curCSS(elem, "opacity");
            return ret === "" ? "1" : ret;
          }
        }
      }
    },
    // Don't automatically add "px" to these possibly-unitless properties
    cssNumber: {
      "animationIterationCount": true,
      "columnCount": true,
      "fillOpacity": true,
      "flexGrow": true,
      "flexShrink": true,
      "fontWeight": true,
      "lineHeight": true,
      "opacity": true,
      "order": true,
      "orphans": true,
      "widows": true,
      "zIndex": true,
      "zoom": true
    },
    // Add in properties whose names you wish to fix before
    // setting or getting the value
    cssProps: {
      "float": "cssFloat"
    },
    // Get and set the style property on a DOM Node
    style: function style(elem, name, value, extra) {
      // Don't set styles on text and comment nodes
      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
        return;
      } // Make sure that we're working with the right name


      var ret,
          type,
          hooks,
          origName = jQuery.camelCase(name),
          style = elem.style;
      name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(origName) || origName); // Gets hook for the prefixed version, then unprefixed version

      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // Check if we're setting a value

      if (value !== undefined) {
        type = _typeof(value); // Convert "+=" or "-=" to relative numbers (#7345)

        if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
          value = adjustCSS(elem, name, ret); // Fixes bug #9237

          type = "number";
        } // Make sure that null and NaN values aren't set (#7116)


        if (value == null || value !== value) {
          return;
        } // If a number was passed in, add the unit (except for certain CSS properties)


        if (type === "number") {
          value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
        } // Support: IE9-11+
        // background-* props affect original clone's values


        if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
          style[name] = "inherit";
        } // If a hook was provided, use that value, otherwise just set the specified value


        if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
          style[name] = value;
        }
      } else {
        // If a hook was provided get the non-computed value from there
        if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
          return ret;
        } // Otherwise just get the value from the style object


        return style[name];
      }
    },
    css: function css(elem, name, extra, styles) {
      var val,
          num,
          hooks,
          origName = jQuery.camelCase(name); // Make sure that we're working with the right name

      name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(origName) || origName); // Try prefixed name followed by the unprefixed name

      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // If a hook was provided get the computed value from there

      if (hooks && "get" in hooks) {
        val = hooks.get(elem, true, extra);
      } // Otherwise, if a way to get the computed value exists, use that


      if (val === undefined) {
        val = curCSS(elem, name, styles);
      } // Convert "normal" to computed value


      if (val === "normal" && name in cssNormalTransform) {
        val = cssNormalTransform[name];
      } // Make numeric if forced or a qualifier was provided and val looks numeric


      if (extra === "" || extra) {
        num = parseFloat(val);
        return extra === true || isFinite(num) ? num || 0 : val;
      }

      return val;
    }
  });
  jQuery.each(["height", "width"], function (i, name) {
    jQuery.cssHooks[name] = {
      get: function get(elem, computed, extra) {
        if (computed) {
          // Certain elements can have dimension info if we invisibly show them
          // but it must have a current display style that would benefit
          return rdisplayswap.test(jQuery.css(elem, "display")) && elem.offsetWidth === 0 ? swap(elem, cssShow, function () {
            return getWidthOrHeight(elem, name, extra);
          }) : getWidthOrHeight(elem, name, extra);
        }
      },
      set: function set(elem, value, extra) {
        var matches,
            styles = extra && getStyles(elem),
            subtract = extra && augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles); // Convert to pixels if value adjustment is needed

        if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
          elem.style[name] = value;
          value = jQuery.css(elem, name);
        }

        return setPositiveNumber(elem, value, subtract);
      }
    };
  });
  jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
    if (computed) {
      return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {
        marginLeft: 0
      }, function () {
        return elem.getBoundingClientRect().left;
      })) + "px";
    }
  }); // Support: Android 2.3

  jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function (elem, computed) {
    if (computed) {
      return swap(elem, {
        "display": "inline-block"
      }, curCSS, [elem, "marginRight"]);
    }
  }); // These hooks are used by animate to expand properties

  jQuery.each({
    margin: "",
    padding: "",
    border: "Width"
  }, function (prefix, suffix) {
    jQuery.cssHooks[prefix + suffix] = {
      expand: function expand(value) {
        var i = 0,
            expanded = {},
            // Assumes a single number if not a string
        parts = typeof value === "string" ? value.split(" ") : [value];

        for (; i < 4; i++) {
          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
        }

        return expanded;
      }
    };

    if (!rmargin.test(prefix)) {
      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
    }
  });
  jQuery.fn.extend({
    css: function css(name, value) {
      return access(this, function (elem, name, value) {
        var styles,
            len,
            map = {},
            i = 0;

        if (jQuery.isArray(name)) {
          styles = getStyles(elem);
          len = name.length;

          for (; i < len; i++) {
            map[name[i]] = jQuery.css(elem, name[i], false, styles);
          }

          return map;
        }

        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
      }, name, value, arguments.length > 1);
    },
    show: function show() {
      return showHide(this, true);
    },
    hide: function hide() {
      return showHide(this);
    },
    toggle: function toggle(state) {
      if (typeof state === "boolean") {
        return state ? this.show() : this.hide();
      }

      return this.each(function () {
        if (isHidden(this)) {
          jQuery(this).show();
        } else {
          jQuery(this).hide();
        }
      });
    }
  });

  function Tween(elem, options, prop, end, easing) {
    return new Tween.prototype.init(elem, options, prop, end, easing);
  }

  jQuery.Tween = Tween;
  Tween.prototype = {
    constructor: Tween,
    init: function init(elem, options, prop, end, easing, unit) {
      this.elem = elem;
      this.prop = prop;
      this.easing = easing || jQuery.easing._default;
      this.options = options;
      this.start = this.now = this.cur();
      this.end = end;
      this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
    },
    cur: function cur() {
      var hooks = Tween.propHooks[this.prop];
      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
    },
    run: function run(percent) {
      var eased,
          hooks = Tween.propHooks[this.prop];

      if (this.options.duration) {
        this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
      } else {
        this.pos = eased = percent;
      }

      this.now = (this.end - this.start) * eased + this.start;

      if (this.options.step) {
        this.options.step.call(this.elem, this.now, this);
      }

      if (hooks && hooks.set) {
        hooks.set(this);
      } else {
        Tween.propHooks._default.set(this);
      }

      return this;
    }
  };
  Tween.prototype.init.prototype = Tween.prototype;
  Tween.propHooks = {
    _default: {
      get: function get(tween) {
        var result; // Use a property on the element directly when it is not a DOM element,
        // or when there is no matching style property that exists.

        if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
          return tween.elem[tween.prop];
        } // Passing an empty string as a 3rd parameter to .css will automatically
        // attempt a parseFloat and fallback to a string if the parse fails.
        // Simple values such as "10px" are parsed to Float;
        // complex values such as "rotate(1rad)" are returned as-is.


        result = jQuery.css(tween.elem, tween.prop, ""); // Empty strings, null, undefined and "auto" are converted to 0.

        return !result || result === "auto" ? 0 : result;
      },
      set: function set(tween) {
        // Use step hook for back compat.
        // Use cssHook if its there.
        // Use .style if available and use plain properties where available.
        if (jQuery.fx.step[tween.prop]) {
          jQuery.fx.step[tween.prop](tween);
        } else if (tween.elem.nodeType === 1 && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
        } else {
          tween.elem[tween.prop] = tween.now;
        }
      }
    }
  }; // Support: IE9
  // Panic based approach to setting things on disconnected nodes

  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
    set: function set(tween) {
      if (tween.elem.nodeType && tween.elem.parentNode) {
        tween.elem[tween.prop] = tween.now;
      }
    }
  };
  jQuery.easing = {
    linear: function linear(p) {
      return p;
    },
    swing: function swing(p) {
      return 0.5 - Math.cos(p * Math.PI) / 2;
    },
    _default: "swing"
  };
  jQuery.fx = Tween.prototype.init; // Back Compat <1.8 extension point

  jQuery.fx.step = {};
  var fxNow,
      timerId,
      rfxtypes = /^(?:toggle|show|hide)$/,
      rrun = /queueHooks$/; // Animations created synchronously will run synchronously

  function createFxNow() {
    window.setTimeout(function () {
      fxNow = undefined;
    });
    return fxNow = jQuery.now();
  } // Generate parameters to create a standard animation


  function genFx(type, includeWidth) {
    var which,
        i = 0,
        attrs = {
      height: type
    }; // If we include width, step value is 1 to do all cssExpand values,
    // otherwise step value is 2 to skip over Left and Right

    includeWidth = includeWidth ? 1 : 0;

    for (; i < 4; i += 2 - includeWidth) {
      which = cssExpand[i];
      attrs["margin" + which] = attrs["padding" + which] = type;
    }

    if (includeWidth) {
      attrs.opacity = attrs.width = type;
    }

    return attrs;
  }

  function createTween(value, prop, animation) {
    var tween,
        collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
        index = 0,
        length = collection.length;

    for (; index < length; index++) {
      if (tween = collection[index].call(animation, prop, value)) {
        // We're done with this property
        return tween;
      }
    }
  }

  function defaultPrefilter(elem, props, opts) {
    /* jshint validthis: true */
    var prop,
        value,
        toggle,
        tween,
        hooks,
        oldfire,
        display,
        checkDisplay,
        anim = this,
        orig = {},
        style = elem.style,
        hidden = elem.nodeType && isHidden(elem),
        dataShow = dataPriv.get(elem, "fxshow"); // Handle queue: false promises

    if (!opts.queue) {
      hooks = jQuery._queueHooks(elem, "fx");

      if (hooks.unqueued == null) {
        hooks.unqueued = 0;
        oldfire = hooks.empty.fire;

        hooks.empty.fire = function () {
          if (!hooks.unqueued) {
            oldfire();
          }
        };
      }

      hooks.unqueued++;
      anim.always(function () {
        // Ensure the complete handler is called before this completes
        anim.always(function () {
          hooks.unqueued--;

          if (!jQuery.queue(elem, "fx").length) {
            hooks.empty.fire();
          }
        });
      });
    } // Height/width overflow pass


    if (elem.nodeType === 1 && ("height" in props || "width" in props)) {
      // Make sure that nothing sneaks out
      // Record all 3 overflow attributes because IE9-10 do not
      // change the overflow attribute when overflowX and
      // overflowY are set to the same value
      opts.overflow = [style.overflow, style.overflowX, style.overflowY]; // Set display property to inline-block for height/width
      // animations on inline elements that are having width/height animated

      display = jQuery.css(elem, "display"); // Test default display if display is currently "none"

      checkDisplay = display === "none" ? dataPriv.get(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;

      if (checkDisplay === "inline" && jQuery.css(elem, "float") === "none") {
        style.display = "inline-block";
      }
    }

    if (opts.overflow) {
      style.overflow = "hidden";
      anim.always(function () {
        style.overflow = opts.overflow[0];
        style.overflowX = opts.overflow[1];
        style.overflowY = opts.overflow[2];
      });
    } // show/hide pass


    for (prop in props) {
      value = props[prop];

      if (rfxtypes.exec(value)) {
        delete props[prop];
        toggle = toggle || value === "toggle";

        if (value === (hidden ? "hide" : "show")) {
          // If there is dataShow left over from a stopped hide or show
          // and we are going to proceed with show, we should pretend to be hidden
          if (value === "show" && dataShow && dataShow[prop] !== undefined) {
            hidden = true;
          } else {
            continue;
          }
        }

        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop); // Any non-fx value stops us from restoring the original display value
      } else {
        display = undefined;
      }
    }

    if (!jQuery.isEmptyObject(orig)) {
      if (dataShow) {
        if ("hidden" in dataShow) {
          hidden = dataShow.hidden;
        }
      } else {
        dataShow = dataPriv.access(elem, "fxshow", {});
      } // Store state if its toggle - enables .stop().toggle() to "reverse"


      if (toggle) {
        dataShow.hidden = !hidden;
      }

      if (hidden) {
        jQuery(elem).show();
      } else {
        anim.done(function () {
          jQuery(elem).hide();
        });
      }

      anim.done(function () {
        var prop;
        dataPriv.remove(elem, "fxshow");

        for (prop in orig) {
          jQuery.style(elem, prop, orig[prop]);
        }
      });

      for (prop in orig) {
        tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);

        if (!(prop in dataShow)) {
          dataShow[prop] = tween.start;

          if (hidden) {
            tween.end = tween.start;
            tween.start = prop === "width" || prop === "height" ? 1 : 0;
          }
        }
      } // If this is a noop like .hide().hide(), restore an overwritten display value

    } else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") {
      style.display = display;
    }
  }

  function propFilter(props, specialEasing) {
    var index, name, easing, value, hooks; // camelCase, specialEasing and expand cssHook pass

    for (index in props) {
      name = jQuery.camelCase(index);
      easing = specialEasing[name];
      value = props[index];

      if (jQuery.isArray(value)) {
        easing = value[1];
        value = props[index] = value[0];
      }

      if (index !== name) {
        props[name] = value;
        delete props[index];
      }

      hooks = jQuery.cssHooks[name];

      if (hooks && "expand" in hooks) {
        value = hooks.expand(value);
        delete props[name]; // Not quite $.extend, this won't overwrite existing keys.
        // Reusing 'index' because we have the correct "name"

        for (index in value) {
          if (!(index in props)) {
            props[index] = value[index];
            specialEasing[index] = easing;
          }
        }
      } else {
        specialEasing[name] = easing;
      }
    }
  }

  function Animation(elem, properties, options) {
    var result,
        stopped,
        index = 0,
        length = Animation.prefilters.length,
        deferred = jQuery.Deferred().always(function () {
      // Don't match elem in the :animated selector
      delete tick.elem;
    }),
        tick = function tick() {
      if (stopped) {
        return false;
      }

      var currentTime = fxNow || createFxNow(),
          remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
          // Support: Android 2.3
      // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
      temp = remaining / animation.duration || 0,
          percent = 1 - temp,
          index = 0,
          length = animation.tweens.length;

      for (; index < length; index++) {
        animation.tweens[index].run(percent);
      }

      deferred.notifyWith(elem, [animation, percent, remaining]);

      if (percent < 1 && length) {
        return remaining;
      } else {
        deferred.resolveWith(elem, [animation]);
        return false;
      }
    },
        animation = deferred.promise({
      elem: elem,
      props: jQuery.extend({}, properties),
      opts: jQuery.extend(true, {
        specialEasing: {},
        easing: jQuery.easing._default
      }, options),
      originalProperties: properties,
      originalOptions: options,
      startTime: fxNow || createFxNow(),
      duration: options.duration,
      tweens: [],
      createTween: function createTween(prop, end) {
        var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
        animation.tweens.push(tween);
        return tween;
      },
      stop: function stop(gotoEnd) {
        var index = 0,
            // If we are going to the end, we want to run all the tweens
        // otherwise we skip this part
        length = gotoEnd ? animation.tweens.length : 0;

        if (stopped) {
          return this;
        }

        stopped = true;

        for (; index < length; index++) {
          animation.tweens[index].run(1);
        } // Resolve when we played the last frame; otherwise, reject


        if (gotoEnd) {
          deferred.notifyWith(elem, [animation, 1, 0]);
          deferred.resolveWith(elem, [animation, gotoEnd]);
        } else {
          deferred.rejectWith(elem, [animation, gotoEnd]);
        }

        return this;
      }
    }),
        props = animation.props;

    propFilter(props, animation.opts.specialEasing);

    for (; index < length; index++) {
      result = Animation.prefilters[index].call(animation, elem, props, animation.opts);

      if (result) {
        if (jQuery.isFunction(result.stop)) {
          jQuery._queueHooks(animation.elem, animation.opts.queue).stop = jQuery.proxy(result.stop, result);
        }

        return result;
      }
    }

    jQuery.map(props, createTween, animation);

    if (jQuery.isFunction(animation.opts.start)) {
      animation.opts.start.call(elem, animation);
    }

    jQuery.fx.timer(jQuery.extend(tick, {
      elem: elem,
      anim: animation,
      queue: animation.opts.queue
    })); // attach callbacks from options

    return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
  }

  jQuery.Animation = jQuery.extend(Animation, {
    tweeners: {
      "*": [function (prop, value) {
        var tween = this.createTween(prop, value);
        adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
        return tween;
      }]
    },
    tweener: function tweener(props, callback) {
      if (jQuery.isFunction(props)) {
        callback = props;
        props = ["*"];
      } else {
        props = props.match(rnotwhite);
      }

      var prop,
          index = 0,
          length = props.length;

      for (; index < length; index++) {
        prop = props[index];
        Animation.tweeners[prop] = Animation.tweeners[prop] || [];
        Animation.tweeners[prop].unshift(callback);
      }
    },
    prefilters: [defaultPrefilter],
    prefilter: function prefilter(callback, prepend) {
      if (prepend) {
        Animation.prefilters.unshift(callback);
      } else {
        Animation.prefilters.push(callback);
      }
    }
  });

  jQuery.speed = function (speed, easing, fn) {
    var opt = speed && _typeof(speed) === "object" ? jQuery.extend({}, speed) : {
      complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
      duration: speed,
      easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
    };
    opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default; // Normalize opt.queue - true/undefined/null -> "fx"

    if (opt.queue == null || opt.queue === true) {
      opt.queue = "fx";
    } // Queueing


    opt.old = opt.complete;

    opt.complete = function () {
      if (jQuery.isFunction(opt.old)) {
        opt.old.call(this);
      }

      if (opt.queue) {
        jQuery.dequeue(this, opt.queue);
      }
    };

    return opt;
  };

  jQuery.fn.extend({
    fadeTo: function fadeTo(speed, to, easing, callback) {
      // Show any hidden elements after setting opacity to 0
      return this.filter(isHidden).css("opacity", 0).show() // Animate to the value specified
      .end().animate({
        opacity: to
      }, speed, easing, callback);
    },
    animate: function animate(prop, speed, easing, callback) {
      var empty = jQuery.isEmptyObject(prop),
          optall = jQuery.speed(speed, easing, callback),
          doAnimation = function doAnimation() {
        // Operate on a copy of prop so per-property easing won't be lost
        var anim = Animation(this, jQuery.extend({}, prop), optall); // Empty animations, or finishing resolves immediately

        if (empty || dataPriv.get(this, "finish")) {
          anim.stop(true);
        }
      };

      doAnimation.finish = doAnimation;
      return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
    },
    stop: function stop(type, clearQueue, gotoEnd) {
      var stopQueue = function stopQueue(hooks) {
        var stop = hooks.stop;
        delete hooks.stop;
        stop(gotoEnd);
      };

      if (typeof type !== "string") {
        gotoEnd = clearQueue;
        clearQueue = type;
        type = undefined;
      }

      if (clearQueue && type !== false) {
        this.queue(type || "fx", []);
      }

      return this.each(function () {
        var dequeue = true,
            index = type != null && type + "queueHooks",
            timers = jQuery.timers,
            data = dataPriv.get(this);

        if (index) {
          if (data[index] && data[index].stop) {
            stopQueue(data[index]);
          }
        } else {
          for (index in data) {
            if (data[index] && data[index].stop && rrun.test(index)) {
              stopQueue(data[index]);
            }
          }
        }

        for (index = timers.length; index--;) {
          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
            timers[index].anim.stop(gotoEnd);
            dequeue = false;
            timers.splice(index, 1);
          }
        } // Start the next in the queue if the last step wasn't forced.
        // Timers currently will call their complete callbacks, which
        // will dequeue but only if they were gotoEnd.


        if (dequeue || !gotoEnd) {
          jQuery.dequeue(this, type);
        }
      });
    },
    finish: function finish(type) {
      if (type !== false) {
        type = type || "fx";
      }

      return this.each(function () {
        var index,
            data = dataPriv.get(this),
            queue = data[type + "queue"],
            hooks = data[type + "queueHooks"],
            timers = jQuery.timers,
            length = queue ? queue.length : 0; // Enable finishing flag on private data

        data.finish = true; // Empty the queue first

        jQuery.queue(this, type, []);

        if (hooks && hooks.stop) {
          hooks.stop.call(this, true);
        } // Look for any active animations, and finish them


        for (index = timers.length; index--;) {
          if (timers[index].elem === this && timers[index].queue === type) {
            timers[index].anim.stop(true);
            timers.splice(index, 1);
          }
        } // Look for any animations in the old queue and finish them


        for (index = 0; index < length; index++) {
          if (queue[index] && queue[index].finish) {
            queue[index].finish.call(this);
          }
        } // Turn off finishing flag


        delete data.finish;
      });
    }
  });
  jQuery.each(["toggle", "show", "hide"], function (i, name) {
    var cssFn = jQuery.fn[name];

    jQuery.fn[name] = function (speed, easing, callback) {
      return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
    };
  }); // Generate shortcuts for custom animations

  jQuery.each({
    slideDown: genFx("show"),
    slideUp: genFx("hide"),
    slideToggle: genFx("toggle"),
    fadeIn: {
      opacity: "show"
    },
    fadeOut: {
      opacity: "hide"
    },
    fadeToggle: {
      opacity: "toggle"
    }
  }, function (name, props) {
    jQuery.fn[name] = function (speed, easing, callback) {
      return this.animate(props, speed, easing, callback);
    };
  });
  jQuery.timers = [];

  jQuery.fx.tick = function () {
    var timer,
        i = 0,
        timers = jQuery.timers;
    fxNow = jQuery.now();

    for (; i < timers.length; i++) {
      timer = timers[i]; // Checks the timer has not already been removed

      if (!timer() && timers[i] === timer) {
        timers.splice(i--, 1);
      }
    }

    if (!timers.length) {
      jQuery.fx.stop();
    }

    fxNow = undefined;
  };

  jQuery.fx.timer = function (timer) {
    jQuery.timers.push(timer);

    if (timer()) {
      jQuery.fx.start();
    } else {
      jQuery.timers.pop();
    }
  };

  jQuery.fx.interval = 13;

  jQuery.fx.start = function () {
    if (!timerId) {
      timerId = window.setInterval(jQuery.fx.tick, jQuery.fx.interval);
    }
  };

  jQuery.fx.stop = function () {
    window.clearInterval(timerId);
    timerId = null;
  };

  jQuery.fx.speeds = {
    slow: 600,
    fast: 200,
    // Default speed
    _default: 400
  }; // Based off of the plugin by Clint Helfers, with permission.
  // http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/

  jQuery.fn.delay = function (time, type) {
    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
    type = type || "fx";
    return this.queue(type, function (next, hooks) {
      var timeout = window.setTimeout(next, time);

      hooks.stop = function () {
        window.clearTimeout(timeout);
      };
    });
  };

  (function () {
    var input = document.createElement("input"),
        select = document.createElement("select"),
        opt = select.appendChild(document.createElement("option"));
    input.type = "checkbox"; // Support: iOS<=5.1, Android<=4.2+
    // Default value for a checkbox should be "on"

    support.checkOn = input.value !== ""; // Support: IE<=11+
    // Must access selectedIndex to make default options select

    support.optSelected = opt.selected; // Support: Android<=2.3
    // Options inside disabled selects are incorrectly marked as disabled

    select.disabled = true;
    support.optDisabled = !opt.disabled; // Support: IE<=11+
    // An input loses its value after becoming a radio

    input = document.createElement("input");
    input.value = "t";
    input.type = "radio";
    support.radioValue = input.value === "t";
  })();

  var boolHook,
      attrHandle = jQuery.expr.attrHandle;
  jQuery.fn.extend({
    attr: function attr(name, value) {
      return access(this, jQuery.attr, name, value, arguments.length > 1);
    },
    removeAttr: function removeAttr(name) {
      return this.each(function () {
        jQuery.removeAttr(this, name);
      });
    }
  });
  jQuery.extend({
    attr: function attr(elem, name, value) {
      var ret,
          hooks,
          nType = elem.nodeType; // Don't get/set attributes on text, comment and attribute nodes

      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      } // Fallback to prop when attributes are not supported


      if (typeof elem.getAttribute === "undefined") {
        return jQuery.prop(elem, name, value);
      } // All attributes are lowercase
      // Grab necessary hook if one is defined


      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        name = name.toLowerCase();
        hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
      }

      if (value !== undefined) {
        if (value === null) {
          jQuery.removeAttr(elem, name);
          return;
        }

        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        }

        elem.setAttribute(name, value + "");
        return value;
      }

      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }

      ret = jQuery.find.attr(elem, name); // Non-existent attributes return null, we normalize to undefined

      return ret == null ? undefined : ret;
    },
    attrHooks: {
      type: {
        set: function set(elem, value) {
          if (!support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
            var val = elem.value;
            elem.setAttribute("type", value);

            if (val) {
              elem.value = val;
            }

            return value;
          }
        }
      }
    },
    removeAttr: function removeAttr(elem, value) {
      var name,
          propName,
          i = 0,
          attrNames = value && value.match(rnotwhite);

      if (attrNames && elem.nodeType === 1) {
        while (name = attrNames[i++]) {
          propName = jQuery.propFix[name] || name; // Boolean attributes get special treatment (#10870)

          if (jQuery.expr.match.bool.test(name)) {
            // Set corresponding property to false
            elem[propName] = false;
          }

          elem.removeAttribute(name);
        }
      }
    }
  }); // Hooks for boolean attributes

  boolHook = {
    set: function set(elem, value, name) {
      if (value === false) {
        // Remove boolean attributes when set to false
        jQuery.removeAttr(elem, name);
      } else {
        elem.setAttribute(name, name);
      }

      return name;
    }
  };
  jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
    var getter = attrHandle[name] || jQuery.find.attr;

    attrHandle[name] = function (elem, name, isXML) {
      var ret, handle;

      if (!isXML) {
        // Avoid an infinite loop by temporarily removing this function from the getter
        handle = attrHandle[name];
        attrHandle[name] = ret;
        ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
        attrHandle[name] = handle;
      }

      return ret;
    };
  });
  var rfocusable = /^(?:input|select|textarea|button)$/i,
      rclickable = /^(?:a|area)$/i;
  jQuery.fn.extend({
    prop: function prop(name, value) {
      return access(this, jQuery.prop, name, value, arguments.length > 1);
    },
    removeProp: function removeProp(name) {
      return this.each(function () {
        delete this[jQuery.propFix[name] || name];
      });
    }
  });
  jQuery.extend({
    prop: function prop(elem, name, value) {
      var ret,
          hooks,
          nType = elem.nodeType; // Don't get/set properties on text, comment and attribute nodes

      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      }

      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        // Fix name and attach hooks
        name = jQuery.propFix[name] || name;
        hooks = jQuery.propHooks[name];
      }

      if (value !== undefined) {
        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        }

        return elem[name] = value;
      }

      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }

      return elem[name];
    },
    propHooks: {
      tabIndex: {
        get: function get(elem) {
          // elem.tabIndex doesn't always return the
          // correct value when it hasn't been explicitly set
          // http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
          // Use proper attribute retrieval(#12072)
          var tabindex = jQuery.find.attr(elem, "tabindex");
          return tabindex ? parseInt(tabindex, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : -1;
        }
      }
    },
    propFix: {
      "for": "htmlFor",
      "class": "className"
    }
  }); // Support: IE <=11 only
  // Accessing the selectedIndex property
  // forces the browser to respect setting selected
  // on the option
  // The getter ensures a default option is selected
  // when in an optgroup

  if (!support.optSelected) {
    jQuery.propHooks.selected = {
      get: function get(elem) {
        var parent = elem.parentNode;

        if (parent && parent.parentNode) {
          parent.parentNode.selectedIndex;
        }

        return null;
      },
      set: function set(elem) {
        var parent = elem.parentNode;

        if (parent) {
          parent.selectedIndex;

          if (parent.parentNode) {
            parent.parentNode.selectedIndex;
          }
        }
      }
    };
  }

  jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
    jQuery.propFix[this.toLowerCase()] = this;
  });
  var rclass = /[\t\r\n\f]/g;

  function getClass(elem) {
    return elem.getAttribute && elem.getAttribute("class") || "";
  }

  jQuery.fn.extend({
    addClass: function addClass(value) {
      var classes,
          elem,
          cur,
          curValue,
          clazz,
          j,
          finalValue,
          i = 0;

      if (jQuery.isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).addClass(value.call(this, j, getClass(this)));
        });
      }

      if (typeof value === "string" && value) {
        classes = value.match(rnotwhite) || [];

        while (elem = this[i++]) {
          curValue = getClass(elem);
          cur = elem.nodeType === 1 && (" " + curValue + " ").replace(rclass, " ");

          if (cur) {
            j = 0;

            while (clazz = classes[j++]) {
              if (cur.indexOf(" " + clazz + " ") < 0) {
                cur += clazz + " ";
              }
            } // Only assign if different to avoid unneeded rendering.


            finalValue = jQuery.trim(cur);

            if (curValue !== finalValue) {
              elem.setAttribute("class", finalValue);
            }
          }
        }
      }

      return this;
    },
    removeClass: function removeClass(value) {
      var classes,
          elem,
          cur,
          curValue,
          clazz,
          j,
          finalValue,
          i = 0;

      if (jQuery.isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).removeClass(value.call(this, j, getClass(this)));
        });
      }

      if (!arguments.length) {
        return this.attr("class", "");
      }

      if (typeof value === "string" && value) {
        classes = value.match(rnotwhite) || [];

        while (elem = this[i++]) {
          curValue = getClass(elem); // This expression is here for better compressibility (see addClass)

          cur = elem.nodeType === 1 && (" " + curValue + " ").replace(rclass, " ");

          if (cur) {
            j = 0;

            while (clazz = classes[j++]) {
              // Remove *all* instances
              while (cur.indexOf(" " + clazz + " ") > -1) {
                cur = cur.replace(" " + clazz + " ", " ");
              }
            } // Only assign if different to avoid unneeded rendering.


            finalValue = jQuery.trim(cur);

            if (curValue !== finalValue) {
              elem.setAttribute("class", finalValue);
            }
          }
        }
      }

      return this;
    },
    toggleClass: function toggleClass(value, stateVal) {
      var type = _typeof(value);

      if (typeof stateVal === "boolean" && type === "string") {
        return stateVal ? this.addClass(value) : this.removeClass(value);
      }

      if (jQuery.isFunction(value)) {
        return this.each(function (i) {
          jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
        });
      }

      return this.each(function () {
        var className, i, self, classNames;

        if (type === "string") {
          // Toggle individual class names
          i = 0;
          self = jQuery(this);
          classNames = value.match(rnotwhite) || [];

          while (className = classNames[i++]) {
            // Check each className given, space separated list
            if (self.hasClass(className)) {
              self.removeClass(className);
            } else {
              self.addClass(className);
            }
          } // Toggle whole class name

        } else if (value === undefined || type === "boolean") {
          className = getClass(this);

          if (className) {
            // Store className if set
            dataPriv.set(this, "__className__", className);
          } // If the element has a class name or if we're passed `false`,
          // then remove the whole classname (if there was one, the above saved it).
          // Otherwise bring back whatever was previously saved (if anything),
          // falling back to the empty string if nothing was stored.


          if (this.setAttribute) {
            this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
          }
        }
      });
    },
    hasClass: function hasClass(selector) {
      var className,
          elem,
          i = 0;
      className = " " + selector + " ";

      while (elem = this[i++]) {
        if (elem.nodeType === 1 && (" " + getClass(elem) + " ").replace(rclass, " ").indexOf(className) > -1) {
          return true;
        }
      }

      return false;
    }
  });
  var rreturn = /\r/g,
      rspaces = /[\x20\t\r\n\f]+/g;
  jQuery.fn.extend({
    val: function val(value) {
      var hooks,
          ret,
          isFunction,
          elem = this[0];

      if (!arguments.length) {
        if (elem) {
          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

          if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
            return ret;
          }

          ret = elem.value;
          return typeof ret === "string" ? // Handle most common string cases
          ret.replace(rreturn, "") : // Handle cases where value is null/undef or number
          ret == null ? "" : ret;
        }

        return;
      }

      isFunction = jQuery.isFunction(value);
      return this.each(function (i) {
        var val;

        if (this.nodeType !== 1) {
          return;
        }

        if (isFunction) {
          val = value.call(this, i, jQuery(this).val());
        } else {
          val = value;
        } // Treat null/undefined as ""; convert numbers to string


        if (val == null) {
          val = "";
        } else if (typeof val === "number") {
          val += "";
        } else if (jQuery.isArray(val)) {
          val = jQuery.map(val, function (value) {
            return value == null ? "" : value + "";
          });
        }

        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]; // If set returns undefined, fall back to normal setting

        if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
          this.value = val;
        }
      });
    }
  });
  jQuery.extend({
    valHooks: {
      option: {
        get: function get(elem) {
          var val = jQuery.find.attr(elem, "value");
          return val != null ? val : // Support: IE10-11+
          // option.text throws exceptions (#14686, #14858)
          // Strip and collapse whitespace
          // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
          jQuery.trim(jQuery.text(elem)).replace(rspaces, " ");
        }
      },
      select: {
        get: function get(elem) {
          var value,
              option,
              options = elem.options,
              index = elem.selectedIndex,
              one = elem.type === "select-one" || index < 0,
              values = one ? null : [],
              max = one ? index + 1 : options.length,
              i = index < 0 ? max : one ? index : 0; // Loop through all the selected options

          for (; i < max; i++) {
            option = options[i]; // IE8-9 doesn't update selected after form reset (#2551)

            if ((option.selected || i === index) && ( // Don't return options that are disabled or in a disabled optgroup
            support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
              // Get the specific value for the option
              value = jQuery(option).val(); // We don't need an array for one selects

              if (one) {
                return value;
              } // Multi-Selects return an array


              values.push(value);
            }
          }

          return values;
        },
        set: function set(elem, value) {
          var optionSet,
              option,
              options = elem.options,
              values = jQuery.makeArray(value),
              i = options.length;

          while (i--) {
            option = options[i];

            if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
              optionSet = true;
            }
          } // Force browsers to behave consistently when non-matching value is set


          if (!optionSet) {
            elem.selectedIndex = -1;
          }

          return values;
        }
      }
    }
  }); // Radios and checkboxes getter/setter

  jQuery.each(["radio", "checkbox"], function () {
    jQuery.valHooks[this] = {
      set: function set(elem, value) {
        if (jQuery.isArray(value)) {
          return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
        }
      }
    };

    if (!support.checkOn) {
      jQuery.valHooks[this].get = function (elem) {
        return elem.getAttribute("value") === null ? "on" : elem.value;
      };
    }
  }); // Return jQuery for attributes-only inclusion

  var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;
  jQuery.extend(jQuery.event, {
    trigger: function trigger(event, data, elem, onlyHandlers) {
      var i,
          cur,
          tmp,
          bubbleType,
          ontype,
          handle,
          special,
          eventPath = [elem || document],
          type = hasOwn.call(event, "type") ? event.type : event,
          namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
      cur = tmp = elem = elem || document; // Don't do events on text and comment nodes

      if (elem.nodeType === 3 || elem.nodeType === 8) {
        return;
      } // focus/blur morphs to focusin/out; ensure we're not firing them right now


      if (rfocusMorph.test(type + jQuery.event.triggered)) {
        return;
      }

      if (type.indexOf(".") > -1) {
        // Namespaced trigger; create a regexp to match event type in handle()
        namespaces = type.split(".");
        type = namespaces.shift();
        namespaces.sort();
      }

      ontype = type.indexOf(":") < 0 && "on" + type; // Caller can pass in a jQuery.Event object, Object, or just an event type string

      event = event[jQuery.expando] ? event : new jQuery.Event(type, _typeof(event) === "object" && event); // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)

      event.isTrigger = onlyHandlers ? 2 : 3;
      event.namespace = namespaces.join(".");
      event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null; // Clean up the event in case it is being reused

      event.result = undefined;

      if (!event.target) {
        event.target = elem;
      } // Clone any incoming data and prepend the event, creating the handler arg list


      data = data == null ? [event] : jQuery.makeArray(data, [event]); // Allow special events to draw outside the lines

      special = jQuery.event.special[type] || {};

      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
        return;
      } // Determine event propagation path in advance, per W3C events spec (#9951)
      // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)


      if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
        bubbleType = special.delegateType || type;

        if (!rfocusMorph.test(bubbleType + type)) {
          cur = cur.parentNode;
        }

        for (; cur; cur = cur.parentNode) {
          eventPath.push(cur);
          tmp = cur;
        } // Only add window if we got to document (e.g., not plain obj or detached DOM)


        if (tmp === (elem.ownerDocument || document)) {
          eventPath.push(tmp.defaultView || tmp.parentWindow || window);
        }
      } // Fire handlers on the event path


      i = 0;

      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
        event.type = i > 1 ? bubbleType : special.bindType || type; // jQuery handler

        handle = (dataPriv.get(cur, "events") || {})[event.type] && dataPriv.get(cur, "handle");

        if (handle) {
          handle.apply(cur, data);
        } // Native handler


        handle = ontype && cur[ontype];

        if (handle && handle.apply && acceptData(cur)) {
          event.result = handle.apply(cur, data);

          if (event.result === false) {
            event.preventDefault();
          }
        }
      }

      event.type = type; // If nobody prevented the default action, do it now

      if (!onlyHandlers && !event.isDefaultPrevented()) {
        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
          // Call a native DOM method on the target with the same name name as the event.
          // Don't do default actions on window, that's where global variables be (#6170)
          if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {
            // Don't re-trigger an onFOO event when we call its FOO() method
            tmp = elem[ontype];

            if (tmp) {
              elem[ontype] = null;
            } // Prevent re-triggering of the same event, since we already bubbled it above


            jQuery.event.triggered = type;
            elem[type]();
            jQuery.event.triggered = undefined;

            if (tmp) {
              elem[ontype] = tmp;
            }
          }
        }
      }

      return event.result;
    },
    // Piggyback on a donor event to simulate a different one
    // Used only for `focus(in | out)` events
    simulate: function simulate(type, elem, event) {
      var e = jQuery.extend(new jQuery.Event(), event, {
        type: type,
        isSimulated: true
      });
      jQuery.event.trigger(e, null, elem);
    }
  });
  jQuery.fn.extend({
    trigger: function trigger(type, data) {
      return this.each(function () {
        jQuery.event.trigger(type, data, this);
      });
    },
    triggerHandler: function triggerHandler(type, data) {
      var elem = this[0];

      if (elem) {
        return jQuery.event.trigger(type, data, elem, true);
      }
    }
  });
  jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function (i, name) {
    // Handle event binding
    jQuery.fn[name] = function (data, fn) {
      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
    };
  });
  jQuery.fn.extend({
    hover: function hover(fnOver, fnOut) {
      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
    }
  });
  support.focusin = "onfocusin" in window; // Support: Firefox
  // Firefox doesn't have focus(in | out) events
  // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
  //
  // Support: Chrome, Safari
  // focus(in | out) events fire after focus & blur events,
  // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
  // Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857

  if (!support.focusin) {
    jQuery.each({
      focus: "focusin",
      blur: "focusout"
    }, function (orig, fix) {
      // Attach a single capturing handler on the document while someone wants focusin/focusout
      var handler = function handler(event) {
        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
      };

      jQuery.event.special[fix] = {
        setup: function setup() {
          var doc = this.ownerDocument || this,
              attaches = dataPriv.access(doc, fix);

          if (!attaches) {
            doc.addEventListener(orig, handler, true);
          }

          dataPriv.access(doc, fix, (attaches || 0) + 1);
        },
        teardown: function teardown() {
          var doc = this.ownerDocument || this,
              attaches = dataPriv.access(doc, fix) - 1;

          if (!attaches) {
            doc.removeEventListener(orig, handler, true);
            dataPriv.remove(doc, fix);
          } else {
            dataPriv.access(doc, fix, attaches);
          }
        }
      };
    });
  }

  var location = window.location;
  var nonce = jQuery.now();
  var rquery = /\?/; // Support: Android 2.3
  // Workaround failure to string-cast null input

  jQuery.parseJSON = function (data) {
    return JSON.parse(data + "");
  }; // Cross-browser xml parsing


  jQuery.parseXML = function (data) {
    var xml;

    if (!data || typeof data !== "string") {
      return null;
    } // Support: IE9


    try {
      xml = new window.DOMParser().parseFromString(data, "text/xml");
    } catch (e) {
      xml = undefined;
    }

    if (!xml || xml.getElementsByTagName("parsererror").length) {
      jQuery.error("Invalid XML: " + data);
    }

    return xml;
  };

  var rhash = /#.*$/,
      rts = /([?&])_=[^&]*/,
      rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
      // #7653, #8125, #8152: local protocol detection
  rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
      rnoContent = /^(?:GET|HEAD)$/,
      rprotocol = /^\/\//,

  /* Prefilters
   * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
   * 2) These are called:
   *    - BEFORE asking for a transport
   *    - AFTER param serialization (s.data is a string if s.processData is true)
   * 3) key is the dataType
   * 4) the catchall symbol "*" can be used
   * 5) execution will start with transport dataType and THEN continue down to "*" if needed
   */
  prefilters = {},

  /* Transports bindings
   * 1) key is the dataType
   * 2) the catchall symbol "*" can be used
   * 3) selection will start with transport dataType and THEN go to "*" if needed
   */
  transports = {},
      // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
  allTypes = "*/".concat("*"),
      // Anchor tag for parsing the document origin
  originAnchor = document.createElement("a");
  originAnchor.href = location.href; // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport

  function addToPrefiltersOrTransports(structure) {
    // dataTypeExpression is optional and defaults to "*"
    return function (dataTypeExpression, func) {
      if (typeof dataTypeExpression !== "string") {
        func = dataTypeExpression;
        dataTypeExpression = "*";
      }

      var dataType,
          i = 0,
          dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];

      if (jQuery.isFunction(func)) {
        // For each dataType in the dataTypeExpression
        while (dataType = dataTypes[i++]) {
          // Prepend if requested
          if (dataType[0] === "+") {
            dataType = dataType.slice(1) || "*";
            (structure[dataType] = structure[dataType] || []).unshift(func); // Otherwise append
          } else {
            (structure[dataType] = structure[dataType] || []).push(func);
          }
        }
      }
    };
  } // Base inspection function for prefilters and transports


  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
    var inspected = {},
        seekingTransport = structure === transports;

    function inspect(dataType) {
      var selected;
      inspected[dataType] = true;
      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);

        if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
          options.dataTypes.unshift(dataTypeOrTransport);
          inspect(dataTypeOrTransport);
          return false;
        } else if (seekingTransport) {
          return !(selected = dataTypeOrTransport);
        }
      });
      return selected;
    }

    return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
  } // A special extend for ajax options
  // that takes "flat" options (not to be deep extended)
  // Fixes #9887


  function ajaxExtend(target, src) {
    var key,
        deep,
        flatOptions = jQuery.ajaxSettings.flatOptions || {};

    for (key in src) {
      if (src[key] !== undefined) {
        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
      }
    }

    if (deep) {
      jQuery.extend(true, target, deep);
    }

    return target;
  }
  /* Handles responses to an ajax request:
   * - finds the right dataType (mediates between content-type and expected dataType)
   * - returns the corresponding response
   */


  function ajaxHandleResponses(s, jqXHR, responses) {
    var ct,
        type,
        finalDataType,
        firstDataType,
        contents = s.contents,
        dataTypes = s.dataTypes; // Remove auto dataType and get content-type in the process

    while (dataTypes[0] === "*") {
      dataTypes.shift();

      if (ct === undefined) {
        ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
      }
    } // Check if we're dealing with a known content-type


    if (ct) {
      for (type in contents) {
        if (contents[type] && contents[type].test(ct)) {
          dataTypes.unshift(type);
          break;
        }
      }
    } // Check to see if we have a response for the expected dataType


    if (dataTypes[0] in responses) {
      finalDataType = dataTypes[0];
    } else {
      // Try convertible dataTypes
      for (type in responses) {
        if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
          finalDataType = type;
          break;
        }

        if (!firstDataType) {
          firstDataType = type;
        }
      } // Or just use first one


      finalDataType = finalDataType || firstDataType;
    } // If we found a dataType
    // We add the dataType to the list if needed
    // and return the corresponding response


    if (finalDataType) {
      if (finalDataType !== dataTypes[0]) {
        dataTypes.unshift(finalDataType);
      }

      return responses[finalDataType];
    }
  }
  /* Chain conversions given the request and the original response
   * Also sets the responseXXX fields on the jqXHR instance
   */


  function ajaxConvert(s, response, jqXHR, isSuccess) {
    var conv2,
        current,
        conv,
        tmp,
        prev,
        converters = {},
        // Work with a copy of dataTypes in case we need to modify it for conversion
    dataTypes = s.dataTypes.slice(); // Create converters map with lowercased keys

    if (dataTypes[1]) {
      for (conv in s.converters) {
        converters[conv.toLowerCase()] = s.converters[conv];
      }
    }

    current = dataTypes.shift(); // Convert to each sequential dataType

    while (current) {
      if (s.responseFields[current]) {
        jqXHR[s.responseFields[current]] = response;
      } // Apply the dataFilter if provided


      if (!prev && isSuccess && s.dataFilter) {
        response = s.dataFilter(response, s.dataType);
      }

      prev = current;
      current = dataTypes.shift();

      if (current) {
        // There's only work to do if current dataType is non-auto
        if (current === "*") {
          current = prev; // Convert response if prev dataType is non-auto and differs from current
        } else if (prev !== "*" && prev !== current) {
          // Seek a direct converter
          conv = converters[prev + " " + current] || converters["* " + current]; // If none found, seek a pair

          if (!conv) {
            for (conv2 in converters) {
              // If conv2 outputs current
              tmp = conv2.split(" ");

              if (tmp[1] === current) {
                // If prev can be converted to accepted input
                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];

                if (conv) {
                  // Condense equivalence converters
                  if (conv === true) {
                    conv = converters[conv2]; // Otherwise, insert the intermediate dataType
                  } else if (converters[conv2] !== true) {
                    current = tmp[0];
                    dataTypes.unshift(tmp[1]);
                  }

                  break;
                }
              }
            }
          } // Apply converter (if not an equivalence)


          if (conv !== true) {
            // Unless errors are allowed to bubble, catch and return them
            if (conv && s["throws"]) {
              response = conv(response);
            } else {
              try {
                response = conv(response);
              } catch (e) {
                return {
                  state: "parsererror",
                  error: conv ? e : "No conversion from " + prev + " to " + current
                };
              }
            }
          }
        }
      }
    }

    return {
      state: "success",
      data: response
    };
  }

  jQuery.extend({
    // Counter for holding the number of active queries
    active: 0,
    // Last-Modified header cache for next request
    lastModified: {},
    etag: {},
    ajaxSettings: {
      url: location.href,
      type: "GET",
      isLocal: rlocalProtocol.test(location.protocol),
      global: true,
      processData: true,
      async: true,
      contentType: "application/x-www-form-urlencoded; charset=UTF-8",

      /*
      timeout: 0,
      data: null,
      dataType: null,
      username: null,
      password: null,
      cache: null,
      throws: false,
      traditional: false,
      headers: {},
      */
      accepts: {
        "*": allTypes,
        text: "text/plain",
        html: "text/html",
        xml: "application/xml, text/xml",
        json: "application/json, text/javascript"
      },
      contents: {
        xml: /\bxml\b/,
        html: /\bhtml/,
        json: /\bjson\b/
      },
      responseFields: {
        xml: "responseXML",
        text: "responseText",
        json: "responseJSON"
      },
      // Data converters
      // Keys separate source (or catchall "*") and destination types with a single space
      converters: {
        // Convert anything to text
        "* text": String,
        // Text to html (true = no transformation)
        "text html": true,
        // Evaluate text as a json expression
        "text json": jQuery.parseJSON,
        // Parse text as xml
        "text xml": jQuery.parseXML
      },
      // For options that shouldn't be deep extended:
      // you can add your own custom options here if
      // and when you create one that shouldn't be
      // deep extended (see ajaxExtend)
      flatOptions: {
        url: true,
        context: true
      }
    },
    // Creates a full fledged settings object into target
    // with both ajaxSettings and settings fields.
    // If target is omitted, writes into ajaxSettings.
    ajaxSetup: function ajaxSetup(target, settings) {
      return settings ? // Building a settings object
      ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : // Extending ajaxSettings
      ajaxExtend(jQuery.ajaxSettings, target);
    },
    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
    ajaxTransport: addToPrefiltersOrTransports(transports),
    // Main method
    ajax: function ajax(url, options) {
      // If url is an object, simulate pre-1.5 signature
      if (_typeof(url) === "object") {
        options = url;
        url = undefined;
      } // Force options to be an object


      options = options || {};

      var transport,
          // URL without anti-cache param
      cacheURL,
          // Response headers
      responseHeadersString,
          responseHeaders,
          // timeout handle
      timeoutTimer,
          // Url cleanup var
      urlAnchor,
          // To know if global events are to be dispatched
      fireGlobals,
          // Loop variable
      i,
          // Create the final options object
      s = jQuery.ajaxSetup({}, options),
          // Callbacks context
      callbackContext = s.context || s,
          // Context for global events is callbackContext if it is a DOM node or jQuery collection
      globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
          // Deferreds
      deferred = jQuery.Deferred(),
          completeDeferred = jQuery.Callbacks("once memory"),
          // Status-dependent callbacks
      _statusCode = s.statusCode || {},
          // Headers (they are sent all at once)
      requestHeaders = {},
          requestHeadersNames = {},
          // The jqXHR state
      state = 0,
          // Default abort message
      strAbort = "canceled",
          // Fake xhr
      jqXHR = {
        readyState: 0,
        // Builds headers hashtable if needed
        getResponseHeader: function getResponseHeader(key) {
          var match;

          if (state === 2) {
            if (!responseHeaders) {
              responseHeaders = {};

              while (match = rheaders.exec(responseHeadersString)) {
                responseHeaders[match[1].toLowerCase()] = match[2];
              }
            }

            match = responseHeaders[key.toLowerCase()];
          }

          return match == null ? null : match;
        },
        // Raw string
        getAllResponseHeaders: function getAllResponseHeaders() {
          return state === 2 ? responseHeadersString : null;
        },
        // Caches the header
        setRequestHeader: function setRequestHeader(name, value) {
          var lname = name.toLowerCase();

          if (!state) {
            name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
            requestHeaders[name] = value;
          }

          return this;
        },
        // Overrides response content-type header
        overrideMimeType: function overrideMimeType(type) {
          if (!state) {
            s.mimeType = type;
          }

          return this;
        },
        // Status-dependent callbacks
        statusCode: function statusCode(map) {
          var code;

          if (map) {
            if (state < 2) {
              for (code in map) {
                // Lazy-add the new callback in a way that preserves old ones
                _statusCode[code] = [_statusCode[code], map[code]];
              }
            } else {
              // Execute the appropriate callbacks
              jqXHR.always(map[jqXHR.status]);
            }
          }

          return this;
        },
        // Cancel the request
        abort: function abort(statusText) {
          var finalText = statusText || strAbort;

          if (transport) {
            transport.abort(finalText);
          }

          done(0, finalText);
          return this;
        }
      }; // Attach deferreds


      deferred.promise(jqXHR).complete = completeDeferred.add;
      jqXHR.success = jqXHR.done;
      jqXHR.error = jqXHR.fail; // Remove hash character (#7531: and string promotion)
      // Add protocol if not provided (prefilters might expect it)
      // Handle falsy url in the settings object (#10093: consistency with old signature)
      // We also use the url parameter if available

      s.url = ((url || s.url || location.href) + "").replace(rhash, "").replace(rprotocol, location.protocol + "//"); // Alias method option to type as per ticket #12004

      s.type = options.method || options.type || s.method || s.type; // Extract dataTypes list

      s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""]; // A cross-domain request is in order when the origin doesn't match the current origin.

      if (s.crossDomain == null) {
        urlAnchor = document.createElement("a"); // Support: IE8-11+
        // IE throws exception if url is malformed, e.g. http://example.com:80x/

        try {
          urlAnchor.href = s.url; // Support: IE8-11+
          // Anchor's host property isn't correctly set when s.url is relative

          urlAnchor.href = urlAnchor.href;
          s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
        } catch (e) {
          // If there is an error parsing the URL, assume it is crossDomain,
          // it can be rejected by the transport if it is invalid
          s.crossDomain = true;
        }
      } // Convert data if not already a string


      if (s.data && s.processData && typeof s.data !== "string") {
        s.data = jQuery.param(s.data, s.traditional);
      } // Apply prefilters


      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR); // If request was aborted inside a prefilter, stop there

      if (state === 2) {
        return jqXHR;
      } // We can fire global events as of now if asked to
      // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)


      fireGlobals = jQuery.event && s.global; // Watch for a new set of requests

      if (fireGlobals && jQuery.active++ === 0) {
        jQuery.event.trigger("ajaxStart");
      } // Uppercase the type


      s.type = s.type.toUpperCase(); // Determine if request has content

      s.hasContent = !rnoContent.test(s.type); // Save the URL in case we're toying with the If-Modified-Since
      // and/or If-None-Match header later on

      cacheURL = s.url; // More options handling for requests with no content

      if (!s.hasContent) {
        // If data is available, append data to url
        if (s.data) {
          cacheURL = s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data; // #9682: remove data so that it's not used in an eventual retry

          delete s.data;
        } // Add anti-cache in url if needed


        if (s.cache === false) {
          s.url = rts.test(cacheURL) ? // If there is already a '_' parameter, set its value
          cacheURL.replace(rts, "$1_=" + nonce++) : // Otherwise add one to the end
          cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++;
        }
      } // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.


      if (s.ifModified) {
        if (jQuery.lastModified[cacheURL]) {
          jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
        }

        if (jQuery.etag[cacheURL]) {
          jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
        }
      } // Set the correct header, if data is being sent


      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
        jqXHR.setRequestHeader("Content-Type", s.contentType);
      } // Set the Accepts header for the server, depending on the dataType


      jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]); // Check for headers option

      for (i in s.headers) {
        jqXHR.setRequestHeader(i, s.headers[i]);
      } // Allow custom headers/mimetypes and early abort


      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
        // Abort if not done already and return
        return jqXHR.abort();
      } // Aborting is no longer a cancellation


      strAbort = "abort"; // Install callbacks on deferreds

      for (i in {
        success: 1,
        error: 1,
        complete: 1
      }) {
        jqXHR[i](s[i]);
      } // Get transport


      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR); // If no transport, we auto-abort

      if (!transport) {
        done(-1, "No Transport");
      } else {
        jqXHR.readyState = 1; // Send global event

        if (fireGlobals) {
          globalEventContext.trigger("ajaxSend", [jqXHR, s]);
        } // If request was aborted inside ajaxSend, stop there


        if (state === 2) {
          return jqXHR;
        } // Timeout


        if (s.async && s.timeout > 0) {
          timeoutTimer = window.setTimeout(function () {
            jqXHR.abort("timeout");
          }, s.timeout);
        }

        try {
          state = 1;
          transport.send(requestHeaders, done);
        } catch (e) {
          // Propagate exception as error if not done
          if (state < 2) {
            done(-1, e); // Simply rethrow otherwise
          } else {
            throw e;
          }
        }
      } // Callback for when everything is done


      function done(status, nativeStatusText, responses, headers) {
        var isSuccess,
            success,
            error,
            response,
            modified,
            statusText = nativeStatusText; // Called once

        if (state === 2) {
          return;
        } // State is "done" now


        state = 2; // Clear timeout if it exists

        if (timeoutTimer) {
          window.clearTimeout(timeoutTimer);
        } // Dereference transport for early garbage collection
        // (no matter how long the jqXHR object will be used)


        transport = undefined; // Cache response headers

        responseHeadersString = headers || ""; // Set readyState

        jqXHR.readyState = status > 0 ? 4 : 0; // Determine if successful

        isSuccess = status >= 200 && status < 300 || status === 304; // Get response data

        if (responses) {
          response = ajaxHandleResponses(s, jqXHR, responses);
        } // Convert no matter what (that way responseXXX fields are always set)


        response = ajaxConvert(s, response, jqXHR, isSuccess); // If successful, handle type chaining

        if (isSuccess) {
          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
          if (s.ifModified) {
            modified = jqXHR.getResponseHeader("Last-Modified");

            if (modified) {
              jQuery.lastModified[cacheURL] = modified;
            }

            modified = jqXHR.getResponseHeader("etag");

            if (modified) {
              jQuery.etag[cacheURL] = modified;
            }
          } // if no content


          if (status === 204 || s.type === "HEAD") {
            statusText = "nocontent"; // if not modified
          } else if (status === 304) {
            statusText = "notmodified"; // If we have data, let's convert it
          } else {
            statusText = response.state;
            success = response.data;
            error = response.error;
            isSuccess = !error;
          }
        } else {
          // Extract error from statusText and normalize for non-aborts
          error = statusText;

          if (status || !statusText) {
            statusText = "error";

            if (status < 0) {
              status = 0;
            }
          }
        } // Set data for the fake xhr object


        jqXHR.status = status;
        jqXHR.statusText = (nativeStatusText || statusText) + ""; // Success/Error

        if (isSuccess) {
          deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
        } else {
          deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
        } // Status-dependent callbacks


        jqXHR.statusCode(_statusCode);
        _statusCode = undefined;

        if (fireGlobals) {
          globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
        } // Complete


        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

        if (fireGlobals) {
          globalEventContext.trigger("ajaxComplete", [jqXHR, s]); // Handle the global AJAX counter

          if (! --jQuery.active) {
            jQuery.event.trigger("ajaxStop");
          }
        }
      }

      return jqXHR;
    },
    getJSON: function getJSON(url, data, callback) {
      return jQuery.get(url, data, callback, "json");
    },
    getScript: function getScript(url, callback) {
      return jQuery.get(url, undefined, callback, "script");
    }
  });
  jQuery.each(["get", "post"], function (i, method) {
    jQuery[method] = function (url, data, callback, type) {
      // Shift arguments if data argument was omitted
      if (jQuery.isFunction(data)) {
        type = type || callback;
        callback = data;
        data = undefined;
      } // The url can be an options object (which then must have .url)


      return jQuery.ajax(jQuery.extend({
        url: url,
        type: method,
        dataType: type,
        data: data,
        success: callback
      }, jQuery.isPlainObject(url) && url));
    };
  });

  jQuery._evalUrl = function (url) {
    return jQuery.ajax({
      url: url,
      // Make this explicit, since user can override this through ajaxSetup (#11264)
      type: "GET",
      dataType: "script",
      async: false,
      global: false,
      "throws": true
    });
  };

  jQuery.fn.extend({
    wrapAll: function wrapAll(html) {
      var wrap;

      if (jQuery.isFunction(html)) {
        return this.each(function (i) {
          jQuery(this).wrapAll(html.call(this, i));
        });
      }

      if (this[0]) {
        // The elements to wrap the target around
        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

        if (this[0].parentNode) {
          wrap.insertBefore(this[0]);
        }

        wrap.map(function () {
          var elem = this;

          while (elem.firstElementChild) {
            elem = elem.firstElementChild;
          }

          return elem;
        }).append(this);
      }

      return this;
    },
    wrapInner: function wrapInner(html) {
      if (jQuery.isFunction(html)) {
        return this.each(function (i) {
          jQuery(this).wrapInner(html.call(this, i));
        });
      }

      return this.each(function () {
        var self = jQuery(this),
            contents = self.contents();

        if (contents.length) {
          contents.wrapAll(html);
        } else {
          self.append(html);
        }
      });
    },
    wrap: function wrap(html) {
      var isFunction = jQuery.isFunction(html);
      return this.each(function (i) {
        jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
      });
    },
    unwrap: function unwrap() {
      return this.parent().each(function () {
        if (!jQuery.nodeName(this, "body")) {
          jQuery(this).replaceWith(this.childNodes);
        }
      }).end();
    }
  });

  jQuery.expr.filters.hidden = function (elem) {
    return !jQuery.expr.filters.visible(elem);
  };

  jQuery.expr.filters.visible = function (elem) {
    // Support: Opera <= 12.12
    // Opera reports offsetWidths and offsetHeights less than zero on some elements
    // Use OR instead of AND as the element is not visible if either is true
    // See tickets #10406 and #13132
    return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
  };

  var r20 = /%20/g,
      rbracket = /\[\]$/,
      rCRLF = /\r?\n/g,
      rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
      rsubmittable = /^(?:input|select|textarea|keygen)/i;

  function buildParams(prefix, obj, traditional, add) {
    var name;

    if (jQuery.isArray(obj)) {
      // Serialize array item.
      jQuery.each(obj, function (i, v) {
        if (traditional || rbracket.test(prefix)) {
          // Treat each array item as a scalar.
          add(prefix, v);
        } else {
          // Item is non-scalar (array or object), encode its numeric index.
          buildParams(prefix + "[" + (_typeof(v) === "object" && v != null ? i : "") + "]", v, traditional, add);
        }
      });
    } else if (!traditional && jQuery.type(obj) === "object") {
      // Serialize object item.
      for (name in obj) {
        buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
      }
    } else {
      // Serialize scalar item.
      add(prefix, obj);
    }
  } // Serialize an array of form elements or a set of
  // key/values into a query string


  jQuery.param = function (a, traditional) {
    var prefix,
        s = [],
        add = function add(key, value) {
      // If value is a function, invoke it and return its value
      value = jQuery.isFunction(value) ? value() : value == null ? "" : value;
      s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
    }; // Set traditional to true for jQuery <= 1.3.2 behavior.


    if (traditional === undefined) {
      traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
    } // If an array was passed in, assume that it is an array of form elements.


    if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
      // Serialize the form elements
      jQuery.each(a, function () {
        add(this.name, this.value);
      });
    } else {
      // If traditional, encode the "old" way (the way 1.3.2 or older
      // did it), otherwise encode params recursively.
      for (prefix in a) {
        buildParams(prefix, a[prefix], traditional, add);
      }
    } // Return the resulting serialization


    return s.join("&").replace(r20, "+");
  };

  jQuery.fn.extend({
    serialize: function serialize() {
      return jQuery.param(this.serializeArray());
    },
    serializeArray: function serializeArray() {
      return this.map(function () {
        // Can add propHook for "elements" to filter or add form elements
        var elements = jQuery.prop(this, "elements");
        return elements ? jQuery.makeArray(elements) : this;
      }).filter(function () {
        var type = this.type; // Use .is( ":disabled" ) so that fieldset[disabled] works

        return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
      }).map(function (i, elem) {
        var val = jQuery(this).val();
        return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {
          return {
            name: elem.name,
            value: val.replace(rCRLF, "\r\n")
          };
        }) : {
          name: elem.name,
          value: val.replace(rCRLF, "\r\n")
        };
      }).get();
    }
  });

  jQuery.ajaxSettings.xhr = function () {
    try {
      return new window.XMLHttpRequest();
    } catch (e) {}
  };

  var xhrSuccessStatus = {
    // File protocol always yields status code 0, assume 200
    0: 200,
    // Support: IE9
    // #1450: sometimes IE returns 1223 when it should be 204
    1223: 204
  },
      xhrSupported = jQuery.ajaxSettings.xhr();
  support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
  support.ajax = xhrSupported = !!xhrSupported;
  jQuery.ajaxTransport(function (options) {
    var _callback, errorCallback; // Cross domain only allowed if supported through XMLHttpRequest


    if (support.cors || xhrSupported && !options.crossDomain) {
      return {
        send: function send(headers, complete) {
          var i,
              xhr = options.xhr();
          xhr.open(options.type, options.url, options.async, options.username, options.password); // Apply custom fields if provided

          if (options.xhrFields) {
            for (i in options.xhrFields) {
              xhr[i] = options.xhrFields[i];
            }
          } // Override mime type if needed


          if (options.mimeType && xhr.overrideMimeType) {
            xhr.overrideMimeType(options.mimeType);
          } // X-Requested-With header
          // For cross-domain requests, seeing as conditions for a preflight are
          // akin to a jigsaw puzzle, we simply never set it to be sure.
          // (it can always be set on a per-request basis or even using ajaxSetup)
          // For same-domain requests, won't change header if already provided.


          if (!options.crossDomain && !headers["X-Requested-With"]) {
            headers["X-Requested-With"] = "XMLHttpRequest";
          } // Set headers


          for (i in headers) {
            xhr.setRequestHeader(i, headers[i]);
          } // Callback


          _callback = function callback(type) {
            return function () {
              if (_callback) {
                _callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

                if (type === "abort") {
                  xhr.abort();
                } else if (type === "error") {
                  // Support: IE9
                  // On a manual native abort, IE9 throws
                  // errors on any property access that is not readyState
                  if (typeof xhr.status !== "number") {
                    complete(0, "error");
                  } else {
                    complete( // File: protocol always yields status 0; see #8605, #14207
                    xhr.status, xhr.statusText);
                  }
                } else {
                  complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, // Support: IE9 only
                  // IE9 has no XHR2 but throws on binary (trac-11426)
                  // For XHR2 non-text, let the caller handle it (gh-2498)
                  (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? {
                    binary: xhr.response
                  } : {
                    text: xhr.responseText
                  }, xhr.getAllResponseHeaders());
                }
              }
            };
          }; // Listen to events


          xhr.onload = _callback();
          errorCallback = xhr.onerror = _callback("error"); // Support: IE9
          // Use onreadystatechange to replace onabort
          // to handle uncaught aborts

          if (xhr.onabort !== undefined) {
            xhr.onabort = errorCallback;
          } else {
            xhr.onreadystatechange = function () {
              // Check readyState before timeout as it changes
              if (xhr.readyState === 4) {
                // Allow onerror to be called first,
                // but that will not handle a native abort
                // Also, save errorCallback to a variable
                // as xhr.onerror cannot be accessed
                window.setTimeout(function () {
                  if (_callback) {
                    errorCallback();
                  }
                });
              }
            };
          } // Create the abort callback


          _callback = _callback("abort");

          try {
            // Do send the request (this may raise an exception)
            xhr.send(options.hasContent && options.data || null);
          } catch (e) {
            // #14683: Only rethrow if this hasn't been notified as an error yet
            if (_callback) {
              throw e;
            }
          }
        },
        abort: function abort() {
          if (_callback) {
            _callback();
          }
        }
      };
    }
  }); // Install script dataType

  jQuery.ajaxSetup({
    accepts: {
      script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
    },
    contents: {
      script: /\b(?:java|ecma)script\b/
    },
    converters: {
      "text script": function textScript(text) {
        jQuery.globalEval(text);
        return text;
      }
    }
  }); // Handle cache's special case and crossDomain

  jQuery.ajaxPrefilter("script", function (s) {
    if (s.cache === undefined) {
      s.cache = false;
    }

    if (s.crossDomain) {
      s.type = "GET";
    }
  }); // Bind script tag hack transport

  jQuery.ajaxTransport("script", function (s) {
    // This transport only deals with cross domain requests
    if (s.crossDomain) {
      var script, _callback2;

      return {
        send: function send(_, complete) {
          script = jQuery("<script>").prop({
            charset: s.scriptCharset,
            src: s.url
          }).on("load error", _callback2 = function callback(evt) {
            script.remove();
            _callback2 = null;

            if (evt) {
              complete(evt.type === "error" ? 404 : 200, evt.type);
            }
          }); // Use native DOM manipulation to avoid our domManip AJAX trickery

          document.head.appendChild(script[0]);
        },
        abort: function abort() {
          if (_callback2) {
            _callback2();
          }
        }
      };
    }
  });
  var oldCallbacks = [],
      rjsonp = /(=)\?(?=&|$)|\?\?/; // Default jsonp settings

  jQuery.ajaxSetup({
    jsonp: "callback",
    jsonpCallback: function jsonpCallback() {
      var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
      this[callback] = true;
      return callback;
    }
  }); // Detect, normalize options and install callbacks for jsonp requests

  jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {
    var callbackName,
        overwritten,
        responseContainer,
        jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data"); // Handle iff the expected data type is "jsonp" or we have a parameter to set

    if (jsonProp || s.dataTypes[0] === "jsonp") {
      // Get callback name, remembering preexisting value associated with it
      callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback; // Insert callback into url or form data

      if (jsonProp) {
        s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
      } else if (s.jsonp !== false) {
        s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
      } // Use data converter to retrieve json after script execution


      s.converters["script json"] = function () {
        if (!responseContainer) {
          jQuery.error(callbackName + " was not called");
        }

        return responseContainer[0];
      }; // Force json dataType


      s.dataTypes[0] = "json"; // Install callback

      overwritten = window[callbackName];

      window[callbackName] = function () {
        responseContainer = arguments;
      }; // Clean-up function (fires after converters)


      jqXHR.always(function () {
        // If previous value didn't exist - remove it
        if (overwritten === undefined) {
          jQuery(window).removeProp(callbackName); // Otherwise restore preexisting value
        } else {
          window[callbackName] = overwritten;
        } // Save back as free


        if (s[callbackName]) {
          // Make sure that re-using the options doesn't screw things around
          s.jsonpCallback = originalSettings.jsonpCallback; // Save the callback name for future use

          oldCallbacks.push(callbackName);
        } // Call if it was a function and we have a response


        if (responseContainer && jQuery.isFunction(overwritten)) {
          overwritten(responseContainer[0]);
        }

        responseContainer = overwritten = undefined;
      }); // Delegate to script

      return "script";
    }
  }); // Argument "data" should be string of html
  // context (optional): If specified, the fragment will be created in this context,
  // defaults to document
  // keepScripts (optional): If true, will include scripts passed in the html string

  jQuery.parseHTML = function (data, context, keepScripts) {
    if (!data || typeof data !== "string") {
      return null;
    }

    if (typeof context === "boolean") {
      keepScripts = context;
      context = false;
    }

    context = context || document;
    var parsed = rsingleTag.exec(data),
        scripts = !keepScripts && []; // Single tag

    if (parsed) {
      return [context.createElement(parsed[1])];
    }

    parsed = buildFragment([data], context, scripts);

    if (scripts && scripts.length) {
      jQuery(scripts).remove();
    }

    return jQuery.merge([], parsed.childNodes);
  }; // Keep a copy of the old load method


  var _load = jQuery.fn.load;
  /**
   * Load a url into a page
   */

  jQuery.fn.load = function (url, params, callback) {
    if (typeof url !== "string" && _load) {
      return _load.apply(this, arguments);
    }

    var selector,
        type,
        response,
        self = this,
        off = url.indexOf(" ");

    if (off > -1) {
      selector = jQuery.trim(url.slice(off));
      url = url.slice(0, off);
    } // If it's a function


    if (jQuery.isFunction(params)) {
      // We assume that it's the callback
      callback = params;
      params = undefined; // Otherwise, build a param string
    } else if (params && _typeof(params) === "object") {
      type = "POST";
    } // If we have elements to modify, make the request


    if (self.length > 0) {
      jQuery.ajax({
        url: url,
        // If "type" variable is undefined, then "GET" method will be used.
        // Make value of this field explicit since
        // user can override it through ajaxSetup method
        type: type || "GET",
        dataType: "html",
        data: params
      }).done(function (responseText) {
        // Save response for use in complete callback
        response = arguments;
        self.html(selector ? // If a selector was specified, locate the right elements in a dummy div
        // Exclude scripts to avoid IE 'Permission Denied' errors
        jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : // Otherwise use the full result
        responseText); // If the request succeeds, this function gets "data", "status", "jqXHR"
        // but they are ignored because response was set above.
        // If it fails, this function gets "jqXHR", "status", "error"
      }).always(callback && function (jqXHR, status) {
        self.each(function () {
          callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
        });
      });
    }

    return this;
  }; // Attach a bunch of functions for handling common AJAX events


  jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {
    jQuery.fn[type] = function (fn) {
      return this.on(type, fn);
    };
  });

  jQuery.expr.filters.animated = function (elem) {
    return jQuery.grep(jQuery.timers, function (fn) {
      return elem === fn.elem;
    }).length;
  };
  /**
   * Gets a window from an element
   */


  function getWindow(elem) {
    return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
  }

  jQuery.offset = {
    setOffset: function setOffset(elem, options, i) {
      var curPosition,
          curLeft,
          curCSSTop,
          curTop,
          curOffset,
          curCSSLeft,
          calculatePosition,
          position = jQuery.css(elem, "position"),
          curElem = jQuery(elem),
          props = {}; // Set position first, in-case top/left are set even on static elem

      if (position === "static") {
        elem.style.position = "relative";
      }

      curOffset = curElem.offset();
      curCSSTop = jQuery.css(elem, "top");
      curCSSLeft = jQuery.css(elem, "left");
      calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1; // Need to be able to calculate position if either
      // top or left is auto and position is either absolute or fixed

      if (calculatePosition) {
        curPosition = curElem.position();
        curTop = curPosition.top;
        curLeft = curPosition.left;
      } else {
        curTop = parseFloat(curCSSTop) || 0;
        curLeft = parseFloat(curCSSLeft) || 0;
      }

      if (jQuery.isFunction(options)) {
        // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
        options = options.call(elem, i, jQuery.extend({}, curOffset));
      }

      if (options.top != null) {
        props.top = options.top - curOffset.top + curTop;
      }

      if (options.left != null) {
        props.left = options.left - curOffset.left + curLeft;
      }

      if ("using" in options) {
        options.using.call(elem, props);
      } else {
        curElem.css(props);
      }
    }
  };
  jQuery.fn.extend({
    offset: function offset(options) {
      if (arguments.length) {
        return options === undefined ? this : this.each(function (i) {
          jQuery.offset.setOffset(this, options, i);
        });
      }

      var docElem,
          win,
          elem = this[0],
          box = {
        top: 0,
        left: 0
      },
          doc = elem && elem.ownerDocument;

      if (!doc) {
        return;
      }

      docElem = doc.documentElement; // Make sure it's not a disconnected DOM node

      if (!jQuery.contains(docElem, elem)) {
        return box;
      }

      box = elem.getBoundingClientRect();
      win = getWindow(doc);
      return {
        top: box.top + win.pageYOffset - docElem.clientTop,
        left: box.left + win.pageXOffset - docElem.clientLeft
      };
    },
    position: function position() {
      if (!this[0]) {
        return;
      }

      var offsetParent,
          offset,
          elem = this[0],
          parentOffset = {
        top: 0,
        left: 0
      }; // Fixed elements are offset from window (parentOffset = {top:0, left: 0},
      // because it is its only offset parent

      if (jQuery.css(elem, "position") === "fixed") {
        // Assume getBoundingClientRect is there when computed position is fixed
        offset = elem.getBoundingClientRect();
      } else {
        // Get *real* offsetParent
        offsetParent = this.offsetParent(); // Get correct offsets

        offset = this.offset();

        if (!jQuery.nodeName(offsetParent[0], "html")) {
          parentOffset = offsetParent.offset();
        } // Add offsetParent borders


        parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
        parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
      } // Subtract parent offsets and element margins


      return {
        top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
        left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
      };
    },
    // This method will return documentElement in the following cases:
    // 1) For the element inside the iframe without offsetParent, this method will return
    //    documentElement of the parent window
    // 2) For the hidden or detached element
    // 3) For body or html element, i.e. in case of the html node - it will return itself
    //
    // but those exceptions were never presented as a real life use-cases
    // and might be considered as more preferable results.
    //
    // This logic, however, is not guaranteed and can change at any point in the future
    offsetParent: function offsetParent() {
      return this.map(function () {
        var offsetParent = this.offsetParent;

        while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
          offsetParent = offsetParent.offsetParent;
        }

        return offsetParent || documentElement;
      });
    }
  }); // Create scrollLeft and scrollTop methods

  jQuery.each({
    scrollLeft: "pageXOffset",
    scrollTop: "pageYOffset"
  }, function (method, prop) {
    var top = "pageYOffset" === prop;

    jQuery.fn[method] = function (val) {
      return access(this, function (elem, method, val) {
        var win = getWindow(elem);

        if (val === undefined) {
          return win ? win[prop] : elem[method];
        }

        if (win) {
          win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
        } else {
          elem[method] = val;
        }
      }, method, val, arguments.length);
    };
  }); // Support: Safari<7-8+, Chrome<37-44+
  // Add the top/left cssHooks using jQuery.fn.position
  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
  // Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
  // getComputedStyle returns percent when specified for top/left/bottom/right;
  // rather than make the css module depend on the offset module, just check for it here

  jQuery.each(["top", "left"], function (i, prop) {
    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
      if (computed) {
        computed = curCSS(elem, prop); // If curCSS returns percentage, fallback to offset

        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
      }
    });
  }); // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods

  jQuery.each({
    Height: "height",
    Width: "width"
  }, function (name, type) {
    jQuery.each({
      padding: "inner" + name,
      content: type,
      "": "outer" + name
    }, function (defaultExtra, funcName) {
      // Margin is only for outerHeight, outerWidth
      jQuery.fn[funcName] = function (margin, value) {
        var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
            extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
        return access(this, function (elem, type, value) {
          var doc;

          if (jQuery.isWindow(elem)) {
            // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
            // isn't a whole lot we can do. See pull request at this URL for discussion:
            // https://github.com/jquery/jquery/pull/764
            return elem.document.documentElement["client" + name];
          } // Get document width or height


          if (elem.nodeType === 9) {
            doc = elem.documentElement; // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
            // whichever is greatest

            return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
          }

          return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat
          jQuery.css(elem, type, extra) : // Set width or height on the element
          jQuery.style(elem, type, value, extra);
        }, type, chainable ? margin : undefined, chainable, null);
      };
    });
  });
  jQuery.fn.extend({
    bind: function bind(types, data, fn) {
      return this.on(types, null, data, fn);
    },
    unbind: function unbind(types, fn) {
      return this.off(types, null, fn);
    },
    delegate: function delegate(selector, types, data, fn) {
      return this.on(types, selector, data, fn);
    },
    undelegate: function undelegate(selector, types, fn) {
      // ( namespace ) or ( selector, types [, fn] )
      return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
    },
    size: function size() {
      return this.length;
    }
  });
  jQuery.fn.andSelf = jQuery.fn.addBack; // Register as a named AMD module, since jQuery can be concatenated with other
  // files that may use define, but not via a proper concatenation script that
  // understands anonymous AMD modules. A named AMD is safest and most robust
  // way to register. Lowercase jquery is used because AMD module names are
  // derived from file names, and jQuery is normally delivered in a lowercase
  // file name. Do this after creating the global so that if an AMD module wants
  // to call noConflict to hide this version of jQuery, it will work.
  // Note that for maximum portability, libraries that are not jQuery should
  // declare themselves as anonymous modules, and avoid setting a global if an
  // AMD loader is present. jQuery is a special case. For more information, see
  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return jQuery;
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }

  var // Map over jQuery in case of overwrite
  _jQuery = window.jQuery,
      // Map over the $ in case of overwrite
  _$ = window.$;

  jQuery.noConflict = function (deep) {
    if (window.$ === jQuery) {
      window.$ = _$;
    }

    if (deep && window.jQuery === jQuery) {
      window.jQuery = _jQuery;
    }

    return jQuery;
  }; // Expose jQuery and $ identifiers, even in AMD
  // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
  // and CommonJS for browser emulators (#13566)


  if (!noGlobal) {
    window.jQuery = window.$ = jQuery;
  }

  return jQuery;
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (module) {
  if (!module.webpackPolyfill) {
    module.deprecate = function () {};

    module.paths = []; // module.parent = undefined by default

    if (!module.children) module.children = [];
    Object.defineProperty(module, "loaded", {
      enumerable: true,
      get: function get() {
        return module.l;
      }
    });
    Object.defineProperty(module, "id", {
      enumerable: true,
      get: function get() {
        return module.i;
      }
    });
    module.webpackPolyfill = 1;
  }

  return module;
};

/***/ }),

/***/ "./src/Legend.js":
/*!***********************!*\
  !*** ./src/Legend.js ***!
  \***********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Legend; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

 // legend filter(mouse over) to make node bigger

var Legend =
/*#__PURE__*/
function () {
  function Legend() {
    _classCallCheck(this, Legend);
  }

  _createClass(Legend, null, [{
    key: "mouseoverFilter",
    value: function mouseoverFilter(legendId, circle, cell, colorFunc) {
      var legendText = cell.children("text")[legendId];
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(legendText).animate({
        "font-size": ["1.15em"],
        "font-weight": ["700"]
      }, 100);
      var legendPath = cell.children("path")[legendId];
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(legendPath).css({
        "stroke": [colorFunc(legendId)]
      });
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(legendPath).animate({
        "stroke-width": ["5"]
      }, 100);
      var filteredCircle = circle.parent("." + legendId).children("circle");
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(filteredCircle).attr("class", "filteredCircle"); //                  .attr("stroke", color(legendId));

      var filteredText = circle.parent("." + legendId).children("text");
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(filteredText).attr("class", "filteredText");
    }
  }, {
    key: "mouseoutFilter",
    value: function mouseoutFilter(legendId, circle, cell) {
      var legendText = cell.children("text")[legendId];
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(legendText).animate({
        "fill": ["#302833"],
        "font-size": ["1em"],
        "font-weight": ["400"]
      }, 100);
      var legendPath = cell.children("path")[legendId];
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(legendPath).css({
        "stroke": ["white"]
      });
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(legendPath).animate({
        "stroke-width": ["2"]
      }, 100);
      var filteredCircle = circle.parent("." + legendId).children("circle");
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(filteredCircle).attr("class", "returnFilteredCircle");
      var filteredText = circle.parent("." + legendId).children("text");
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(filteredText).attr("class", "returnFilteredText");
    }
  }, {
    key: "mouseoverClick",
    value: function mouseoverClick(legendId, circle, cell, colorFunc) {
      var legendText = cell.children("text")[legendId];
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(legendText).animate({
        "font-size": ["1.15em"],
        "font-weight": ["700"]
      }, 100);
      var legendPath = cell.children("path")[legendId];
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(legendPath).css({
        "stroke": [colorFunc(legendId)]
      });
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(legendPath).animate({
        "stroke-width": ["5"]
      }, 100);
      var filteredCircle = circle.parent("." + legendId).children("circle");
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(filteredCircle).attr("class", "filteredCircle");
      var filteredText = circle.parent("." + legendId).children("text");
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(filteredText).attr("class", "filteredText");
    }
  }, {
    key: "putId2Legend",
    value: function putId2Legend(cell, legendName) {
      for (var i = 0, l = legendName.length; l > i; i++) {
        var legendId = cell[i];
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(legendId).attr("id", "legend_No" + i);
      }
    } // This function has to be called when nodes are displayed

  }, {
    key: "putClass2Node",
    value: function putClass2Node(nodes, circle) {
      var nodeGroup = circle.parent();

      for (var i = 0, l = nodeGroup.length; l > i; i++) {
        var nodeG = nodeGroup[i];
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(nodeG).attr("class", nodes[i].group_id);
      }
    }
  }]);

  return Legend;
}();



/***/ }),

/***/ "./src/Network.js":
/*!************************!*\
  !*** ./src/Network.js ***!
  \************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Network; });
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "./node_modules/d3/d3.js");
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_1__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }




var Network =
/*#__PURE__*/
function () {
  function Network() {
    _classCallCheck(this, Network);
  }

  _createClass(Network, null, [{
    key: "mouseover",
    value: function mouseover(d, links, circle) {
      var nodeIndex = d.index; // to get node index

      for (var i = 0, l = links.length; l > i; i++) {
        if (links[i].source.index === nodeIndex || links[i].target.index === nodeIndex) {
          var lineIndex = i; // index number
          //console.log(lineIndex)

          var selectLine = d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("line")['_groups'][0][lineIndex]; //node which match index number

          jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectLine).attr("class", "lineColor"); // node color
          //console.log(links[lineIndex].source.index)
          //console.log(links[lineIndex].target.index)

          var nodeSource = links[lineIndex].source.index;
          var nodeTarget = links[lineIndex].target.index;
          var selectNodeSource = d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("circle")['_groups'][0][nodeSource]; //node which match source index number

          var selectNodeTarget = d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("circle")['_groups'][0][nodeTarget]; //node which match target index number

          jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNodeSource).attr("class", "nodeColor"); // node color

          jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNodeTarget).attr("class", "nodeColor"); // node color

          var selectNodeSource2 = circle.parent().children('text')[nodeSource]; // text which match source index number

          var selectNodeTarget2 = circle.parent().children('text')[nodeTarget]; // text which match target index number

          jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNodeSource2).attr("class", "linkedNodeText"); // node text color

          jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNodeTarget2).attr("class", "linkedNodeText"); // node text color
        }
      }

      var selectNode = d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("circle")['_groups'][0][nodeIndex];
      jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNode).attr("class", "nodeColor");
      var selectNodeText = circle.parent().children('text')[nodeIndex];
      jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNodeText).attr("class", "linkedNodeText");
    }
  }, {
    key: "mouseout",
    value: function mouseout(d, links, circle) {
      var nodeIndex = d.index;

      for (var i = 0, l = links.length; l > i; i++) {
        if (links[i].source.index === nodeIndex || links[i].target.index === nodeIndex) {
          var lineIndex = i;
          var selectLine = d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("line")['_groups'][0][lineIndex];
          jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectLine).attr("class", "lineColorDefault");
          var nodeSource = links[lineIndex].source.index;
          var nodeTarget = links[lineIndex].target.index;
          var selectNodeSource = d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("circle")['_groups'][0][nodeSource];
          var selectNodeTarget = d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("circle")['_groups'][0][nodeTarget];
          jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNodeSource).attr("class", "nodeColorDefault");
          jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNodeTarget).attr("class", "nodeColorDefault");
          var selectNodeSource2 = circle.parent().children('text')[nodeSource];
          var selectNodeTarget2 = circle.parent().children('text')[nodeTarget];
          jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNodeSource2).attr("class", "textSizeDefault");
          jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNodeTarget2).attr("class", "textSizeDefault");
        }
      }

      var selectNode = d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("circle")['_groups'][0][nodeIndex];
      jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNode).attr("class", "nodeColorDefault");
      var selectNodeText = circle.parent().children('text')[nodeIndex];
      jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNodeText).attr("class", "textSizeDefault");
    }
  }, {
    key: "mousedown",
    value: function mousedown(d, links, circle, labels) {
      //at first, make all node & line fade
      // d3.selectAll("circle").attr("class", "nodeColorFade");
      d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("line").attr("class", "lineColorFade");
      labels.attr("class", "nodeTextFade"); // circle.parent().children('text').attr("class", "nodeTextFade");

      var nodeIndex = d.index;

      for (var i = 0, l = links.length; l > i; i++) {
        if (links[i].source.index === nodeIndex || links[i].target.index === nodeIndex) {
          var lineIndex = i;
          var selectLine = d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("line")['_groups'][0][lineIndex];
          jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectLine).attr("class", "lineColor");
          var nodeSource = links[lineIndex].source.index;
          var nodeTarget = links[lineIndex].target.index;
          var selectNodeSource = d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("circle")['_groups'][0][nodeSource];
          var selectNodeTarget = d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("circle")['_groups'][0][nodeTarget];
          jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNodeSource).attr("class", "nodeColor");
          jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNodeTarget).attr("class", "nodeColor");
          var selectNodeSource2 = circle.parent().children('text')[nodeSource];
          var selectNodeTarget2 = circle.parent().children('text')[nodeTarget];
          jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNodeSource2).attr("class", "linkedNodeText");
          jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNodeTarget2).attr("class", "linkedNodeText");
        }
      }

      var selectNode = d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("circle")['_groups'][0][nodeIndex];
      jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNode).attr("class", "nodeColor");
      var selectNodeText = circle.parent().children('text')[nodeIndex];
      jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNodeText).attr("class", "linkedNodeText");
    }
  }, {
    key: "touchStart",
    value: function touchStart(d, links, circle, labels) {
      //at first, make all node & line fade
      // d3.selectAll("circle").attr("class", "nodeColorFadeSp");
      d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("line").attr("class", "lineColorFade");
      labels.attr("class", "nodeTextFade");
      var nodeIndex = d.index;

      for (var i = 0, l = links.length; l > i; i++) {
        if (links[i].source.index === nodeIndex || links[i].target.index === nodeIndex) {
          var lineIndex = i;
          var selectLine = d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("line")['_groups'][0][lineIndex];
          jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectLine).attr("class", "lineColor");
          var nodeSource = links[lineIndex].source.index;
          var nodeTarget = links[lineIndex].target.index;
          var selectNodeSource = d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("circle")['_groups'][0][nodeSource];
          var selectNodeTarget = d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("circle")['_groups'][0][nodeTarget];
          jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNodeSource).attr("class", "nodeColor");
          jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNodeTarget).attr("class", "nodeColor");
          var selectNodeSource2 = circle.parent().children('text')[nodeSource];
          var selectNodeTarget2 = circle.parent().children('text')[nodeTarget];
          jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNodeSource2).attr("class", "linkedNodeText");
          jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNodeTarget2).attr("class", "linkedNodeText");
        }
      }

      var selectNode = d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("circle")['_groups'][0][nodeIndex];
      jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNode).attr("class", "nodeColor");
      var selectNodeText = circle.parent().children('text')[nodeIndex];
      jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNodeText).attr("class", "linkedNodeText");
    }
  }, {
    key: "mouseup",
    value: function mouseup(d, links, circle, labels) {
      // d3.selectAll("circle").attr("class", "nodeReturnFade");
      d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("line").attr("class", "lineReturnFade");
      labels.attr("class", "nodeTextReturnFade");
      var nodeIndex = d.index;

      for (var i = 0, l = links.length; l > i; i++) {
        if (links[i].source.index === nodeIndex || links[i].target.index === nodeIndex) {
          var lineIndex = i;
          var selectLine = d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("line")['_groups'][0][lineIndex];
          jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectLine).attr("class", "lineColor");
          var nodeSource = links[lineIndex].source.index;
          var nodeTarget = links[lineIndex].target.index;
          var selectNodeSource = d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("circle")['_groups'][0][nodeSource];
          var selectNodeTarget = d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("circle")['_groups'][0][nodeTarget];
          jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNodeSource).attr("class", "nodeColor");
          jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNodeTarget).attr("class", "nodeColor");
          var selectNodeSource2 = circle.parent().children('text')[nodeSource];
          var selectNodeTarget2 = circle.parent().children('text')[nodeTarget];
          jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNodeSource2).attr("class", "linkedNodeText");
          jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNodeTarget2).attr("class", "linkedNodeText");
        }
      }

      var selectNode = d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("circle")['_groups'][0][nodeIndex];
      jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNode).attr("class", "nodeColor");
      var selectNodeText = circle.parent().children('text')[nodeIndex];
      jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectNodeText).attr("class", "linkedNodeText");
    }
  }, {
    key: "cursor",
    value: function cursor(type, body, circle) {
      var grabTypeC;
      var grabTypeB;

      if (type === 'grabbing') {
        grabTypeC = "grabbing";
        grabTypeB = "grabbing";
      } else {
        grabTypeC = "grab";
        grabTypeB = "auto";
      } //grabbing


      circle.css({
        "cursor": ["-webkit-" + grabTypeC]
      });
      circle.css({
        "cursor": ["-moz-" + grabTypeC]
      });
      circle.css({
        "cursor": [grabTypeC]
      });
      body.css({
        "cursor": ["-webkit-" + grabTypeB]
      });
      body.css({
        "cursor": ["-moz-" + grabTypeB]
      });
      body.css({
        "cursor": [grabTypeB]
      });
    }
    /* //Collision detection// */
    // static collide(alpha, radiusCallision, nodes) {
    //   const quadtree = d3.geom.quadtree(nodes);
    //   return function (d) {
    //     let rb = 2 * radiusCallision,
    //         nx1 = d.x - rb,
    //         nx2 = d.x + rb,
    //         ny1 = d.y - rb,
    //         ny2 = d.y + rb;
    //     quadtree.visit(function (quad, x1, y1, x2, y2) {
    //       if (quad.point && (quad.point !== d)) {
    //         let x = d.x - quad.point.x,
    //             y = d.y - quad.point.y,
    //             l = Math.sqrt(x * x + y * y);
    //         if (l < rb) {
    //           l = (l - rb) / l * alpha;
    //           d.x -= x *= l;
    //           d.y -= y *= l;
    //           quad.point.x += x;
    //           quad.point.y += y;
    //         }
    //       }
    //       return x1 > nx2
    //           || x2 < nx1
    //           || y1 > ny2
    //           || y2 < ny1;
    //     });
    //   };
    // }

  }]);

  return Network;
}();



/***/ }),

/***/ "./src/data/flavor_data.js":
/*!*********************************!*\
  !*** ./src/data/flavor_data.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var flavorData = {
  "links": [{
    "group_id": 0,
    "source": 0,
    "target": 102,
    "weight": 14.0
  }, {
    "group_id": 1,
    "source": 1,
    "target": 74,
    "weight": 31.0
  }, {
    "group_id": 2,
    "source": 2,
    "target": 41,
    "weight": 115.0
  }, {
    "group_id": 2,
    "source": 2,
    "target": 84,
    "weight": 100.0
  }, {
    "group_id": 2,
    "source": 2,
    "target": 45,
    "weight": 115.0
  }, {
    "group_id": 2,
    "source": 2,
    "target": 89,
    "weight": 115.0
  }, {
    "group_id": 2,
    "source": 2,
    "target": 9,
    "weight": 81.0
  }, {
    "group_id": 2,
    "source": 2,
    "target": 143,
    "weight": 115.0
  }, {
    "group_id": 3,
    "source": 3,
    "target": 86,
    "weight": 118.0
  }, {
    "group_id": 3,
    "source": 3,
    "target": 110,
    "weight": 117.0
  }, {
    "group_id": 3,
    "source": 3,
    "target": 98,
    "weight": 117.0
  }, {
    "group_id": 1,
    "source": 4,
    "target": 102,
    "weight": 54.0
  }, {
    "group_id": 1,
    "source": 4,
    "target": 74,
    "weight": 30.0
  }, {
    "group_id": 4,
    "source": 5,
    "target": 31,
    "weight": 51.0
  }, {
    "group_id": 5,
    "source": 6,
    "target": 77,
    "weight": 86.0
  }, {
    "group_id": 5,
    "source": 6,
    "target": 100,
    "weight": 155.0
  }, {
    "group_id": 5,
    "source": 6,
    "target": 74,
    "weight": 105.0
  }, {
    "group_id": 5,
    "source": 6,
    "target": 58,
    "weight": 98.0
  }, {
    "group_id": 5,
    "source": 6,
    "target": 150,
    "weight": 155.0
  }, {
    "group_id": 5,
    "source": 6,
    "target": 8,
    "weight": 62.0
  }, {
    "group_id": 5,
    "source": 6,
    "target": 35,
    "weight": 59.0
  }, {
    "group_id": 5,
    "source": 6,
    "target": 66,
    "weight": 19.0
  }, {
    "group_id": 5,
    "source": 6,
    "target": 118,
    "weight": 135.0
  }, {
    "group_id": 5,
    "source": 6,
    "target": 60,
    "weight": 128.0
  }, {
    "group_id": 5,
    "source": 6,
    "target": 115,
    "weight": 72.0
  }, {
    "group_id": 5,
    "source": 6,
    "target": 91,
    "weight": 118.0
  }, {
    "group_id": 5,
    "source": 6,
    "target": 17,
    "weight": 107.0
  }, {
    "group_id": 5,
    "source": 6,
    "target": 152,
    "weight": 80.0
  }, {
    "group_id": 5,
    "source": 6,
    "target": 130,
    "weight": 139.0
  }, {
    "group_id": 5,
    "source": 6,
    "target": 30,
    "weight": 17.0
  }, {
    "group_id": 5,
    "source": 6,
    "target": 156,
    "weight": 128.0
  }, {
    "group_id": 6,
    "source": 7,
    "target": 68,
    "weight": 10.0
  }, {
    "group_id": 1,
    "source": 8,
    "target": 113,
    "weight": 67.0
  }, {
    "group_id": 1,
    "source": 8,
    "target": 74,
    "weight": 64.0
  }, {
    "group_id": 2,
    "source": 9,
    "target": 41,
    "weight": 80.0
  }, {
    "group_id": 2,
    "source": 9,
    "target": 84,
    "weight": 98.0
  }, {
    "group_id": 2,
    "source": 9,
    "target": 45,
    "weight": 84.0
  }, {
    "group_id": 2,
    "source": 9,
    "target": 89,
    "weight": 83.0
  }, {
    "group_id": 2,
    "source": 9,
    "target": 95,
    "weight": 99.0
  }, {
    "group_id": 2,
    "source": 9,
    "target": 143,
    "weight": 84.0
  }, {
    "group_id": 3,
    "source": 10,
    "target": 86,
    "weight": 117.0
  }, {
    "group_id": 3,
    "source": 10,
    "target": 98,
    "weight": 117.0
  }, {
    "group_id": 7,
    "source": 11,
    "target": 91,
    "weight": 78.0
  }, {
    "group_id": 7,
    "source": 11,
    "target": 95,
    "weight": 77.0
  }, {
    "group_id": 7,
    "source": 11,
    "target": 111,
    "weight": 79.0
  }, {
    "group_id": 3,
    "source": 12,
    "target": 78,
    "weight": 96.0
  }, {
    "group_id": 1,
    "source": 13,
    "target": 63,
    "weight": 125.0
  }, {
    "group_id": 1,
    "source": 13,
    "target": 126,
    "weight": 8.0
  }, {
    "group_id": 7,
    "source": 14,
    "target": 72,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 14,
    "target": 111,
    "weight": 128.0
  }, {
    "group_id": 8,
    "source": 15,
    "target": 84,
    "weight": 72.0
  }, {
    "group_id": 8,
    "source": 15,
    "target": 28,
    "weight": 97.0
  }, {
    "group_id": 8,
    "source": 15,
    "target": 51,
    "weight": 97.0
  }, {
    "group_id": 8,
    "source": 15,
    "target": 95,
    "weight": 74.0
  }, {
    "group_id": 9,
    "source": 16,
    "target": 57,
    "weight": 36.0
  }, {
    "group_id": 9,
    "source": 16,
    "target": 97,
    "weight": 36.0
  }, {
    "group_id": 9,
    "source": 16,
    "target": 26,
    "weight": 36.0
  }, {
    "group_id": 9,
    "source": 16,
    "target": 76,
    "weight": 36.0
  }, {
    "group_id": 9,
    "source": 16,
    "target": 132,
    "weight": 36.0
  }, {
    "group_id": 9,
    "source": 16,
    "target": 22,
    "weight": 36.0
  }, {
    "group_id": 5,
    "source": 17,
    "target": 58,
    "weight": 94.0
  }, {
    "group_id": 5,
    "source": 17,
    "target": 100,
    "weight": 94.0
  }, {
    "group_id": 5,
    "source": 17,
    "target": 35,
    "weight": 55.0
  }, {
    "group_id": 5,
    "source": 17,
    "target": 60,
    "weight": 82.0
  }, {
    "group_id": 5,
    "source": 17,
    "target": 130,
    "weight": 90.0
  }, {
    "group_id": 5,
    "source": 17,
    "target": 156,
    "weight": 82.0
  }, {
    "group_id": 1,
    "source": 18,
    "target": 113,
    "weight": 67.0
  }, {
    "group_id": 1,
    "source": 18,
    "target": 74,
    "weight": 71.0
  }, {
    "group_id": 3,
    "source": 19,
    "target": 27,
    "weight": 86.0
  }, {
    "group_id": 3,
    "source": 19,
    "target": 78,
    "weight": 86.0
  }, {
    "group_id": 4,
    "source": 20,
    "target": 93,
    "weight": 74.0
  }, {
    "group_id": 10,
    "source": 21,
    "target": 44,
    "weight": 64.0
  }, {
    "group_id": 10,
    "source": 21,
    "target": 134,
    "weight": 64.0
  }, {
    "group_id": 10,
    "source": 21,
    "target": 141,
    "weight": 65.0
  }, {
    "group_id": 9,
    "source": 22,
    "target": 57,
    "weight": 36.0
  }, {
    "group_id": 9,
    "source": 22,
    "target": 97,
    "weight": 36.0
  }, {
    "group_id": 9,
    "source": 22,
    "target": 26,
    "weight": 36.0
  }, {
    "group_id": 9,
    "source": 22,
    "target": 132,
    "weight": 36.0
  }, {
    "group_id": 9,
    "source": 22,
    "target": 76,
    "weight": 38.0
  }, {
    "group_id": 11,
    "source": 23,
    "target": 51,
    "weight": 86.0
  }, {
    "group_id": 11,
    "source": 23,
    "target": 84,
    "weight": 102.0
  }, {
    "group_id": 11,
    "source": 23,
    "target": 43,
    "weight": 86.0
  }, {
    "group_id": 11,
    "source": 23,
    "target": 77,
    "weight": 95.0
  }, {
    "group_id": 11,
    "source": 23,
    "target": 91,
    "weight": 101.0
  }, {
    "group_id": 11,
    "source": 23,
    "target": 28,
    "weight": 86.0
  }, {
    "group_id": 11,
    "source": 23,
    "target": 139,
    "weight": 93.0
  }, {
    "group_id": 11,
    "source": 23,
    "target": 70,
    "weight": 25.0
  }, {
    "group_id": 11,
    "source": 23,
    "target": 95,
    "weight": 105.0
  }, {
    "group_id": 1,
    "source": 24,
    "target": 102,
    "weight": 51.0
  }, {
    "group_id": 1,
    "source": 24,
    "target": 53,
    "weight": 51.0
  }, {
    "group_id": 1,
    "source": 24,
    "target": 125,
    "weight": 51.0
  }, {
    "group_id": 1,
    "source": 24,
    "target": 82,
    "weight": 51.0
  }, {
    "group_id": 3,
    "source": 25,
    "target": 64,
    "weight": 86.0
  }, {
    "group_id": 3,
    "source": 25,
    "target": 27,
    "weight": 86.0
  }, {
    "group_id": 3,
    "source": 25,
    "target": 121,
    "weight": 90.0
  }, {
    "group_id": 3,
    "source": 25,
    "target": 78,
    "weight": 86.0
  }, {
    "group_id": 3,
    "source": 25,
    "target": 29,
    "weight": 87.0
  }, {
    "group_id": 9,
    "source": 26,
    "target": 57,
    "weight": 36.0
  }, {
    "group_id": 9,
    "source": 26,
    "target": 97,
    "weight": 36.0
  }, {
    "group_id": 9,
    "source": 26,
    "target": 76,
    "weight": 36.0
  }, {
    "group_id": 9,
    "source": 26,
    "target": 132,
    "weight": 36.0
  }, {
    "group_id": 3,
    "source": 27,
    "target": 29,
    "weight": 86.0
  }, {
    "group_id": 3,
    "source": 27,
    "target": 64,
    "weight": 86.0
  }, {
    "group_id": 3,
    "source": 27,
    "target": 78,
    "weight": 86.0
  }, {
    "group_id": 3,
    "source": 27,
    "target": 121,
    "weight": 86.0
  }, {
    "group_id": 11,
    "source": 28,
    "target": 84,
    "weight": 99.0
  }, {
    "group_id": 11,
    "source": 28,
    "target": 78,
    "weight": 88.0
  }, {
    "group_id": 11,
    "source": 28,
    "target": 51,
    "weight": 144.0
  }, {
    "group_id": 3,
    "source": 29,
    "target": 64,
    "weight": 86.0
  }, {
    "group_id": 3,
    "source": 29,
    "target": 78,
    "weight": 86.0
  }, {
    "group_id": 5,
    "source": 30,
    "target": 100,
    "weight": 17.0
  }, {
    "group_id": 5,
    "source": 30,
    "target": 35,
    "weight": 15.0
  }, {
    "group_id": 5,
    "source": 30,
    "target": 74,
    "weight": 14.0
  }, {
    "group_id": 4,
    "source": 31,
    "target": 80,
    "weight": 51.0
  }, {
    "group_id": 4,
    "source": 31,
    "target": 151,
    "weight": 51.0
  }, {
    "group_id": 1,
    "source": 32,
    "target": 133,
    "weight": 54.0
  }, {
    "group_id": 10,
    "source": 33,
    "target": 84,
    "weight": 48.0
  }, {
    "group_id": 3,
    "source": 34,
    "target": 99,
    "weight": 12.0
  }, {
    "group_id": 3,
    "source": 34,
    "target": 135,
    "weight": 17.0
  }, {
    "group_id": 3,
    "source": 34,
    "target": 138,
    "weight": 16.0
  }, {
    "group_id": 3,
    "source": 34,
    "target": 95,
    "weight": 32.0
  }, {
    "group_id": 3,
    "source": 34,
    "target": 84,
    "weight": 30.0
  }, {
    "group_id": 5,
    "source": 35,
    "target": 74,
    "weight": 59.0
  }, {
    "group_id": 5,
    "source": 35,
    "target": 58,
    "weight": 54.0
  }, {
    "group_id": 5,
    "source": 35,
    "target": 100,
    "weight": 52.0
  }, {
    "group_id": 5,
    "source": 35,
    "target": 91,
    "weight": 50.0
  }, {
    "group_id": 5,
    "source": 35,
    "target": 130,
    "weight": 52.0
  }, {
    "group_id": 0,
    "source": 36,
    "target": 101,
    "weight": 32.0
  }, {
    "group_id": 10,
    "source": 37,
    "target": 84,
    "weight": 49.0
  }, {
    "group_id": 9,
    "source": 38,
    "target": 120,
    "weight": 12.0
  }, {
    "group_id": 9,
    "source": 38,
    "target": 68,
    "weight": 20.0
  }, {
    "group_id": 9,
    "source": 38,
    "target": 103,
    "weight": 22.0
  }, {
    "group_id": 6,
    "source": 39,
    "target": 94,
    "weight": 10.0
  }, {
    "group_id": 6,
    "source": 39,
    "target": 103,
    "weight": 17.0
  }, {
    "group_id": 9,
    "source": 40,
    "target": 139,
    "weight": 44.0
  }, {
    "group_id": 9,
    "source": 40,
    "target": 79,
    "weight": 45.0
  }, {
    "group_id": 2,
    "source": 41,
    "target": 117,
    "weight": 52.0
  }, {
    "group_id": 2,
    "source": 41,
    "target": 84,
    "weight": 97.0
  }, {
    "group_id": 2,
    "source": 41,
    "target": 45,
    "weight": 115.0
  }, {
    "group_id": 2,
    "source": 41,
    "target": 89,
    "weight": 115.0
  }, {
    "group_id": 2,
    "source": 41,
    "target": 95,
    "weight": 97.0
  }, {
    "group_id": 2,
    "source": 41,
    "target": 143,
    "weight": 115.0
  }, {
    "group_id": 3,
    "source": 42,
    "target": 78,
    "weight": 86.0
  }, {
    "group_id": 11,
    "source": 43,
    "target": 56,
    "weight": 8.0
  }, {
    "group_id": 11,
    "source": 43,
    "target": 47,
    "weight": 29.0
  }, {
    "group_id": 11,
    "source": 43,
    "target": 79,
    "weight": 171.0
  }, {
    "group_id": 10,
    "source": 44,
    "target": 145,
    "weight": 64.0
  }, {
    "group_id": 10,
    "source": 44,
    "target": 134,
    "weight": 64.0
  }, {
    "group_id": 10,
    "source": 44,
    "target": 52,
    "weight": 64.0
  }, {
    "group_id": 10,
    "source": 44,
    "target": 128,
    "weight": 64.0
  }, {
    "group_id": 10,
    "source": 44,
    "target": 141,
    "weight": 64.0
  }, {
    "group_id": 10,
    "source": 44,
    "target": 81,
    "weight": 64.0
  }, {
    "group_id": 10,
    "source": 44,
    "target": 62,
    "weight": 64.0
  }, {
    "group_id": 2,
    "source": 45,
    "target": 117,
    "weight": 52.0
  }, {
    "group_id": 2,
    "source": 45,
    "target": 84,
    "weight": 102.0
  }, {
    "group_id": 2,
    "source": 45,
    "target": 89,
    "weight": 115.0
  }, {
    "group_id": 2,
    "source": 45,
    "target": 95,
    "weight": 102.0
  }, {
    "group_id": 2,
    "source": 45,
    "target": 143,
    "weight": 119.0
  }, {
    "group_id": 12,
    "source": 46,
    "target": 137,
    "weight": 5.0
  }, {
    "group_id": 6,
    "source": 47,
    "target": 139,
    "weight": 33.0
  }, {
    "group_id": 8,
    "source": 48,
    "target": 103,
    "weight": 10.0
  }, {
    "group_id": 6,
    "source": 49,
    "target": 125,
    "weight": 13.0
  }, {
    "group_id": 1,
    "source": 50,
    "target": 68,
    "weight": 25.0
  }, {
    "group_id": 8,
    "source": 51,
    "target": 84,
    "weight": 99.0
  }, {
    "group_id": 8,
    "source": 51,
    "target": 78,
    "weight": 88.0
  }, {
    "group_id": 10,
    "source": 52,
    "target": 134,
    "weight": 64.0
  }, {
    "group_id": 10,
    "source": 52,
    "target": 145,
    "weight": 64.0
  }, {
    "group_id": 1,
    "source": 53,
    "target": 102,
    "weight": 57.0
  }, {
    "group_id": 1,
    "source": 53,
    "target": 125,
    "weight": 56.0
  }, {
    "group_id": 1,
    "source": 53,
    "target": 101,
    "weight": 53.0
  }, {
    "group_id": 1,
    "source": 53,
    "target": 82,
    "weight": 53.0
  }, {
    "group_id": 1,
    "source": 54,
    "target": 74,
    "weight": 36.0
  }, {
    "group_id": 1,
    "source": 55,
    "target": 59,
    "weight": 49.0
  }, {
    "group_id": 1,
    "source": 55,
    "target": 74,
    "weight": 44.0
  }, {
    "group_id": 0,
    "source": 56,
    "target": 102,
    "weight": 8.0
  }, {
    "group_id": 0,
    "source": 56,
    "target": 106,
    "weight": 6.0
  }, {
    "group_id": 9,
    "source": 57,
    "target": 97,
    "weight": 36.0
  }, {
    "group_id": 9,
    "source": 57,
    "target": 76,
    "weight": 36.0
  }, {
    "group_id": 9,
    "source": 57,
    "target": 132,
    "weight": 36.0
  }, {
    "group_id": 5,
    "source": 58,
    "target": 115,
    "weight": 76.0
  }, {
    "group_id": 5,
    "source": 58,
    "target": 91,
    "weight": 103.0
  }, {
    "group_id": 5,
    "source": 58,
    "target": 130,
    "weight": 87.0
  }, {
    "group_id": 1,
    "source": 59,
    "target": 113,
    "weight": 38.0
  }, {
    "group_id": 1,
    "source": 59,
    "target": 74,
    "weight": 44.0
  }, {
    "group_id": 5,
    "source": 60,
    "target": 66,
    "weight": 18.0
  }, {
    "group_id": 5,
    "source": 60,
    "target": 100,
    "weight": 128.0
  }, {
    "group_id": 5,
    "source": 60,
    "target": 156,
    "weight": 128.0
  }, {
    "group_id": 1,
    "source": 61,
    "target": 113,
    "weight": 89.0
  }, {
    "group_id": 10,
    "source": 62,
    "target": 88,
    "weight": 18.0
  }, {
    "group_id": 10,
    "source": 62,
    "target": 134,
    "weight": 84.0
  }, {
    "group_id": 10,
    "source": 62,
    "target": 145,
    "weight": 65.0
  }, {
    "group_id": 3,
    "source": 64,
    "target": 121,
    "weight": 86.0
  }, {
    "group_id": 3,
    "source": 64,
    "target": 78,
    "weight": 86.0
  }, {
    "group_id": 1,
    "source": 65,
    "target": 113,
    "weight": 63.0
  }, {
    "group_id": 1,
    "source": 65,
    "target": 74,
    "weight": 64.0
  }, {
    "group_id": 5,
    "source": 66,
    "target": 100,
    "weight": 18.0
  }, {
    "group_id": 5,
    "source": 66,
    "target": 118,
    "weight": 18.0
  }, {
    "group_id": 5,
    "source": 66,
    "target": 130,
    "weight": 18.0
  }, {
    "group_id": 5,
    "source": 66,
    "target": 156,
    "weight": 18.0
  }, {
    "group_id": 7,
    "source": 67,
    "target": 83,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 67,
    "target": 72,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 67,
    "target": 123,
    "weight": 27.0
  }, {
    "group_id": 7,
    "source": 67,
    "target": 85,
    "weight": 128.0
  }, {
    "group_id": 7,
    "source": 67,
    "target": 148,
    "weight": 129.0
  }, {
    "group_id": 7,
    "source": 67,
    "target": 111,
    "weight": 129.0
  }, {
    "group_id": 7,
    "source": 67,
    "target": 127,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 67,
    "target": 104,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 67,
    "target": 69,
    "weight": 134.0
  }, {
    "group_id": 7,
    "source": 67,
    "target": 140,
    "weight": 129.0
  }, {
    "group_id": 7,
    "source": 67,
    "target": 153,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 67,
    "target": 71,
    "weight": 136.0
  }, {
    "group_id": 7,
    "source": 67,
    "target": 107,
    "weight": 131.0
  }, {
    "group_id": 9,
    "source": 68,
    "target": 87,
    "weight": 10.0
  }, {
    "group_id": 9,
    "source": 68,
    "target": 146,
    "weight": 7.0
  }, {
    "group_id": 7,
    "source": 69,
    "target": 83,
    "weight": 133.0
  }, {
    "group_id": 7,
    "source": 69,
    "target": 72,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 69,
    "target": 85,
    "weight": 130.0
  }, {
    "group_id": 7,
    "source": 69,
    "target": 148,
    "weight": 129.0
  }, {
    "group_id": 7,
    "source": 69,
    "target": 90,
    "weight": 12.0
  }, {
    "group_id": 7,
    "source": 69,
    "target": 111,
    "weight": 137.0
  }, {
    "group_id": 7,
    "source": 69,
    "target": 127,
    "weight": 131.0
  }, {
    "group_id": 7,
    "source": 69,
    "target": 129,
    "weight": 128.0
  }, {
    "group_id": 7,
    "source": 69,
    "target": 104,
    "weight": 130.0
  }, {
    "group_id": 7,
    "source": 69,
    "target": 140,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 69,
    "target": 71,
    "weight": 142.0
  }, {
    "group_id": 7,
    "source": 69,
    "target": 123,
    "weight": 27.0
  }, {
    "group_id": 7,
    "source": 71,
    "target": 83,
    "weight": 130.0
  }, {
    "group_id": 7,
    "source": 71,
    "target": 72,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 71,
    "target": 148,
    "weight": 129.0
  }, {
    "group_id": 7,
    "source": 71,
    "target": 85,
    "weight": 129.0
  }, {
    "group_id": 7,
    "source": 71,
    "target": 75,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 71,
    "target": 90,
    "weight": 12.0
  }, {
    "group_id": 7,
    "source": 71,
    "target": 111,
    "weight": 134.0
  }, {
    "group_id": 7,
    "source": 71,
    "target": 127,
    "weight": 131.0
  }, {
    "group_id": 7,
    "source": 71,
    "target": 129,
    "weight": 128.0
  }, {
    "group_id": 7,
    "source": 71,
    "target": 104,
    "weight": 130.0
  }, {
    "group_id": 7,
    "source": 71,
    "target": 140,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 71,
    "target": 153,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 71,
    "target": 123,
    "weight": 28.0
  }, {
    "group_id": 7,
    "source": 71,
    "target": 107,
    "weight": 128.0
  }, {
    "group_id": 7,
    "source": 72,
    "target": 83,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 72,
    "target": 107,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 72,
    "target": 148,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 72,
    "target": 85,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 72,
    "target": 75,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 72,
    "target": 111,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 72,
    "target": 127,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 72,
    "target": 129,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 72,
    "target": 104,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 72,
    "target": 140,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 72,
    "target": 153,
    "weight": 127.0
  }, {
    "group_id": 6,
    "source": 73,
    "target": 103,
    "weight": 18.0
  }, {
    "group_id": 1,
    "source": 74,
    "target": 108,
    "weight": 74.0
  }, {
    "group_id": 1,
    "source": 74,
    "target": 119,
    "weight": 41.0
  }, {
    "group_id": 1,
    "source": 74,
    "target": 113,
    "weight": 114.0
  }, {
    "group_id": 1,
    "source": 74,
    "target": 112,
    "weight": 85.0
  }, {
    "group_id": 7,
    "source": 75,
    "target": 104,
    "weight": 127.0
  }, {
    "group_id": 9,
    "source": 76,
    "target": 97,
    "weight": 36.0
  }, {
    "group_id": 9,
    "source": 76,
    "target": 132,
    "weight": 37.0
  }, {
    "group_id": 11,
    "source": 77,
    "target": 91,
    "weight": 94.0
  }, {
    "group_id": 3,
    "source": 78,
    "target": 109,
    "weight": 58.0
  }, {
    "group_id": 3,
    "source": 78,
    "target": 95,
    "weight": 100.0
  }, {
    "group_id": 11,
    "source": 79,
    "target": 144,
    "weight": 84.0
  }, {
    "group_id": 11,
    "source": 79,
    "target": 132,
    "weight": 41.0
  }, {
    "group_id": 11,
    "source": 79,
    "target": 94,
    "weight": 11.0
  }, {
    "group_id": 11,
    "source": 79,
    "target": 122,
    "weight": 24.0
  }, {
    "group_id": 1,
    "source": 82,
    "target": 102,
    "weight": 56.0
  }, {
    "group_id": 1,
    "source": 82,
    "target": 125,
    "weight": 58.0
  }, {
    "group_id": 1,
    "source": 82,
    "target": 101,
    "weight": 53.0
  }, {
    "group_id": 7,
    "source": 83,
    "target": 85,
    "weight": 130.0
  }, {
    "group_id": 7,
    "source": 83,
    "target": 148,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 83,
    "target": 111,
    "weight": 129.0
  }, {
    "group_id": 7,
    "source": 83,
    "target": 127,
    "weight": 128.0
  }, {
    "group_id": 7,
    "source": 83,
    "target": 129,
    "weight": 129.0
  }, {
    "group_id": 7,
    "source": 83,
    "target": 104,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 83,
    "target": 140,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 83,
    "target": 153,
    "weight": 127.0
  }, {
    "group_id": 2,
    "source": 84,
    "target": 124,
    "weight": 58.0
  }, {
    "group_id": 2,
    "source": 84,
    "target": 89,
    "weight": 103.0
  }, {
    "group_id": 2,
    "source": 84,
    "target": 91,
    "weight": 102.0
  }, {
    "group_id": 2,
    "source": 84,
    "target": 95,
    "weight": 199.0
  }, {
    "group_id": 2,
    "source": 84,
    "target": 143,
    "weight": 101.0
  }, {
    "group_id": 2,
    "source": 84,
    "target": 114,
    "weight": 16.0
  }, {
    "group_id": 7,
    "source": 85,
    "target": 148,
    "weight": 128.0
  }, {
    "group_id": 7,
    "source": 85,
    "target": 111,
    "weight": 131.0
  }, {
    "group_id": 7,
    "source": 85,
    "target": 127,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 85,
    "target": 129,
    "weight": 130.0
  }, {
    "group_id": 7,
    "source": 85,
    "target": 104,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 85,
    "target": 140,
    "weight": 127.0
  }, {
    "group_id": 3,
    "source": 86,
    "target": 110,
    "weight": 117.0
  }, {
    "group_id": 3,
    "source": 86,
    "target": 98,
    "weight": 117.0
  }, {
    "group_id": 2,
    "source": 89,
    "target": 95,
    "weight": 105.0
  }, {
    "group_id": 2,
    "source": 89,
    "target": 143,
    "weight": 115.0
  }, {
    "group_id": 5,
    "source": 91,
    "target": 100,
    "weight": 106.0
  }, {
    "group_id": 5,
    "source": 91,
    "target": 95,
    "weight": 106.0
  }, {
    "group_id": 5,
    "source": 91,
    "target": 156,
    "weight": 86.0
  }, {
    "group_id": 1,
    "source": 92,
    "target": 102,
    "weight": 30.0
  }, {
    "group_id": 6,
    "source": 94,
    "target": 102,
    "weight": 10.0
  }, {
    "group_id": 2,
    "source": 95,
    "target": 99,
    "weight": 10.0
  }, {
    "group_id": 2,
    "source": 95,
    "target": 138,
    "weight": 11.0
  }, {
    "group_id": 2,
    "source": 95,
    "target": 155,
    "weight": 42.0
  }, {
    "group_id": 2,
    "source": 95,
    "target": 143,
    "weight": 101.0
  }, {
    "group_id": 1,
    "source": 96,
    "target": 113,
    "weight": 39.0
  }, {
    "group_id": 3,
    "source": 97,
    "target": 132,
    "weight": 36.0
  }, {
    "group_id": 3,
    "source": 98,
    "target": 110,
    "weight": 117.0
  }, {
    "group_id": 3,
    "source": 99,
    "target": 131,
    "weight": 11.0
  }, {
    "group_id": 5,
    "source": 100,
    "target": 150,
    "weight": 165.0
  }, {
    "group_id": 5,
    "source": 100,
    "target": 118,
    "weight": 133.0
  }, {
    "group_id": 5,
    "source": 100,
    "target": 130,
    "weight": 138.0
  }, {
    "group_id": 5,
    "source": 100,
    "target": 156,
    "weight": 128.0
  }, {
    "group_id": 1,
    "source": 101,
    "target": 102,
    "weight": 62.0
  }, {
    "group_id": 1,
    "source": 101,
    "target": 125,
    "weight": 55.0
  }, {
    "group_id": 1,
    "source": 102,
    "target": 125,
    "weight": 69.0
  }, {
    "group_id": 1,
    "source": 102,
    "target": 113,
    "weight": 69.0
  }, {
    "group_id": 9,
    "source": 103,
    "target": 120,
    "weight": 10.0
  }, {
    "group_id": 7,
    "source": 104,
    "target": 148,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 104,
    "target": 111,
    "weight": 130.0
  }, {
    "group_id": 7,
    "source": 104,
    "target": 127,
    "weight": 130.0
  }, {
    "group_id": 7,
    "source": 104,
    "target": 129,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 104,
    "target": 140,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 104,
    "target": 153,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 104,
    "target": 107,
    "weight": 127.0
  }, {
    "group_id": 1,
    "source": 105,
    "target": 113,
    "weight": 47.0
  }, {
    "group_id": 7,
    "source": 107,
    "target": 111,
    "weight": 134.0
  }, {
    "group_id": 7,
    "source": 107,
    "target": 140,
    "weight": 128.0
  }, {
    "group_id": 1,
    "source": 108,
    "target": 113,
    "weight": 70.0
  }, {
    "group_id": 7,
    "source": 111,
    "target": 136,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 111,
    "target": 148,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 111,
    "target": 127,
    "weight": 130.0
  }, {
    "group_id": 7,
    "source": 111,
    "target": 129,
    "weight": 128.0
  }, {
    "group_id": 7,
    "source": 111,
    "target": 140,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 111,
    "target": 153,
    "weight": 127.0
  }, {
    "group_id": 1,
    "source": 112,
    "target": 113,
    "weight": 69.0
  }, {
    "group_id": 1,
    "source": 113,
    "target": 142,
    "weight": 40.0
  }, {
    "group_id": 1,
    "source": 113,
    "target": 119,
    "weight": 40.0
  }, {
    "group_id": 8,
    "source": 116,
    "target": 154,
    "weight": 18.0
  }, {
    "group_id": 2,
    "source": 117,
    "target": 143,
    "weight": 52.0
  }, {
    "group_id": 5,
    "source": 118,
    "target": 150,
    "weight": 133.0
  }, {
    "group_id": 5,
    "source": 118,
    "target": 130,
    "weight": 131.0
  }, {
    "group_id": 5,
    "source": 118,
    "target": 156,
    "weight": 128.0
  }, {
    "group_id": 7,
    "source": 127,
    "target": 148,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 127,
    "target": 140,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 127,
    "target": 129,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 129,
    "target": 148,
    "weight": 127.0
  }, {
    "group_id": 7,
    "source": 129,
    "target": 140,
    "weight": 127.0
  }, {
    "group_id": 5,
    "source": 130,
    "target": 156,
    "weight": 128.0
  }, {
    "group_id": 3,
    "source": 131,
    "target": 135,
    "weight": 11.0
  }, {
    "group_id": 10,
    "source": 134,
    "target": 145,
    "weight": 65.0
  }, {
    "group_id": 10,
    "source": 134,
    "target": 141,
    "weight": 84.0
  }, {
    "group_id": 7,
    "source": 140,
    "target": 148,
    "weight": 127.0
  }, {
    "group_id": 3,
    "source": 147,
    "target": 149,
    "weight": 44.0
  }, {
    "group_id": 7,
    "source": 148,
    "target": 153,
    "weight": 127.0
  }, {
    "group_id": 5,
    "source": 150,
    "target": 156,
    "weight": 128.0
  }],
  "nodes": [{
    "group_id": 0,
    "group_name": "plant",
    "name": "orange_peel",
    "size": 1.0124252185918086
  }, {
    "group_id": 1,
    "group_name": "fruit",
    "name": "cherry",
    "size": 1.9186519876809798
  }, {
    "group_id": 2,
    "group_name": "meat",
    "name": "roasted_pork",
    "size": 0.22124676979716093
  }, {
    "group_id": 3,
    "group_name": "vegetable",
    "name": "matsutake",
    "size": 0.09911855286912812
  }, {
    "group_id": 1,
    "group_name": "fruit",
    "name": "orange_juice",
    "size": 3.008956069241389
  }, {
    "group_id": 4,
    "group_name": "cereal/crop",
    "name": "rye_bread",
    "size": 0.16106764841233318
  }, {
    "group_id": 5,
    "group_name": "alcoholic beverage",
    "name": "white_wine",
    "size": 3.8337640270452047
  }, {
    "group_id": 6,
    "group_name": "herb",
    "name": "fennel",
    "size": 1.6053665616482
  }, {
    "group_id": 1,
    "group_name": "fruit",
    "name": "pineapple",
    "size": 2.860278239937697
  }, {
    "group_id": 2,
    "group_name": "meat",
    "name": "chicken",
    "size": 9.370243194449362
  }, {
    "group_id": 3,
    "group_name": "vegetable",
    "name": "porcini",
    "size": 0.18761726078799248
  }, {
    "group_id": 7,
    "group_name": "dairy",
    "name": "milk",
    "size": 22.823816772275123
  }, {
    "group_id": 2,
    "group_name": "meat",
    "name": "raw_beef",
    "size": 0.003539948316754575
  }, {
    "group_id": 1,
    "group_name": "fruit",
    "name": "grape",
    "size": 0.6106410846401643
  }, {
    "group_id": 7,
    "group_name": "dairy",
    "name": "camembert_cheese",
    "size": 0.021239689900527454
  }, {
    "group_id": 8,
    "group_name": "nut/seed/pulse",
    "name": "peanut",
    "size": 0.8017982937449113
  }, {
    "group_id": 9,
    "group_name": "spice",
    "name": "cayenne",
    "size": 14.071294559099437
  }, {
    "group_id": 5,
    "group_name": "alcoholic beverage",
    "name": "cognac",
    "size": 0.116818294452901
  }, {
    "group_id": 1,
    "group_name": "fruit",
    "name": "melon",
    "size": 0.27788594286523416
  }, {
    "group_id": 3,
    "group_name": "vegetable",
    "name": "mung_bean",
    "size": 0.033629509009168466
  }, {
    "group_id": 4,
    "group_name": "cereal/crop",
    "name": "rice",
    "size": 6.009062267690892
  }, {
    "group_id": 10,
    "group_name": "fish/seafood",
    "name": "mackerel",
    "size": 0.07787886296860065
  }, {
    "group_id": 9,
    "group_name": "spice",
    "name": "thai_pepper",
    "size": 0.15398775177882404
  }, {
    "group_id": 11,
    "group_name": "plant derivative",
    "name": "coffee",
    "size": 1.267301497398138
  }, {
    "group_id": 1,
    "group_name": "fruit",
    "name": "citrus",
    "size": 0.28850578781549785
  }, {
    "group_id": 3,
    "group_name": "vegetable",
    "name": "lima_bean",
    "size": 0.2637261495982159
  }, {
    "group_id": 9,
    "group_name": "spice",
    "name": "black_pepper",
    "size": 17.26078799249531
  }, {
    "group_id": 3,
    "group_name": "vegetable",
    "name": "bean",
    "size": 3.3682608233919784
  }, {
    "group_id": 11,
    "group_name": "plant derivative",
    "name": "peanut_butter",
    "size": 1.7611242875854014
  }, {
    "group_id": 3,
    "group_name": "vegetable",
    "name": "kidney_bean",
    "size": 0.7823285780027611
  }, {
    "group_id": 5,
    "group_name": "alcoholic beverage",
    "name": "apple_brandy",
    "size": 0.06548904385995964
  }, {
    "group_id": 4,
    "group_name": "cereal/crop",
    "name": "bread",
    "size": 8.05869234309179
  }, {
    "group_id": 1,
    "group_name": "fruit",
    "name": "juniper_berry",
    "size": 0.0584091472264505
  }, {
    "group_id": 10,
    "group_name": "fish/seafood",
    "name": "clam",
    "size": 0.8159580870119296
  }, {
    "group_id": 3,
    "group_name": "vegetable",
    "name": "onion",
    "size": 31.914404049700874
  }, {
    "group_id": 5,
    "group_name": "alcoholic beverage",
    "name": "cider",
    "size": 1.9823710573825624
  }, {
    "group_id": 0,
    "group_name": "plant",
    "name": "citrus_peel",
    "size": 0.00707989663350915
  }, {
    "group_id": 10,
    "group_name": "fish/seafood",
    "name": "eel",
    "size": 0.03539948316754576
  }, {
    "group_id": 9,
    "group_name": "spice",
    "name": "nutmeg",
    "size": 4.4461750858437465
  }, {
    "group_id": 6,
    "group_name": "herb",
    "name": "rosemary",
    "size": 3.3452511593330736
  }, {
    "group_id": 9,
    "group_name": "spice",
    "name": "vanilla",
    "size": 15.974016779355022
  }, {
    "group_id": 2,
    "group_name": "meat",
    "name": "pork",
    "size": 3.4762292470529927
  }, {
    "group_id": 3,
    "group_name": "vegetable",
    "name": "red_bean",
    "size": 0.0584091472264505
  }, {
    "group_id": 11,
    "group_name": "plant derivative",
    "name": "tea",
    "size": 0.17876738999610606
  }, {
    "group_id": 10,
    "group_name": "fish/seafood",
    "name": "fish",
    "size": 3.3257814435909236
  }, {
    "group_id": 2,
    "group_name": "meat",
    "name": "bacon",
    "size": 3.8160642854614326
  }, {
    "group_id": 12,
    "group_name": "flower",
    "name": "lavender",
    "size": 0.10973839781939183
  }, {
    "group_id": 6,
    "group_name": "herb",
    "name": "peppermint",
    "size": 0.2513363304895749
  }, {
    "group_id": 8,
    "group_name": "nut/seed/pulse",
    "name": "black_sesame_seed",
    "size": 0.04601932811780948
  }, {
    "group_id": 6,
    "group_name": "herb",
    "name": "lemongrass",
    "size": 0.24248645969768842
  }, {
    "group_id": 1,
    "group_name": "fruit",
    "name": "guava",
    "size": 0.02300966405890474
  }, {
    "group_id": 8,
    "group_name": "nut/seed/pulse",
    "name": "roasted_peanut",
    "size": 0.2920457361322525
  }, {
    "group_id": 10,
    "group_name": "fish/seafood",
    "name": "haddock",
    "size": 0.05486919890969592
  }, {
    "group_id": 1,
    "group_name": "fruit",
    "name": "mandarin",
    "size": 0.492052816028886
  }, {
    "group_id": 1,
    "group_name": "fruit",
    "name": "quince",
    "size": 0.04955927643456406
  }, {
    "group_id": 1,
    "group_name": "fruit",
    "name": "bartlett_pear",
    "size": 0.04070940564267762
  }, {
    "group_id": 0,
    "group_name": "plant",
    "name": "lemon_peel",
    "size": 1.2655315232397606
  }, {
    "group_id": 9,
    "group_name": "spice",
    "name": "pepper",
    "size": 16.035965874898224
  }, {
    "group_id": 5,
    "group_name": "alcoholic beverage",
    "name": "rum",
    "size": 1.065524443343127
  }, {
    "group_id": 1,
    "group_name": "fruit",
    "name": "pear",
    "size": 0.8283479061205707
  }, {
    "group_id": 5,
    "group_name": "alcoholic beverage",
    "name": "champagne_wine",
    "size": 0.1752274416793515
  }, {
    "group_id": 1,
    "group_name": "fruit",
    "name": "raspberry",
    "size": 1.3876597401677935
  }, {
    "group_id": 10,
    "group_name": "fish/seafood",
    "name": "smoked_salmon",
    "size": 0.1716874933625969
  }, {
    "group_id": 1,
    "group_name": "fruit",
    "name": "concord_grape",
    "size": 0.021239689900527454
  }, {
    "group_id": 3,
    "group_name": "vegetable",
    "name": "black_bean",
    "size": 0.8389677510708343
  }, {
    "group_id": 1,
    "group_name": "fruit",
    "name": "plum",
    "size": 0.4902828418705087
  }, {
    "group_id": 5,
    "group_name": "alcoholic beverage",
    "name": "brandy",
    "size": 0.6991397925590287
  }, {
    "group_id": 7,
    "group_name": "dairy",
    "name": "swiss_cheese",
    "size": 0.9239265106729442
  }, {
    "group_id": 9,
    "group_name": "spice",
    "name": "cinnamon",
    "size": 9.917165209387942
  }, {
    "group_id": 7,
    "group_name": "dairy",
    "name": "blue_cheese",
    "size": 0.6991397925590287
  }, {
    "group_id": 4,
    "group_name": "cereal/crop",
    "name": "popcorn",
    "size": 0.1716874933625969
  }, {
    "group_id": 7,
    "group_name": "dairy",
    "name": "cheddar_cheese",
    "size": 5.361251725724804
  }, {
    "group_id": 7,
    "group_name": "dairy",
    "name": "cheese",
    "size": 5.809055187794258
  }, {
    "group_id": 6,
    "group_name": "herb",
    "name": "marjoram",
    "size": 0.934546355623208
  }, {
    "group_id": 1,
    "group_name": "fruit",
    "name": "apple",
    "size": 4.2797975149562815
  }, {
    "group_id": 7,
    "group_name": "dairy",
    "name": "roquefort_cheese",
    "size": 0.04070940564267762
  }, {
    "group_id": 9,
    "group_name": "spice",
    "name": "tabasco_pepper",
    "size": 1.7080250628340825
  }, {
    "group_id": 11,
    "group_name": "plant derivative",
    "name": "cocoa",
    "size": 8.497645934369357
  }, {
    "group_id": 3,
    "group_name": "vegetable",
    "name": "soybean",
    "size": 1.8301532797621156
  }, {
    "group_id": 11,
    "group_name": "plant derivative",
    "name": "black_tea",
    "size": 0.06725901801833693
  }, {
    "group_id": 4,
    "group_name": "cereal/crop",
    "name": "white_bread",
    "size": 0.6548904385995965
  }, {
    "group_id": 10,
    "group_name": "fish/seafood",
    "name": "herring",
    "size": 0.01769974158377288
  }, {
    "group_id": 1,
    "group_name": "fruit",
    "name": "lime",
    "size": 1.9168820135226023
  }, {
    "group_id": 7,
    "group_name": "dairy",
    "name": "provolone_cheese",
    "size": 0.29558568444900707
  }, {
    "group_id": 2,
    "group_name": "meat",
    "name": "beef",
    "size": 8.53481539169528
  }, {
    "group_id": 7,
    "group_name": "dairy",
    "name": "romano_cheese",
    "size": 0.48674289355375416
  }, {
    "group_id": 3,
    "group_name": "vegetable",
    "name": "shiitake",
    "size": 0.9044567949307939
  }, {
    "group_id": 9,
    "group_name": "spice",
    "name": "anise",
    "size": 0.3947042373181352
  }, {
    "group_id": 10,
    "group_name": "fish/seafood",
    "name": "caviar",
    "size": 0.04601932811780948
  }, {
    "group_id": 2,
    "group_name": "meat",
    "name": "cured_pork",
    "size": 0.5557718857304683
  }, {
    "group_id": 7,
    "group_name": "dairy",
    "name": "buttermilk",
    "size": 2.8903678006301106
  }, {
    "group_id": 5,
    "group_name": "alcoholic beverage",
    "name": "beer",
    "size": 0.5363021699883181
  }, {
    "group_id": 1,
    "group_name": "fruit",
    "name": "grapefruit",
    "size": 0.20708697653014269
  }, {
    "group_id": 4,
    "group_name": "cereal/crop",
    "name": "brown_rice",
    "size": 0.596481291373146
  }, {
    "group_id": 6,
    "group_name": "herb",
    "name": "basil",
    "size": 6.68873234450777
  }, {
    "group_id": 2,
    "group_name": "meat",
    "name": "roasted_beef",
    "size": 0.3929342631597579
  }, {
    "group_id": 1,
    "group_name": "fruit",
    "name": "kiwi",
    "size": 0.18584728662961522
  }, {
    "group_id": 3,
    "group_name": "vegetable",
    "name": "green_bell_pepper",
    "size": 4.562993380296647
  }, {
    "group_id": 3,
    "group_name": "vegetable",
    "name": "mushroom",
    "size": 5.871004283337463
  }, {
    "group_id": 3,
    "group_name": "vegetable",
    "name": "shallot",
    "size": 2.1009593259938404
  }, {
    "group_id": 5,
    "group_name": "alcoholic beverage",
    "name": "red_wine",
    "size": 2.4655740026195616
  }, {
    "group_id": 1,
    "group_name": "fruit",
    "name": "tangerine",
    "size": 0.07787886296860065
  }, {
    "group_id": 1,
    "group_name": "fruit",
    "name": "orange",
    "size": 3.0248858366667846
  }, {
    "group_id": 9,
    "group_name": "spice",
    "name": "ginger",
    "size": 6.75422138836773
  }, {
    "group_id": 7,
    "group_name": "dairy",
    "name": "cream_cheese",
    "size": 5.02495663563312
  }, {
    "group_id": 1,
    "group_name": "fruit",
    "name": "olive",
    "size": 3.180643562603986
  }, {
    "group_id": 11,
    "group_name": "plant derivative",
    "name": "lime_peel_oil",
    "size": 0.17699741583772877
  }, {
    "group_id": 7,
    "group_name": "dairy",
    "name": "gruyere_cheese",
    "size": 0.07787886296860065
  }, {
    "group_id": 1,
    "group_name": "fruit",
    "name": "apricot",
    "size": 1.0973839781939185
  }, {
    "group_id": 4,
    "group_name": "cereal/crop",
    "name": "malt",
    "size": 0.06548904385995964
  }, {
    "group_id": 3,
    "group_name": "vegetable",
    "name": "enokidake",
    "size": 0.18761726078799248
  }, {
    "group_id": 7,
    "group_name": "dairy",
    "name": "parmesan_cheese",
    "size": 5.60550815958087
  }, {
    "group_id": 1,
    "group_name": "fruit",
    "name": "banana",
    "size": 1.741654571843251
  }, {
    "group_id": 1,
    "group_name": "fruit",
    "name": "strawberry",
    "size": 1.9080321427307163
  }, {
    "group_id": 2,
    "group_name": "meat",
    "name": "pork_liver",
    "size": 0.00884987079188644
  }, {
    "group_id": 5,
    "group_name": "alcoholic beverage",
    "name": "whiskey",
    "size": 0.26195617543983857
  }, {
    "group_id": 8,
    "group_name": "nut/seed/pulse",
    "name": "coconut",
    "size": 3.026655810825162
  }, {
    "group_id": 2,
    "group_name": "meat",
    "name": "mutton",
    "size": 0.0053099224751318634
  }, {
    "group_id": 5,
    "group_name": "alcoholic beverage",
    "name": "port_wine",
    "size": 0.08672873376048709
  }, {
    "group_id": 13,
    "group_name": "animal product",
    "name": "honey",
    "size": 4.3948458352508055
  }, {
    "group_id": 8,
    "group_name": "nut/seed/pulse",
    "name": "seed",
    "size": 2.3239760699493788
  }, {
    "group_id": 3,
    "group_name": "vegetable",
    "name": "red_kidney_bean",
    "size": 0.10442847534425997
  }, {
    "group_id": 6,
    "group_name": "herb",
    "name": "mint",
    "size": 1.6496159156076322
  }, {
    "group_id": 7,
    "group_name": "dairy",
    "name": "cream",
    "size": 17.968777655846225
  }, {
    "group_id": 2,
    "group_name": "meat",
    "name": "lamb",
    "size": 0.8354278027540798
  }, {
    "group_id": 1,
    "group_name": "fruit",
    "name": "lemon",
    "size": 5.3913412864172185
  }, {
    "group_id": 3,
    "group_name": "vegetable",
    "name": "rhubarb",
    "size": 0.2991256327657616
  }, {
    "group_id": 7,
    "group_name": "dairy",
    "name": "cottage_cheese",
    "size": 0.6159510071152962
  }, {
    "group_id": 10,
    "group_name": "fish/seafood",
    "name": "catfish",
    "size": 0.12035824276965557
  }, {
    "group_id": 7,
    "group_name": "dairy",
    "name": "goat_cheese",
    "size": 0.45842330701971756
  }, {
    "group_id": 5,
    "group_name": "alcoholic beverage",
    "name": "sherry",
    "size": 1.1150837197776913
  }, {
    "group_id": 3,
    "group_name": "vegetable",
    "name": "leek",
    "size": 0.7274593790930652
  }, {
    "group_id": 3,
    "group_name": "vegetable",
    "name": "bell_pepper",
    "size": 10.349038904032001
  }, {
    "group_id": 1,
    "group_name": "fruit",
    "name": "cranberry",
    "size": 1.6212963290735956
  }, {
    "group_id": 10,
    "group_name": "fish/seafood",
    "name": "salmon",
    "size": 0.7681687847357429
  }, {
    "group_id": 3,
    "group_name": "vegetable",
    "name": "chive",
    "size": 2.327516018266133
  }, {
    "group_id": 7,
    "group_name": "dairy",
    "name": "sheep_cheese",
    "size": 0.003539948316754575
  }, {
    "group_id": 12,
    "group_name": "flower",
    "name": "flower",
    "size": 0.053099224751318626
  }, {
    "group_id": 3,
    "group_name": "vegetable",
    "name": "garlic",
    "size": 29.90017345746752
  }, {
    "group_id": 11,
    "group_name": "plant derivative",
    "name": "green_tea",
    "size": 0.0566391730680732
  }, {
    "group_id": 7,
    "group_name": "dairy",
    "name": "mozzarella_cheese",
    "size": 2.283266664306701
  }, {
    "group_id": 10,
    "group_name": "fish/seafood",
    "name": "tuna",
    "size": 0.7840985521611384
  }, {
    "group_id": 1,
    "group_name": "fruit",
    "name": "nectarine",
    "size": 0.08849870791886438
  }, {
    "group_id": 2,
    "group_name": "meat",
    "name": "pork_sausage",
    "size": 2.410704803709866
  }, {
    "group_id": 3,
    "group_name": "vegetable",
    "name": "tomato",
    "size": 17.538673935360542
  }, {
    "group_id": 10,
    "group_name": "fish/seafood",
    "name": "cod",
    "size": 0.3079755035576481
  }, {
    "group_id": 6,
    "group_name": "herb",
    "name": "tarragon",
    "size": 0.842507699387589
  }, {
    "group_id": 3,
    "group_name": "vegetable",
    "name": "potato",
    "size": 6.274558391447485
  }, {
    "group_id": 7,
    "group_name": "dairy",
    "name": "feta_cheese",
    "size": 1.0991539523522955
  }, {
    "group_id": 7,
    "group_name": "dairy",
    "name": "emmental_cheese",
    "size": 0.0017699741583772875
  }, {
    "group_id": 5,
    "group_name": "alcoholic beverage",
    "name": "cabernet_sauvignon_wine",
    "size": 0.03008956069241389
  }, {
    "group_id": 4,
    "group_name": "cereal/crop",
    "name": "wheat_bread",
    "size": 0.14690785514531488
  }, {
    "group_id": 1,
    "group_name": "fruit",
    "name": "muscat_grape",
    "size": 0.0017699741583772875
  }, {
    "group_id": 7,
    "group_name": "dairy",
    "name": "munster_cheese",
    "size": 0.04778930227618677
  }, {
    "group_id": 11,
    "group_name": "plant derivative",
    "name": "coconut_oil",
    "size": 0.03008956069241389
  }, {
    "group_id": 13,
    "group_name": "animal product",
    "name": "egg",
    "size": 37.08272859216255
  }, {
    "group_id": 5,
    "group_name": "alcoholic beverage",
    "name": "wine",
    "size": 1.5522673368968813
  }]
};
/* harmony default export */ __webpack_exports__["default"] = (flavorData);

/***/ }),

/***/ "./src/data/umami_data.js":
/*!********************************!*\
  !*** ./src/data/umami_data.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var umamiData = {
  "links": [{
    "group_id": 3.0,
    "source": 86.0,
    "target": 84.0,
    "weight": 105.38129906785643
  }, {
    "group_id": 7.0,
    "source": 72.0,
    "target": 84.0,
    "weight": 91.6911514593961
  }, {
    "group_id": 7.0,
    "source": 72.0,
    "target": 84.0,
    "weight": 45.9086272886854
  }, {
    "group_id": 11.0,
    "source": 139.0,
    "target": 84.0,
    "weight": 68.52855054924743
  }, {
    "group_id": 10.0,
    "source": 33.0,
    "target": 84.0,
    "weight": 55.39079371103831
  }, {
    "group_id": 3.0,
    "source": 138.0,
    "target": 84.0,
    "weight": 55.08142738046823
  }, {
    "group_id": 2.0,
    "source": 45.0,
    "target": 84.0,
    "weight": 54.050206278568
  }, {
    "group_id": 7.0,
    "source": 129.0,
    "target": 84.0,
    "weight": 45.9086272886854
  }, {
    "group_id": 7.0,
    "source": 127.0,
    "target": 84.0,
    "weight": 45.9086272886854
  }, {
    "group_id": 7.0,
    "source": 67.0,
    "target": 84.0,
    "weight": 45.9086272886854
  }, {
    "group_id": 7.0,
    "source": 75.0,
    "target": 84.0,
    "weight": 45.9086272886854
  }, {
    "group_id": 7.0,
    "source": 83.0,
    "target": 84.0,
    "weight": 45.9086272886854
  }, {
    "group_id": 7.0,
    "source": 85.0,
    "target": 84.0,
    "weight": 45.9086272886854
  }, {
    "group_id": 7.0,
    "source": 104.0,
    "target": 84.0,
    "weight": 45.9086272886854
  }, {
    "group_id": 7.0,
    "source": 14.0,
    "target": 84.0,
    "weight": 45.9086272886854
  }, {
    "group_id": 7.0,
    "source": 107.0,
    "target": 84.0,
    "weight": 45.9086272886854
  }, {
    "group_id": 7.0,
    "source": 111.0,
    "target": 84.0,
    "weight": 45.9086272886854
  }, {
    "group_id": 7.0,
    "source": 69.0,
    "target": 84.0,
    "weight": 45.9086272886854
  }, {
    "group_id": 7.0,
    "source": 136.0,
    "target": 84.0,
    "weight": 45.9086272886854
  }, {
    "group_id": 7.0,
    "source": 149.0,
    "target": 84.0,
    "weight": 45.9086272886854
  }, {
    "group_id": 7.0,
    "source": 153.0,
    "target": 84.0,
    "weight": 45.9086272886854
  }, {
    "group_id": 3.0,
    "source": 98.0,
    "target": 84.0,
    "weight": 43.271883321506635
  }, {
    "group_id": 3.0,
    "source": 144.0,
    "target": 84.0,
    "weight": 41.99564408579489
  }, {
    "group_id": 3.0,
    "source": 10.0,
    "target": 84.0,
    "weight": 30.40224396979159
  }, {
    "group_id": 1.0,
    "source": 18.0,
    "target": 84.0,
    "weight": 26.03192893993836
  }, {
    "group_id": 7.0,
    "source": 71.0,
    "target": 84.0,
    "weight": 25.692951832013723
  }, {
    "group_id": 10.0,
    "source": 88.0,
    "target": 84.0,
    "weight": 22.94857784525663
  }, {
    "group_id": 3.0,
    "source": 110.0,
    "target": 84.0,
    "weight": 21.607990412786314
  }, {
    "group_id": 3.0,
    "source": 27.0,
    "target": 84.0,
    "weight": 19.892038499224306
  }, {
    "group_id": 2.0,
    "source": 9.0,
    "target": 84.0,
    "weight": 15.913587488093167
  }, {
    "group_id": 3.0,
    "source": 78.0,
    "target": 84.0,
    "weight": 14.248165408524269
  }, {
    "group_id": 3.0,
    "source": 147.0,
    "target": 84.0,
    "weight": 10.894015652483539
  }, {
    "group_id": 3.0,
    "source": 34.0,
    "target": 84.0,
    "weight": 8.774100059270477
  }, {
    "group_id": 3.0,
    "source": 135.0,
    "target": 84.0,
    "weight": 7.692692863744421
  }, {
    "group_id": 11.0,
    "source": 23.0,
    "target": 84.0,
    "weight": 7.585445869146796
  }, {
    "group_id": 3.0,
    "source": 86.0,
    "target": 9.0,
    "weight": 112.23047793962297
  }, {
    "group_id": 3.0,
    "source": 86.0,
    "target": 9.0,
    "weight": 26.132833497640902
  }, {
    "group_id": 7.0,
    "source": 72.0,
    "target": 9.0,
    "weight": 97.65054940626766
  }, {
    "group_id": 7.0,
    "source": 72.0,
    "target": 9.0,
    "weight": 22.73790146345092
  }, {
    "group_id": 7.0,
    "source": 72.0,
    "target": 9.0,
    "weight": 48.892424251133164
  }, {
    "group_id": 7.0,
    "source": 72.0,
    "target": 9.0,
    "weight": 11.38458648405873
  }, {
    "group_id": 11.0,
    "source": 139.0,
    "target": 9.0,
    "weight": 72.98251253952864
  }, {
    "group_id": 11.0,
    "source": 139.0,
    "target": 9.0,
    "weight": 16.993956396238783
  }, {
    "group_id": 10.0,
    "source": 33.0,
    "target": 9.0,
    "weight": 58.99087700220873
  }, {
    "group_id": 10.0,
    "source": 33.0,
    "target": 9.0,
    "weight": 13.736008211672003
  }, {
    "group_id": 3.0,
    "source": 138.0,
    "target": 9.0,
    "weight": 58.661403637907625
  }, {
    "group_id": 3.0,
    "source": 138.0,
    "target": 9.0,
    "weight": 13.659290436525216
  }, {
    "group_id": 2.0,
    "source": 45.0,
    "target": 9.0,
    "weight": 57.56315909023731
  }, {
    "group_id": 2.0,
    "source": 45.0,
    "target": 9.0,
    "weight": 13.40356451936927
  }, {
    "group_id": 7.0,
    "source": 129.0,
    "target": 9.0,
    "weight": 48.892424251133164
  }, {
    "group_id": 7.0,
    "source": 129.0,
    "target": 9.0,
    "weight": 11.38458648405873
  }, {
    "group_id": 7.0,
    "source": 127.0,
    "target": 9.0,
    "weight": 48.892424251133164
  }, {
    "group_id": 7.0,
    "source": 127.0,
    "target": 9.0,
    "weight": 11.38458648405873
  }, {
    "group_id": 7.0,
    "source": 67.0,
    "target": 9.0,
    "weight": 48.892424251133164
  }, {
    "group_id": 7.0,
    "source": 67.0,
    "target": 9.0,
    "weight": 11.38458648405873
  }, {
    "group_id": 7.0,
    "source": 75.0,
    "target": 9.0,
    "weight": 48.892424251133164
  }, {
    "group_id": 7.0,
    "source": 75.0,
    "target": 9.0,
    "weight": 11.38458648405873
  }, {
    "group_id": 7.0,
    "source": 83.0,
    "target": 9.0,
    "weight": 48.892424251133164
  }, {
    "group_id": 7.0,
    "source": 83.0,
    "target": 9.0,
    "weight": 11.38458648405873
  }, {
    "group_id": 7.0,
    "source": 85.0,
    "target": 9.0,
    "weight": 48.892424251133164
  }, {
    "group_id": 7.0,
    "source": 85.0,
    "target": 9.0,
    "weight": 11.38458648405873
  }, {
    "group_id": 7.0,
    "source": 104.0,
    "target": 9.0,
    "weight": 48.892424251133164
  }, {
    "group_id": 7.0,
    "source": 104.0,
    "target": 9.0,
    "weight": 11.38458648405873
  }, {
    "group_id": 7.0,
    "source": 14.0,
    "target": 9.0,
    "weight": 48.892424251133164
  }, {
    "group_id": 7.0,
    "source": 14.0,
    "target": 9.0,
    "weight": 11.38458648405873
  }, {
    "group_id": 7.0,
    "source": 107.0,
    "target": 9.0,
    "weight": 48.892424251133164
  }, {
    "group_id": 7.0,
    "source": 107.0,
    "target": 9.0,
    "weight": 11.38458648405873
  }, {
    "group_id": 7.0,
    "source": 111.0,
    "target": 9.0,
    "weight": 48.892424251133164
  }, {
    "group_id": 7.0,
    "source": 111.0,
    "target": 9.0,
    "weight": 11.38458648405873
  }, {
    "group_id": 7.0,
    "source": 69.0,
    "target": 9.0,
    "weight": 48.892424251133164
  }, {
    "group_id": 7.0,
    "source": 69.0,
    "target": 9.0,
    "weight": 11.38458648405873
  }, {
    "group_id": 7.0,
    "source": 136.0,
    "target": 9.0,
    "weight": 48.892424251133164
  }, {
    "group_id": 7.0,
    "source": 136.0,
    "target": 9.0,
    "weight": 11.38458648405873
  }, {
    "group_id": 7.0,
    "source": 149.0,
    "target": 9.0,
    "weight": 48.892424251133164
  }, {
    "group_id": 7.0,
    "source": 149.0,
    "target": 9.0,
    "weight": 11.38458648405873
  }, {
    "group_id": 7.0,
    "source": 153.0,
    "target": 9.0,
    "weight": 48.892424251133164
  }, {
    "group_id": 7.0,
    "source": 153.0,
    "target": 9.0,
    "weight": 11.38458648405873
  }, {
    "group_id": 3.0,
    "source": 98.0,
    "target": 9.0,
    "weight": 46.08430707798709
  }, {
    "group_id": 3.0,
    "source": 98.0,
    "target": 9.0,
    "weight": 10.730717233255298
  }, {
    "group_id": 3.0,
    "source": 144.0,
    "target": 9.0,
    "weight": 44.725119625790285
  }, {
    "group_id": 3.0,
    "source": 144.0,
    "target": 9.0,
    "weight": 10.414230838183094
  }, {
    "group_id": 3.0,
    "source": 10.0,
    "target": 9.0,
    "weight": 32.37821512306145
  }, {
    "group_id": 3.0,
    "source": 10.0,
    "target": 9.0,
    "weight": 7.5392577871490625
  }, {
    "group_id": 1.0,
    "source": 18.0,
    "target": 9.0,
    "weight": 27.723854730034628
  }, {
    "group_id": 1.0,
    "source": 18.0,
    "target": 9.0,
    "weight": 6.455491350242155
  }, {
    "group_id": 7.0,
    "source": 71.0,
    "target": 9.0,
    "weight": 27.362846058007566
  }, {
    "group_id": 7.0,
    "source": 71.0,
    "target": 9.0,
    "weight": 6.371430588045605
  }, {
    "group_id": 10.0,
    "source": 88.0,
    "target": 9.0,
    "weight": 24.44010353250036
  }, {
    "group_id": 10.0,
    "source": 88.0,
    "target": 9.0,
    "weight": 5.690870857945868
  }, {
    "group_id": 3.0,
    "source": 110.0,
    "target": 9.0,
    "weight": 23.01238562052894
  }, {
    "group_id": 3.0,
    "source": 110.0,
    "target": 9.0,
    "weight": 5.358427165643137
  }, {
    "group_id": 3.0,
    "source": 27.0,
    "target": 9.0,
    "weight": 21.18490669320552
  }, {
    "group_id": 3.0,
    "source": 27.0,
    "target": 9.0,
    "weight": 4.932899239495639
  }, {
    "group_id": 3.0,
    "source": 78.0,
    "target": 9.0,
    "weight": 15.17421428380584
  }, {
    "group_id": 3.0,
    "source": 78.0,
    "target": 9.0,
    "weight": 3.5333112949011336
  }, {
    "group_id": 3.0,
    "source": 147.0,
    "target": 9.0,
    "weight": 11.60206406805335
  }, {
    "group_id": 3.0,
    "source": 147.0,
    "target": 9.0,
    "weight": 2.7015371767596967
  }, {
    "group_id": 3.0,
    "source": 34.0,
    "target": 9.0,
    "weight": 9.344366143255877
  }, {
    "group_id": 3.0,
    "source": 34.0,
    "target": 9.0,
    "weight": 2.1758328846649757
  }, {
    "group_id": 3.0,
    "source": 135.0,
    "target": 9.0,
    "weight": 8.1926736942656
  }, {
    "group_id": 3.0,
    "source": 135.0,
    "target": 9.0,
    "weight": 1.9076616395407713
  }, {
    "group_id": 11.0,
    "source": 23.0,
    "target": 9.0,
    "weight": 8.078456261307885
  }, {
    "group_id": 11.0,
    "source": 23.0,
    "target": 9.0,
    "weight": 1.8810661441565524
  }, {
    "group_id": 3.0,
    "source": 86.0,
    "target": 145.0,
    "weight": 291.9657389424228
  }, {
    "group_id": 7.0,
    "source": 72.0,
    "target": 145.0,
    "weight": 254.03629512183363
  }, {
    "group_id": 7.0,
    "source": 72.0,
    "target": 145.0,
    "weight": 127.19283600349677
  }, {
    "group_id": 11.0,
    "source": 139.0,
    "target": 145.0,
    "weight": 189.8628037113187
  }, {
    "group_id": 10.0,
    "source": 33.0,
    "target": 145.0,
    "weight": 153.46379442558495
  }, {
    "group_id": 3.0,
    "source": 138.0,
    "target": 145.0,
    "weight": 152.60667489766342
  }, {
    "group_id": 2.0,
    "source": 45.0,
    "target": 145.0,
    "weight": 149.7496098045917
  }, {
    "group_id": 7.0,
    "source": 129.0,
    "target": 145.0,
    "weight": 127.19283600349677
  }, {
    "group_id": 7.0,
    "source": 127.0,
    "target": 145.0,
    "weight": 127.19283600349677
  }, {
    "group_id": 7.0,
    "source": 67.0,
    "target": 145.0,
    "weight": 127.19283600349677
  }, {
    "group_id": 7.0,
    "source": 75.0,
    "target": 145.0,
    "weight": 127.19283600349677
  }, {
    "group_id": 7.0,
    "source": 83.0,
    "target": 145.0,
    "weight": 127.19283600349677
  }, {
    "group_id": 7.0,
    "source": 85.0,
    "target": 145.0,
    "weight": 127.19283600349677
  }, {
    "group_id": 7.0,
    "source": 104.0,
    "target": 145.0,
    "weight": 127.19283600349677
  }, {
    "group_id": 7.0,
    "source": 14.0,
    "target": 145.0,
    "weight": 127.19283600349677
  }, {
    "group_id": 7.0,
    "source": 107.0,
    "target": 145.0,
    "weight": 127.19283600349677
  }, {
    "group_id": 7.0,
    "source": 111.0,
    "target": 145.0,
    "weight": 127.19283600349677
  }, {
    "group_id": 7.0,
    "source": 69.0,
    "target": 145.0,
    "weight": 127.19283600349677
  }, {
    "group_id": 7.0,
    "source": 136.0,
    "target": 145.0,
    "weight": 127.19283600349677
  }, {
    "group_id": 7.0,
    "source": 149.0,
    "target": 145.0,
    "weight": 127.19283600349677
  }, {
    "group_id": 7.0,
    "source": 153.0,
    "target": 145.0,
    "weight": 127.19283600349677
  }, {
    "group_id": 3.0,
    "source": 98.0,
    "target": 145.0,
    "weight": 119.88756545180605
  }, {
    "group_id": 3.0,
    "source": 144.0,
    "target": 145.0,
    "weight": 116.35166169262048
  }, {
    "group_id": 3.0,
    "source": 10.0,
    "target": 145.0,
    "weight": 84.23139309027096
  }, {
    "group_id": 1.0,
    "source": 18.0,
    "target": 145.0,
    "weight": 72.12315122583301
  }, {
    "group_id": 7.0,
    "source": 71.0,
    "target": 145.0,
    "weight": 71.18399311452471
  }, {
    "group_id": 10.0,
    "source": 88.0,
    "target": 145.0,
    "weight": 63.580526597548555
  }, {
    "group_id": 3.0,
    "source": 110.0,
    "target": 145.0,
    "weight": 59.86634197655532
  }, {
    "group_id": 3.0,
    "source": 27.0,
    "target": 145.0,
    "weight": 55.11218566168397
  }, {
    "group_id": 2.0,
    "source": 9.0,
    "target": 145.0,
    "weight": 44.089628532613276
  }, {
    "group_id": 3.0,
    "source": 78.0,
    "target": 145.0,
    "weight": 39.47546840730243
  }, {
    "group_id": 3.0,
    "source": 147.0,
    "target": 145.0,
    "weight": 30.182578485577356
  }, {
    "group_id": 3.0,
    "source": 34.0,
    "target": 145.0,
    "weight": 24.309214538246717
  }, {
    "group_id": 3.0,
    "source": 135.0,
    "target": 145.0,
    "weight": 21.3131056106455
  }, {
    "group_id": 11.0,
    "source": 23.0,
    "target": 145.0,
    "weight": 21.01597084096604
  }, {
    "group_id": 3.0,
    "source": 86.0,
    "target": 21.0,
    "weight": 206.90784685605405
  }, {
    "group_id": 7.0,
    "source": 72.0,
    "target": 21.0,
    "weight": 180.02832468405902
  }, {
    "group_id": 7.0,
    "source": 72.0,
    "target": 21.0,
    "weight": 90.13795909179807
  }, {
    "group_id": 11.0,
    "source": 139.0,
    "target": 21.0,
    "weight": 134.55038956372073
  }, {
    "group_id": 10.0,
    "source": 33.0,
    "target": 21.0,
    "weight": 108.75544298442401
  }, {
    "group_id": 3.0,
    "source": 138.0,
    "target": 21.0,
    "weight": 108.14802665995076
  }, {
    "group_id": 2.0,
    "source": 45.0,
    "target": 21.0,
    "weight": 106.12330557837333
  }, {
    "group_id": 7.0,
    "source": 129.0,
    "target": 21.0,
    "weight": 90.13795909179807
  }, {
    "group_id": 7.0,
    "source": 127.0,
    "target": 21.0,
    "weight": 90.13795909179807
  }, {
    "group_id": 7.0,
    "source": 67.0,
    "target": 21.0,
    "weight": 90.13795909179807
  }, {
    "group_id": 7.0,
    "source": 75.0,
    "target": 21.0,
    "weight": 90.13795909179807
  }, {
    "group_id": 7.0,
    "source": 83.0,
    "target": 21.0,
    "weight": 90.13795909179807
  }, {
    "group_id": 7.0,
    "source": 85.0,
    "target": 21.0,
    "weight": 90.13795909179807
  }, {
    "group_id": 7.0,
    "source": 104.0,
    "target": 21.0,
    "weight": 90.13795909179807
  }, {
    "group_id": 7.0,
    "source": 14.0,
    "target": 21.0,
    "weight": 90.13795909179807
  }, {
    "group_id": 7.0,
    "source": 107.0,
    "target": 21.0,
    "weight": 90.13795909179807
  }, {
    "group_id": 7.0,
    "source": 111.0,
    "target": 21.0,
    "weight": 90.13795909179807
  }, {
    "group_id": 7.0,
    "source": 69.0,
    "target": 21.0,
    "weight": 90.13795909179807
  }, {
    "group_id": 7.0,
    "source": 136.0,
    "target": 21.0,
    "weight": 90.13795909179807
  }, {
    "group_id": 7.0,
    "source": 149.0,
    "target": 21.0,
    "weight": 90.13795909179807
  }, {
    "group_id": 7.0,
    "source": 153.0,
    "target": 21.0,
    "weight": 90.13795909179807
  }, {
    "group_id": 3.0,
    "source": 98.0,
    "target": 21.0,
    "weight": 84.96092083372581
  }, {
    "group_id": 3.0,
    "source": 144.0,
    "target": 21.0,
    "weight": 82.45512602316556
  }, {
    "group_id": 3.0,
    "source": 10.0,
    "target": 21.0,
    "weight": 59.69240173563924
  }, {
    "group_id": 1.0,
    "source": 18.0,
    "target": 21.0,
    "weight": 51.11163379191401
  }, {
    "group_id": 7.0,
    "source": 71.0,
    "target": 21.0,
    "weight": 50.44607904781262
  }, {
    "group_id": 10.0,
    "source": 88.0,
    "target": 21.0,
    "weight": 45.05771775799743
  }, {
    "group_id": 3.0,
    "source": 110.0,
    "target": 21.0,
    "weight": 42.42558035194675
  }, {
    "group_id": 3.0,
    "source": 27.0,
    "target": 21.0,
    "weight": 39.056444472201875
  }, {
    "group_id": 2.0,
    "source": 9.0,
    "target": 21.0,
    "weight": 31.245070539476078
  }, {
    "group_id": 3.0,
    "source": 78.0,
    "target": 21.0,
    "weight": 27.975145992728486
  }, {
    "group_id": 3.0,
    "source": 147.0,
    "target": 21.0,
    "weight": 21.38953820278968
  }, {
    "group_id": 3.0,
    "source": 34.0,
    "target": 21.0,
    "weight": 17.227251584688197
  }, {
    "group_id": 3.0,
    "source": 135.0,
    "target": 21.0,
    "weight": 15.103994077140642
  }, {
    "group_id": 11.0,
    "source": 23.0,
    "target": 21.0,
    "weight": 14.89342308465659
  }, {
    "group_id": 3.0,
    "source": 86.0,
    "target": 41.0,
    "weight": 235.76791512215488
  }, {
    "group_id": 7.0,
    "source": 72.0,
    "target": 41.0,
    "weight": 205.13916421557428
  }, {
    "group_id": 7.0,
    "source": 72.0,
    "target": 41.0,
    "weight": 102.71064636434065
  }, {
    "group_id": 11.0,
    "source": 139.0,
    "target": 41.0,
    "weight": 153.31784322506465
  }, {
    "group_id": 10.0,
    "source": 33.0,
    "target": 41.0,
    "weight": 123.92494745964144
  }, {
    "group_id": 3.0,
    "source": 138.0,
    "target": 41.0,
    "weight": 123.23280705700196
  }, {
    "group_id": 2.0,
    "source": 45.0,
    "target": 41.0,
    "weight": 120.92567238153704
  }, {
    "group_id": 7.0,
    "source": 129.0,
    "target": 41.0,
    "weight": 102.71064636434065
  }, {
    "group_id": 7.0,
    "source": 127.0,
    "target": 41.0,
    "weight": 102.71064636434065
  }, {
    "group_id": 7.0,
    "source": 67.0,
    "target": 41.0,
    "weight": 102.71064636434065
  }, {
    "group_id": 7.0,
    "source": 75.0,
    "target": 41.0,
    "weight": 102.71064636434065
  }, {
    "group_id": 7.0,
    "source": 83.0,
    "target": 41.0,
    "weight": 102.71064636434065
  }, {
    "group_id": 7.0,
    "source": 85.0,
    "target": 41.0,
    "weight": 102.71064636434065
  }, {
    "group_id": 7.0,
    "source": 104.0,
    "target": 41.0,
    "weight": 102.71064636434065
  }, {
    "group_id": 7.0,
    "source": 14.0,
    "target": 41.0,
    "weight": 102.71064636434065
  }, {
    "group_id": 7.0,
    "source": 107.0,
    "target": 41.0,
    "weight": 102.71064636434065
  }, {
    "group_id": 7.0,
    "source": 111.0,
    "target": 41.0,
    "weight": 102.71064636434065
  }, {
    "group_id": 7.0,
    "source": 69.0,
    "target": 41.0,
    "weight": 102.71064636434065
  }, {
    "group_id": 7.0,
    "source": 136.0,
    "target": 41.0,
    "weight": 102.71064636434065
  }, {
    "group_id": 7.0,
    "source": 149.0,
    "target": 41.0,
    "weight": 102.71064636434065
  }, {
    "group_id": 7.0,
    "source": 153.0,
    "target": 41.0,
    "weight": 102.71064636434065
  }, {
    "group_id": 3.0,
    "source": 98.0,
    "target": 41.0,
    "weight": 96.81150075357758
  }, {
    "group_id": 3.0,
    "source": 144.0,
    "target": 41.0,
    "weight": 93.95619087922218
  }, {
    "group_id": 3.0,
    "source": 10.0,
    "target": 41.0,
    "weight": 68.01846000377523
  }, {
    "group_id": 1.0,
    "source": 18.0,
    "target": 41.0,
    "weight": 58.240823249154865
  }, {
    "group_id": 7.0,
    "source": 71.0,
    "target": 41.0,
    "weight": 57.48243512226274
  }, {
    "group_id": 10.0,
    "source": 88.0,
    "target": 41.0,
    "weight": 51.342490569514716
  }, {
    "group_id": 3.0,
    "source": 110.0,
    "target": 41.0,
    "weight": 48.34321549141031
  }, {
    "group_id": 3.0,
    "source": 27.0,
    "target": 41.0,
    "weight": 44.50414339143666
  }, {
    "group_id": 2.0,
    "source": 9.0,
    "target": 41.0,
    "weight": 35.60321781349297
  }, {
    "group_id": 3.0,
    "source": 78.0,
    "target": 41.0,
    "weight": 31.877195312617097
  }, {
    "group_id": 3.0,
    "source": 147.0,
    "target": 41.0,
    "weight": 24.373009067199867
  }, {
    "group_id": 3.0,
    "source": 34.0,
    "target": 41.0,
    "weight": 19.63015541035743
  }, {
    "group_id": 3.0,
    "source": 135.0,
    "target": 41.0,
    "weight": 17.210740180686535
  }, {
    "group_id": 11.0,
    "source": 23.0,
    "target": 41.0,
    "weight": 16.970798174438183
  }, {
    "group_id": 3.0,
    "source": 86.0,
    "target": 141.0,
    "weight": 608.6706562852851
  }, {
    "group_id": 7.0,
    "source": 72.0,
    "target": 141.0,
    "weight": 529.5978871773774
  }, {
    "group_id": 7.0,
    "source": 72.0,
    "target": 141.0,
    "weight": 265.16312237684286
  }, {
    "group_id": 11.0,
    "source": 139.0,
    "target": 141.0,
    "weight": 395.81328192045993
  }, {
    "group_id": 10.0,
    "source": 33.0,
    "target": 141.0,
    "weight": 319.93106042990746
  }, {
    "group_id": 3.0,
    "source": 138.0,
    "target": 141.0,
    "weight": 318.1441949316998
  }, {
    "group_id": 2.0,
    "source": 45.0,
    "target": 141.0,
    "weight": 312.187976604341
  }, {
    "group_id": 7.0,
    "source": 129.0,
    "target": 141.0,
    "weight": 265.16312237684286
  }, {
    "group_id": 7.0,
    "source": 127.0,
    "target": 141.0,
    "weight": 265.16312237684286
  }, {
    "group_id": 7.0,
    "source": 67.0,
    "target": 141.0,
    "weight": 265.16312237684286
  }, {
    "group_id": 7.0,
    "source": 75.0,
    "target": 141.0,
    "weight": 265.16312237684286
  }, {
    "group_id": 7.0,
    "source": 83.0,
    "target": 141.0,
    "weight": 265.16312237684286
  }, {
    "group_id": 7.0,
    "source": 85.0,
    "target": 141.0,
    "weight": 265.16312237684286
  }, {
    "group_id": 7.0,
    "source": 104.0,
    "target": 141.0,
    "weight": 265.16312237684286
  }, {
    "group_id": 7.0,
    "source": 14.0,
    "target": 141.0,
    "weight": 265.16312237684286
  }, {
    "group_id": 7.0,
    "source": 107.0,
    "target": 141.0,
    "weight": 265.16312237684286
  }, {
    "group_id": 7.0,
    "source": 111.0,
    "target": 141.0,
    "weight": 265.16312237684286
  }, {
    "group_id": 7.0,
    "source": 69.0,
    "target": 141.0,
    "weight": 265.16312237684286
  }, {
    "group_id": 7.0,
    "source": 136.0,
    "target": 141.0,
    "weight": 265.16312237684286
  }, {
    "group_id": 7.0,
    "source": 149.0,
    "target": 141.0,
    "weight": 265.16312237684286
  }, {
    "group_id": 7.0,
    "source": 153.0,
    "target": 141.0,
    "weight": 265.16312237684286
  }, {
    "group_id": 3.0,
    "source": 98.0,
    "target": 141.0,
    "weight": 249.93358264678562
  }, {
    "group_id": 3.0,
    "source": 144.0,
    "target": 141.0,
    "weight": 242.56216684484622
  }, {
    "group_id": 3.0,
    "source": 10.0,
    "target": 141.0,
    "weight": 175.59997792134646
  }, {
    "group_id": 1.0,
    "source": 18.0,
    "target": 141.0,
    "weight": 150.35752464999945
  }, {
    "group_id": 7.0,
    "source": 71.0,
    "target": 141.0,
    "weight": 148.3996305969633
  }, {
    "group_id": 10.0,
    "source": 88.0,
    "target": 141.0,
    "weight": 132.5484318511963
  }, {
    "group_id": 3.0,
    "source": 110.0,
    "target": 141.0,
    "weight": 124.80534802562974
  }, {
    "group_id": 3.0,
    "source": 27.0,
    "target": 141.0,
    "weight": 114.89420072890452
  }, {
    "group_id": 2.0,
    "source": 9.0,
    "target": 141.0,
    "weight": 91.9151104219539
  }, {
    "group_id": 3.0,
    "source": 78.0,
    "target": 141.0,
    "weight": 82.29581782326923
  }, {
    "group_id": 3.0,
    "source": 147.0,
    "target": 141.0,
    "weight": 62.92262209170167
  }, {
    "group_id": 3.0,
    "source": 34.0,
    "target": 141.0,
    "weight": 50.67822553553906
  }, {
    "group_id": 3.0,
    "source": 135.0,
    "target": 141.0,
    "weight": 44.432137916248685
  }, {
    "group_id": 11.0,
    "source": 23.0,
    "target": 141.0,
    "weight": 43.81269121020336
  }, {
    "group_id": 3.0,
    "source": 86.0,
    "target": 45.0,
    "weight": 6.026442141438466
  }, {
    "group_id": 7.0,
    "source": 72.0,
    "target": 45.0,
    "weight": 5.243543437399777
  }, {
    "group_id": 7.0,
    "source": 72.0,
    "target": 45.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 11.0,
    "source": 139.0,
    "target": 45.0,
    "weight": 3.9189433853510884
  }, {
    "group_id": 10.0,
    "source": 33.0,
    "target": 45.0,
    "weight": 3.1676342616822524
  }, {
    "group_id": 3.0,
    "source": 138.0,
    "target": 45.0,
    "weight": 3.1499425240762355
  }, {
    "group_id": 7.0,
    "source": 129.0,
    "target": 45.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 7.0,
    "source": 127.0,
    "target": 45.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 7.0,
    "source": 67.0,
    "target": 45.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 7.0,
    "source": 75.0,
    "target": 45.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 7.0,
    "source": 83.0,
    "target": 45.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 7.0,
    "source": 85.0,
    "target": 45.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 7.0,
    "source": 104.0,
    "target": 45.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 7.0,
    "source": 14.0,
    "target": 45.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 7.0,
    "source": 107.0,
    "target": 45.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 7.0,
    "source": 111.0,
    "target": 45.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 7.0,
    "source": 69.0,
    "target": 45.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 7.0,
    "source": 136.0,
    "target": 45.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 7.0,
    "source": 149.0,
    "target": 45.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 7.0,
    "source": 153.0,
    "target": 45.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 3.0,
    "source": 98.0,
    "target": 45.0,
    "weight": 2.4745899271958973
  }, {
    "group_id": 3.0,
    "source": 144.0,
    "target": 45.0,
    "weight": 2.40160561232521
  }, {
    "group_id": 3.0,
    "source": 10.0,
    "target": 45.0,
    "weight": 1.7386136427856087
  }, {
    "group_id": 1.0,
    "source": 18.0,
    "target": 45.0,
    "weight": 1.4886883628712817
  }, {
    "group_id": 7.0,
    "source": 71.0,
    "target": 45.0,
    "weight": 1.4693032732372606
  }, {
    "group_id": 10.0,
    "source": 88.0,
    "target": 45.0,
    "weight": 1.3123607113979836
  }, {
    "group_id": 3.0,
    "source": 110.0,
    "target": 45.0,
    "weight": 1.235696515105245
  }, {
    "group_id": 3.0,
    "source": 27.0,
    "target": 45.0,
    "weight": 1.13756634385054
  }, {
    "group_id": 2.0,
    "source": 9.0,
    "target": 45.0,
    "weight": 0.9100505982371672
  }, {
    "group_id": 3.0,
    "source": 78.0,
    "target": 45.0,
    "weight": 0.8148100774581112
  }, {
    "group_id": 3.0,
    "source": 147.0,
    "target": 45.0,
    "weight": 0.6229962583336799
  }, {
    "group_id": 3.0,
    "source": 34.0,
    "target": 45.0,
    "weight": 0.501764609262763
  }, {
    "group_id": 3.0,
    "source": 135.0,
    "target": 45.0,
    "weight": 0.4399221575866207
  }, {
    "group_id": 11.0,
    "source": 23.0,
    "target": 45.0,
    "weight": 0.4337890218832016
  }, {
    "group_id": 3.0,
    "source": 86.0,
    "target": 78.0,
    "weight": 6.026442141438466
  }, {
    "group_id": 7.0,
    "source": 72.0,
    "target": 78.0,
    "weight": 5.243543437399777
  }, {
    "group_id": 7.0,
    "source": 72.0,
    "target": 78.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 11.0,
    "source": 139.0,
    "target": 78.0,
    "weight": 3.9189433853510884
  }, {
    "group_id": 10.0,
    "source": 33.0,
    "target": 78.0,
    "weight": 3.1676342616822524
  }, {
    "group_id": 3.0,
    "source": 138.0,
    "target": 78.0,
    "weight": 3.1499425240762355
  }, {
    "group_id": 2.0,
    "source": 45.0,
    "target": 78.0,
    "weight": 3.0909700653895147
  }, {
    "group_id": 7.0,
    "source": 129.0,
    "target": 78.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 7.0,
    "source": 127.0,
    "target": 78.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 7.0,
    "source": 67.0,
    "target": 78.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 7.0,
    "source": 75.0,
    "target": 78.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 7.0,
    "source": 83.0,
    "target": 78.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 7.0,
    "source": 85.0,
    "target": 78.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 7.0,
    "source": 104.0,
    "target": 78.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 7.0,
    "source": 14.0,
    "target": 78.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 7.0,
    "source": 107.0,
    "target": 78.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 7.0,
    "source": 111.0,
    "target": 78.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 7.0,
    "source": 69.0,
    "target": 78.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 7.0,
    "source": 136.0,
    "target": 78.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 7.0,
    "source": 149.0,
    "target": 78.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 7.0,
    "source": 153.0,
    "target": 78.0,
    "weight": 2.625377449275672
  }, {
    "group_id": 3.0,
    "source": 98.0,
    "target": 78.0,
    "weight": 2.4745899271958973
  }, {
    "group_id": 3.0,
    "source": 144.0,
    "target": 78.0,
    "weight": 2.40160561232521
  }, {
    "group_id": 3.0,
    "source": 10.0,
    "target": 78.0,
    "weight": 1.7386136427856087
  }, {
    "group_id": 1.0,
    "source": 18.0,
    "target": 78.0,
    "weight": 1.4886883628712817
  }, {
    "group_id": 7.0,
    "source": 71.0,
    "target": 78.0,
    "weight": 1.4693032732372606
  }, {
    "group_id": 10.0,
    "source": 88.0,
    "target": 78.0,
    "weight": 1.3123607113979836
  }, {
    "group_id": 3.0,
    "source": 110.0,
    "target": 78.0,
    "weight": 1.235696515105245
  }, {
    "group_id": 3.0,
    "source": 27.0,
    "target": 78.0,
    "weight": 1.13756634385054
  }, {
    "group_id": 2.0,
    "source": 9.0,
    "target": 78.0,
    "weight": 0.9100505982371672
  }, {
    "group_id": 3.0,
    "source": 147.0,
    "target": 78.0,
    "weight": 0.6229962583336799
  }, {
    "group_id": 3.0,
    "source": 34.0,
    "target": 78.0,
    "weight": 0.501764609262763
  }, {
    "group_id": 3.0,
    "source": 135.0,
    "target": 78.0,
    "weight": 0.4399221575866207
  }, {
    "group_id": 11.0,
    "source": 23.0,
    "target": 78.0,
    "weight": 0.4337890218832016
  }, {
    "group_id": 3.0,
    "source": 86.0,
    "target": 110.0,
    "weight": 155.1057523331906
  }, {
    "group_id": 7.0,
    "source": 72.0,
    "target": 110.0,
    "weight": 134.95587125234178
  }, {
    "group_id": 7.0,
    "source": 72.0,
    "target": 110.0,
    "weight": 67.57073823516336
  }, {
    "group_id": 11.0,
    "source": 139.0,
    "target": 110.0,
    "weight": 100.86393395473172
  }, {
    "group_id": 10.0,
    "source": 33.0,
    "target": 110.0,
    "weight": 81.52709073505558
  }, {
    "group_id": 3.0,
    "source": 138.0,
    "target": 110.0,
    "weight": 81.07174905798313
  }, {
    "group_id": 2.0,
    "source": 45.0,
    "target": 110.0,
    "weight": 79.55394346774169
  }, {
    "group_id": 7.0,
    "source": 129.0,
    "target": 110.0,
    "weight": 67.57073823516336
  }, {
    "group_id": 7.0,
    "source": 127.0,
    "target": 110.0,
    "weight": 67.57073823516336
  }, {
    "group_id": 7.0,
    "source": 67.0,
    "target": 110.0,
    "weight": 67.57073823516336
  }, {
    "group_id": 7.0,
    "source": 75.0,
    "target": 110.0,
    "weight": 67.57073823516336
  }, {
    "group_id": 7.0,
    "source": 83.0,
    "target": 110.0,
    "weight": 67.57073823516336
  }, {
    "group_id": 7.0,
    "source": 85.0,
    "target": 110.0,
    "weight": 67.57073823516336
  }, {
    "group_id": 7.0,
    "source": 104.0,
    "target": 110.0,
    "weight": 67.57073823516336
  }, {
    "group_id": 7.0,
    "source": 14.0,
    "target": 110.0,
    "weight": 67.57073823516336
  }, {
    "group_id": 7.0,
    "source": 107.0,
    "target": 110.0,
    "weight": 67.57073823516336
  }, {
    "group_id": 7.0,
    "source": 111.0,
    "target": 110.0,
    "weight": 67.57073823516336
  }, {
    "group_id": 7.0,
    "source": 69.0,
    "target": 110.0,
    "weight": 67.57073823516336
  }, {
    "group_id": 7.0,
    "source": 136.0,
    "target": 110.0,
    "weight": 67.57073823516336
  }, {
    "group_id": 7.0,
    "source": 149.0,
    "target": 110.0,
    "weight": 67.57073823516336
  }, {
    "group_id": 7.0,
    "source": 153.0,
    "target": 110.0,
    "weight": 67.57073823516336
  }, {
    "group_id": 3.0,
    "source": 98.0,
    "target": 110.0,
    "weight": 63.68983943853799
  }, {
    "group_id": 3.0,
    "source": 144.0,
    "target": 110.0,
    "weight": 61.81140324005516
  }, {
    "group_id": 3.0,
    "source": 10.0,
    "target": 110.0,
    "weight": 44.747625672324624
  }, {
    "group_id": 1.0,
    "source": 18.0,
    "target": 110.0,
    "weight": 38.31516558088134
  }, {
    "group_id": 7.0,
    "source": 71.0,
    "target": 110.0,
    "weight": 37.81624120043197
  }, {
    "group_id": 10.0,
    "source": 88.0,
    "target": 110.0,
    "weight": 33.77692686605939
  }, {
    "group_id": 3.0,
    "source": 27.0,
    "target": 110.0,
    "weight": 29.278151096583716
  }, {
    "group_id": 2.0,
    "source": 9.0,
    "target": 110.0,
    "weight": 23.422457129432185
  }, {
    "group_id": 3.0,
    "source": 78.0,
    "target": 110.0,
    "weight": 20.971201101192232
  }, {
    "group_id": 3.0,
    "source": 147.0,
    "target": 110.0,
    "weight": 16.034386638372876
  }, {
    "group_id": 3.0,
    "source": 34.0,
    "target": 110.0,
    "weight": 12.914183092993843
  }, {
    "group_id": 3.0,
    "source": 135.0,
    "target": 110.0,
    "weight": 11.322510964027304
  }, {
    "group_id": 11.0,
    "source": 23.0,
    "target": 110.0,
    "weight": 11.164659182642191
  }, {
    "group_id": 7.0,
    "source": 72.0,
    "target": 86.0,
    "weight": 529.5978871773775
  }, {
    "group_id": 7.0,
    "source": 72.0,
    "target": 86.0,
    "weight": 265.1631223768429
  }, {
    "group_id": 11.0,
    "source": 139.0,
    "target": 86.0,
    "weight": 395.81328192046004
  }, {
    "group_id": 10.0,
    "source": 33.0,
    "target": 86.0,
    "weight": 319.9310604299075
  }, {
    "group_id": 3.0,
    "source": 138.0,
    "target": 86.0,
    "weight": 318.1441949316999
  }, {
    "group_id": 2.0,
    "source": 45.0,
    "target": 86.0,
    "weight": 312.18797660434103
  }, {
    "group_id": 7.0,
    "source": 129.0,
    "target": 86.0,
    "weight": 265.1631223768429
  }, {
    "group_id": 7.0,
    "source": 127.0,
    "target": 86.0,
    "weight": 265.1631223768429
  }, {
    "group_id": 7.0,
    "source": 67.0,
    "target": 86.0,
    "weight": 265.1631223768429
  }, {
    "group_id": 7.0,
    "source": 75.0,
    "target": 86.0,
    "weight": 265.1631223768429
  }, {
    "group_id": 7.0,
    "source": 83.0,
    "target": 86.0,
    "weight": 265.1631223768429
  }, {
    "group_id": 7.0,
    "source": 85.0,
    "target": 86.0,
    "weight": 265.1631223768429
  }, {
    "group_id": 7.0,
    "source": 104.0,
    "target": 86.0,
    "weight": 265.1631223768429
  }, {
    "group_id": 7.0,
    "source": 14.0,
    "target": 86.0,
    "weight": 265.1631223768429
  }, {
    "group_id": 7.0,
    "source": 107.0,
    "target": 86.0,
    "weight": 265.1631223768429
  }, {
    "group_id": 7.0,
    "source": 111.0,
    "target": 86.0,
    "weight": 265.1631223768429
  }, {
    "group_id": 7.0,
    "source": 69.0,
    "target": 86.0,
    "weight": 265.1631223768429
  }, {
    "group_id": 7.0,
    "source": 136.0,
    "target": 86.0,
    "weight": 265.1631223768429
  }, {
    "group_id": 7.0,
    "source": 149.0,
    "target": 86.0,
    "weight": 265.1631223768429
  }, {
    "group_id": 7.0,
    "source": 153.0,
    "target": 86.0,
    "weight": 265.1631223768429
  }, {
    "group_id": 3.0,
    "source": 98.0,
    "target": 86.0,
    "weight": 249.93358264678568
  }, {
    "group_id": 3.0,
    "source": 144.0,
    "target": 86.0,
    "weight": 242.56216684484627
  }, {
    "group_id": 3.0,
    "source": 10.0,
    "target": 86.0,
    "weight": 175.5999779213465
  }, {
    "group_id": 1.0,
    "source": 18.0,
    "target": 86.0,
    "weight": 150.35752464999948
  }, {
    "group_id": 7.0,
    "source": 71.0,
    "target": 86.0,
    "weight": 148.39963059696333
  }, {
    "group_id": 10.0,
    "source": 88.0,
    "target": 86.0,
    "weight": 132.54843185119634
  }, {
    "group_id": 3.0,
    "source": 110.0,
    "target": 86.0,
    "weight": 124.80534802562978
  }, {
    "group_id": 3.0,
    "source": 27.0,
    "target": 86.0,
    "weight": 114.89420072890455
  }, {
    "group_id": 2.0,
    "source": 9.0,
    "target": 86.0,
    "weight": 91.91511042195391
  }, {
    "group_id": 3.0,
    "source": 78.0,
    "target": 86.0,
    "weight": 82.29581782326925
  }, {
    "group_id": 3.0,
    "source": 147.0,
    "target": 86.0,
    "weight": 62.92262209170168
  }, {
    "group_id": 3.0,
    "source": 34.0,
    "target": 86.0,
    "weight": 50.67822553553907
  }, {
    "group_id": 3.0,
    "source": 135.0,
    "target": 86.0,
    "weight": 44.43213791624869
  }, {
    "group_id": 11.0,
    "source": 23.0,
    "target": 86.0,
    "weight": 43.81269121020337
  }],
  "nodes": []
};
/* harmony default export */ __webpack_exports__["default"] = (umamiData);

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3 */ "./node_modules/d3/d3.js");
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var ion_sound__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ion-sound */ "./node_modules/ion-sound/js/ion.sound.js");
/* harmony import */ var ion_sound__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(ion_sound__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _data_flavor_data__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./data/flavor_data */ "./src/data/flavor_data.js");
/* harmony import */ var _data_umami_data__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./data/umami_data */ "./src/data/umami_data.js");
/* harmony import */ var _Network__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Network */ "./src/Network.js");
/* harmony import */ var _Legend__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Legend */ "./src/Legend.js");

 // import 'd3-svg-legend/d3-legend';






console.log(_data_flavor_data__WEBPACK_IMPORTED_MODULE_3__["default"]);
console.log(_data_umami_data__WEBPACK_IMPORTED_MODULE_4__["default"]);

(function () {
  var isSp = navigator.userAgent.indexOf('iPhone') > 0 || navigator.userAgent.indexOf('iPad') > 0 || navigator.userAgent.indexOf('iPod') > 0 || navigator.userAgent.indexOf('Android') > 0;
  console.log(isSp); //make color function

  var color = function color(n) {
    return legendColor[n];
  };
  /* Checking if mouse button down or not? */
  // default : up


  var mouseDown = 0;

  document.body.onmousedown = function () {
    mouseDown = 1;
  };

  document.body.onmouseup = function () {
    mouseDown = 0;
  };
  /* //Legend// */


  var legendName = ["plant", "fruit", "meat", "vegetable", "cereal/crop", "alcoholic beverage", "herb", "dairy", "nut/seed/pulse", "spice", "fish/seafood", "plant derivative", "flower", "animal product"];
  var legendColor = ["#0fff0f", "#fc783f", "#ff4c4c", "#3cb37a", "#e8c59c", "#e73552", "#ad5d88", "#db830d", "#965d21", "#00afcc", "#434da2", "#b3e500", "#ff00ae", "#ff7fbf"]; // const ordinal = d3.scale.ordinal()
  //     .domain(legendName)
  //     .range(legendColor);

  var svg = d3__WEBPACK_IMPORTED_MODULE_1__["select"]("#myGraph");
  svg.append("g").attr("class", "legendOrdinal").attr("transform", "translate(25,50)").style("font-size", "1.2em").style("fill", "#352622").style({
    "font-family": ["Helvetica Neue", "Arial", "sans-serif"]
  }); // const legendOrdinal = d3.legend.color()
  //     .shape("path", d3.svg.symbol().type("circle").size(300)())
  //     .shapePadding(4)
  //     .labelOffset(2.5)
  //     //.title("Ingredient Categories")
  //     .scale(ordinal);
  // svg.select(".legendOrdinal")
  //     .call(legendOrdinal);
  // attr of legend circle

  var cell = jquery__WEBPACK_IMPORTED_MODULE_0___default()(".cell");
  var legendPathDefo = cell.children("path");
  jquery__WEBPACK_IMPORTED_MODULE_0___default()(legendPathDefo).css({
    "opacity": ["0.6"],
    "stroke-width": ["2"],
    "stroke": ["white"]
  }); // set pointer cursor at legend

  jquery__WEBPACK_IMPORTED_MODULE_0___default()(".legendCells").css({
    "cursor": ["pointer"]
  });
  /* //Setting// */

  var width = 1000;
  var height = 650;
  var nodes = _data_flavor_data__WEBPACK_IMPORTED_MODULE_3__["default"].nodes;
  var links = _data_flavor_data__WEBPACK_IMPORTED_MODULE_3__["default"].links;
  /* //Continually move// */
  //setInterval(function(){force.alpha(0.05);}, 125);
  //d3.timer(function(){
  //force.alpha(0.1);
  //});

  /* //Static Network// */
  // for picture
  //let keyDown = 0;

  var body = jquery__WEBPACK_IMPORTED_MODULE_0___default()("body");
  /*
  body.on("keydown", function(){
    if (keyDown===0){
      force.stop(); //force レイアウトの計算を終了
      node.each(function(d){ d.fixed = true });
      keyDown = 1
    }else{
      force.start(); //force レイアウトの計算を終了
      node.each(function(d){ d.fixed = false });
      keyDown = 0
    }
  });
  */
  // set svg elements

  var link = d3__WEBPACK_IMPORTED_MODULE_1__["select"]("#myGraph").selectAll("line").data(links).enter().append("line").attr("opacity", "0.5").attr("stroke-width", function (d) {
    return Math.sqrt(d.weight) * 0.1 + d.weight * 0.02;
  }).attr("stroke", function (d) {
    return color(d.group_id);
  });
  var node = d3__WEBPACK_IMPORTED_MODULE_1__["select"]("#myGraph").selectAll("circle").data(nodes).enter().append("circle").attr("opacity", "0.6").attr("r", function (d) {
    return Math.sqrt(d.size) * 5 + 3;
  }).attr("fill", function (d) {
    return color(d.group_id);
  }).attr("stroke", "#fffcf9").call(d3__WEBPACK_IMPORTED_MODULE_1__["drag"]().on("start", dragstarted).on("drag", dragged).on("end", dragended));
  var labels = d3__WEBPACK_IMPORTED_MODULE_1__["select"]("#myGraph").selectAll("text").data(nodes).enter().append("text").text(function (d) {
    return d.name;
  });
  labels.attr("font-size", ".7em").attr("font-weight", "300").attr("class", "nonDrag").attr("fill", "#352622").attr({
    "font-family": ["Futura", "Nunito", "Helvetica Neue", "Arial", "sans-serif"]
  });
  var simulation = d3__WEBPACK_IMPORTED_MODULE_1__["forceSimulation"]() //.force("center", d3.forceCenter([width / 2 - 50, height / 2 - 10]))
  .force("link", d3__WEBPACK_IMPORTED_MODULE_1__["forceLink"]() // .distance(function (d) {
  //   return Math.sqrt(d.weight) * 0.1 + d.weight * 0.02;
  // })
  .distance(100).strength(0.8).iterations(16)).force("collide", d3__WEBPACK_IMPORTED_MODULE_1__["forceCollide"]().radius(function (d) {
    return d.size;
  }).strength(0.7).iterations(16)).force("charge", d3__WEBPACK_IMPORTED_MODULE_1__["forceManyBody"]().strength(-300)).force("center", d3__WEBPACK_IMPORTED_MODULE_1__["forceCenter"](width / 2 + 50, height / 2 + 100)).force("x", d3__WEBPACK_IMPORTED_MODULE_1__["forceX"]().strength(0.2)).force("y", d3__WEBPACK_IMPORTED_MODULE_1__["forceY"]().strength(0.2));
  simulation.nodes(nodes).on("tick", ticked);
  simulation.force("link").links(links); // tick for simulation

  function ticked() {
    link.attr("x1", function (d) {
      return d.source.x;
    }).attr("y1", function (d) {
      return d.source.y;
    }).attr("x2", function (d) {
      return d.target.x;
    }).attr("y2", function (d) {
      return d.target.y;
    });
    node.attr("cx", function (d) {
      return d.x;
    }).attr("cy", function (d) {
      return d.y;
    });
    labels.attr("x", function (d) {
      return d.x;
    }).attr("y", function (d) {
      return d.y;
    });
  } // drag event


  function dragstarted(d) {
    if (!d3__WEBPACK_IMPORTED_MODULE_1__["event"].active) simulation.alphaTarget(0.3).restart();
    d.fx = d.x;
    d.fy = d.y;
    _Network__WEBPACK_IMPORTED_MODULE_5__["default"].mousedown(d, links, circle, labels);
    _Network__WEBPACK_IMPORTED_MODULE_5__["default"].cursor('grabbing', body, circle);
    ion.sound.play("grabNode", {
      volume: 0.2 // turn down

    });
  }

  function dragged(d) {
    d.fx = d3__WEBPACK_IMPORTED_MODULE_1__["event"].x;
    d.fy = d3__WEBPACK_IMPORTED_MODULE_1__["event"].y;
  }

  function dragended(d) {
    if (!d3__WEBPACK_IMPORTED_MODULE_1__["event"].active) simulation.alphaTarget(0);
    d.fx = null;
    d.fy = null;
    _Network__WEBPACK_IMPORTED_MODULE_5__["default"].mouseup(d, links, circle, labels);
    _Network__WEBPACK_IMPORTED_MODULE_5__["default"].cursor('grab', body, circle);
    ion.sound.play("releaseNode", {
      volume: 0.5
    });
  }

  body.on("mouseup", function (d) {
    _Network__WEBPACK_IMPORTED_MODULE_5__["default"].mouseup(d, links, circle, labels);
    _Network__WEBPACK_IMPORTED_MODULE_5__["default"].cursor('grab', body, circle);
    console.log('mouseup body');
  }); // Network dataを更新する
  ////////////////////////////////////////////////////////////////////////////////////////

  var dataTypeSelector = document.getElementById('dataType');

  dataTypeSelector.onchange = function () {
    // 選択されているoption要素を取得する
    var selectedType = this.options[this.selectedIndex].value;

    if (selectedType === 'Flavor') {
      force.linkDistance(100).gravity(0.20).charge(-300);
      nodes = _data_flavor_data__WEBPACK_IMPORTED_MODULE_3__["default"].nodes;
      links = _data_flavor_data__WEBPACK_IMPORTED_MODULE_3__["default"].links;
      update(selectedType);
    } else if (selectedType === 'Umami') {
      force.linkDistance(150).gravity(1.80).charge(-2500); // nodes = umamiData.nodes;

      links = _data_umami_data__WEBPACK_IMPORTED_MODULE_4__["default"].links;
      update(selectedType);
    }
  };

  var stopForceSetInterval;

  function update(selectedType) {
    var deleteLine = d3__WEBPACK_IMPORTED_MODULE_1__["selectAll"]("line"); // force.nodes(nodes).links(links);

    force.links(links);
    link = d3__WEBPACK_IMPORTED_MODULE_1__["select"]("#myGraph").selectAll(".line").data(links).enter().append("line");
    link.attr("opacity", "0.5").attr("stroke-width", function (d) {
      return Math.sqrt(d.weight) * 0.1 + d.weight * 0.02;
    }).attr("stroke", function (d) {
      return color(d.group_id);
    });
    deleteLine.remove();
    force.start();
    d3__WEBPACK_IMPORTED_MODULE_1__["selectAll"]("line").style("stroke-width", ""); // change line display order to back of node

    for (var i = links.length - 1; 0 <= i; i--) {
      var linkSVG = link[0][i];
      var firstSVG = linkSVG.parentNode.firstChild;

      if (firstSVG) {
        linkSVG.parentNode.insertBefore(linkSVG, firstSVG);
      }
    }

    clearInterval(stopForceSetInterval);
    stopForceSetInterval = setTimeout(function () {
      force.stop(); //force レイアウトの計算を終了
    }, 5000); // update Title

    document.getElementById('h1').textContent = selectedType + ' Network';
  } ////////////////////////////////////////////////////////////////////////////////////////


  var circle = jquery__WEBPACK_IMPORTED_MODULE_0___default()("circle");
  /* //Mouse action// */

  if (!isSp) {
    node.on("mouseover", function (d) {
      _Network__WEBPACK_IMPORTED_MODULE_5__["default"].mouseover(d, links, circle);

      if (mouseDown === 0) {
        ion.sound.play("mouseover", {
          volume: 0.1 // turn down

        });
      }
    });
    node.on("mouseout", function (d) {
      _Network__WEBPACK_IMPORTED_MODULE_5__["default"].mouseout(d, links, circle);
    }); // body.on("mouseup", function (d) {
    //   Network.mouseup(d, links, circle, labels);
    //   Network.cursor('grab', body, circle)
    //
    //   console.log('mouseup body')
    //
    // });
  } /////////////////////////////////////////////////////////////
  // for SmartPhone


  if (isSp) {
    var touchColored = 0;
    var touchmove = 0;
    svg.on("touchmove", function () {
      touchmove = 1;
    });
    node.on("touchstart", function (d) {
      _Network__WEBPACK_IMPORTED_MODULE_5__["default"].touchStart(d, links, circle);
    });
    node.on("touchend", function () {
      touchColored = 0;
    });
    svg.on("touchstart", function () {
      touchColored = 1;
    });
    svg.on("touchend", function () {
      if (touchmove === 0) {
        if (touchColored === 1) {
          d3__WEBPACK_IMPORTED_MODULE_1__["selectAll"]("circle").attr("class", "nodeReturnFade");
          d3__WEBPACK_IMPORTED_MODULE_1__["selectAll"]("line").attr("class", "lineReturnFade");
          circle.parent().children('text').attr("class", "nodeTextReturnFade");
        }
      }

      touchmove = 0;
    });
  }
  /*
  /////////////////////////////////////////////////////////////
   stopForceSetInterval = setTimeout(() => {
    force.stop(); //force レイアウトの計算を終了
    node.each(function (d) {
      //d.fixed = true
    })
  }, 10000);
  
  Legend.putId2Legend(cell, legendName);
  // ノードを更新する場合は再度クラスを付与する必要あり
  Legend.putClass2Node(nodes, circle);
    let legendFilter = d3.selectAll(".cell");
  if (!isSp) {
    legendFilter.on("mouseover", function () {
      const legendId = this.id.slice(9);
      Legend.mouseoverFilter(legendId, circle, cell, color);
       ion.sound.play("mouseover", {
        volume: 0.1 // turn down
      });
    });
     legendFilter.on("click", function () {
      const legendId = this.id.slice(9);
      Legend.mouseoverClick(legendId, circle, cell, color);
       ion.sound.play("legend");
    });
     // legend filter(mouse out)
    legendFilter.on("mouseout", function () {
      const legendId = this.id.slice(9);
      Legend.mouseoutFilter(legendId, circle, cell);
    });
  }
  */

  /* //sound// */
  // sound setting


  ion.sound({
    sounds: [{
      name: "opening"
    }, {
      name: "mouseover"
    }, {
      name: "grabNode"
    }, {
      name: "releaseNode"
    }, {
      name: "legend"
    }],
    // main config
    path: "src/data/sound/",
    preload: true,
    multiplay: true,
    volume: 0.5
  }); //opening sound

  if (!isSp) {
    ion.sound.play("opening");
  }
})();

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzL2QzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pb24tc291bmQvanMvaW9uLnNvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvTGVnZW5kLmpzIiwid2VicGFjazovLy8uL3NyYy9OZXR3b3JrLmpzIiwid2VicGFjazovLy8uL3NyYy9kYXRhL2ZsYXZvcl9kYXRhLmpzIiwid2VicGFjazovLy8uL3NyYy9kYXRhL3VtYW1pX2RhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbImdsb2JhbCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwidmVyc2lvbiIsImFzY2VuZGluZyIsImEiLCJiIiwiTmFOIiwiYmlzZWN0b3IiLCJjb21wYXJlIiwibGVuZ3RoIiwiYXNjZW5kaW5nQ29tcGFyYXRvciIsImxlZnQiLCJ4IiwibG8iLCJoaSIsIm1pZCIsInJpZ2h0IiwiZiIsImQiLCJhc2NlbmRpbmdCaXNlY3QiLCJiaXNlY3RSaWdodCIsImJpc2VjdExlZnQiLCJwYWlycyIsImFycmF5IiwicGFpciIsImkiLCJuIiwicCIsIkFycmF5IiwiY3Jvc3MiLCJ2YWx1ZXMwIiwidmFsdWVzMSIsInJlZHVjZSIsIm4wIiwibjEiLCJ2YWx1ZXMiLCJpMCIsImkxIiwidmFsdWUwIiwiZGVzY2VuZGluZyIsIm51bWJlciIsInZhcmlhbmNlIiwidmFsdWVvZiIsIm0iLCJtZWFuIiwidmFsdWUiLCJkZWx0YSIsInN1bSIsImlzTmFOIiwiZGV2aWF0aW9uIiwidiIsIk1hdGgiLCJzcXJ0IiwiZXh0ZW50IiwibWluIiwibWF4IiwicHJvdG90eXBlIiwic2xpY2UiLCJtYXAiLCJjb25zdGFudCIsImlkZW50aXR5Iiwic2VxdWVuY2UiLCJzdGFydCIsInN0b3AiLCJzdGVwIiwiYXJndW1lbnRzIiwiY2VpbCIsInJhbmdlIiwiZTEwIiwiZTUiLCJlMiIsInRpY2tzIiwiY291bnQiLCJyZXZlcnNlIiwidGlja0luY3JlbWVudCIsImlzRmluaXRlIiwiZmxvb3IiLCJwb3dlciIsImxvZyIsIkxOMTAiLCJlcnJvciIsInBvdyIsInRpY2tTdGVwIiwic3RlcDAiLCJhYnMiLCJzdGVwMSIsInRocmVzaG9sZFN0dXJnZXMiLCJMTjIiLCJoaXN0b2dyYW0iLCJkb21haW4iLCJ0aHJlc2hvbGQiLCJkYXRhIiwieHoiLCJ4MCIsIngxIiwidHoiLCJpc0FycmF5Iiwic2hpZnQiLCJwb3AiLCJiaW5zIiwiYmluIiwicHVzaCIsIl8iLCJ0aHJlc2hvbGRzIiwiY2FsbCIsInZhbHVlMSIsImZyZWVkbWFuRGlhY29uaXMiLCJzb3J0Iiwic2NvdHQiLCJtZWRpYW4iLCJudW1iZXJzIiwibWVyZ2UiLCJhcnJheXMiLCJqIiwibWVyZ2VkIiwicGVybXV0ZSIsImluZGV4ZXMiLCJwZXJtdXRlcyIsInNjYW4iLCJ4aSIsInhqIiwic2h1ZmZsZSIsInQiLCJyYW5kb20iLCJ0cmFuc3Bvc2UiLCJtYXRyaXgiLCJyb3ciLCJ6aXAiLCJzbGljZSQxIiwiaWRlbnRpdHkkMSIsInRvcCIsImJvdHRvbSIsImVwc2lsb24iLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInkiLCJudW1iZXIkMSIsInNjYWxlIiwiY2VudGVyIiwib2Zmc2V0IiwiYmFuZHdpZHRoIiwicm91bmQiLCJlbnRlcmluZyIsIl9fYXhpcyIsImF4aXMiLCJvcmllbnQiLCJ0aWNrQXJndW1lbnRzIiwidGlja1ZhbHVlcyIsInRpY2tGb3JtYXQiLCJ0aWNrU2l6ZUlubmVyIiwidGlja1NpemVPdXRlciIsInRpY2tQYWRkaW5nIiwiayIsInRyYW5zZm9ybSIsImNvbnRleHQiLCJhcHBseSIsImZvcm1hdCIsInNwYWNpbmciLCJyYW5nZTAiLCJyYW5nZTEiLCJwb3NpdGlvbiIsImNvcHkiLCJzZWxlY3Rpb24iLCJwYXRoIiwic2VsZWN0QWxsIiwidGljayIsIm9yZGVyIiwidGlja0V4aXQiLCJleGl0IiwidGlja0VudGVyIiwiZW50ZXIiLCJhcHBlbmQiLCJhdHRyIiwibGluZSIsInNlbGVjdCIsInRleHQiLCJpbnNlcnQiLCJ0cmFuc2l0aW9uIiwiZ2V0QXR0cmlidXRlIiwicGFyZW50Tm9kZSIsInJlbW92ZSIsImZpbHRlciIsImVhY2giLCJ0aWNrU2l6ZSIsImF4aXNUb3AiLCJheGlzUmlnaHQiLCJheGlzQm90dG9tIiwiYXhpc0xlZnQiLCJub29wIiwiZGlzcGF0Y2giLCJFcnJvciIsIkRpc3BhdGNoIiwicGFyc2VUeXBlbmFtZXMiLCJ0eXBlbmFtZXMiLCJ0eXBlcyIsInRyaW0iLCJzcGxpdCIsIm5hbWUiLCJpbmRleE9mIiwiaGFzT3duUHJvcGVydHkiLCJ0eXBlIiwiY29uc3RydWN0b3IiLCJvbiIsInR5cGVuYW1lIiwiY2FsbGJhY2siLCJUIiwiZ2V0Iiwic2V0IiwidGhhdCIsImFyZ3MiLCJjIiwiY29uY2F0IiwieGh0bWwiLCJuYW1lc3BhY2VzIiwic3ZnIiwieGxpbmsiLCJ4bWwiLCJ4bWxucyIsIm5hbWVzcGFjZSIsInByZWZpeCIsInNwYWNlIiwibG9jYWwiLCJjcmVhdG9ySW5oZXJpdCIsImRvY3VtZW50Iiwib3duZXJEb2N1bWVudCIsInVyaSIsIm5hbWVzcGFjZVVSSSIsImRvY3VtZW50RWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdG9yRml4ZWQiLCJmdWxsbmFtZSIsImNyZWF0b3IiLCJub25lIiwic2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yIiwic2VsZWN0aW9uX3NlbGVjdCIsImdyb3VwcyIsIl9ncm91cHMiLCJzdWJncm91cHMiLCJncm91cCIsInN1Ymdyb3VwIiwibm9kZSIsInN1Ym5vZGUiLCJfX2RhdGFfXyIsIlNlbGVjdGlvbiIsIl9wYXJlbnRzIiwiZW1wdHkiLCJzZWxlY3RvckFsbCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJzZWxlY3Rpb25fc2VsZWN0QWxsIiwicGFyZW50cyIsIm1hdGNoZXIiLCJtYXRjaGVzIiwic2VsZWN0aW9uX2ZpbHRlciIsIm1hdGNoIiwic3BhcnNlIiwidXBkYXRlIiwic2VsZWN0aW9uX2VudGVyIiwiX2VudGVyIiwiRW50ZXJOb2RlIiwicGFyZW50IiwiZGF0dW0iLCJfbmV4dCIsIl9wYXJlbnQiLCJhcHBlbmRDaGlsZCIsImNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwibmV4dCIsImNvbnN0YW50JDEiLCJrZXlQcmVmaXgiLCJiaW5kSW5kZXgiLCJncm91cExlbmd0aCIsImRhdGFMZW5ndGgiLCJiaW5kS2V5Iiwia2V5Iiwibm9kZUJ5S2V5VmFsdWUiLCJrZXlWYWx1ZXMiLCJrZXlWYWx1ZSIsInNlbGVjdGlvbl9kYXRhIiwic2l6ZSIsImJpbmQiLCJlbnRlckdyb3VwIiwidXBkYXRlR3JvdXAiLCJleGl0R3JvdXAiLCJwcmV2aW91cyIsIl9leGl0Iiwic2VsZWN0aW9uX2V4aXQiLCJzZWxlY3Rpb25fam9pbiIsIm9uZW50ZXIiLCJvbnVwZGF0ZSIsIm9uZXhpdCIsInNlbGVjdGlvbl9tZXJnZSIsInNlbGVjdGlvbiQkMSIsImdyb3VwczAiLCJncm91cHMxIiwibTAiLCJtMSIsIm1lcmdlcyIsImdyb3VwMCIsImdyb3VwMSIsInNlbGVjdGlvbl9vcmRlciIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwic2VsZWN0aW9uX3NvcnQiLCJhc2NlbmRpbmckMSIsImNvbXBhcmVOb2RlIiwic29ydGdyb3VwcyIsInNvcnRncm91cCIsInNlbGVjdGlvbl9jYWxsIiwic2VsZWN0aW9uX25vZGVzIiwibm9kZXMiLCJzZWxlY3Rpb25fbm9kZSIsInNlbGVjdGlvbl9zaXplIiwic2VsZWN0aW9uX2VtcHR5Iiwic2VsZWN0aW9uX2VhY2giLCJhdHRyUmVtb3ZlIiwicmVtb3ZlQXR0cmlidXRlIiwiYXR0clJlbW92ZU5TIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJhdHRyQ29uc3RhbnQiLCJzZXRBdHRyaWJ1dGUiLCJhdHRyQ29uc3RhbnROUyIsInNldEF0dHJpYnV0ZU5TIiwiYXR0ckZ1bmN0aW9uIiwiYXR0ckZ1bmN0aW9uTlMiLCJzZWxlY3Rpb25fYXR0ciIsImdldEF0dHJpYnV0ZU5TIiwiZGVmYXVsdFZpZXciLCJzdHlsZVJlbW92ZSIsInN0eWxlIiwicmVtb3ZlUHJvcGVydHkiLCJzdHlsZUNvbnN0YW50IiwicHJpb3JpdHkiLCJzZXRQcm9wZXJ0eSIsInN0eWxlRnVuY3Rpb24iLCJzZWxlY3Rpb25fc3R5bGUiLCJzdHlsZVZhbHVlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImdldENvbXB1dGVkU3R5bGUiLCJwcm9wZXJ0eVJlbW92ZSIsInByb3BlcnR5Q29uc3RhbnQiLCJwcm9wZXJ0eUZ1bmN0aW9uIiwic2VsZWN0aW9uX3Byb3BlcnR5IiwiY2xhc3NBcnJheSIsInN0cmluZyIsImNsYXNzTGlzdCIsIkNsYXNzTGlzdCIsIl9ub2RlIiwiX25hbWVzIiwiYWRkIiwiam9pbiIsInNwbGljZSIsImNvbnRhaW5zIiwiY2xhc3NlZEFkZCIsIm5hbWVzIiwibGlzdCIsImNsYXNzZWRSZW1vdmUiLCJjbGFzc2VkVHJ1ZSIsImNsYXNzZWRGYWxzZSIsImNsYXNzZWRGdW5jdGlvbiIsInNlbGVjdGlvbl9jbGFzc2VkIiwidGV4dFJlbW92ZSIsInRleHRDb250ZW50IiwidGV4dENvbnN0YW50IiwidGV4dEZ1bmN0aW9uIiwic2VsZWN0aW9uX3RleHQiLCJodG1sUmVtb3ZlIiwiaW5uZXJIVE1MIiwiaHRtbENvbnN0YW50IiwiaHRtbEZ1bmN0aW9uIiwic2VsZWN0aW9uX2h0bWwiLCJyYWlzZSIsIm5leHRTaWJsaW5nIiwic2VsZWN0aW9uX3JhaXNlIiwibG93ZXIiLCJwcmV2aW91c1NpYmxpbmciLCJmaXJzdENoaWxkIiwic2VsZWN0aW9uX2xvd2VyIiwic2VsZWN0aW9uX2FwcGVuZCIsImNyZWF0ZSIsImNvbnN0YW50TnVsbCIsInNlbGVjdGlvbl9pbnNlcnQiLCJiZWZvcmUiLCJyZW1vdmVDaGlsZCIsInNlbGVjdGlvbl9yZW1vdmUiLCJzZWxlY3Rpb25fY2xvbmVTaGFsbG93IiwiY2xvbmVOb2RlIiwic2VsZWN0aW9uX2Nsb25lRGVlcCIsInNlbGVjdGlvbl9jbG9uZSIsImRlZXAiLCJzZWxlY3Rpb25fZGF0dW0iLCJwcm9wZXJ0eSIsImZpbHRlckV2ZW50cyIsImV2ZW50IiwiZWxlbWVudCIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwiZmlsdGVyQ29udGV4dExpc3RlbmVyIiwibGlzdGVuZXIiLCJpbmRleCIsImNvbnRleHRMaXN0ZW5lciIsInJlbGF0ZWQiLCJyZWxhdGVkVGFyZ2V0IiwiZXZlbnQxIiwiZXZlbnQwIiwicGFyc2VUeXBlbmFtZXMkMSIsIm9uUmVtb3ZlIiwiX19vbiIsIm8iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2FwdHVyZSIsIm9uQWRkIiwid3JhcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJzZWxlY3Rpb25fb24iLCJjdXN0b21FdmVudCIsInNvdXJjZUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsInBhcmFtcyIsIndpbmRvdyIsIkN1c3RvbUV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImRldGFpbCIsImRpc3BhdGNoQ29uc3RhbnQiLCJkaXNwYXRjaEZ1bmN0aW9uIiwic2VsZWN0aW9uX2Rpc3BhdGNoIiwicm9vdCIsImNsYXNzZWQiLCJodG1sIiwiY2xvbmUiLCJuZXh0SWQiLCJMb2NhbCIsInRvU3RyaW5nIiwiaWQiLCJjdXJyZW50Iiwic291cmNlIiwicG9pbnQiLCJvd25lclNWR0VsZW1lbnQiLCJjcmVhdGVTVkdQb2ludCIsImNsaWVudFgiLCJjbGllbnRZIiwibWF0cml4VHJhbnNmb3JtIiwiZ2V0U2NyZWVuQ1RNIiwiaW52ZXJzZSIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbGllbnRMZWZ0IiwiY2xpZW50VG9wIiwibW91c2UiLCJjaGFuZ2VkVG91Y2hlcyIsInRvdWNoIiwidG91Y2hlcyIsImlkZW50aWZpZXIiLCJwb2ludHMiLCJub3Byb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwibm9ldmVudCIsInByZXZlbnREZWZhdWx0IiwiZHJhZ0Rpc2FibGUiLCJ2aWV3IiwiX19ub3NlbGVjdCIsIk1velVzZXJTZWxlY3QiLCJ5ZXNkcmFnIiwibm9jbGljayIsInNldFRpbWVvdXQiLCJjb25zdGFudCQyIiwiRHJhZ0V2ZW50IiwidGFyZ2V0Iiwic3ViamVjdCIsImFjdGl2ZSIsImR4IiwiZHkiLCJkZWZhdWx0RmlsdGVyIiwiYnV0dG9uIiwiZGVmYXVsdENvbnRhaW5lciIsImRlZmF1bHRTdWJqZWN0IiwiZGVmYXVsdFRvdWNoYWJsZSIsImRyYWciLCJjb250YWluZXIiLCJ0b3VjaGFibGUiLCJnZXN0dXJlcyIsImxpc3RlbmVycyIsIm1vdXNlZG93bngiLCJtb3VzZWRvd255IiwibW91c2Vtb3ZpbmciLCJ0b3VjaGVuZGluZyIsImNsaWNrRGlzdGFuY2UyIiwibW91c2Vkb3duZWQiLCJ0b3VjaHN0YXJ0ZWQiLCJ0b3VjaG1vdmVkIiwidG91Y2hlbmRlZCIsImdlc3R1cmUiLCJiZWZvcmVzdGFydCIsIm1vdXNlbW92ZWQiLCJtb3VzZXVwcGVkIiwidG91Y2hlcyQkMSIsImNsZWFyVGltZW91dCIsInBvaW50JCQxIiwicyIsInN1Ymxpc3RlbmVycyIsInAwIiwiY2xpY2tEaXN0YW5jZSIsImV4dGVuZCIsImRlZmluaXRpb24iLCJPYmplY3QiLCJDb2xvciIsImRhcmtlciIsImJyaWdodGVyIiwicmVJIiwicmVOIiwicmVQIiwicmVIZXgzIiwicmVIZXg2IiwicmVSZ2JJbnRlZ2VyIiwiUmVnRXhwIiwicmVSZ2JQZXJjZW50IiwicmVSZ2JhSW50ZWdlciIsInJlUmdiYVBlcmNlbnQiLCJyZUhzbFBlcmNlbnQiLCJyZUhzbGFQZXJjZW50IiwibmFtZWQiLCJhbGljZWJsdWUiLCJhbnRpcXVld2hpdGUiLCJhcXVhIiwiYXF1YW1hcmluZSIsImF6dXJlIiwiYmVpZ2UiLCJiaXNxdWUiLCJibGFjayIsImJsYW5jaGVkYWxtb25kIiwiYmx1ZSIsImJsdWV2aW9sZXQiLCJicm93biIsImJ1cmx5d29vZCIsImNhZGV0Ymx1ZSIsImNoYXJ0cmV1c2UiLCJjaG9jb2xhdGUiLCJjb3JhbCIsImNvcm5mbG93ZXJibHVlIiwiY29ybnNpbGsiLCJjcmltc29uIiwiY3lhbiIsImRhcmtibHVlIiwiZGFya2N5YW4iLCJkYXJrZ29sZGVucm9kIiwiZGFya2dyYXkiLCJkYXJrZ3JlZW4iLCJkYXJrZ3JleSIsImRhcmtraGFraSIsImRhcmttYWdlbnRhIiwiZGFya29saXZlZ3JlZW4iLCJkYXJrb3JhbmdlIiwiZGFya29yY2hpZCIsImRhcmtyZWQiLCJkYXJrc2FsbW9uIiwiZGFya3NlYWdyZWVuIiwiZGFya3NsYXRlYmx1ZSIsImRhcmtzbGF0ZWdyYXkiLCJkYXJrc2xhdGVncmV5IiwiZGFya3R1cnF1b2lzZSIsImRhcmt2aW9sZXQiLCJkZWVwcGluayIsImRlZXBza3libHVlIiwiZGltZ3JheSIsImRpbWdyZXkiLCJkb2RnZXJibHVlIiwiZmlyZWJyaWNrIiwiZmxvcmFsd2hpdGUiLCJmb3Jlc3RncmVlbiIsImZ1Y2hzaWEiLCJnYWluc2Jvcm8iLCJnaG9zdHdoaXRlIiwiZ29sZCIsImdvbGRlbnJvZCIsImdyYXkiLCJncmVlbiIsImdyZWVueWVsbG93IiwiZ3JleSIsImhvbmV5ZGV3IiwiaG90cGluayIsImluZGlhbnJlZCIsImluZGlnbyIsIml2b3J5Iiwia2hha2kiLCJsYXZlbmRlciIsImxhdmVuZGVyYmx1c2giLCJsYXduZ3JlZW4iLCJsZW1vbmNoaWZmb24iLCJsaWdodGJsdWUiLCJsaWdodGNvcmFsIiwibGlnaHRjeWFuIiwibGlnaHRnb2xkZW5yb2R5ZWxsb3ciLCJsaWdodGdyYXkiLCJsaWdodGdyZWVuIiwibGlnaHRncmV5IiwibGlnaHRwaW5rIiwibGlnaHRzYWxtb24iLCJsaWdodHNlYWdyZWVuIiwibGlnaHRza3libHVlIiwibGlnaHRzbGF0ZWdyYXkiLCJsaWdodHNsYXRlZ3JleSIsImxpZ2h0c3RlZWxibHVlIiwibGlnaHR5ZWxsb3ciLCJsaW1lIiwibGltZWdyZWVuIiwibGluZW4iLCJtYWdlbnRhIiwibWFyb29uIiwibWVkaXVtYXF1YW1hcmluZSIsIm1lZGl1bWJsdWUiLCJtZWRpdW1vcmNoaWQiLCJtZWRpdW1wdXJwbGUiLCJtZWRpdW1zZWFncmVlbiIsIm1lZGl1bXNsYXRlYmx1ZSIsIm1lZGl1bXNwcmluZ2dyZWVuIiwibWVkaXVtdHVycXVvaXNlIiwibWVkaXVtdmlvbGV0cmVkIiwibWlkbmlnaHRibHVlIiwibWludGNyZWFtIiwibWlzdHlyb3NlIiwibW9jY2FzaW4iLCJuYXZham93aGl0ZSIsIm5hdnkiLCJvbGRsYWNlIiwib2xpdmUiLCJvbGl2ZWRyYWIiLCJvcmFuZ2UiLCJvcmFuZ2VyZWQiLCJvcmNoaWQiLCJwYWxlZ29sZGVucm9kIiwicGFsZWdyZWVuIiwicGFsZXR1cnF1b2lzZSIsInBhbGV2aW9sZXRyZWQiLCJwYXBheWF3aGlwIiwicGVhY2hwdWZmIiwicGVydSIsInBpbmsiLCJwbHVtIiwicG93ZGVyYmx1ZSIsInB1cnBsZSIsInJlYmVjY2FwdXJwbGUiLCJyZWQiLCJyb3N5YnJvd24iLCJyb3lhbGJsdWUiLCJzYWRkbGVicm93biIsInNhbG1vbiIsInNhbmR5YnJvd24iLCJzZWFncmVlbiIsInNlYXNoZWxsIiwic2llbm5hIiwic2lsdmVyIiwic2t5Ymx1ZSIsInNsYXRlYmx1ZSIsInNsYXRlZ3JheSIsInNsYXRlZ3JleSIsInNub3ciLCJzcHJpbmdncmVlbiIsInN0ZWVsYmx1ZSIsInRhbiIsInRlYWwiLCJ0aGlzdGxlIiwidG9tYXRvIiwidHVycXVvaXNlIiwidmlvbGV0Iiwid2hlYXQiLCJ3aGl0ZSIsIndoaXRlc21va2UiLCJ5ZWxsb3ciLCJ5ZWxsb3dncmVlbiIsImNvbG9yIiwiZGlzcGxheWFibGUiLCJyZ2IiLCJoZXgiLCJ0b0xvd2VyQ2FzZSIsImV4ZWMiLCJwYXJzZUludCIsIlJnYiIsInJnYm4iLCJyZ2JhIiwiaHNsYSIsInIiLCJnIiwicmdiQ29udmVydCIsIm9wYWNpdHkiLCJoIiwibCIsIkhzbCIsImhzbENvbnZlcnQiLCJoc2wiLCJtMiIsImhzbDJyZ2IiLCJkZWcycmFkIiwiUEkiLCJyYWQyZGVnIiwiSyIsIlhuIiwiWW4iLCJabiIsInQwIiwidDEiLCJ0MiIsInQzIiwibGFiQ29udmVydCIsIkxhYiIsIkhjbCIsImNvcyIsInNpbiIsInJnYjJscmdiIiwieHl6MmxhYiIsInoiLCJsYWIiLCJsYWIyeHl6IiwibHJnYjJyZ2IiLCJoY2xDb252ZXJ0IiwiYXRhbjIiLCJsY2giLCJoY2wiLCJBIiwiQiIsIkMiLCJEIiwiRSIsIkVEIiwiRUIiLCJCQ19EQSIsImN1YmVoZWxpeENvbnZlcnQiLCJDdWJlaGVsaXgiLCJibCIsImN1YmVoZWxpeCIsImNvc2giLCJzaW5oIiwiYmFzaXMiLCJ2MCIsInYxIiwidjIiLCJ2MyIsImJhc2lzJDEiLCJiYXNpc0Nsb3NlZCIsImNvbnN0YW50JDMiLCJsaW5lYXIiLCJleHBvbmVudGlhbCIsImh1ZSIsImdhbW1hIiwibm9nYW1tYSIsImludGVycG9sYXRlUmdiIiwicmdiR2FtbWEiLCJjb2xvciQkMSIsInJnYiQkMSIsImVuZCIsInJnYlNwbGluZSIsInNwbGluZSIsImNvbG9ycyIsInJnYkJhc2lzIiwicmdiQmFzaXNDbG9zZWQiLCJhcnJheSQxIiwibmIiLCJuYSIsImludGVycG9sYXRlVmFsdWUiLCJkYXRlIiwiRGF0ZSIsInNldFRpbWUiLCJpbnRlcnBvbGF0ZU51bWJlciIsIm9iamVjdCIsInJlQSIsInJlQiIsInplcm8iLCJvbmUiLCJpbnRlcnBvbGF0ZVN0cmluZyIsImJpIiwibGFzdEluZGV4IiwiYW0iLCJibSIsImJzIiwicSIsInZhbHVlT2YiLCJkaXNjcmV0ZSIsImh1ZSQxIiwiaW50ZXJwb2xhdGVSb3VuZCIsImRlZ3JlZXMiLCJpZGVudGl0eSQyIiwicm90YXRlIiwic2tld1giLCJzY2FsZVgiLCJzY2FsZVkiLCJkZWNvbXBvc2UiLCJlIiwiYXRhbiIsImNzc05vZGUiLCJjc3NSb290IiwiY3NzVmlldyIsInN2Z05vZGUiLCJwYXJzZUNzcyIsInBhcnNlU3ZnIiwiYmFzZVZhbCIsImNvbnNvbGlkYXRlIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm0iLCJwYXJzZSIsInB4Q29tbWEiLCJweFBhcmVuIiwiZGVnUGFyZW4iLCJ0cmFuc2xhdGUiLCJ4YSIsInlhIiwieGIiLCJ5YiIsImludGVycG9sYXRlVHJhbnNmb3JtQ3NzIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmciLCJyaG8iLCJTUVJUMiIsInJobzIiLCJyaG80IiwiZXBzaWxvbjIiLCJleHAiLCJ0YW5oIiwiaW50ZXJwb2xhdGVab29tIiwicDEiLCJ1eDAiLCJ1eTAiLCJ3MCIsInV4MSIsInV5MSIsIncxIiwiZDIiLCJTIiwiZDEiLCJiMCIsImIxIiwicjAiLCJyMSIsImNvc2hyMCIsInUiLCJkdXJhdGlvbiIsImhzbCQxIiwiaHVlJCQxIiwiaHNsJDIiLCJoc2xMb25nIiwibGFiJDEiLCJoY2wkMSIsImhjbCQyIiwiaGNsTG9uZyIsImN1YmVoZWxpeCQxIiwiY3ViZWhlbGl4R2FtbWEiLCJjdWJlaGVsaXgkJDEiLCJjdWJlaGVsaXgkMiIsImN1YmVoZWxpeExvbmciLCJwaWVjZXdpc2UiLCJpbnRlcnBvbGF0ZSIsIkkiLCJxdWFudGl6ZSIsImludGVycG9sYXRvciIsInNhbXBsZXMiLCJmcmFtZSIsInRpbWVvdXQiLCJpbnRlcnZhbCIsInBva2VEZWxheSIsInRhc2tIZWFkIiwidGFza1RhaWwiLCJjbG9ja0xhc3QiLCJjbG9ja05vdyIsImNsb2NrU2tldyIsImNsb2NrIiwicGVyZm9ybWFuY2UiLCJub3ciLCJzZXRGcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNsZWFyTm93IiwiVGltZXIiLCJfY2FsbCIsIl90aW1lIiwidGltZXIiLCJyZXN0YXJ0IiwiZGVsYXkiLCJ0aW1lIiwiVHlwZUVycm9yIiwic2xlZXAiLCJJbmZpbml0eSIsInRpbWVyRmx1c2giLCJ3YWtlIiwibmFwIiwicG9rZSIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsInRpbWVvdXQkMSIsImVsYXBzZWQiLCJpbnRlcnZhbCQxIiwidG90YWwiLCJlbXB0eU9uIiwiZW1wdHlUd2VlbiIsIkNSRUFURUQiLCJTQ0hFRFVMRUQiLCJTVEFSVElORyIsIlNUQVJURUQiLCJSVU5OSU5HIiwiRU5ESU5HIiwiRU5ERUQiLCJzY2hlZHVsZSIsInRpbWluZyIsInNjaGVkdWxlcyIsIl9fdHJhbnNpdGlvbiIsImNyZWF0ZSQxIiwidHdlZW4iLCJlYXNlIiwic3RhdGUiLCJpbml0IiwiZ2V0JDEiLCJzZXQkMSIsInNlbGYiLCJpbnRlcnJ1cHQiLCJzY2hlZHVsZSQkMSIsInNlbGVjdGlvbl9pbnRlcnJ1cHQiLCJ0d2VlblJlbW92ZSIsInR3ZWVuMCIsInR3ZWVuMSIsInR3ZWVuRnVuY3Rpb24iLCJ0cmFuc2l0aW9uX3R3ZWVuIiwiX2lkIiwidHdlZW5WYWx1ZSIsImF0dHJSZW1vdmUkMSIsImF0dHJSZW1vdmVOUyQxIiwiYXR0ckNvbnN0YW50JDEiLCJpbnRlcnBvbGF0ZSQkMSIsInN0cmluZzAwIiwic3RyaW5nMSIsImludGVycG9sYXRlMCIsInN0cmluZzAiLCJhdHRyQ29uc3RhbnROUyQxIiwiYXR0ckZ1bmN0aW9uJDEiLCJzdHJpbmcxMCIsImF0dHJGdW5jdGlvbk5TJDEiLCJ0cmFuc2l0aW9uX2F0dHIiLCJhdHRyVHdlZW4iLCJhdHRySW50ZXJwb2xhdGUiLCJhdHRySW50ZXJwb2xhdGVOUyIsImF0dHJUd2Vlbk5TIiwiX3ZhbHVlIiwidHJhbnNpdGlvbl9hdHRyVHdlZW4iLCJkZWxheUZ1bmN0aW9uIiwiZGVsYXlDb25zdGFudCIsInRyYW5zaXRpb25fZGVsYXkiLCJkdXJhdGlvbkZ1bmN0aW9uIiwiZHVyYXRpb25Db25zdGFudCIsInRyYW5zaXRpb25fZHVyYXRpb24iLCJlYXNlQ29uc3RhbnQiLCJ0cmFuc2l0aW9uX2Vhc2UiLCJ0cmFuc2l0aW9uX2ZpbHRlciIsIlRyYW5zaXRpb24iLCJfbmFtZSIsInRyYW5zaXRpb25fbWVyZ2UiLCJ0cmFuc2l0aW9uJCQxIiwiZXZlcnkiLCJvbkZ1bmN0aW9uIiwib24wIiwib24xIiwic2l0IiwidHJhbnNpdGlvbl9vbiIsInJlbW92ZUZ1bmN0aW9uIiwidHJhbnNpdGlvbl9yZW1vdmUiLCJ0cmFuc2l0aW9uX3NlbGVjdCIsInNlbGVjdCQkMSIsInRyYW5zaXRpb25fc2VsZWN0QWxsIiwiY2hpbGRyZW4iLCJpbmhlcml0IiwiU2VsZWN0aW9uJDEiLCJ0cmFuc2l0aW9uX3NlbGVjdGlvbiIsInN0eWxlTnVsbCIsInN0eWxlUmVtb3ZlJDEiLCJzdHlsZUNvbnN0YW50JDEiLCJzdHlsZUZ1bmN0aW9uJDEiLCJzdHlsZU1heWJlUmVtb3ZlIiwibGlzdGVuZXIwIiwidW5kZWZpbmVkIiwidHJhbnNpdGlvbl9zdHlsZSIsInN0eWxlVHdlZW4iLCJzdHlsZUludGVycG9sYXRlIiwidHJhbnNpdGlvbl9zdHlsZVR3ZWVuIiwidGV4dENvbnN0YW50JDEiLCJ0ZXh0RnVuY3Rpb24kMSIsInRyYW5zaXRpb25fdGV4dCIsInRyYW5zaXRpb25fdHJhbnNpdGlvbiIsImlkMCIsImlkMSIsIm5ld0lkIiwidHJhbnNpdGlvbl9lbmQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImNhbmNlbCIsInNlbGVjdGlvbl9wcm90b3R5cGUiLCJsaW5lYXIkMSIsInF1YWRJbiIsInF1YWRPdXQiLCJxdWFkSW5PdXQiLCJjdWJpY0luIiwiY3ViaWNPdXQiLCJjdWJpY0luT3V0IiwiZXhwb25lbnQiLCJwb2x5SW4iLCJjdXN0b20iLCJwb2x5T3V0IiwicG9seUluT3V0IiwicGkiLCJoYWxmUGkiLCJzaW5JbiIsInNpbk91dCIsInNpbkluT3V0IiwiZXhwSW4iLCJleHBPdXQiLCJleHBJbk91dCIsImNpcmNsZUluIiwiY2lyY2xlT3V0IiwiY2lyY2xlSW5PdXQiLCJiMiIsImIzIiwiYjQiLCJiNSIsImI2IiwiYjciLCJiOCIsImI5IiwiYm91bmNlSW4iLCJib3VuY2VPdXQiLCJib3VuY2VJbk91dCIsIm92ZXJzaG9vdCIsImJhY2tJbiIsImJhY2tPdXQiLCJiYWNrSW5PdXQiLCJ0YXUiLCJhbXBsaXR1ZGUiLCJwZXJpb2QiLCJlbGFzdGljSW4iLCJhc2luIiwiZWxhc3RpY091dCIsImVsYXN0aWNJbk91dCIsImRlZmF1bHRUaW1pbmciLCJzZWxlY3Rpb25fdHJhbnNpdGlvbiIsInJvb3QkMSIsImNvbnN0YW50JDQiLCJCcnVzaEV2ZW50Iiwibm9wcm9wYWdhdGlvbiQxIiwibm9ldmVudCQxIiwiTU9ERV9EUkFHIiwiTU9ERV9TUEFDRSIsIk1PREVfSEFORExFIiwiTU9ERV9DRU5URVIiLCJYIiwiaGFuZGxlcyIsImlucHV0Iiwib3V0cHV0IiwieHkiLCJZIiwiWFkiLCJjdXJzb3JzIiwib3ZlcmxheSIsInciLCJudyIsIm5lIiwic2UiLCJzdyIsImZsaXBYIiwiZmxpcFkiLCJzaWduc1giLCJzaWduc1kiLCJkZWZhdWx0RmlsdGVyJDEiLCJkZWZhdWx0RXh0ZW50Iiwid2lkdGgiLCJoZWlnaHQiLCJsb2NhbCQxIiwiX19icnVzaCIsImVtcHR5JDEiLCJicnVzaFNlbGVjdGlvbiIsImRpbSIsImJydXNoWCIsImJydXNoJDEiLCJicnVzaFkiLCJicnVzaCIsImhhbmRsZVNpemUiLCJpbml0aWFsaXplIiwiaGFuZGxlIiwicmVkcmF3Iiwic3RhcnRlZCIsIm1vdmUiLCJlbWl0dGVyIiwiZW1pdCIsInNlbGVjdGlvbjAiLCJzZWxlY3Rpb24xIiwiRW1pdHRlciIsInN0YXJ0aW5nIiwibW9kZSIsIm1ldGFLZXkiLCJhbHRLZXkiLCJzaWduWCIsInNpZ25ZIiwiVyIsIk4iLCJlMCIsImUxIiwiczAiLCJzMSIsIm1vdmluZyIsInNoaWZ0aW5nIiwic2hpZnRLZXkiLCJsb2NrWCIsImxvY2tZIiwicG9pbnQwIiwibW92ZWQiLCJlbmRlZCIsImtleWRvd25lZCIsImtleXVwcGVkIiwicG9pbnQxIiwia2V5Q29kZSIsInBpJDEiLCJoYWxmUGkkMSIsInRhdSQxIiwibWF4JDEiLCJjb21wYXJlVmFsdWUiLCJjaG9yZCIsInBhZEFuZ2xlIiwic29ydEdyb3VwcyIsInNvcnRTdWJncm91cHMiLCJzb3J0Q2hvcmRzIiwiZ3JvdXBTdW1zIiwiZ3JvdXBJbmRleCIsInN1Ymdyb3VwSW5kZXgiLCJjaG9yZHMiLCJmb3JFYWNoIiwiZGkiLCJkaiIsImEwIiwiYTEiLCJzdWJpbmRleCIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsInNsaWNlJDIiLCJjb25zdGFudCQ1IiwicGkkMiIsInRhdSQyIiwiZXBzaWxvbiQxIiwidGF1RXBzaWxvbiIsIlBhdGgiLCJfeDAiLCJfeTAiLCJfeDEiLCJfeTEiLCJtb3ZlVG8iLCJjbG9zZVBhdGgiLCJsaW5lVG8iLCJxdWFkcmF0aWNDdXJ2ZVRvIiwieTEiLCJiZXppZXJDdXJ2ZVRvIiwieDIiLCJ5MiIsImFyY1RvIiwieTAiLCJ4MjEiLCJ5MjEiLCJ4MDEiLCJ5MDEiLCJsMDFfMiIsIngyMCIsInkyMCIsImwyMV8yIiwibDIwXzIiLCJsMjEiLCJsMDEiLCJhY29zIiwidDAxIiwidDIxIiwiYXJjIiwiY2N3IiwiY3ciLCJkYSIsImRlZmF1bHRTb3VyY2UiLCJkZWZhdWx0VGFyZ2V0IiwiZGVmYXVsdFJhZGl1cyIsInJhZGl1cyIsImRlZmF1bHRTdGFydEFuZ2xlIiwiZGVmYXVsdEVuZEFuZ2xlIiwicmliYm9uIiwiYnVmZmVyIiwiYXJndiIsInNyIiwic2EwIiwic2ExIiwic3gwIiwic3kwIiwidHIiLCJ0YTAiLCJ0YTEiLCJNYXAiLCJtYXAkMSIsImhhcyIsImNsZWFyIiwia2V5cyIsImVudHJpZXMiLCJuZXN0Iiwic29ydEtleXMiLCJzb3J0VmFsdWVzIiwicm9sbHVwIiwiZGVwdGgiLCJjcmVhdGVSZXN1bHQiLCJzZXRSZXN1bHQiLCJ2YWx1ZXNCeUtleSIsInJlc3VsdCIsInNvcnRLZXkiLCJjcmVhdGVPYmplY3QiLCJzZXRPYmplY3QiLCJjcmVhdGVNYXAiLCJzZXRNYXAiLCJTZXQiLCJwcm90byIsInNldCQyIiwiYXJyYXkkMiIsInNsaWNlJDMiLCJhc2NlbmRpbmckMiIsImFyZWEiLCJyaW5nIiwiY29uc3RhbnQkNiIsImhvbGUiLCJyaW5nQ29udGFpbnMiLCJ5aSIsInBqIiwieWoiLCJzZWdtZW50Q29udGFpbnMiLCJjb2xsaW5lYXIiLCJ3aXRoaW4iLCJub29wJDEiLCJjYXNlcyIsImNvbnRvdXJzIiwidGhyZXNob2xkJCQxIiwic21vb3RoIiwic21vb3RoTGluZWFyIiwiY29udG91ciIsInBvbHlnb25zIiwiaG9sZXMiLCJpc29yaW5ncyIsInBvbHlnb24iLCJjb29yZGluYXRlcyIsImZyYWdtZW50QnlTdGFydCIsImZyYWdtZW50QnlFbmQiLCJzdGl0Y2giLCJzdGFydEluZGV4IiwiZW5kSW5kZXgiLCJ1bnNoaWZ0IiwieHQiLCJ5dCIsIl8wIiwiXzEiLCJibHVyWCIsImJsdXJZIiwiZGVmYXVsdFgiLCJkZWZhdWx0WSIsImRlZmF1bHRXZWlnaHQiLCJkZW5zaXR5Iiwid2VpZ2h0IiwiRmxvYXQzMkFycmF5Iiwid2kiLCJnZW9tZXRyeSIsInRyYW5zZm9ybVBvbHlnb24iLCJ0cmFuc2Zvcm1SaW5nIiwidHJhbnNmb3JtUG9pbnQiLCJyZXNpemUiLCJjZWxsU2l6ZSIsIkVPTCIsIkVPRiIsIlFVT1RFIiwiTkVXTElORSIsIlJFVFVSTiIsIm9iamVjdENvbnZlcnRlciIsImNvbHVtbnMiLCJGdW5jdGlvbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJjdXN0b21Db252ZXJ0ZXIiLCJpbmZlckNvbHVtbnMiLCJyb3dzIiwiY29sdW1uU2V0IiwiY29sdW1uIiwicGFkIiwiZm9ybWF0WWVhciIsInllYXIiLCJmb3JtYXREYXRlIiwiaG91cnMiLCJnZXRVVENIb3VycyIsIm1pbnV0ZXMiLCJnZXRVVENNaW51dGVzIiwic2Vjb25kcyIsImdldFVUQ1NlY29uZHMiLCJtaWxsaXNlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImRzdkZvcm1hdCIsImRlbGltaXRlciIsInJlRm9ybWF0IiwiREVMSU1JVEVSIiwiY2hhckNvZGVBdCIsImNvbnZlcnQiLCJwYXJzZVJvd3MiLCJlb2YiLCJlb2wiLCJ0b2tlbiIsInJlcGxhY2UiLCJwcmVmb3JtYXRCb2R5IiwiZm9ybWF0VmFsdWUiLCJmb3JtYXRCb2R5IiwiZm9ybWF0Um93cyIsImZvcm1hdFJvdyIsInRlc3QiLCJjc3YiLCJjc3ZQYXJzZSIsImNzdlBhcnNlUm93cyIsImNzdkZvcm1hdCIsImNzdkZvcm1hdEJvZHkiLCJjc3ZGb3JtYXRSb3dzIiwidHN2IiwidHN2UGFyc2UiLCJ0c3ZQYXJzZVJvd3MiLCJ0c3ZGb3JtYXQiLCJ0c3ZGb3JtYXRCb2R5IiwidHN2Rm9ybWF0Um93cyIsImF1dG9UeXBlIiwicmVzcG9uc2VCbG9iIiwicmVzcG9uc2UiLCJvayIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJibG9iIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2VBcnJheUJ1ZmZlciIsImFycmF5QnVmZmVyIiwicmVzcG9uc2VUZXh0IiwiZHN2UGFyc2UiLCJkc3YiLCJjc3YkMSIsInRzdiQxIiwiaW1hZ2UiLCJJbWFnZSIsIm9uZXJyb3IiLCJvbmxvYWQiLCJzcmMiLCJyZXNwb25zZUpzb24iLCJqc29uIiwicGFyc2VyIiwidGV4dCQkMSIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsImNlbnRlciQxIiwiZm9yY2UiLCJzeCIsInN5IiwiY29uc3RhbnQkNyIsImppZ2dsZSIsInRyZWVfYWRkIiwiX3giLCJfeSIsImNvdmVyIiwidHJlZSIsIl9yb290IiwibGVhZiIsInhtIiwieW0iLCJ4cCIsInlwIiwiYWRkQWxsIiwieXoiLCJ0cmVlX2NvdmVyIiwidHJlZV9kYXRhIiwidmlzaXQiLCJ0cmVlX2V4dGVudCIsIlF1YWQiLCJ0cmVlX2ZpbmQiLCJ4MyIsInkzIiwicXVhZHMiLCJ0cmVlX3JlbW92ZSIsInJldGFpbmVyIiwicmVtb3ZlQWxsIiwidHJlZV9yb290IiwidHJlZV9zaXplIiwidHJlZV92aXNpdCIsInRyZWVfdmlzaXRBZnRlciIsImRlZmF1bHRYJDEiLCJ0cmVlX3giLCJkZWZhdWx0WSQxIiwidHJlZV95IiwicXVhZHRyZWUiLCJRdWFkdHJlZSIsImxlYWZfY29weSIsInRyZWVQcm90byIsImZpbmQiLCJ2aXNpdEFmdGVyIiwidngiLCJ2eSIsImNvbGxpZGUiLCJyYWRpaSIsInN0cmVuZ3RoIiwiaXRlcmF0aW9ucyIsInJpIiwicmkyIiwicHJlcGFyZSIsInF1YWQiLCJyaiIsIm5vZGVCeUlkIiwibm9kZUlkIiwibGluayIsImxpbmtzIiwiZGVmYXVsdFN0cmVuZ3RoIiwic3RyZW5ndGhzIiwiZGlzdGFuY2UiLCJkaXN0YW5jZXMiLCJiaWFzIiwiYWxwaGEiLCJpbml0aWFsaXplU3RyZW5ndGgiLCJpbml0aWFsaXplRGlzdGFuY2UiLCJ4JDEiLCJ5JDEiLCJpbml0aWFsUmFkaXVzIiwiaW5pdGlhbEFuZ2xlIiwic2ltdWxhdGlvbiIsImFscGhhTWluIiwiYWxwaGFEZWNheSIsImFscGhhVGFyZ2V0IiwidmVsb2NpdHlEZWNheSIsImZvcmNlcyIsInN0ZXBwZXIiLCJmeCIsImZ5IiwiaW5pdGlhbGl6ZU5vZGVzIiwiYW5nbGUiLCJpbml0aWFsaXplRm9yY2UiLCJjbG9zZXN0IiwibWFueUJvZHkiLCJkaXN0YW5jZU1pbjIiLCJkaXN0YW5jZU1heDIiLCJ0aGV0YTIiLCJhY2N1bXVsYXRlIiwiZGlzdGFuY2VNaW4iLCJkaXN0YW5jZU1heCIsInRoZXRhIiwicmFkaWFsIiwicmFkaXVzZXMiLCJ4JDIiLCJ5JDIiLCJmb3JtYXREZWNpbWFsIiwidG9FeHBvbmVudGlhbCIsImNvZWZmaWNpZW50IiwiZXhwb25lbnQkMSIsImZvcm1hdEdyb3VwIiwiZ3JvdXBpbmciLCJ0aG91c2FuZHMiLCJzdWJzdHJpbmciLCJmb3JtYXROdW1lcmFscyIsIm51bWVyYWxzIiwicmUiLCJmb3JtYXRTcGVjaWZpZXIiLCJzcGVjaWZpZXIiLCJGb3JtYXRTcGVjaWZpZXIiLCJmaWxsIiwiYWxpZ24iLCJzaWduIiwic3ltYm9sIiwiY29tbWEiLCJwcmVjaXNpb24iLCJmb3JtYXRUcmltIiwib3V0IiwicHJlZml4RXhwb25lbnQiLCJmb3JtYXRQcmVmaXhBdXRvIiwiZm9ybWF0Um91bmRlZCIsImZvcm1hdFR5cGVzIiwidG9GaXhlZCIsInRvUHJlY2lzaW9uIiwidG9VcHBlckNhc2UiLCJpZGVudGl0eSQzIiwicHJlZml4ZXMiLCJmb3JtYXRMb2NhbGUiLCJsb2NhbGUiLCJjdXJyZW5jeSIsImRlY2ltYWwiLCJwZXJjZW50IiwibmV3Rm9ybWF0Iiwic3VmZml4IiwiZm9ybWF0VHlwZSIsIm1heWJlU3VmZml4IiwidmFsdWVQcmVmaXgiLCJ2YWx1ZVN1ZmZpeCIsInZhbHVlTmVnYXRpdmUiLCJwYWRkaW5nIiwiZm9ybWF0UHJlZml4IiwiZGVmYXVsdExvY2FsZSIsInByZWNpc2lvbkZpeGVkIiwicHJlY2lzaW9uUHJlZml4IiwicHJlY2lzaW9uUm91bmQiLCJhZGRlciIsIkFkZGVyIiwicmVzZXQiLCJhZGQkMSIsInRlbXAiLCJidiIsImF2IiwiZXBzaWxvbiQyIiwiZXBzaWxvbjIkMSIsInBpJDMiLCJoYWxmUGkkMiIsInF1YXJ0ZXJQaSIsInRhdSQzIiwiZGVncmVlcyQxIiwicmFkaWFucyIsImNvcyQxIiwic2luJDEiLCJoYXZlcnNpbiIsIm5vb3AkMiIsInN0cmVhbUdlb21ldHJ5Iiwic3RyZWFtIiwic3RyZWFtR2VvbWV0cnlUeXBlIiwic3RyZWFtT2JqZWN0VHlwZSIsIkZlYXR1cmUiLCJGZWF0dXJlQ29sbGVjdGlvbiIsImZlYXR1cmVzIiwiU3BoZXJlIiwic3BoZXJlIiwiUG9pbnQiLCJNdWx0aVBvaW50IiwiTGluZVN0cmluZyIsInN0cmVhbUxpbmUiLCJNdWx0aUxpbmVTdHJpbmciLCJQb2x5Z29uIiwic3RyZWFtUG9seWdvbiIsIk11bHRpUG9seWdvbiIsIkdlb21ldHJ5Q29sbGVjdGlvbiIsImdlb21ldHJpZXMiLCJjbG9zZWQiLCJjb29yZGluYXRlIiwibGluZVN0YXJ0IiwibGluZUVuZCIsInBvbHlnb25TdGFydCIsInBvbHlnb25FbmQiLCJnZW9TdHJlYW0iLCJhcmVhUmluZ1N1bSIsImFyZWFTdW0iLCJsYW1iZGEwMCIsInBoaTAwIiwibGFtYmRhMCIsImNvc1BoaTAiLCJzaW5QaGkwIiwiYXJlYVN0cmVhbSIsImFyZWFSaW5nU3RhcnQiLCJhcmVhUmluZ0VuZCIsImFyZWFSaW5nIiwiYXJlYVBvaW50Rmlyc3QiLCJhcmVhUG9pbnQiLCJsYW1iZGEiLCJwaGkiLCJkTGFtYmRhIiwic2RMYW1iZGEiLCJhZExhbWJkYSIsImNvc1BoaSIsInNpblBoaSIsImFyZWEkMSIsInNwaGVyaWNhbCIsImNhcnRlc2lhbiIsImNhcnRlc2lhbkRvdCIsImNhcnRlc2lhbkNyb3NzIiwiY2FydGVzaWFuQWRkSW5QbGFjZSIsImNhcnRlc2lhblNjYWxlIiwidmVjdG9yIiwiY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZSIsImxhbWJkYTAkMSIsInBoaTAiLCJsYW1iZGExIiwicGhpMSIsImxhbWJkYTIiLCJsYW1iZGEwMCQxIiwicGhpMDAkMSIsImRlbHRhU3VtIiwicmFuZ2VzIiwiYm91bmRzU3RyZWFtIiwiYm91bmRzUG9pbnQiLCJib3VuZHNMaW5lU3RhcnQiLCJib3VuZHNMaW5lRW5kIiwiYm91bmRzUmluZ1BvaW50IiwiYm91bmRzUmluZ1N0YXJ0IiwiYm91bmRzUmluZ0VuZCIsImxpbmVQb2ludCIsIm5vcm1hbCIsImVxdWF0b3JpYWwiLCJpbmZsZWN0aW9uIiwic2lnbiQkMSIsImxhbWJkYWkiLCJwaGlpIiwiYW50aW1lcmlkaWFuIiwicmFuZ2VDb21wYXJlIiwicmFuZ2VDb250YWlucyIsImJvdW5kcyIsImZlYXR1cmUiLCJkZWx0YU1heCIsIlcwIiwiVzEiLCJYMCIsIlkwIiwiWjAiLCJYMSIsIlkxIiwiWjEiLCJYMiIsIlkyIiwiWjIiLCJsYW1iZGEwMCQyIiwicGhpMDAkMiIsInowIiwiY2VudHJvaWRTdHJlYW0iLCJjZW50cm9pZFBvaW50IiwiY2VudHJvaWRMaW5lU3RhcnQiLCJjZW50cm9pZExpbmVFbmQiLCJjZW50cm9pZFJpbmdTdGFydCIsImNlbnRyb2lkUmluZ0VuZCIsImNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4iLCJjZW50cm9pZExpbmVQb2ludEZpcnN0IiwiY2VudHJvaWRMaW5lUG9pbnQiLCJjZW50cm9pZFJpbmdQb2ludEZpcnN0IiwiY2VudHJvaWRSaW5nUG9pbnQiLCJjeCIsImN5IiwiY3oiLCJjZW50cm9pZCIsImNvbnN0YW50JDgiLCJjb21wb3NlIiwiaW52ZXJ0Iiwicm90YXRpb25JZGVudGl0eSIsInJvdGF0ZVJhZGlhbnMiLCJkZWx0YUxhbWJkYSIsImRlbHRhUGhpIiwiZGVsdGFHYW1tYSIsInJvdGF0aW9uTGFtYmRhIiwicm90YXRpb25QaGlHYW1tYSIsImZvcndhcmRSb3RhdGlvbkxhbWJkYSIsInJvdGF0aW9uIiwiY29zRGVsdGFQaGkiLCJzaW5EZWx0YVBoaSIsImNvc0RlbHRhR2FtbWEiLCJzaW5EZWx0YUdhbW1hIiwiZm9yd2FyZCIsImNpcmNsZVN0cmVhbSIsImRpcmVjdGlvbiIsImNvc1JhZGl1cyIsInNpblJhZGl1cyIsImNpcmNsZVJhZGl1cyIsImNpcmNsZSIsImNsaXBCdWZmZXIiLCJsaW5lcyIsInJlam9pbiIsInBvaW50RXF1YWwiLCJJbnRlcnNlY3Rpb24iLCJvdGhlciIsImVudHJ5IiwiY2xpcFJlam9pbiIsInNlZ21lbnRzIiwiY29tcGFyZUludGVyc2VjdGlvbiIsInN0YXJ0SW5zaWRlIiwiY2xpcCIsInNlZ21lbnQiLCJsaW5rJDEiLCJpc1N1YmplY3QiLCJzdW0kMSIsInBvbHlnb25Db250YWlucyIsIndpbmRpbmciLCJzaW5QaGkxIiwiY29zUGhpMSIsImFic0RlbHRhIiwiaW50ZXJzZWN0aW9uIiwicGhpQXJjIiwicG9pbnRWaXNpYmxlIiwiY2xpcExpbmUiLCJzaW5rIiwicmluZ0J1ZmZlciIsInJpbmdTaW5rIiwicG9seWdvblN0YXJ0ZWQiLCJwb2ludFJpbmciLCJyaW5nU3RhcnQiLCJyaW5nRW5kIiwicG9pbnRMaW5lIiwiY2xlYW4iLCJyaW5nU2VnbWVudHMiLCJ2YWxpZFNlZ21lbnQiLCJjbGlwQW50aW1lcmlkaWFuIiwiY2xpcEFudGltZXJpZGlhbkxpbmUiLCJjbGlwQW50aW1lcmlkaWFuSW50ZXJwb2xhdGUiLCJzaWduMCIsInNpZ24xIiwiY2xpcEFudGltZXJpZGlhbkludGVyc2VjdCIsInNpbkxhbWJkYTBMYW1iZGExIiwiZnJvbSIsInRvIiwiY2xpcENpcmNsZSIsImNyIiwic21hbGxSYWRpdXMiLCJub3RIZW1pc3BoZXJlIiwidmlzaWJsZSIsImMwIiwidjAwIiwicG9pbnQyIiwiY29kZSIsImludGVyc2VjdCIsInR3byIsInBhIiwicGIiLCJuMiIsIm4ybjIiLCJuMW4yIiwiZGV0ZXJtaW5hbnQiLCJjMSIsImMyIiwibjF4bjIiLCJ1dSIsInBvbGFyIiwibWVyaWRpYW4iLCJxMSIsImF4IiwiYXkiLCJieCIsImJ5IiwiY2xpcE1heCIsImNsaXBNaW4iLCJjbGlwUmVjdGFuZ2xlIiwiY29ybmVyIiwiY29tcGFyZVBvaW50IiwiY2EiLCJjYiIsImFjdGl2ZVN0cmVhbSIsImJ1ZmZlclN0cmVhbSIsInhfXyIsInlfXyIsInZfXyIsInhfIiwieV8iLCJ2XyIsImZpcnN0IiwiY2xpcFN0cmVhbSIsInBvbHlnb25JbnNpZGUiLCJjbGVhbkluc2lkZSIsImV4dGVudCQxIiwiY2FjaGUiLCJjYWNoZVN0cmVhbSIsImxlbmd0aFN1bSIsImxhbWJkYTAkMiIsInNpblBoaTAkMSIsImNvc1BoaTAkMSIsImxlbmd0aFN0cmVhbSIsImxlbmd0aExpbmVTdGFydCIsImxlbmd0aFBvaW50Rmlyc3QiLCJsZW5ndGhMaW5lRW5kIiwibGVuZ3RoUG9pbnQiLCJjb3NEZWx0YSIsInNpbkRlbHRhIiwibGVuZ3RoJDEiLCJvYmplY3QkMSIsImNvbnRhaW5zT2JqZWN0VHlwZSIsImNvbnRhaW5zR2VvbWV0cnkiLCJjb250YWluc0dlb21ldHJ5VHlwZSIsImNvbnRhaW5zUG9pbnQiLCJjb250YWluc0xpbmUiLCJjb250YWluc1BvbHlnb24iLCJhYiIsImFvIiwib2IiLCJyaW5nUmFkaWFucyIsInBvaW50UmFkaWFucyIsImNvbnRhaW5zJDEiLCJncmF0aWN1bGVYIiwiZ3JhdGljdWxlWSIsImdyYXRpY3VsZSIsIkRYIiwiRFkiLCJvdXRsaW5lIiwiZXh0ZW50TWlub3IiLCJleHRlbnRNYWpvciIsInN0ZXBNaW5vciIsInN0ZXBNYWpvciIsImdyYXRpY3VsZTEwIiwiaW50ZXJwb2xhdGUkMSIsImN5MCIsImN5MSIsInN5MSIsImt4MCIsImt5MCIsImt4MSIsImt5MSIsImlkZW50aXR5JDQiLCJhcmVhU3VtJDEiLCJhcmVhUmluZ1N1bSQxIiwieDAwIiwieTAwIiwieDAkMSIsInkwJDEiLCJhcmVhU3RyZWFtJDEiLCJhcmVhUmluZ1N0YXJ0JDEiLCJhcmVhUmluZ0VuZCQxIiwiYXJlYVBvaW50Rmlyc3QkMSIsImFyZWFQb2ludCQxIiwieDAkMiIsInkwJDIiLCJib3VuZHNTdHJlYW0kMSIsImJvdW5kc1BvaW50JDEiLCJYMCQxIiwiWTAkMSIsIlowJDEiLCJYMSQxIiwiWTEkMSIsIloxJDEiLCJYMiQxIiwiWTIkMSIsIloyJDEiLCJ4MDAkMSIsInkwMCQxIiwieDAkMyIsInkwJDMiLCJjZW50cm9pZFN0cmVhbSQxIiwiY2VudHJvaWRQb2ludCQxIiwiY2VudHJvaWRMaW5lU3RhcnQkMSIsImNlbnRyb2lkTGluZUVuZCQxIiwiY2VudHJvaWRSaW5nU3RhcnQkMSIsImNlbnRyb2lkUmluZ0VuZCQxIiwiY2VudHJvaWRQb2ludEZpcnN0TGluZSIsImNlbnRyb2lkUG9pbnRMaW5lIiwiY2VudHJvaWRQb2ludEZpcnN0UmluZyIsImNlbnRyb2lkUG9pbnRSaW5nIiwiUGF0aENvbnRleHQiLCJfY29udGV4dCIsIl9yYWRpdXMiLCJwb2ludFJhZGl1cyIsIl9saW5lIiwiX3BvaW50IiwibGVuZ3RoU3VtJDEiLCJsZW5ndGhSaW5nIiwieDAwJDIiLCJ5MDAkMiIsIngwJDQiLCJ5MCQ0IiwibGVuZ3RoU3RyZWFtJDEiLCJsZW5ndGhQb2ludEZpcnN0JDEiLCJsZW5ndGhQb2ludCQxIiwiUGF0aFN0cmluZyIsIl9zdHJpbmciLCJfY2lyY2xlIiwiY2lyY2xlJDEiLCJpbmRleCQxIiwicHJvamVjdGlvbiIsInByb2plY3Rpb25TdHJlYW0iLCJjb250ZXh0U3RyZWFtIiwibWVhc3VyZSIsIm1ldGhvZHMiLCJ0cmFuc2Zvcm1lciIsIlRyYW5zZm9ybVN0cmVhbSIsImZpdCIsImZpdEJvdW5kcyIsImNsaXBFeHRlbnQiLCJmaXRFeHRlbnQiLCJmaXRTaXplIiwiZml0V2lkdGgiLCJmaXRIZWlnaHQiLCJtYXhEZXB0aCIsImNvc01pbkRpc3RhbmNlIiwicmVzYW1wbGUiLCJwcm9qZWN0IiwiZGVsdGEyIiwicmVzYW1wbGUkMSIsInJlc2FtcGxlTm9uZSIsInJlc2FtcGxlTGluZVRvIiwicGhpMiIsImR4MiIsImR5MiIsImR6IiwiYTAwIiwiYjAwIiwiYzAwIiwicmVzYW1wbGVTdHJlYW0iLCJyaW5nUG9pbnQiLCJ0cmFuc2Zvcm1SYWRpYW5zIiwidHJhbnNmb3JtUm90YXRlIiwic2NhbGVUcmFuc2xhdGUiLCJ0cmFuc2Zvcm0kJDEiLCJzY2FsZVRyYW5zbGF0ZVJvdGF0ZSIsImNvc0FscGhhIiwic2luQWxwaGEiLCJhaSIsImNpIiwiZmkiLCJwcm9qZWN0aW9uTXV0YXRvciIsInByb2plY3RBdCIsInByZWNsaXAiLCJwb3N0Y2xpcCIsInByb2plY3RSZXNhbXBsZSIsInByb2plY3RUcmFuc2Zvcm0iLCJwcm9qZWN0Um90YXRlVHJhbnNmb3JtIiwiY2xpcEFuZ2xlIiwicmVjZW50ZXIiLCJjb25pY1Byb2plY3Rpb24iLCJwYXJhbGxlbHMiLCJjeWxpbmRyaWNhbEVxdWFsQXJlYVJhdyIsImNvbmljRXF1YWxBcmVhUmF3IiwicjB5IiwiY29uaWNFcXVhbEFyZWEiLCJhbGJlcnMiLCJtdWx0aXBsZXgiLCJzdHJlYW1zIiwiYWxiZXJzVXNhIiwibG93ZXI0OCIsImxvd2VyNDhQb2ludCIsImFsYXNrYSIsImFsYXNrYVBvaW50IiwiaGF3YWlpIiwiaGF3YWlpUG9pbnQiLCJwb2ludFN0cmVhbSIsImF6aW11dGhhbFJhdyIsImF6aW11dGhhbEludmVydCIsInNjIiwiY2MiLCJhemltdXRoYWxFcXVhbEFyZWFSYXciLCJjeGN5IiwiYXppbXV0aGFsRXF1YWxBcmVhIiwiYXppbXV0aGFsRXF1aWRpc3RhbnRSYXciLCJhemltdXRoYWxFcXVpZGlzdGFudCIsIm1lcmNhdG9yUmF3IiwibWVyY2F0b3IiLCJtZXJjYXRvclByb2plY3Rpb24iLCJyZWNsaXAiLCJ0YW55IiwiY29uaWNDb25mb3JtYWxSYXciLCJjb25pY0NvbmZvcm1hbCIsImVxdWlyZWN0YW5ndWxhclJhdyIsImVxdWlyZWN0YW5ndWxhciIsImNvbmljRXF1aWRpc3RhbnRSYXciLCJneSIsIm54IiwiY29uaWNFcXVpZGlzdGFudCIsIkExIiwiQTIiLCJBMyIsIkE0IiwiTSIsImVxdWFsRWFydGhSYXciLCJsMiIsImw2IiwiZnB5IiwiZXF1YWxFYXJ0aCIsImdub21vbmljUmF3IiwiZ25vbW9uaWMiLCJzY2FsZVRyYW5zbGF0ZSQxIiwia3giLCJreSIsInR4IiwidHkiLCJpZGVudGl0eSQ1IiwicmVmbGVjdFgiLCJyZWZsZWN0WSIsIm5hdHVyYWxFYXJ0aDFSYXciLCJwaGk0IiwibmF0dXJhbEVhcnRoMSIsIm9ydGhvZ3JhcGhpY1JhdyIsIm9ydGhvZ3JhcGhpYyIsInN0ZXJlb2dyYXBoaWNSYXciLCJzdGVyZW9ncmFwaGljIiwidHJhbnN2ZXJzZU1lcmNhdG9yUmF3IiwidHJhbnN2ZXJzZU1lcmNhdG9yIiwiZGVmYXVsdFNlcGFyYXRpb24iLCJtZWFuWCIsIm1lYW5YUmVkdWNlIiwibWF4WSIsIm1heFlSZWR1Y2UiLCJsZWFmTGVmdCIsImxlYWZSaWdodCIsImNsdXN0ZXIiLCJzZXBhcmF0aW9uIiwibm9kZVNpemUiLCJwcmV2aW91c05vZGUiLCJlYWNoQWZ0ZXIiLCJub2RlX2NvdW50Iiwibm9kZV9lYWNoIiwibm9kZV9lYWNoQmVmb3JlIiwibm9kZV9lYWNoQWZ0ZXIiLCJub2RlX3N1bSIsIm5vZGVfc29ydCIsImVhY2hCZWZvcmUiLCJub2RlX3BhdGgiLCJhbmNlc3RvciIsImxlYXN0Q29tbW9uQW5jZXN0b3IiLCJhTm9kZXMiLCJhbmNlc3RvcnMiLCJiTm9kZXMiLCJub2RlX2FuY2VzdG9ycyIsIm5vZGVfZGVzY2VuZGFudHMiLCJub2RlX2xlYXZlcyIsImxlYXZlcyIsIm5vZGVfbGlua3MiLCJoaWVyYXJjaHkiLCJOb2RlIiwidmFsdWVkIiwiY2hpbGRzIiwiZGVmYXVsdENoaWxkcmVuIiwiY29tcHV0ZUhlaWdodCIsIm5vZGVfY29weSIsImNvcHlEYXRhIiwiZGVzY2VuZGFudHMiLCJzbGljZSQ0Iiwic2h1ZmZsZSQxIiwiZW5jbG9zZSIsImNpcmNsZXMiLCJlbmNsb3Nlc1dlYWsiLCJlbmNsb3NlQmFzaXMiLCJleHRlbmRCYXNpcyIsImVuY2xvc2VzV2Vha0FsbCIsImVuY2xvc2VzTm90IiwiZW5jbG9zZUJhc2lzMiIsImVuY2xvc2VCYXNpczMiLCJkciIsImVuY2xvc2VCYXNpczEiLCJyMiIsInIyMSIsInIzIiwiYTIiLCJhMyIsImMzIiwiZDMiLCJwbGFjZSIsImludGVyc2VjdHMiLCJzY29yZSIsIk5vZGUkMSIsInBhY2tFbmNsb3NlIiwiYWEiLCJzaiIsInNrIiwicGFjayIsInNpYmxpbmdzIiwib3B0aW9uYWwiLCJyZXF1aXJlZCIsImNvbnN0YW50WmVybyIsImNvbnN0YW50JDkiLCJkZWZhdWx0UmFkaXVzJDEiLCJpbmRleCQyIiwicmFkaXVzTGVhZiIsInBhY2tDaGlsZHJlbiIsInRyYW5zbGF0ZUNoaWxkIiwicm91bmROb2RlIiwidHJlZW1hcERpY2UiLCJwYXJ0aXRpb24iLCJwb3NpdGlvbk5vZGUiLCJrZXlQcmVmaXgkMSIsInByZXJvb3QiLCJhbWJpZ3VvdXMiLCJkZWZhdWx0SWQiLCJkZWZhdWx0UGFyZW50SWQiLCJwYXJlbnRJZCIsInN0cmF0aWZ5Iiwibm9kZUtleSIsIm5vZGVCeUtleSIsImRlZmF1bHRTZXBhcmF0aW9uJDEiLCJuZXh0TGVmdCIsIm5leHRSaWdodCIsIm1vdmVTdWJ0cmVlIiwid20iLCJ3cCIsImNoYW5nZSIsImV4ZWN1dGVTaGlmdHMiLCJuZXh0QW5jZXN0b3IiLCJ2aW0iLCJUcmVlTm9kZSIsInRyZWVSb290IiwiZmlyc3RXYWxrIiwic2Vjb25kV2FsayIsInNpemVOb2RlIiwibWlkcG9pbnQiLCJhcHBvcnRpb24iLCJ2aXAiLCJ2b3AiLCJ2b20iLCJzaXAiLCJzb3AiLCJzaW0iLCJzb20iLCJ0cmVlbWFwU2xpY2UiLCJzcXVhcmlmeVJhdGlvIiwicmF0aW8iLCJub2RlVmFsdWUiLCJzdW1WYWx1ZSIsIm1pblZhbHVlIiwibWF4VmFsdWUiLCJuZXdSYXRpbyIsIm1pblJhdGlvIiwiYmV0YSIsImRpY2UiLCJzcXVhcmlmeSIsImluZGV4JDMiLCJ0aWxlIiwicGFkZGluZ1N0YWNrIiwicGFkZGluZ0lubmVyIiwicGFkZGluZ1RvcCIsInBhZGRpbmdSaWdodCIsInBhZGRpbmdCb3R0b20iLCJwYWRkaW5nTGVmdCIsInRyZWVtYXAiLCJwYWRkaW5nT3V0ZXIiLCJiaW5hcnkiLCJzdW1zIiwidmFsdWVPZmZzZXQiLCJ2YWx1ZVRhcmdldCIsInZhbHVlTGVmdCIsInZhbHVlUmlnaHQiLCJ4ayIsInlrIiwic2xpY2VEaWNlIiwicmVzcXVhcmlmeSIsIl9zcXVhcmlmeSIsImFyZWEkMiIsImNlbnRyb2lkJDEiLCJjcm9zcyQxIiwibGV4aWNvZ3JhcGhpY09yZGVyIiwiY29tcHV0ZVVwcGVySHVsbEluZGV4ZXMiLCJodWxsIiwic29ydGVkUG9pbnRzIiwiZmxpcHBlZFBvaW50cyIsInVwcGVySW5kZXhlcyIsImxvd2VySW5kZXhlcyIsInNraXBMZWZ0Iiwic2tpcFJpZ2h0IiwiY29udGFpbnMkMiIsImluc2lkZSIsImxlbmd0aCQyIiwicGVyaW1ldGVyIiwiZGVmYXVsdFNvdXJjZSQxIiwidW5pZm9ybSIsInNvdXJjZVJhbmRvbVVuaWZvcm0iLCJyYW5kb21Vbmlmb3JtIiwic291cmNlUmFuZG9tTm9ybWFsIiwicmFuZG9tTm9ybWFsIiwibXUiLCJzaWdtYSIsImxvZ05vcm1hbCIsInNvdXJjZVJhbmRvbUxvZ05vcm1hbCIsInJhbmRvbUxvZ05vcm1hbCIsImlyd2luSGFsbCIsInNvdXJjZVJhbmRvbUlyd2luSGFsbCIsInJhbmRvbUlyd2luSGFsbCIsImJhdGVzIiwic291cmNlUmFuZG9tQmF0ZXMiLCJyYW5kb21CYXRlcyIsImV4cG9uZW50aWFsJDEiLCJzb3VyY2VSYW5kb21FeHBvbmVudGlhbCIsInJhbmRvbUV4cG9uZW50aWFsIiwiaW5pdFJhbmdlIiwiaW5pdEludGVycG9sYXRvciIsImFycmF5JDMiLCJtYXAkMiIsInNsaWNlJDUiLCJpbXBsaWNpdCIsIm9yZGluYWwiLCJ1bmtub3duIiwiYmFuZCIsIm9yZGluYWxSYW5nZSIsInJhbmdlJCQxIiwicmVzY2FsZSIsInJhbmdlUm91bmQiLCJwb2ludGlzaCIsInBvaW50JDEiLCJjb25zdGFudCRhIiwibnVtYmVyJDIiLCJ1bml0IiwiaWRlbnRpdHkkNiIsIm5vcm1hbGl6ZSIsImNsYW1wZXIiLCJiaW1hcCIsImQwIiwicG9seW1hcCIsImNsYW1wIiwidHJhbnNmb3JtZXIkMSIsInVudHJhbnNmb3JtIiwicGllY2V3aXNlJCQxIiwiY29udGludW91cyIsImxpbmVhcmlzaCIsIm5pY2UiLCJsaW5lYXIkMiIsImlkZW50aXR5JDciLCJ0cmFuc2Zvcm1Mb2ciLCJ0cmFuc2Zvcm1FeHAiLCJ0cmFuc2Zvcm1Mb2duIiwidHJhbnNmb3JtRXhwbiIsInBvdzEwIiwicG93cCIsImJhc2UiLCJsb2dwIiwibG9nMTAiLCJsb2cyIiwicmVmbGVjdCIsImxvZ2dpc2giLCJsb2dzIiwicG93cyIsImxvZyQxIiwidHJhbnNmb3JtU3ltbG9nIiwibG9nMXAiLCJ0cmFuc2Zvcm1TeW1leHAiLCJleHBtMSIsInN5bWxvZ2lzaCIsInN5bWxvZyIsInRyYW5zZm9ybVBvdyIsInRyYW5zZm9ybVNxcnQiLCJ0cmFuc2Zvcm1TcXVhcmUiLCJwb3dpc2giLCJwb3ckMSIsInNxcnQkMSIsInF1YW50aWxlJCQxIiwiaW52ZXJ0RXh0ZW50IiwicXVhbnRpbGVzIiwicXVhbnRpemUkMSIsInRocmVzaG9sZCQxIiwidDAkMSIsInQxJDEiLCJuZXdJbnRlcnZhbCIsImZsb29yaSIsIm9mZnNldGkiLCJmaWVsZCIsIm1pbGxpc2Vjb25kIiwiZHVyYXRpb25TZWNvbmQiLCJkdXJhdGlvbk1pbnV0ZSIsImR1cmF0aW9uSG91ciIsImR1cmF0aW9uRGF5IiwiZHVyYXRpb25XZWVrIiwic2Vjb25kIiwiZ2V0TWlsbGlzZWNvbmRzIiwibWludXRlIiwiZ2V0U2Vjb25kcyIsImdldE1pbnV0ZXMiLCJob3VyIiwiZ2V0SG91cnMiLCJkYXkiLCJzZXRIb3VycyIsInNldERhdGUiLCJnZXREYXRlIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJkYXlzIiwid2Vla2RheSIsImdldERheSIsInN1bmRheSIsIm1vbmRheSIsInR1ZXNkYXkiLCJ3ZWRuZXNkYXkiLCJ0aHVyc2RheSIsImZyaWRheSIsInNhdHVyZGF5Iiwic3VuZGF5cyIsIm1vbmRheXMiLCJ0dWVzZGF5cyIsIndlZG5lc2RheXMiLCJ0aHVyc2RheXMiLCJmcmlkYXlzIiwic2F0dXJkYXlzIiwibW9udGgiLCJzZXRNb250aCIsImdldE1vbnRoIiwiZ2V0RnVsbFllYXIiLCJtb250aHMiLCJzZXRGdWxsWWVhciIsInllYXJzIiwidXRjTWludXRlIiwic2V0VVRDU2Vjb25kcyIsInV0Y01pbnV0ZXMiLCJ1dGNIb3VyIiwic2V0VVRDTWludXRlcyIsInV0Y0hvdXJzIiwidXRjRGF5Iiwic2V0VVRDSG91cnMiLCJzZXRVVENEYXRlIiwidXRjRGF5cyIsInV0Y1dlZWtkYXkiLCJnZXRVVENEYXkiLCJ1dGNTdW5kYXkiLCJ1dGNNb25kYXkiLCJ1dGNUdWVzZGF5IiwidXRjV2VkbmVzZGF5IiwidXRjVGh1cnNkYXkiLCJ1dGNGcmlkYXkiLCJ1dGNTYXR1cmRheSIsInV0Y1N1bmRheXMiLCJ1dGNNb25kYXlzIiwidXRjVHVlc2RheXMiLCJ1dGNXZWRuZXNkYXlzIiwidXRjVGh1cnNkYXlzIiwidXRjRnJpZGF5cyIsInV0Y1NhdHVyZGF5cyIsInV0Y01vbnRoIiwic2V0VVRDTW9udGgiLCJ1dGNNb250aHMiLCJ1dGNZZWFyIiwic2V0VVRDRnVsbFllYXIiLCJ1dGNZZWFycyIsImxvY2FsRGF0ZSIsIkgiLCJMIiwidXRjRGF0ZSIsIlVUQyIsIm5ld1llYXIiLCJmb3JtYXRMb2NhbGUkMSIsImxvY2FsZV9kYXRlVGltZSIsImRhdGVUaW1lIiwibG9jYWxlX2RhdGUiLCJsb2NhbGVfdGltZSIsImxvY2FsZV9wZXJpb2RzIiwicGVyaW9kcyIsImxvY2FsZV93ZWVrZGF5cyIsImxvY2FsZV9zaG9ydFdlZWtkYXlzIiwic2hvcnREYXlzIiwibG9jYWxlX21vbnRocyIsImxvY2FsZV9zaG9ydE1vbnRocyIsInNob3J0TW9udGhzIiwicGVyaW9kUmUiLCJmb3JtYXRSZSIsInBlcmlvZExvb2t1cCIsImZvcm1hdExvb2t1cCIsIndlZWtkYXlSZSIsIndlZWtkYXlMb29rdXAiLCJzaG9ydFdlZWtkYXlSZSIsInNob3J0V2Vla2RheUxvb2t1cCIsIm1vbnRoUmUiLCJtb250aExvb2t1cCIsInNob3J0TW9udGhSZSIsInNob3J0TW9udGhMb29rdXAiLCJmb3JtYXRzIiwiZm9ybWF0U2hvcnRXZWVrZGF5IiwiZm9ybWF0V2Vla2RheSIsImZvcm1hdFNob3J0TW9udGgiLCJmb3JtYXRNb250aCIsImZvcm1hdERheU9mTW9udGgiLCJmb3JtYXRNaWNyb3NlY29uZHMiLCJmb3JtYXRIb3VyMjQiLCJmb3JtYXRIb3VyMTIiLCJmb3JtYXREYXlPZlllYXIiLCJmb3JtYXRNaWxsaXNlY29uZHMiLCJmb3JtYXRNb250aE51bWJlciIsImZvcm1hdE1pbnV0ZXMiLCJmb3JtYXRQZXJpb2QiLCJmb3JtYXRVbml4VGltZXN0YW1wIiwiZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMiLCJmb3JtYXRTZWNvbmRzIiwiZm9ybWF0V2Vla2RheU51bWJlck1vbmRheSIsImZvcm1hdFdlZWtOdW1iZXJTdW5kYXkiLCJmb3JtYXRXZWVrTnVtYmVySVNPIiwiZm9ybWF0V2Vla2RheU51bWJlclN1bmRheSIsImZvcm1hdFdlZWtOdW1iZXJNb25kYXkiLCJmb3JtYXRZZWFyJDEiLCJmb3JtYXRGdWxsWWVhciIsImZvcm1hdFpvbmUiLCJmb3JtYXRMaXRlcmFsUGVyY2VudCIsInV0Y0Zvcm1hdHMiLCJmb3JtYXRVVENTaG9ydFdlZWtkYXkiLCJmb3JtYXRVVENXZWVrZGF5IiwiZm9ybWF0VVRDU2hvcnRNb250aCIsImZvcm1hdFVUQ01vbnRoIiwiZm9ybWF0VVRDRGF5T2ZNb250aCIsImZvcm1hdFVUQ01pY3Jvc2Vjb25kcyIsImZvcm1hdFVUQ0hvdXIyNCIsImZvcm1hdFVUQ0hvdXIxMiIsImZvcm1hdFVUQ0RheU9mWWVhciIsImZvcm1hdFVUQ01pbGxpc2Vjb25kcyIsImZvcm1hdFVUQ01vbnRoTnVtYmVyIiwiZm9ybWF0VVRDTWludXRlcyIsImZvcm1hdFVUQ1BlcmlvZCIsImZvcm1hdFVUQ1NlY29uZHMiLCJmb3JtYXRVVENXZWVrZGF5TnVtYmVyTW9uZGF5IiwiZm9ybWF0VVRDV2Vla051bWJlclN1bmRheSIsImZvcm1hdFVUQ1dlZWtOdW1iZXJJU08iLCJmb3JtYXRVVENXZWVrZGF5TnVtYmVyU3VuZGF5IiwiZm9ybWF0VVRDV2Vla051bWJlck1vbmRheSIsImZvcm1hdFVUQ1llYXIiLCJmb3JtYXRVVENGdWxsWWVhciIsImZvcm1hdFVUQ1pvbmUiLCJwYXJzZXMiLCJwYXJzZVNob3J0V2Vla2RheSIsInBhcnNlV2Vla2RheSIsInBhcnNlU2hvcnRNb250aCIsInBhcnNlTW9udGgiLCJwYXJzZUxvY2FsZURhdGVUaW1lIiwicGFyc2VEYXlPZk1vbnRoIiwicGFyc2VNaWNyb3NlY29uZHMiLCJwYXJzZUhvdXIyNCIsInBhcnNlRGF5T2ZZZWFyIiwicGFyc2VNaWxsaXNlY29uZHMiLCJwYXJzZU1vbnRoTnVtYmVyIiwicGFyc2VNaW51dGVzIiwicGFyc2VQZXJpb2QiLCJwYXJzZVVuaXhUaW1lc3RhbXAiLCJwYXJzZVVuaXhUaW1lc3RhbXBTZWNvbmRzIiwicGFyc2VTZWNvbmRzIiwicGFyc2VXZWVrZGF5TnVtYmVyTW9uZGF5IiwicGFyc2VXZWVrTnVtYmVyU3VuZGF5IiwicGFyc2VXZWVrTnVtYmVySVNPIiwicGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5IiwicGFyc2VXZWVrTnVtYmVyTW9uZGF5IiwicGFyc2VMb2NhbGVEYXRlIiwicGFyc2VMb2NhbGVUaW1lIiwicGFyc2VZZWFyIiwicGFyc2VGdWxsWWVhciIsInBhcnNlWm9uZSIsInBhcnNlTGl0ZXJhbFBlcmNlbnQiLCJwYWRzIiwiY2hhckF0IiwibmV3UGFyc2UiLCJuZXdEYXRlIiwicGFyc2VTcGVjaWZpZXIiLCJ3ZWVrIiwiZGF5JCQxIiwiUSIsIlYiLCJVIiwiWiIsInV0Y0Zvcm1hdCIsInV0Y1BhcnNlIiwibnVtYmVyUmUiLCJwZXJjZW50UmUiLCJyZXF1b3RlUmUiLCJwYWQkMSIsInJlcXVvdGUiLCJkb3ciLCJsb2NhbGUkMSIsImRlZmF1bHRMb2NhbGUkMSIsInRpbWVGb3JtYXQiLCJ0aW1lUGFyc2UiLCJpc29TcGVjaWZpZXIiLCJmb3JtYXRJc29OYXRpdmUiLCJ0b0lTT1N0cmluZyIsImZvcm1hdElzbyIsInBhcnNlSXNvTmF0aXZlIiwicGFyc2VJc28iLCJkdXJhdGlvblNlY29uZCQxIiwiZHVyYXRpb25NaW51dGUkMSIsImR1cmF0aW9uSG91ciQxIiwiZHVyYXRpb25EYXkkMSIsImR1cmF0aW9uV2VlayQxIiwiZHVyYXRpb25Nb250aCIsImR1cmF0aW9uWWVhciIsImRhdGUkMSIsIm51bWJlciQzIiwiY2FsZW5kYXIiLCJ5ZWFyJCQxIiwibW9udGgkJDEiLCJob3VyJCQxIiwibWludXRlJCQxIiwic2Vjb25kJCQxIiwibWlsbGlzZWNvbmQkJDEiLCJmb3JtYXRNaWxsaXNlY29uZCIsImZvcm1hdFNlY29uZCIsImZvcm1hdE1pbnV0ZSIsImZvcm1hdEhvdXIiLCJmb3JtYXREYXkiLCJmb3JtYXRXZWVrIiwidGlja0ludGVydmFscyIsInRpY2tJbnRlcnZhbCIsInV0Y1RpbWUiLCJ0cmFuc2Zvcm1lciQyIiwiazEwIiwiY29weSQxIiwic2VxdWVudGlhbCIsInNlcXVlbnRpYWxMb2ciLCJzZXF1ZW50aWFsU3ltbG9nIiwic2VxdWVudGlhbFBvdyIsInNlcXVlbnRpYWxTcXJ0Iiwic2VxdWVudGlhbFF1YW50aWxlIiwidHJhbnNmb3JtZXIkMyIsImsyMSIsImRpdmVyZ2luZyIsImRpdmVyZ2luZ0xvZyIsImRpdmVyZ2luZ1N5bWxvZyIsImRpdmVyZ2luZ1BvdyIsImRpdmVyZ2luZ1NxcnQiLCJjYXRlZ29yeTEwIiwiQWNjZW50IiwiRGFyazIiLCJQYWlyZWQiLCJQYXN0ZWwxIiwiUGFzdGVsMiIsIlNldDEiLCJTZXQyIiwiU2V0MyIsInJhbXAiLCJzY2hlbWUiLCJCckJHIiwic2NoZW1lJDEiLCJQUkduIiwic2NoZW1lJDIiLCJQaVlHIiwic2NoZW1lJDMiLCJQdU9yIiwic2NoZW1lJDQiLCJSZEJ1Iiwic2NoZW1lJDUiLCJSZEd5Iiwic2NoZW1lJDYiLCJSZFlsQnUiLCJzY2hlbWUkNyIsIlJkWWxHbiIsInNjaGVtZSQ4IiwiU3BlY3RyYWwiLCJzY2hlbWUkOSIsIkJ1R24iLCJzY2hlbWUkYSIsIkJ1UHUiLCJzY2hlbWUkYiIsIkduQnUiLCJzY2hlbWUkYyIsIk9yUmQiLCJzY2hlbWUkZCIsIlB1QnVHbiIsInNjaGVtZSRlIiwiUHVCdSIsInNjaGVtZSRmIiwiUHVSZCIsInNjaGVtZSRnIiwiUmRQdSIsInNjaGVtZSRoIiwiWWxHbkJ1Iiwic2NoZW1lJGkiLCJZbEduIiwic2NoZW1lJGoiLCJZbE9yQnIiLCJzY2hlbWUkayIsIllsT3JSZCIsInNjaGVtZSRsIiwiQmx1ZXMiLCJzY2hlbWUkbSIsIkdyZWVucyIsInNjaGVtZSRuIiwiR3JleXMiLCJzY2hlbWUkbyIsIlB1cnBsZXMiLCJzY2hlbWUkcCIsIlJlZHMiLCJzY2hlbWUkcSIsIk9yYW5nZXMiLCJjdWJlaGVsaXgkMyIsIndhcm0iLCJjb29sIiwicmFpbmJvdyIsInRzIiwiYyQxIiwicGlfMV8zIiwicGlfMl8zIiwic2luZWJvdyIsInJhbXAkMSIsInZpcmlkaXMiLCJtYWdtYSIsImluZmVybm8iLCJwbGFzbWEiLCJjb25zdGFudCRiIiwiYWJzJDEiLCJhdGFuMiQxIiwiY29zJDIiLCJtYXgkMiIsIm1pbiQxIiwic2luJDIiLCJzcXJ0JDIiLCJlcHNpbG9uJDMiLCJwaSQ0IiwiaGFsZlBpJDMiLCJ0YXUkNCIsImFjb3MkMSIsImFzaW4kMSIsImFyY0lubmVyUmFkaXVzIiwiaW5uZXJSYWRpdXMiLCJhcmNPdXRlclJhZGl1cyIsIm91dGVyUmFkaXVzIiwiYXJjU3RhcnRBbmdsZSIsImFyY0VuZEFuZ2xlIiwiYXJjUGFkQW5nbGUiLCJ4MTAiLCJ5MTAiLCJ4MzIiLCJ5MzIiLCJjb3JuZXJUYW5nZW50cyIsInJjIiwib3giLCJveSIsIngxMSIsInkxMSIsImN4MCIsImN4MSIsImR4MCIsImR5MCIsImR4MSIsImR5MSIsImNvcm5lclJhZGl1cyIsInBhZFJhZGl1cyIsImEwMSIsImExMSIsImExMCIsImRhMCIsImRhMSIsImFwIiwicnAiLCJyYzAiLCJyYzEiLCJvYyIsImtjIiwibGMiLCJMaW5lYXIiLCJhcmVhU3RhcnQiLCJhcmVhRW5kIiwiY3VydmVMaW5lYXIiLCJ4JDMiLCJ5JDMiLCJ4JCQxIiwieSQkMSIsImRlZmluZWQiLCJjdXJ2ZSIsImRlZmluZWQwIiwiYXJlYSQzIiwieDB6IiwieTB6IiwiYXJlYWxpbmUiLCJsaW5lWDAiLCJsaW5lWTAiLCJsaW5lWTEiLCJsaW5lWDEiLCJkZXNjZW5kaW5nJDEiLCJpZGVudGl0eSQ4IiwicGllIiwiYXJjcyIsImN1cnZlUmFkaWFsTGluZWFyIiwiY3VydmVSYWRpYWwiLCJSYWRpYWwiLCJfY3VydmUiLCJsaW5lUmFkaWFsIiwibGluZVJhZGlhbCQxIiwiYXJlYVJhZGlhbCIsImxpbmVTdGFydEFuZ2xlIiwibGluZUVuZEFuZ2xlIiwibGluZUlubmVyUmFkaXVzIiwibGluZU91dGVyUmFkaXVzIiwicG9pbnRSYWRpYWwiLCJzbGljZSQ2IiwibGlua1NvdXJjZSIsImxpbmtUYXJnZXQiLCJsaW5rJDIiLCJjdXJ2ZUhvcml6b250YWwiLCJjdXJ2ZVZlcnRpY2FsIiwiY3VydmVSYWRpYWwkMSIsInAyIiwicDMiLCJsaW5rSG9yaXpvbnRhbCIsImxpbmtWZXJ0aWNhbCIsImxpbmtSYWRpYWwiLCJjaXJjbGUkMiIsImRyYXciLCJjcm9zcyQyIiwidGFuMzAiLCJ0YW4zMF8yIiwiZGlhbW9uZCIsImthIiwia3IiLCJzdGFyIiwic3F1YXJlIiwic3FydDMiLCJ0cmlhbmdsZSIsImMkMiIsInd5ZSIsInN5bWJvbHMiLCJub29wJDMiLCJwb2ludCQyIiwiQmFzaXMiLCJiYXNpcyQyIiwiQmFzaXNDbG9zZWQiLCJfeDIiLCJfeDMiLCJfeDQiLCJfeTIiLCJfeTMiLCJfeTQiLCJiYXNpc0Nsb3NlZCQxIiwiQmFzaXNPcGVuIiwiYmFzaXNPcGVuIiwiQnVuZGxlIiwiX2Jhc2lzIiwiX2JldGEiLCJidW5kbGUiLCJwb2ludCQzIiwiX2siLCJDYXJkaW5hbCIsInRlbnNpb24iLCJjYXJkaW5hbCIsIkNhcmRpbmFsQ2xvc2VkIiwiX3g1IiwiX3k1IiwiY2FyZGluYWxDbG9zZWQiLCJjYXJkaW5hbCQkMSIsIkNhcmRpbmFsT3BlbiIsImNhcmRpbmFsT3BlbiIsInBvaW50JDQiLCJfbDAxX2EiLCJfbDAxXzJhIiwiX2wxMl9hIiwiX2wxMl8yYSIsIl9sMjNfYSIsIl9sMjNfMmEiLCJDYXRtdWxsUm9tIiwiX2FscGhhIiwieDIzIiwieTIzIiwiY2F0bXVsbFJvbSIsIkNhdG11bGxSb21DbG9zZWQiLCJjYXRtdWxsUm9tQ2xvc2VkIiwiY2F0bXVsbFJvbSQkMSIsIkNhdG11bGxSb21PcGVuIiwiY2F0bXVsbFJvbU9wZW4iLCJMaW5lYXJDbG9zZWQiLCJsaW5lYXJDbG9zZWQiLCJzaWduJDEiLCJzbG9wZTMiLCJoMCIsImgxIiwic2xvcGUyIiwicG9pbnQkNSIsIk1vbm90b25lWCIsIl90MCIsIk1vbm90b25lWSIsIlJlZmxlY3RDb250ZXh0IiwibW9ub3RvbmVYIiwibW9ub3RvbmVZIiwiTmF0dXJhbCIsInB4IiwiY29udHJvbFBvaW50cyIsInB5IiwibmF0dXJhbCIsIlN0ZXAiLCJfdCIsInN0ZXBCZWZvcmUiLCJzdGVwQWZ0ZXIiLCJub25lJDEiLCJzZXJpZXMiLCJub25lJDIiLCJzdGFja1ZhbHVlIiwic3RhY2siLCJreiIsInN6Iiwib3oiLCJraSIsInNpIiwic2lqIiwiZXhwYW5kIiwiZGl2ZXJnaW5nJDEiLCJ5biIsInNpbGhvdWV0dGUiLCJ3aWdnbGUiLCJzMiIsInNpajAiLCJzaWoxIiwiczMiLCJza2owIiwic2tqMSIsImFwcGVhcmFuY2UiLCJwZWFrcyIsInBlYWsiLCJ2aSIsInZqIiwiYXNjZW5kaW5nJDMiLCJzdW0kMiIsImRlc2NlbmRpbmckMiIsImluc2lkZU91dCIsInRvcHMiLCJib3R0b21zIiwiY29uc3RhbnQkYyIsIngkNCIsInkkNCIsIlJlZEJsYWNrVHJlZSIsIlJlZEJsYWNrTm9kZSIsIlIiLCJQIiwiYWZ0ZXIiLCJncmFuZHBhIiwidW5jbGUiLCJSZWRCbGFja0ZpcnN0IiwiUmVkQmxhY2tSb3RhdGVMZWZ0IiwiUmVkQmxhY2tSb3RhdGVSaWdodCIsInNpYmxpbmciLCJjcmVhdGVFZGdlIiwiZWRnZSIsImVkZ2VzIiwic2V0RWRnZUVuZCIsImNlbGxzIiwiaGFsZmVkZ2VzIiwiY3JlYXRlQm9yZGVyRWRnZSIsInZlcnRleCIsImNsaXBFZGdlIiwiY29ubmVjdEVkZ2UiLCJseCIsImx5IiwicngiLCJyeSIsImZtIiwiZmIiLCJjbGlwRWRnZXMiLCJlcHNpbG9uJDQiLCJjcmVhdGVDZWxsIiwic2l0ZSIsImNlbGxIYWxmZWRnZUFuZ2xlIiwiY2VsbCIsInZhIiwidmIiLCJjZWxsSGFsZmVkZ2VTdGFydCIsImNlbGxIYWxmZWRnZUVuZCIsInNvcnRDZWxsSGFsZmVkZ2VzIiwiY2xpcENlbGxzIiwibkNlbGxzIiwiaUNlbGwiLCJpSGFsZmVkZ2UiLCJuSGFsZmVkZ2VzIiwic3RhcnRYIiwic3RhcnRZIiwiZW5kWCIsImVuZFkiLCJkYyIsInYwMSIsInYxMSIsInYxMCIsImNpcmNsZVBvb2wiLCJmaXJzdENpcmNsZSIsIkNpcmNsZSIsImF0dGFjaENpcmNsZSIsImxBcmMiLCJyQXJjIiwibFNpdGUiLCJjU2l0ZSIsInJTaXRlIiwiZXBzaWxvbjIkMiIsImhhIiwiaGMiLCJkZXRhY2hDaXJjbGUiLCJiZWFjaFBvb2wiLCJCZWFjaCIsImNyZWF0ZUJlYWNoIiwiYmVhY2giLCJkZXRhY2hCZWFjaCIsImJlYWNoZXMiLCJyZW1vdmVCZWFjaCIsImRpc2FwcGVhcmluZyIsIm5BcmNzIiwiaUFyYyIsImFkZEJlYWNoIiwiZGlyZWN0cml4IiwiZHhsIiwiZHhyIiwibGVmdEJyZWFrUG9pbnQiLCJyaWdodEJyZWFrUG9pbnQiLCJuZXdBcmMiLCJoYiIsInJmb2N4IiwicmZvY3kiLCJwYnkyIiwibGZvY3giLCJsZm9jeSIsInBsYnkyIiwiaGwiLCJhYnkyIiwidHJpYW5nbGVBcmVhIiwibGV4aWNvZ3JhcGhpYyIsIkRpYWdyYW0iLCJzaXRlcyIsInRyaWFuZ2xlcyIsIl9mb3VuZCIsInZvcm9ub2kiLCJjb25zdGFudCRkIiwiWm9vbUV2ZW50IiwiVHJhbnNmb3JtIiwiYXBwbHlYIiwiYXBwbHlZIiwibG9jYXRpb24iLCJpbnZlcnRYIiwiaW52ZXJ0WSIsInJlc2NhbGVYIiwicmVzY2FsZVkiLCJpZGVudGl0eSQ5IiwidHJhbnNmb3JtJDEiLCJfX3pvb20iLCJub3Byb3BhZ2F0aW9uJDIiLCJub2V2ZW50JDIiLCJkZWZhdWx0RmlsdGVyJDIiLCJkZWZhdWx0RXh0ZW50JDEiLCJTVkdFbGVtZW50IiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJkZWZhdWx0VHJhbnNmb3JtIiwiZGVmYXVsdFdoZWVsRGVsdGEiLCJkZWx0YVkiLCJkZWx0YU1vZGUiLCJkZWZhdWx0VG91Y2hhYmxlJDEiLCJkZWZhdWx0Q29uc3RyYWluIiwidHJhbnNsYXRlRXh0ZW50Iiwiem9vbSIsImNvbnN0cmFpbiIsIndoZWVsRGVsdGEiLCJzY2FsZUV4dGVudCIsInRvdWNoc3RhcnRpbmciLCJ0b3VjaERlbGF5Iiwid2hlZWxEZWxheSIsIndoZWVsZWQiLCJkYmxjbGlja2VkIiwiY29sbGVjdGlvbiIsInNjYWxlQnkiLCJzY2FsZVRvIiwiazAiLCJrMSIsInRyYW5zbGF0ZUJ5IiwidHJhbnNsYXRlVG8iLCJHZXN0dXJlIiwidG91Y2gwIiwidG91Y2gxIiwid2hlZWwiLCJ3aGVlbGlkbGVkIiwibDAiLCJsMSIsImRwIiwiZGwiLCJiaXNlY3QiLCJ0aHJlc2hvbGRGcmVlZG1hbkRpYWNvbmlzIiwidGhyZXNob2xkU2NvdHQiLCJxdWFudGlsZSIsImNvbnRvdXJEZW5zaXR5IiwiZHJhZ0VuYWJsZSIsImVhc2VMaW5lYXIiLCJlYXNlUXVhZCIsImVhc2VRdWFkSW4iLCJlYXNlUXVhZE91dCIsImVhc2VRdWFkSW5PdXQiLCJlYXNlQ3ViaWMiLCJlYXNlQ3ViaWNJbiIsImVhc2VDdWJpY091dCIsImVhc2VDdWJpY0luT3V0IiwiZWFzZVBvbHkiLCJlYXNlUG9seUluIiwiZWFzZVBvbHlPdXQiLCJlYXNlUG9seUluT3V0IiwiZWFzZVNpbiIsImVhc2VTaW5JbiIsImVhc2VTaW5PdXQiLCJlYXNlU2luSW5PdXQiLCJlYXNlRXhwIiwiZWFzZUV4cEluIiwiZWFzZUV4cE91dCIsImVhc2VFeHBJbk91dCIsImVhc2VDaXJjbGUiLCJlYXNlQ2lyY2xlSW4iLCJlYXNlQ2lyY2xlT3V0IiwiZWFzZUNpcmNsZUluT3V0IiwiZWFzZUJvdW5jZSIsImVhc2VCb3VuY2VJbiIsImVhc2VCb3VuY2VPdXQiLCJlYXNlQm91bmNlSW5PdXQiLCJlYXNlQmFjayIsImVhc2VCYWNrSW4iLCJlYXNlQmFja091dCIsImVhc2VCYWNrSW5PdXQiLCJlYXNlRWxhc3RpYyIsImVhc2VFbGFzdGljSW4iLCJlYXNlRWxhc3RpY091dCIsImVhc2VFbGFzdGljSW5PdXQiLCJmb3JjZUNlbnRlciIsImZvcmNlQ29sbGlkZSIsImZvcmNlTGluayIsImZvcmNlTWFueUJvZHkiLCJmb3JjZVJhZGlhbCIsImZvcmNlU2ltdWxhdGlvbiIsImZvcmNlWCIsImZvcmNlWSIsImZvcm1hdERlZmF1bHRMb2NhbGUiLCJnZW9BcmVhIiwiZ2VvQm91bmRzIiwiZ2VvQ2VudHJvaWQiLCJnZW9DaXJjbGUiLCJnZW9DbGlwQW50aW1lcmlkaWFuIiwiZ2VvQ2xpcENpcmNsZSIsImdlb0NsaXBFeHRlbnQiLCJnZW9DbGlwUmVjdGFuZ2xlIiwiZ2VvQ29udGFpbnMiLCJnZW9EaXN0YW5jZSIsImdlb0dyYXRpY3VsZSIsImdlb0dyYXRpY3VsZTEwIiwiZ2VvSW50ZXJwb2xhdGUiLCJnZW9MZW5ndGgiLCJnZW9QYXRoIiwiZ2VvQWxiZXJzIiwiZ2VvQWxiZXJzVXNhIiwiZ2VvQXppbXV0aGFsRXF1YWxBcmVhIiwiZ2VvQXppbXV0aGFsRXF1YWxBcmVhUmF3IiwiZ2VvQXppbXV0aGFsRXF1aWRpc3RhbnQiLCJnZW9BemltdXRoYWxFcXVpZGlzdGFudFJhdyIsImdlb0NvbmljQ29uZm9ybWFsIiwiZ2VvQ29uaWNDb25mb3JtYWxSYXciLCJnZW9Db25pY0VxdWFsQXJlYSIsImdlb0NvbmljRXF1YWxBcmVhUmF3IiwiZ2VvQ29uaWNFcXVpZGlzdGFudCIsImdlb0NvbmljRXF1aWRpc3RhbnRSYXciLCJnZW9FcXVhbEVhcnRoIiwiZ2VvRXF1YWxFYXJ0aFJhdyIsImdlb0VxdWlyZWN0YW5ndWxhciIsImdlb0VxdWlyZWN0YW5ndWxhclJhdyIsImdlb0dub21vbmljIiwiZ2VvR25vbW9uaWNSYXciLCJnZW9JZGVudGl0eSIsImdlb1Byb2plY3Rpb24iLCJnZW9Qcm9qZWN0aW9uTXV0YXRvciIsImdlb01lcmNhdG9yIiwiZ2VvTWVyY2F0b3JSYXciLCJnZW9OYXR1cmFsRWFydGgxIiwiZ2VvTmF0dXJhbEVhcnRoMVJhdyIsImdlb09ydGhvZ3JhcGhpYyIsImdlb09ydGhvZ3JhcGhpY1JhdyIsImdlb1N0ZXJlb2dyYXBoaWMiLCJnZW9TdGVyZW9ncmFwaGljUmF3IiwiZ2VvVHJhbnN2ZXJzZU1lcmNhdG9yIiwiZ2VvVHJhbnN2ZXJzZU1lcmNhdG9yUmF3IiwiZ2VvUm90YXRpb24iLCJnZW9UcmFuc2Zvcm0iLCJwYWNrU2libGluZ3MiLCJ0cmVlbWFwQmluYXJ5IiwidHJlZW1hcFNsaWNlRGljZSIsInRyZWVtYXBTcXVhcmlmeSIsInRyZWVtYXBSZXNxdWFyaWZ5IiwiaW50ZXJwb2xhdGVBcnJheSIsImludGVycG9sYXRlQmFzaXMiLCJpbnRlcnBvbGF0ZUJhc2lzQ2xvc2VkIiwiaW50ZXJwb2xhdGVEYXRlIiwiaW50ZXJwb2xhdGVEaXNjcmV0ZSIsImludGVycG9sYXRlSHVlIiwiaW50ZXJwb2xhdGVPYmplY3QiLCJpbnRlcnBvbGF0ZVJnYkJhc2lzIiwiaW50ZXJwb2xhdGVSZ2JCYXNpc0Nsb3NlZCIsImludGVycG9sYXRlSHNsIiwiaW50ZXJwb2xhdGVIc2xMb25nIiwiaW50ZXJwb2xhdGVMYWIiLCJpbnRlcnBvbGF0ZUhjbCIsImludGVycG9sYXRlSGNsTG9uZyIsImludGVycG9sYXRlQ3ViZWhlbGl4IiwiaW50ZXJwb2xhdGVDdWJlaGVsaXhMb25nIiwicG9seWdvbkFyZWEiLCJwb2x5Z29uQ2VudHJvaWQiLCJwb2x5Z29uSHVsbCIsInBvbHlnb25MZW5ndGgiLCJzY2FsZUJhbmQiLCJzY2FsZVBvaW50Iiwic2NhbGVJZGVudGl0eSIsInNjYWxlTGluZWFyIiwic2NhbGVMb2ciLCJzY2FsZVN5bWxvZyIsInNjYWxlT3JkaW5hbCIsInNjYWxlSW1wbGljaXQiLCJzY2FsZVBvdyIsInNjYWxlU3FydCIsInNjYWxlUXVhbnRpbGUiLCJzY2FsZVF1YW50aXplIiwic2NhbGVUaHJlc2hvbGQiLCJzY2FsZVRpbWUiLCJzY2FsZVV0YyIsInNjYWxlU2VxdWVudGlhbCIsInNjYWxlU2VxdWVudGlhbExvZyIsInNjYWxlU2VxdWVudGlhbFBvdyIsInNjYWxlU2VxdWVudGlhbFNxcnQiLCJzY2FsZVNlcXVlbnRpYWxTeW1sb2ciLCJzY2FsZVNlcXVlbnRpYWxRdWFudGlsZSIsInNjYWxlRGl2ZXJnaW5nIiwic2NhbGVEaXZlcmdpbmdMb2ciLCJzY2FsZURpdmVyZ2luZ1BvdyIsInNjYWxlRGl2ZXJnaW5nU3FydCIsInNjYWxlRGl2ZXJnaW5nU3ltbG9nIiwic2NoZW1lQ2F0ZWdvcnkxMCIsInNjaGVtZUFjY2VudCIsInNjaGVtZURhcmsyIiwic2NoZW1lUGFpcmVkIiwic2NoZW1lUGFzdGVsMSIsInNjaGVtZVBhc3RlbDIiLCJzY2hlbWVTZXQxIiwic2NoZW1lU2V0MiIsInNjaGVtZVNldDMiLCJpbnRlcnBvbGF0ZUJyQkciLCJzY2hlbWVCckJHIiwiaW50ZXJwb2xhdGVQUkduIiwic2NoZW1lUFJHbiIsImludGVycG9sYXRlUGlZRyIsInNjaGVtZVBpWUciLCJpbnRlcnBvbGF0ZVB1T3IiLCJzY2hlbWVQdU9yIiwiaW50ZXJwb2xhdGVSZEJ1Iiwic2NoZW1lUmRCdSIsImludGVycG9sYXRlUmRHeSIsInNjaGVtZVJkR3kiLCJpbnRlcnBvbGF0ZVJkWWxCdSIsInNjaGVtZVJkWWxCdSIsImludGVycG9sYXRlUmRZbEduIiwic2NoZW1lUmRZbEduIiwiaW50ZXJwb2xhdGVTcGVjdHJhbCIsInNjaGVtZVNwZWN0cmFsIiwiaW50ZXJwb2xhdGVCdUduIiwic2NoZW1lQnVHbiIsImludGVycG9sYXRlQnVQdSIsInNjaGVtZUJ1UHUiLCJpbnRlcnBvbGF0ZUduQnUiLCJzY2hlbWVHbkJ1IiwiaW50ZXJwb2xhdGVPclJkIiwic2NoZW1lT3JSZCIsImludGVycG9sYXRlUHVCdUduIiwic2NoZW1lUHVCdUduIiwiaW50ZXJwb2xhdGVQdUJ1Iiwic2NoZW1lUHVCdSIsImludGVycG9sYXRlUHVSZCIsInNjaGVtZVB1UmQiLCJpbnRlcnBvbGF0ZVJkUHUiLCJzY2hlbWVSZFB1IiwiaW50ZXJwb2xhdGVZbEduQnUiLCJzY2hlbWVZbEduQnUiLCJpbnRlcnBvbGF0ZVlsR24iLCJzY2hlbWVZbEduIiwiaW50ZXJwb2xhdGVZbE9yQnIiLCJzY2hlbWVZbE9yQnIiLCJpbnRlcnBvbGF0ZVlsT3JSZCIsInNjaGVtZVlsT3JSZCIsImludGVycG9sYXRlQmx1ZXMiLCJzY2hlbWVCbHVlcyIsImludGVycG9sYXRlR3JlZW5zIiwic2NoZW1lR3JlZW5zIiwiaW50ZXJwb2xhdGVHcmV5cyIsInNjaGVtZUdyZXlzIiwiaW50ZXJwb2xhdGVQdXJwbGVzIiwic2NoZW1lUHVycGxlcyIsImludGVycG9sYXRlUmVkcyIsInNjaGVtZVJlZHMiLCJpbnRlcnBvbGF0ZU9yYW5nZXMiLCJzY2hlbWVPcmFuZ2VzIiwiaW50ZXJwb2xhdGVDdWJlaGVsaXhEZWZhdWx0IiwiaW50ZXJwb2xhdGVSYWluYm93IiwiaW50ZXJwb2xhdGVXYXJtIiwiaW50ZXJwb2xhdGVDb29sIiwiaW50ZXJwb2xhdGVTaW5lYm93IiwiaW50ZXJwb2xhdGVWaXJpZGlzIiwiaW50ZXJwb2xhdGVNYWdtYSIsImludGVycG9sYXRlSW5mZXJubyIsImludGVycG9sYXRlUGxhc21hIiwiY2xpZW50UG9pbnQiLCJyYWRpYWxBcmVhIiwicmFkaWFsTGluZSIsInN5bWJvbENpcmNsZSIsInN5bWJvbENyb3NzIiwic3ltYm9sRGlhbW9uZCIsInN5bWJvbFNxdWFyZSIsInN5bWJvbFN0YXIiLCJzeW1ib2xUcmlhbmdsZSIsInN5bWJvbFd5ZSIsImN1cnZlQmFzaXNDbG9zZWQiLCJjdXJ2ZUJhc2lzT3BlbiIsImN1cnZlQmFzaXMiLCJjdXJ2ZUJ1bmRsZSIsImN1cnZlQ2FyZGluYWxDbG9zZWQiLCJjdXJ2ZUNhcmRpbmFsT3BlbiIsImN1cnZlQ2FyZGluYWwiLCJjdXJ2ZUNhdG11bGxSb21DbG9zZWQiLCJjdXJ2ZUNhdG11bGxSb21PcGVuIiwiY3VydmVDYXRtdWxsUm9tIiwiY3VydmVMaW5lYXJDbG9zZWQiLCJjdXJ2ZU1vbm90b25lWCIsImN1cnZlTW9ub3RvbmVZIiwiY3VydmVOYXR1cmFsIiwiY3VydmVTdGVwIiwiY3VydmVTdGVwQWZ0ZXIiLCJjdXJ2ZVN0ZXBCZWZvcmUiLCJzdGFja09mZnNldEV4cGFuZCIsInN0YWNrT2Zmc2V0RGl2ZXJnaW5nIiwic3RhY2tPZmZzZXROb25lIiwic3RhY2tPZmZzZXRTaWxob3VldHRlIiwic3RhY2tPZmZzZXRXaWdnbGUiLCJzdGFja09yZGVyQXBwZWFyYW5jZSIsInN0YWNrT3JkZXJBc2NlbmRpbmciLCJzdGFja09yZGVyRGVzY2VuZGluZyIsInN0YWNrT3JkZXJJbnNpZGVPdXQiLCJzdGFja09yZGVyTm9uZSIsInN0YWNrT3JkZXJSZXZlcnNlIiwidGltZUludGVydmFsIiwidGltZU1pbGxpc2Vjb25kIiwidGltZU1pbGxpc2Vjb25kcyIsInV0Y01pbGxpc2Vjb25kIiwidXRjTWlsbGlzZWNvbmRzIiwidGltZVNlY29uZCIsInRpbWVTZWNvbmRzIiwidXRjU2Vjb25kIiwidXRjU2Vjb25kcyIsInRpbWVNaW51dGUiLCJ0aW1lTWludXRlcyIsInRpbWVIb3VyIiwidGltZUhvdXJzIiwidGltZURheSIsInRpbWVEYXlzIiwidGltZVdlZWsiLCJ0aW1lV2Vla3MiLCJ0aW1lU3VuZGF5IiwidGltZVN1bmRheXMiLCJ0aW1lTW9uZGF5IiwidGltZU1vbmRheXMiLCJ0aW1lVHVlc2RheSIsInRpbWVUdWVzZGF5cyIsInRpbWVXZWRuZXNkYXkiLCJ0aW1lV2VkbmVzZGF5cyIsInRpbWVUaHVyc2RheSIsInRpbWVUaHVyc2RheXMiLCJ0aW1lRnJpZGF5IiwidGltZUZyaWRheXMiLCJ0aW1lU2F0dXJkYXkiLCJ0aW1lU2F0dXJkYXlzIiwidGltZU1vbnRoIiwidGltZU1vbnRocyIsInRpbWVZZWFyIiwidGltZVllYXJzIiwidXRjV2VlayIsInV0Y1dlZWtzIiwidGltZUZvcm1hdERlZmF1bHRMb2NhbGUiLCJ0aW1lRm9ybWF0TG9jYWxlIiwiaXNvRm9ybWF0IiwiaXNvUGFyc2UiLCJ6b29tVHJhbnNmb3JtIiwiem9vbUlkZW50aXR5IiwiZGVmaW5lUHJvcGVydHkiLCJuYXZpZ2F0b3IiLCIkIiwiaW9uIiwic291bmQiLCJ3YXJuIiwiY29uc29sZSIsInByb3AiLCJBdWRpbyIsImZ1bmMiLCJwbGF5IiwicGF1c2UiLCJwcmVsb2FkIiwiZGVzdHJveSIsImlzX2lPUyIsImFwcFZlcnNpb24iLCJzb3VuZHNfbnVtIiwic2V0dGluZ3MiLCJzb3VuZHMiLCJzdXBwb3J0ZWQiLCJjcmVhdGVTb3VuZCIsIm9iaiIsImFsaWFzIiwiU291bmQiLCJvcHRpb25zIiwidm9sdW1lIiwibXVsdGlwbGF5IiwibG9vcCIsInNwcml0ZSIsInNjb3BlIiwicmVhZHlfY2FsbGJhY2siLCJlbmRlZF9jYWxsYmFjayIsIlZFUlNJT04iLCJfbWV0aG9kIiwibWV0aG9kIiwiaW9uU291bmQiLCJBdWRpb0NvbnRleHQiLCJ3ZWJraXRBdWRpb0NvbnRleHQiLCJhdWRpbyIsInJlcXVlc3QiLCJleHQiLCJ1cmwiLCJsb2FkZWQiLCJkZWNvZGVkIiwibm9fZmlsZSIsImF1dG9wbGF5IiwibG9hZCIsInJlYWR5IiwiYWJvcnQiLCJjcmVhdGVVcmwiLCJub19jYWNoZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsInJlc3BvbnNlVHlwZSIsInNlbmQiLCJyZWxvYWQiLCJyZWFkeVN0YXRlIiwiZGVjb2RlIiwiZGVjb2RlQXVkaW9EYXRhIiwic2V0QnVmZmVyIiwiY29uZmlnIiwiU3RyZWFtIiwicGFydCIsInNldFZvbHVtZSIsInNwcml0ZV9wYXJ0Iiwic2V0TG9vcCIsImdhaW4iLCJwbGF5aW5nIiwicGF1c2VkIiwidGltZV9zdGFydGVkIiwidGltZV9lbmRlZCIsInRpbWVfcGxheWVkIiwidGltZV9vZmZzZXQiLCJkaXNjb25uZWN0IiwiY3JlYXRlR2FpbiIsImNyZWF0ZUJ1ZmZlclNvdXJjZSIsImNvbm5lY3QiLCJkZXN0aW5hdGlvbiIsIm9uZW5kZWQiLCJfcGxheSIsIm5vdGVPbiIsIm5vdGVPZmYiLCJfZW5kZWQiLCJjaGVja1N1cHBvcnQiLCJjYW5fcGxheV9tcDMiLCJjYW5QbGF5VHlwZSIsImNhbl9wbGF5X29nZyIsImNhbl9wbGF5X2FhYyIsIml0ZW0iLCJpbml0ZWQiLCJfcmVhZHkiLCJfc2NvcGUiLCJzdGFydF90aW1lIiwicGF1c2VkX3RpbWUiLCJwbGF5ZWRfdGltZSIsImNhbl9wbGF5X3Rocm91Z2giLCJfdXBkYXRlIiwicmFuZCIsImN1cnJlbnRUaW1lIiwiY3VycmVudF90aW1lIiwicGxheWVkIiwibG9vcGVyIiwialF1ZXJ5Iiwibm9HbG9iYWwiLCJhcnIiLCJjbGFzczJ0eXBlIiwiaGFzT3duIiwic3VwcG9ydCIsImZuIiwicnRyaW0iLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsImFsbCIsImxldHRlciIsImpxdWVyeSIsInRvQXJyYXkiLCJudW0iLCJwdXNoU3RhY2siLCJlbGVtcyIsInJldCIsInByZXZPYmplY3QiLCJlbGVtIiwiZXEiLCJsYXN0IiwibGVuIiwiY29weUlzQXJyYXkiLCJpc0Z1bmN0aW9uIiwiaXNQbGFpbk9iamVjdCIsImV4cGFuZG8iLCJpc1JlYWR5IiwibXNnIiwiaXNXaW5kb3ciLCJpc051bWVyaWMiLCJyZWFsU3RyaW5nT2JqIiwicGFyc2VGbG9hdCIsIm5vZGVUeXBlIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJzY3JpcHQiLCJpbmRpcmVjdCIsImV2YWwiLCJoZWFkIiwiY2FtZWxDYXNlIiwibm9kZU5hbWUiLCJpc0FycmF5TGlrZSIsIm1ha2VBcnJheSIsInJlc3VsdHMiLCJpbkFycmF5IiwiZ3JlcCIsImNhbGxiYWNrSW52ZXJzZSIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwiZ3VpZCIsInByb3h5IiwidG1wIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJTaXp6bGUiLCJFeHByIiwiZ2V0VGV4dCIsImlzWE1MIiwidG9rZW5pemUiLCJjb21waWxlIiwib3V0ZXJtb3N0Q29udGV4dCIsInNvcnRJbnB1dCIsImhhc0R1cGxpY2F0ZSIsInNldERvY3VtZW50IiwiZG9jRWxlbSIsImRvY3VtZW50SXNIVE1MIiwicmJ1Z2d5UVNBIiwicmJ1Z2d5TWF0Y2hlcyIsInByZWZlcnJlZERvYyIsImRpcnJ1bnMiLCJkb25lIiwiY2xhc3NDYWNoZSIsImNyZWF0ZUNhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJzb3J0T3JkZXIiLCJNQVhfTkVHQVRJVkUiLCJwdXNoX25hdGl2ZSIsImJvb2xlYW5zIiwid2hpdGVzcGFjZSIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyYXR0cmlidXRlUXVvdGVzIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwicmlucHV0cyIsInJoZWFkZXIiLCJybmF0aXZlIiwicnF1aWNrRXhwciIsInJzaWJsaW5nIiwicmVzY2FwZSIsInJ1bmVzY2FwZSIsImZ1bmVzY2FwZSIsImVzY2FwZWQiLCJlc2NhcGVkV2hpdGVzcGFjZSIsImhpZ2giLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJ1bmxvYWRIYW5kbGVyIiwiY2hpbGROb2RlcyIsImVscyIsInNlZWQiLCJuaWQiLCJuaWRzZWxlY3QiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJnZXRFbGVtZW50QnlJZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInFzYSIsInRvU2VsZWN0b3IiLCJ0ZXN0Q29udGV4dCIsInFzYUVycm9yIiwiY2FjaGVMZW5ndGgiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJkaXYiLCJhZGRIYW5kbGUiLCJhdHRycyIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiY3VyIiwiZGlmZiIsInNvdXJjZUluZGV4IiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJoYXNDb21wYXJlIiwiZG9jIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiYXR0cklkIiwiZ2V0QXR0cmlidXRlTm9kZSIsInRhZyIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiYWRvd24iLCJidXAiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJicCIsImV4cHIiLCJlbGVtZW50cyIsInZhbCIsInNwZWNpZmllZCIsInVuaXF1ZVNvcnQiLCJkdXBsaWNhdGVzIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCJyZWxhdGl2ZSIsImRpciIsInByZUZpbHRlciIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsInBhdHRlcm4iLCJvcGVyYXRvciIsImNoZWNrIiwid2hhdCIsInNpbXBsZSIsIm9mVHlwZSIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInVzZUNhY2hlIiwibGFzdENoaWxkIiwidW5pcXVlSUQiLCJwc2V1ZG8iLCJzZXRGaWx0ZXJzIiwiaWR4IiwibWF0Y2hlZCIsInVubWF0Y2hlZCIsImlubmVyVGV4dCIsImxhbmciLCJlbGVtTGFuZyIsImhhc2giLCJhY3RpdmVFbGVtZW50IiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJkaXNhYmxlZCIsImNoZWNrZWQiLCJzZWxlY3RlZCIsInNlbGVjdGVkSW5kZXgiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwic3VibWl0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInRva2VucyIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsImFkZENvbWJpbmF0b3IiLCJjb21iaW5hdG9yIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwib2xkQ2FjaGUiLCJuZXdDYWNoZSIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJtdWx0aXBsZUNvbnRleHRzIiwiY29udGV4dHMiLCJjb25kZW5zZSIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJzZXRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJkaXJydW5zVW5pcXVlIiwiY29tcGlsZWQiLCJkaXYxIiwiZGVmYXVsdFZhbHVlIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJ1bnRpbCIsInRydW5jYXRlIiwiaXMiLCJybmVlZHNDb250ZXh0IiwibmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsInJpc1NpbXBsZSIsIndpbm5vdyIsInF1YWxpZmllciIsIm5vdCIsInJvb3RqUXVlcnkiLCJwYXJzZUhUTUwiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY29udGVudHMiLCJwcmV2IiwidGFyZ2V0cyIsInBvcyIsInByZXZBbGwiLCJhZGRCYWNrIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsInJub3R3aGl0ZSIsImNyZWF0ZU9wdGlvbnMiLCJmbGFnIiwiQ2FsbGJhY2tzIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJxdWV1ZSIsImZpcmluZ0luZGV4IiwiZmlyZSIsIm9uY2UiLCJzdG9wT25GYWxzZSIsImRpc2FibGUiLCJsb2NrIiwiZmlyZVdpdGgiLCJEZWZlcnJlZCIsInR1cGxlcyIsInByb21pc2UiLCJhbHdheXMiLCJkZWZlcnJlZCIsImZhaWwiLCJmbnMiLCJuZXdEZWZlciIsInR1cGxlIiwicmV0dXJuZWQiLCJwcm9ncmVzcyIsIm5vdGlmeSIsInBpcGUiLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzdWJvcmRpbmF0ZSIsInJlc29sdmVWYWx1ZXMiLCJyZW1haW5pbmciLCJ1cGRhdGVGdW5jIiwicHJvZ3Jlc3NWYWx1ZXMiLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJwcm9ncmVzc0NvbnRleHRzIiwicmVzb2x2ZUNvbnRleHRzIiwicmVhZHlMaXN0IiwicmVhZHlXYWl0IiwiaG9sZFJlYWR5IiwiaG9sZCIsIndhaXQiLCJ0cmlnZ2VySGFuZGxlciIsIm9mZiIsImNvbXBsZXRlZCIsImRvU2Nyb2xsIiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiRGF0YSIsInVpZCIsInJlZ2lzdGVyIiwiaW5pdGlhbCIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwic3RvcmVkIiwiY2FtZWwiLCJoYXNEYXRhIiwiZGF0YVByaXYiLCJkYXRhVXNlciIsInJicmFjZSIsInJtdWx0aURhc2giLCJkYXRhQXR0ciIsInBhcnNlSlNPTiIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwiY2FtZWxLZXkiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwic2V0dGVyIiwiY2xlYXJRdWV1ZSIsImRlZmVyIiwicG51bSIsInJjc3NOdW0iLCJjc3NFeHBhbmQiLCJpc0hpZGRlbiIsImVsIiwiY3NzIiwiYWRqdXN0Q1NTIiwidmFsdWVQYXJ0cyIsImFkanVzdGVkIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImNzc051bWJlciIsImluaXRpYWxJblVuaXQiLCJyY2hlY2thYmxlVHlwZSIsInJ0YWdOYW1lIiwicnNjcmlwdFR5cGUiLCJ3cmFwTWFwIiwib3B0aW9uIiwidGhlYWQiLCJjb2wiLCJ0ZCIsIl9kZWZhdWx0Iiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJnZXRBbGwiLCJzZXRHbG9iYWxFdmFsIiwicmVmRWxlbWVudHMiLCJyaHRtbCIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwiaWdub3JlZCIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImNyZWF0ZVRleHROb2RlIiwiaHRtbFByZWZpbHRlciIsImNoZWNrQ2xvbmUiLCJub0Nsb25lQ2hlY2tlZCIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJzYWZlQWN0aXZlRWxlbWVudCIsImVyciIsIm9yaWdGbiIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJldmVudHMiLCJoYW5kbGVPYmoiLCJzcGVjaWFsIiwiaGFuZGxlcnMiLCJvcmlnVHlwZSIsImVsZW1EYXRhIiwidHJpZ2dlcmVkIiwiZGVsZWdhdGVUeXBlIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJmaXgiLCJoYW5kbGVyUXVldWUiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJjdXJyZW50VGFyZ2V0IiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJybmFtZXNwYWNlIiwic3RvcFByb3BhZ2F0aW9uIiwicG9zdERpc3BhdGNoIiwic2VsIiwicHJvcHMiLCJmaXhIb29rcyIsImtleUhvb2tzIiwib3JpZ2luYWwiLCJ3aGljaCIsImNoYXJDb2RlIiwibW91c2VIb29rcyIsImV2ZW50RG9jIiwiYm9keSIsInBhZ2VYIiwic2Nyb2xsTGVmdCIsInBhZ2VZIiwic2Nyb2xsVG9wIiwib3JpZ2luYWxFdmVudCIsImZpeEhvb2siLCJFdmVudCIsIm5vQnViYmxlIiwiZm9jdXMiLCJ0cmlnZ2VyIiwiYmx1ciIsImNsaWNrIiwiYmVmb3JldW5sb2FkIiwicmV0dXJuVmFsdWUiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwidGltZVN0YW1wIiwiaXNTaW11bGF0ZWQiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJvcmlnIiwicnhodG1sVGFnIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyc2NyaXB0VHlwZU1hc2tlZCIsInJjbGVhblNjcmlwdCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImNvbnRlbnQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsInBkYXRhT2xkIiwicGRhdGFDdXIiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZml4SW5wdXQiLCJkb21NYW5pcCIsImhhc1NjcmlwdHMiLCJpTm9DbG9uZSIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsInByZXBlbmQiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VDaGlsZCIsImFwcGVuZFRvIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwiaWZyYW1lIiwiZWxlbWRpc3BsYXkiLCJIVE1MIiwiQk9EWSIsImFjdHVhbERpc3BsYXkiLCJkaXNwbGF5IiwiZGVmYXVsdERpc3BsYXkiLCJ3cml0ZSIsImNsb3NlIiwicm1hcmdpbiIsInJudW1ub25weCIsImdldFN0eWxlcyIsIm9wZW5lciIsInN3YXAiLCJvbGQiLCJwaXhlbFBvc2l0aW9uVmFsIiwiYm94U2l6aW5nUmVsaWFibGVWYWwiLCJwaXhlbE1hcmdpblJpZ2h0VmFsIiwicmVsaWFibGVNYXJnaW5MZWZ0VmFsIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJjc3NUZXh0IiwiY29tcHV0ZVN0eWxlVGVzdHMiLCJkaXZTdHlsZSIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsInBpeGVsUG9zaXRpb24iLCJib3hTaXppbmdSZWxpYWJsZSIsInBpeGVsTWFyZ2luUmlnaHQiLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJyZWxpYWJsZU1hcmdpblJpZ2h0IiwibWFyZ2luRGl2IiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJyZGlzcGxheXN3YXAiLCJjc3NTaG93IiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0IiwiY3NzUHJlZml4ZXMiLCJlbXB0eVN0eWxlIiwidmVuZG9yUHJvcE5hbWUiLCJjYXBOYW1lIiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsImF1Z21lbnRXaWR0aE9ySGVpZ2h0IiwiZXh0cmEiLCJpc0JvcmRlckJveCIsInN0eWxlcyIsImdldFdpZHRoT3JIZWlnaHQiLCJ2YWx1ZUlzQm9yZGVyQm94Iiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJzaG93SGlkZSIsInNob3ciLCJoaWRkZW4iLCJjc3NIb29rcyIsImNzc1Byb3BzIiwib3JpZ05hbWUiLCJtYXJnaW4iLCJib3JkZXIiLCJleHBhbmRlZCIsInBhcnRzIiwiaGlkZSIsInRvZ2dsZSIsIlR3ZWVuIiwiZWFzaW5nIiwicHJvcEhvb2tzIiwicnVuIiwiZWFzZWQiLCJzd2luZyIsImZ4Tm93IiwidGltZXJJZCIsInJmeHR5cGVzIiwicnJ1biIsImNyZWF0ZUZ4Tm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwiZGVmYXVsdFByZWZpbHRlciIsIm9wdHMiLCJvbGRmaXJlIiwiY2hlY2tEaXNwbGF5IiwiYW5pbSIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByb3BGaWx0ZXIiLCJzcGVjaWFsRWFzaW5nIiwicHJvcGVydGllcyIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwic3RhcnRUaW1lIiwidHdlZW5zIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiZ290b0VuZCIsInJlamVjdFdpdGgiLCJjb21wbGV0ZSIsInR3ZWVuZXIiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsImFuaW1hdGUiLCJvcHRhbGwiLCJkb0FuaW1hdGlvbiIsImZpbmlzaCIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJzbG93IiwiZmFzdCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsIm9wdERpc2FibGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYm9vbCIsInByb3BOYW1lIiwiYXR0ck5hbWVzIiwicHJvcEZpeCIsImdldHRlciIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwicmVtb3ZlUHJvcCIsInRhYmluZGV4IiwicmNsYXNzIiwiZ2V0Q2xhc3MiLCJhZGRDbGFzcyIsImNsYXNzZXMiLCJjdXJWYWx1ZSIsImNsYXp6IiwiZmluYWxWYWx1ZSIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJzdGF0ZVZhbCIsImNsYXNzTmFtZXMiLCJoYXNDbGFzcyIsInJyZXR1cm4iLCJyc3BhY2VzIiwidmFsSG9va3MiLCJvcHRpb25TZXQiLCJyZm9jdXNNb3JwaCIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJldmVudFBhdGgiLCJpc1RyaWdnZXIiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJmb2N1c2luIiwiYXR0YWNoZXMiLCJub25jZSIsInJxdWVyeSIsInBhcnNlWE1MIiwicmhhc2giLCJydHMiLCJyaGVhZGVycyIsInJsb2NhbFByb3RvY29sIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsInRyYW5zcG9ydHMiLCJhbGxUeXBlcyIsIm9yaWdpbkFuY2hvciIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3RlZCIsInNlZWtpbmdUcmFuc3BvcnQiLCJpbnNwZWN0IiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsImFqYXhFeHRlbmQiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJyZXNwb25zZXMiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwibWltZVR5cGUiLCJnZXRSZXNwb25zZUhlYWRlciIsImNvbnZlcnRlcnMiLCJhamF4Q29udmVydCIsImlzU3VjY2VzcyIsImNvbnYyIiwiY29udiIsInJlc3BvbnNlRmllbGRzIiwiZGF0YUZpbHRlciIsImxhc3RNb2RpZmllZCIsImV0YWciLCJpc0xvY2FsIiwicHJvdG9jb2wiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwiYWpheFNldHVwIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsImNhbGxiYWNrQ29udGV4dCIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJzdGF0dXNDb2RlIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVyc05hbWVzIiwic3RyQWJvcnQiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwibG5hbWUiLCJvdmVycmlkZU1pbWVUeXBlIiwiZmluYWxUZXh0Iiwic3VjY2VzcyIsImNyb3NzRG9tYWluIiwiaG9zdCIsInBhcmFtIiwidHJhZGl0aW9uYWwiLCJoYXNDb250ZW50IiwiaWZNb2RpZmllZCIsImhlYWRlcnMiLCJiZWZvcmVTZW5kIiwibmF0aXZlU3RhdHVzVGV4dCIsIm1vZGlmaWVkIiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsInVud3JhcCIsImdldENsaWVudFJlY3RzIiwicjIwIiwicmJyYWNrZXQiLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsImJ1aWxkUGFyYW1zIiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJ4aHIiLCJ4aHJTdWNjZXNzU3RhdHVzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9uYWJvcnQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJjaGFyc2V0Iiwic2NyaXB0Q2hhcnNldCIsImV2dCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJrZWVwU2NyaXB0cyIsInBhcnNlZCIsIl9sb2FkIiwiYW5pbWF0ZWQiLCJnZXRXaW5kb3ciLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY2FsY3VsYXRlUG9zaXRpb24iLCJjdXJFbGVtIiwidXNpbmciLCJ3aW4iLCJib3giLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwiYW5kU2VsZiIsIl9qUXVlcnkiLCJfJCIsIm5vQ29uZmxpY3QiLCJ3ZWJwYWNrUG9seWZpbGwiLCJkZXByZWNhdGUiLCJwYXRocyIsImVudW1lcmFibGUiLCJMZWdlbmQiLCJsZWdlbmRJZCIsImNvbG9yRnVuYyIsImxlZ2VuZFRleHQiLCJsZWdlbmRQYXRoIiwiZmlsdGVyZWRDaXJjbGUiLCJmaWx0ZXJlZFRleHQiLCJsZWdlbmROYW1lIiwibm9kZUdyb3VwIiwibm9kZUciLCJncm91cF9pZCIsIk5ldHdvcmsiLCJsaW5lSW5kZXgiLCJzZWxlY3RMaW5lIiwibm9kZVNvdXJjZSIsIm5vZGVUYXJnZXQiLCJzZWxlY3ROb2RlU291cmNlIiwic2VsZWN0Tm9kZVRhcmdldCIsInNlbGVjdE5vZGVTb3VyY2UyIiwic2VsZWN0Tm9kZVRhcmdldDIiLCJzZWxlY3ROb2RlIiwic2VsZWN0Tm9kZVRleHQiLCJsYWJlbHMiLCJncmFiVHlwZUMiLCJncmFiVHlwZUIiLCJmbGF2b3JEYXRhIiwidW1hbWlEYXRhIiwiaXNTcCIsInVzZXJBZ2VudCIsImxlZ2VuZENvbG9yIiwibW91c2VEb3duIiwib25tb3VzZWRvd24iLCJvbm1vdXNldXAiLCJsZWdlbmRQYXRoRGVmbyIsImRyYWdzdGFydGVkIiwiZHJhZ2dlZCIsImRyYWdlbmRlZCIsInRpY2tlZCIsIm1vdXNlZG93biIsImN1cnNvciIsIm1vdXNldXAiLCJkYXRhVHlwZVNlbGVjdG9yIiwib25jaGFuZ2UiLCJzZWxlY3RlZFR5cGUiLCJsaW5rRGlzdGFuY2UiLCJncmF2aXR5IiwiY2hhcmdlIiwic3RvcEZvcmNlU2V0SW50ZXJ2YWwiLCJkZWxldGVMaW5lIiwibGlua1NWRyIsImZpcnN0U1ZHIiwibW91c2VvdmVy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QUFDRjs7QUFDRGk5SCxlQUFTLEdBQUcsQ0FBWjtBQUNELEtBVEQ7QUFVRDtBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkNBO0FBQ0E7OztBQUNBaitCLEtBQUcsQ0FBQ0MsS0FBSixDQUFVO0FBQ1JjLFVBQU0sRUFBRSxDQUFDO0FBQUN0K0YsVUFBSSxFQUFFO0FBQVAsS0FBRCxFQUNOO0FBQUNBLFVBQUksRUFBRTtBQUFQLEtBRE0sRUFFTjtBQUFDQSxVQUFJLEVBQUU7QUFBUCxLQUZNLEVBR047QUFBQ0EsVUFBSSxFQUFFO0FBQVAsS0FITSxFQUlOO0FBQUNBLFVBQUksRUFBRTtBQUFQLEtBSk0sQ0FEQTtBQU9SO0FBQ0FsQyxRQUFJLEVBQUUsaUJBUkU7QUFTUmtnRyxXQUFPLEVBQUUsSUFURDtBQVVSYyxhQUFTLEVBQUUsSUFWSDtBQVdSRCxVQUFNLEVBQUU7QUFYQSxHQUFWLEVBbGFLLENBZ2JMOztBQUNBLE1BQUksQ0FBQ2c3QixJQUFMLEVBQVc7QUFDVHQ4QixPQUFHLENBQUNDLEtBQUosQ0FBVU0sSUFBVixDQUFlLFNBQWY7QUFDRDtBQUVGLENBcmJELEkiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vc3JjL2luZGV4LmpzXCIpO1xuIiwiLy8gaHR0cHM6Ly9kM2pzLm9yZyB2NS45LjIgQ29weXJpZ2h0IDIwMTkgTWlrZSBCb3N0b2NrXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xudHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeShleHBvcnRzKSA6XG50eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJ10sIGZhY3RvcnkpIDpcbihmYWN0b3J5KChnbG9iYWwuZDMgPSBnbG9iYWwuZDMgfHwge30pKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoZXhwb3J0cykgeyAndXNlIHN0cmljdCc7XG5cbnZhciB2ZXJzaW9uID0gXCI1LjkuMlwiO1xuXG5mdW5jdGlvbiBhc2NlbmRpbmcoYSwgYikge1xuICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47XG59XG5cbmZ1bmN0aW9uIGJpc2VjdG9yKGNvbXBhcmUpIHtcbiAgaWYgKGNvbXBhcmUubGVuZ3RoID09PSAxKSBjb21wYXJlID0gYXNjZW5kaW5nQ29tcGFyYXRvcihjb21wYXJlKTtcbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiBmdW5jdGlvbihhLCB4LCBsbywgaGkpIHtcbiAgICAgIGlmIChsbyA9PSBudWxsKSBsbyA9IDA7XG4gICAgICBpZiAoaGkgPT0gbnVsbCkgaGkgPSBhLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsbyA8IGhpKSB7XG4gICAgICAgIHZhciBtaWQgPSBsbyArIGhpID4+PiAxO1xuICAgICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpIDwgMCkgbG8gPSBtaWQgKyAxO1xuICAgICAgICBlbHNlIGhpID0gbWlkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxvO1xuICAgIH0sXG4gICAgcmlnaHQ6IGZ1bmN0aW9uKGEsIHgsIGxvLCBoaSkge1xuICAgICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgdmFyIG1pZCA9IGxvICsgaGkgPj4+IDE7XG4gICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPiAwKSBoaSA9IG1pZDtcbiAgICAgICAgZWxzZSBsbyA9IG1pZCArIDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gbG87XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBhc2NlbmRpbmdDb21wYXJhdG9yKGYpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGQsIHgpIHtcbiAgICByZXR1cm4gYXNjZW5kaW5nKGYoZCksIHgpO1xuICB9O1xufVxuXG52YXIgYXNjZW5kaW5nQmlzZWN0ID0gYmlzZWN0b3IoYXNjZW5kaW5nKTtcbnZhciBiaXNlY3RSaWdodCA9IGFzY2VuZGluZ0Jpc2VjdC5yaWdodDtcbnZhciBiaXNlY3RMZWZ0ID0gYXNjZW5kaW5nQmlzZWN0LmxlZnQ7XG5cbmZ1bmN0aW9uIHBhaXJzKGFycmF5LCBmKSB7XG4gIGlmIChmID09IG51bGwpIGYgPSBwYWlyO1xuICB2YXIgaSA9IDAsIG4gPSBhcnJheS5sZW5ndGggLSAxLCBwID0gYXJyYXlbMF0sIHBhaXJzID0gbmV3IEFycmF5KG4gPCAwID8gMCA6IG4pO1xuICB3aGlsZSAoaSA8IG4pIHBhaXJzW2ldID0gZihwLCBwID0gYXJyYXlbKytpXSk7XG4gIHJldHVybiBwYWlycztcbn1cblxuZnVuY3Rpb24gcGFpcihhLCBiKSB7XG4gIHJldHVybiBbYSwgYl07XG59XG5cbmZ1bmN0aW9uIGNyb3NzKHZhbHVlczAsIHZhbHVlczEsIHJlZHVjZSkge1xuICB2YXIgbjAgPSB2YWx1ZXMwLmxlbmd0aCxcbiAgICAgIG4xID0gdmFsdWVzMS5sZW5ndGgsXG4gICAgICB2YWx1ZXMgPSBuZXcgQXJyYXkobjAgKiBuMSksXG4gICAgICBpMCxcbiAgICAgIGkxLFxuICAgICAgaSxcbiAgICAgIHZhbHVlMDtcblxuICBpZiAocmVkdWNlID09IG51bGwpIHJlZHVjZSA9IHBhaXI7XG5cbiAgZm9yIChpMCA9IGkgPSAwOyBpMCA8IG4wOyArK2kwKSB7XG4gICAgZm9yICh2YWx1ZTAgPSB2YWx1ZXMwW2kwXSwgaTEgPSAwOyBpMSA8IG4xOyArK2kxLCArK2kpIHtcbiAgICAgIHZhbHVlc1tpXSA9IHJlZHVjZSh2YWx1ZTAsIHZhbHVlczFbaTFdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmFsdWVzO1xufVxuXG5mdW5jdGlvbiBkZXNjZW5kaW5nKGEsIGIpIHtcbiAgcmV0dXJuIGIgPCBhID8gLTEgOiBiID4gYSA/IDEgOiBiID49IGEgPyAwIDogTmFOO1xufVxuXG5mdW5jdGlvbiBudW1iZXIoeCkge1xuICByZXR1cm4geCA9PT0gbnVsbCA/IE5hTiA6ICt4O1xufVxuXG5mdW5jdGlvbiB2YXJpYW5jZSh2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgbSA9IDAsXG4gICAgICBpID0gLTEsXG4gICAgICBtZWFuID0gMCxcbiAgICAgIHZhbHVlLFxuICAgICAgZGVsdGEsXG4gICAgICBzdW0gPSAwO1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZXNbaV0pKSkge1xuICAgICAgICBkZWx0YSA9IHZhbHVlIC0gbWVhbjtcbiAgICAgICAgbWVhbiArPSBkZWx0YSAvICsrbTtcbiAgICAgICAgc3VtICs9IGRlbHRhICogKHZhbHVlIC0gbWVhbik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICghaXNOYU4odmFsdWUgPSBudW1iZXIodmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpKSkge1xuICAgICAgICBkZWx0YSA9IHZhbHVlIC0gbWVhbjtcbiAgICAgICAgbWVhbiArPSBkZWx0YSAvICsrbTtcbiAgICAgICAgc3VtICs9IGRlbHRhICogKHZhbHVlIC0gbWVhbik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKG0gPiAxKSByZXR1cm4gc3VtIC8gKG0gLSAxKTtcbn1cblxuZnVuY3Rpb24gZGV2aWF0aW9uKGFycmF5LCBmKSB7XG4gIHZhciB2ID0gdmFyaWFuY2UoYXJyYXksIGYpO1xuICByZXR1cm4gdiA/IE1hdGguc3FydCh2KSA6IHY7XG59XG5cbmZ1bmN0aW9uIGV4dGVudCh2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBtaW4sXG4gICAgICBtYXg7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1pbiA9IG1heCA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChtaW4gPiB2YWx1ZSkgbWluID0gdmFsdWU7XG4gICAgICAgICAgICBpZiAobWF4IDwgdmFsdWUpIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWluID0gbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAobWluID4gdmFsdWUpIG1pbiA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKG1heCA8IHZhbHVlKSBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gW21pbiwgbWF4XTtcbn1cblxudmFyIGFycmF5ID0gQXJyYXkucHJvdG90eXBlO1xuXG52YXIgc2xpY2UgPSBhcnJheS5zbGljZTtcbnZhciBtYXAgPSBhcnJheS5tYXA7XG5cbmZ1bmN0aW9uIGNvbnN0YW50KHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuXG5mdW5jdGlvbiBpZGVudGl0eSh4KSB7XG4gIHJldHVybiB4O1xufVxuXG5mdW5jdGlvbiBzZXF1ZW5jZShzdGFydCwgc3RvcCwgc3RlcCkge1xuICBzdGFydCA9ICtzdGFydCwgc3RvcCA9ICtzdG9wLCBzdGVwID0gKG4gPSBhcmd1bWVudHMubGVuZ3RoKSA8IDIgPyAoc3RvcCA9IHN0YXJ0LCBzdGFydCA9IDAsIDEpIDogbiA8IDMgPyAxIDogK3N0ZXA7XG5cbiAgdmFyIGkgPSAtMSxcbiAgICAgIG4gPSBNYXRoLm1heCgwLCBNYXRoLmNlaWwoKHN0b3AgLSBzdGFydCkgLyBzdGVwKSkgfCAwLFxuICAgICAgcmFuZ2UgPSBuZXcgQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICByYW5nZVtpXSA9IHN0YXJ0ICsgaSAqIHN0ZXA7XG4gIH1cblxuICByZXR1cm4gcmFuZ2U7XG59XG5cbnZhciBlMTAgPSBNYXRoLnNxcnQoNTApLFxuICAgIGU1ID0gTWF0aC5zcXJ0KDEwKSxcbiAgICBlMiA9IE1hdGguc3FydCgyKTtcblxuZnVuY3Rpb24gdGlja3Moc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciByZXZlcnNlLFxuICAgICAgaSA9IC0xLFxuICAgICAgbixcbiAgICAgIHRpY2tzLFxuICAgICAgc3RlcDtcblxuICBzdG9wID0gK3N0b3AsIHN0YXJ0ID0gK3N0YXJ0LCBjb3VudCA9ICtjb3VudDtcbiAgaWYgKHN0YXJ0ID09PSBzdG9wICYmIGNvdW50ID4gMCkgcmV0dXJuIFtzdGFydF07XG4gIGlmIChyZXZlcnNlID0gc3RvcCA8IHN0YXJ0KSBuID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IG47XG4gIGlmICgoc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KSkgPT09IDAgfHwgIWlzRmluaXRlKHN0ZXApKSByZXR1cm4gW107XG5cbiAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgc3RhcnQgPSBNYXRoLmNlaWwoc3RhcnQgLyBzdGVwKTtcbiAgICBzdG9wID0gTWF0aC5mbG9vcihzdG9wIC8gc3RlcCk7XG4gICAgdGlja3MgPSBuZXcgQXJyYXkobiA9IE1hdGguY2VpbChzdG9wIC0gc3RhcnQgKyAxKSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRpY2tzW2ldID0gKHN0YXJ0ICsgaSkgKiBzdGVwO1xuICB9IGVsc2Uge1xuICAgIHN0YXJ0ID0gTWF0aC5mbG9vcihzdGFydCAqIHN0ZXApO1xuICAgIHN0b3AgPSBNYXRoLmNlaWwoc3RvcCAqIHN0ZXApO1xuICAgIHRpY2tzID0gbmV3IEFycmF5KG4gPSBNYXRoLmNlaWwoc3RhcnQgLSBzdG9wICsgMSkpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aWNrc1tpXSA9IChzdGFydCAtIGkpIC8gc3RlcDtcbiAgfVxuXG4gIGlmIChyZXZlcnNlKSB0aWNrcy5yZXZlcnNlKCk7XG5cbiAgcmV0dXJuIHRpY2tzO1xufVxuXG5mdW5jdGlvbiB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgc3RlcCA9IChzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMCwgY291bnQpLFxuICAgICAgcG93ZXIgPSBNYXRoLmZsb29yKE1hdGgubG9nKHN0ZXApIC8gTWF0aC5MTjEwKSxcbiAgICAgIGVycm9yID0gc3RlcCAvIE1hdGgucG93KDEwLCBwb3dlcik7XG4gIHJldHVybiBwb3dlciA+PSAwXG4gICAgICA/IChlcnJvciA+PSBlMTAgPyAxMCA6IGVycm9yID49IGU1ID8gNSA6IGVycm9yID49IGUyID8gMiA6IDEpICogTWF0aC5wb3coMTAsIHBvd2VyKVxuICAgICAgOiAtTWF0aC5wb3coMTAsIC1wb3dlcikgLyAoZXJyb3IgPj0gZTEwID8gMTAgOiBlcnJvciA+PSBlNSA/IDUgOiBlcnJvciA+PSBlMiA/IDIgOiAxKTtcbn1cblxuZnVuY3Rpb24gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciBzdGVwMCA9IE1hdGguYWJzKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgwLCBjb3VudCksXG4gICAgICBzdGVwMSA9IE1hdGgucG93KDEwLCBNYXRoLmZsb29yKE1hdGgubG9nKHN0ZXAwKSAvIE1hdGguTE4xMCkpLFxuICAgICAgZXJyb3IgPSBzdGVwMCAvIHN0ZXAxO1xuICBpZiAoZXJyb3IgPj0gZTEwKSBzdGVwMSAqPSAxMDtcbiAgZWxzZSBpZiAoZXJyb3IgPj0gZTUpIHN0ZXAxICo9IDU7XG4gIGVsc2UgaWYgKGVycm9yID49IGUyKSBzdGVwMSAqPSAyO1xuICByZXR1cm4gc3RvcCA8IHN0YXJ0ID8gLXN0ZXAxIDogc3RlcDE7XG59XG5cbmZ1bmN0aW9uIHRocmVzaG9sZFN0dXJnZXModmFsdWVzKSB7XG4gIHJldHVybiBNYXRoLmNlaWwoTWF0aC5sb2codmFsdWVzLmxlbmd0aCkgLyBNYXRoLkxOMikgKyAxO1xufVxuXG5mdW5jdGlvbiBoaXN0b2dyYW0oKSB7XG4gIHZhciB2YWx1ZSA9IGlkZW50aXR5LFxuICAgICAgZG9tYWluID0gZXh0ZW50LFxuICAgICAgdGhyZXNob2xkID0gdGhyZXNob2xkU3R1cmdlcztcblxuICBmdW5jdGlvbiBoaXN0b2dyYW0oZGF0YSkge1xuICAgIHZhciBpLFxuICAgICAgICBuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIHgsXG4gICAgICAgIHZhbHVlcyA9IG5ldyBBcnJheShuKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhbHVlc1tpXSA9IHZhbHVlKGRhdGFbaV0sIGksIGRhdGEpO1xuICAgIH1cblxuICAgIHZhciB4eiA9IGRvbWFpbih2YWx1ZXMpLFxuICAgICAgICB4MCA9IHh6WzBdLFxuICAgICAgICB4MSA9IHh6WzFdLFxuICAgICAgICB0eiA9IHRocmVzaG9sZCh2YWx1ZXMsIHgwLCB4MSk7XG5cbiAgICAvLyBDb252ZXJ0IG51bWJlciBvZiB0aHJlc2hvbGRzIGludG8gdW5pZm9ybSB0aHJlc2hvbGRzLlxuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eikpIHtcbiAgICAgIHR6ID0gdGlja1N0ZXAoeDAsIHgxLCB0eik7XG4gICAgICB0eiA9IHNlcXVlbmNlKE1hdGguY2VpbCh4MCAvIHR6KSAqIHR6LCB4MSwgdHopOyAvLyBleGNsdXNpdmVcbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgYW55IHRocmVzaG9sZHMgb3V0c2lkZSB0aGUgZG9tYWluLlxuICAgIHZhciBtID0gdHoubGVuZ3RoO1xuICAgIHdoaWxlICh0elswXSA8PSB4MCkgdHouc2hpZnQoKSwgLS1tO1xuICAgIHdoaWxlICh0elttIC0gMV0gPiB4MSkgdHoucG9wKCksIC0tbTtcblxuICAgIHZhciBiaW5zID0gbmV3IEFycmF5KG0gKyAxKSxcbiAgICAgICAgYmluO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSBiaW5zLlxuICAgIGZvciAoaSA9IDA7IGkgPD0gbTsgKytpKSB7XG4gICAgICBiaW4gPSBiaW5zW2ldID0gW107XG4gICAgICBiaW4ueDAgPSBpID4gMCA/IHR6W2kgLSAxXSA6IHgwO1xuICAgICAgYmluLngxID0gaSA8IG0gPyB0eltpXSA6IHgxO1xuICAgIH1cblxuICAgIC8vIEFzc2lnbiBkYXRhIHRvIGJpbnMgYnkgdmFsdWUsIGlnbm9yaW5nIGFueSBvdXRzaWRlIHRoZSBkb21haW4uXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgeCA9IHZhbHVlc1tpXTtcbiAgICAgIGlmICh4MCA8PSB4ICYmIHggPD0geDEpIHtcbiAgICAgICAgYmluc1tiaXNlY3RSaWdodCh0eiwgeCwgMCwgbSldLnB1c2goZGF0YVtpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGJpbnM7XG4gIH1cblxuICBoaXN0b2dyYW0udmFsdWUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodmFsdWUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KF8pLCBoaXN0b2dyYW0pIDogdmFsdWU7XG4gIH07XG5cbiAgaGlzdG9ncmFtLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KFtfWzBdLCBfWzFdXSksIGhpc3RvZ3JhbSkgOiBkb21haW47XG4gIH07XG5cbiAgaGlzdG9ncmFtLnRocmVzaG9sZHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGhyZXNob2xkID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBBcnJheS5pc0FycmF5KF8pID8gY29uc3RhbnQoc2xpY2UuY2FsbChfKSkgOiBjb25zdGFudChfKSwgaGlzdG9ncmFtKSA6IHRocmVzaG9sZDtcbiAgfTtcblxuICByZXR1cm4gaGlzdG9ncmFtO1xufVxuXG5mdW5jdGlvbiB0aHJlc2hvbGQodmFsdWVzLCBwLCB2YWx1ZW9mKSB7XG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHZhbHVlb2YgPSBudW1iZXI7XG4gIGlmICghKG4gPSB2YWx1ZXMubGVuZ3RoKSkgcmV0dXJuO1xuICBpZiAoKHAgPSArcCkgPD0gMCB8fCBuIDwgMikgcmV0dXJuICt2YWx1ZW9mKHZhbHVlc1swXSwgMCwgdmFsdWVzKTtcbiAgaWYgKHAgPj0gMSkgcmV0dXJuICt2YWx1ZW9mKHZhbHVlc1tuIC0gMV0sIG4gLSAxLCB2YWx1ZXMpO1xuICB2YXIgbixcbiAgICAgIGkgPSAobiAtIDEpICogcCxcbiAgICAgIGkwID0gTWF0aC5mbG9vcihpKSxcbiAgICAgIHZhbHVlMCA9ICt2YWx1ZW9mKHZhbHVlc1tpMF0sIGkwLCB2YWx1ZXMpLFxuICAgICAgdmFsdWUxID0gK3ZhbHVlb2YodmFsdWVzW2kwICsgMV0sIGkwICsgMSwgdmFsdWVzKTtcbiAgcmV0dXJuIHZhbHVlMCArICh2YWx1ZTEgLSB2YWx1ZTApICogKGkgLSBpMCk7XG59XG5cbmZ1bmN0aW9uIGZyZWVkbWFuRGlhY29uaXModmFsdWVzLCBtaW4sIG1heCkge1xuICB2YWx1ZXMgPSBtYXAuY2FsbCh2YWx1ZXMsIG51bWJlcikuc29ydChhc2NlbmRpbmcpO1xuICByZXR1cm4gTWF0aC5jZWlsKChtYXggLSBtaW4pIC8gKDIgKiAodGhyZXNob2xkKHZhbHVlcywgMC43NSkgLSB0aHJlc2hvbGQodmFsdWVzLCAwLjI1KSkgKiBNYXRoLnBvdyh2YWx1ZXMubGVuZ3RoLCAtMSAvIDMpKSk7XG59XG5cbmZ1bmN0aW9uIHNjb3R0KHZhbHVlcywgbWluLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGguY2VpbCgobWF4IC0gbWluKSAvICgzLjUgKiBkZXZpYXRpb24odmFsdWVzKSAqIE1hdGgucG93KHZhbHVlcy5sZW5ndGgsIC0xIC8gMykpKTtcbn1cblxuZnVuY3Rpb24gbWF4KHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG1heDtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+IG1heCkge1xuICAgICAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgdmFsdWUgPiBtYXgpIHtcbiAgICAgICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYXg7XG59XG5cbmZ1bmN0aW9uIG1lYW4odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIG0gPSBuLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBzdW0gPSAwO1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZXNbaV0pKSkgc3VtICs9IHZhbHVlO1xuICAgICAgZWxzZSAtLW07XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICghaXNOYU4odmFsdWUgPSBudW1iZXIodmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpKSkgc3VtICs9IHZhbHVlO1xuICAgICAgZWxzZSAtLW07XG4gICAgfVxuICB9XG5cbiAgaWYgKG0pIHJldHVybiBzdW0gLyBtO1xufVxuXG5mdW5jdGlvbiBtZWRpYW4odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgbnVtYmVycyA9IFtdO1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZXNbaV0pKSkge1xuICAgICAgICBudW1iZXJzLnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSkpIHtcbiAgICAgICAgbnVtYmVycy5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhyZXNob2xkKG51bWJlcnMuc29ydChhc2NlbmRpbmcpLCAwLjUpO1xufVxuXG5mdW5jdGlvbiBtZXJnZShhcnJheXMpIHtcbiAgdmFyIG4gPSBhcnJheXMubGVuZ3RoLFxuICAgICAgbSxcbiAgICAgIGkgPSAtMSxcbiAgICAgIGogPSAwLFxuICAgICAgbWVyZ2VkLFxuICAgICAgYXJyYXk7XG5cbiAgd2hpbGUgKCsraSA8IG4pIGogKz0gYXJyYXlzW2ldLmxlbmd0aDtcbiAgbWVyZ2VkID0gbmV3IEFycmF5KGopO1xuXG4gIHdoaWxlICgtLW4gPj0gMCkge1xuICAgIGFycmF5ID0gYXJyYXlzW25dO1xuICAgIG0gPSBhcnJheS5sZW5ndGg7XG4gICAgd2hpbGUgKC0tbSA+PSAwKSB7XG4gICAgICBtZXJnZWRbLS1qXSA9IGFycmF5W21dO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtZXJnZWQ7XG59XG5cbmZ1bmN0aW9uIG1pbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBtaW47XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1pbiA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgbWluID4gdmFsdWUpIHtcbiAgICAgICAgICAgIG1pbiA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsICYmIG1pbiA+IHZhbHVlKSB7XG4gICAgICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWluO1xufVxuXG5mdW5jdGlvbiBwZXJtdXRlKGFycmF5LCBpbmRleGVzKSB7XG4gIHZhciBpID0gaW5kZXhlcy5sZW5ndGgsIHBlcm11dGVzID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tKSBwZXJtdXRlc1tpXSA9IGFycmF5W2luZGV4ZXNbaV1dO1xuICByZXR1cm4gcGVybXV0ZXM7XG59XG5cbmZ1bmN0aW9uIHNjYW4odmFsdWVzLCBjb21wYXJlKSB7XG4gIGlmICghKG4gPSB2YWx1ZXMubGVuZ3RoKSkgcmV0dXJuO1xuICB2YXIgbixcbiAgICAgIGkgPSAwLFxuICAgICAgaiA9IDAsXG4gICAgICB4aSxcbiAgICAgIHhqID0gdmFsdWVzW2pdO1xuXG4gIGlmIChjb21wYXJlID09IG51bGwpIGNvbXBhcmUgPSBhc2NlbmRpbmc7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICBpZiAoY29tcGFyZSh4aSA9IHZhbHVlc1tpXSwgeGopIDwgMCB8fCBjb21wYXJlKHhqLCB4aikgIT09IDApIHtcbiAgICAgIHhqID0geGksIGogPSBpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChjb21wYXJlKHhqLCB4aikgPT09IDApIHJldHVybiBqO1xufVxuXG5mdW5jdGlvbiBzaHVmZmxlKGFycmF5LCBpMCwgaTEpIHtcbiAgdmFyIG0gPSAoaTEgPT0gbnVsbCA/IGFycmF5Lmxlbmd0aCA6IGkxKSAtIChpMCA9IGkwID09IG51bGwgPyAwIDogK2kwKSxcbiAgICAgIHQsXG4gICAgICBpO1xuXG4gIHdoaWxlIChtKSB7XG4gICAgaSA9IE1hdGgucmFuZG9tKCkgKiBtLS0gfCAwO1xuICAgIHQgPSBhcnJheVttICsgaTBdO1xuICAgIGFycmF5W20gKyBpMF0gPSBhcnJheVtpICsgaTBdO1xuICAgIGFycmF5W2kgKyBpMF0gPSB0O1xuICB9XG5cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5mdW5jdGlvbiBzdW0odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgc3VtID0gMDtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICh2YWx1ZSA9ICt2YWx1ZXNbaV0pIHN1bSArPSB2YWx1ZTsgLy8gTm90ZTogemVybyBhbmQgbnVsbCBhcmUgZXF1aXZhbGVudC5cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHZhbHVlID0gK3ZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSBzdW0gKz0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN1bTtcbn1cblxuZnVuY3Rpb24gdHJhbnNwb3NlKG1hdHJpeCkge1xuICBpZiAoIShuID0gbWF0cml4Lmxlbmd0aCkpIHJldHVybiBbXTtcbiAgZm9yICh2YXIgaSA9IC0xLCBtID0gbWluKG1hdHJpeCwgbGVuZ3RoKSwgdHJhbnNwb3NlID0gbmV3IEFycmF5KG0pOyArK2kgPCBtOykge1xuICAgIGZvciAodmFyIGogPSAtMSwgbiwgcm93ID0gdHJhbnNwb3NlW2ldID0gbmV3IEFycmF5KG4pOyArK2ogPCBuOykge1xuICAgICAgcm93W2pdID0gbWF0cml4W2pdW2ldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJhbnNwb3NlO1xufVxuXG5mdW5jdGlvbiBsZW5ndGgoZCkge1xuICByZXR1cm4gZC5sZW5ndGg7XG59XG5cbmZ1bmN0aW9uIHppcCgpIHtcbiAgcmV0dXJuIHRyYW5zcG9zZShhcmd1bWVudHMpO1xufVxuXG52YXIgc2xpY2UkMSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuZnVuY3Rpb24gaWRlbnRpdHkkMSh4KSB7XG4gIHJldHVybiB4O1xufVxuXG52YXIgdG9wID0gMSxcbiAgICByaWdodCA9IDIsXG4gICAgYm90dG9tID0gMyxcbiAgICBsZWZ0ID0gNCxcbiAgICBlcHNpbG9uID0gMWUtNjtcblxuZnVuY3Rpb24gdHJhbnNsYXRlWCh4KSB7XG4gIHJldHVybiBcInRyYW5zbGF0ZShcIiArICh4ICsgMC41KSArIFwiLDApXCI7XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVkoeSkge1xuICByZXR1cm4gXCJ0cmFuc2xhdGUoMCxcIiArICh5ICsgMC41KSArIFwiKVwiO1xufVxuXG5mdW5jdGlvbiBudW1iZXIkMShzY2FsZSkge1xuICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgIHJldHVybiArc2NhbGUoZCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNlbnRlcihzY2FsZSkge1xuICB2YXIgb2Zmc2V0ID0gTWF0aC5tYXgoMCwgc2NhbGUuYmFuZHdpZHRoKCkgLSAxKSAvIDI7IC8vIEFkanVzdCBmb3IgMC41cHggb2Zmc2V0LlxuICBpZiAoc2NhbGUucm91bmQoKSkgb2Zmc2V0ID0gTWF0aC5yb3VuZChvZmZzZXQpO1xuICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgIHJldHVybiArc2NhbGUoZCkgKyBvZmZzZXQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGVudGVyaW5nKCkge1xuICByZXR1cm4gIXRoaXMuX19heGlzO1xufVxuXG5mdW5jdGlvbiBheGlzKG9yaWVudCwgc2NhbGUpIHtcbiAgdmFyIHRpY2tBcmd1bWVudHMgPSBbXSxcbiAgICAgIHRpY2tWYWx1ZXMgPSBudWxsLFxuICAgICAgdGlja0Zvcm1hdCA9IG51bGwsXG4gICAgICB0aWNrU2l6ZUlubmVyID0gNixcbiAgICAgIHRpY2tTaXplT3V0ZXIgPSA2LFxuICAgICAgdGlja1BhZGRpbmcgPSAzLFxuICAgICAgayA9IG9yaWVudCA9PT0gdG9wIHx8IG9yaWVudCA9PT0gbGVmdCA/IC0xIDogMSxcbiAgICAgIHggPSBvcmllbnQgPT09IGxlZnQgfHwgb3JpZW50ID09PSByaWdodCA/IFwieFwiIDogXCJ5XCIsXG4gICAgICB0cmFuc2Zvcm0gPSBvcmllbnQgPT09IHRvcCB8fCBvcmllbnQgPT09IGJvdHRvbSA/IHRyYW5zbGF0ZVggOiB0cmFuc2xhdGVZO1xuXG4gIGZ1bmN0aW9uIGF4aXMoY29udGV4dCkge1xuICAgIHZhciB2YWx1ZXMgPSB0aWNrVmFsdWVzID09IG51bGwgPyAoc2NhbGUudGlja3MgPyBzY2FsZS50aWNrcy5hcHBseShzY2FsZSwgdGlja0FyZ3VtZW50cykgOiBzY2FsZS5kb21haW4oKSkgOiB0aWNrVmFsdWVzLFxuICAgICAgICBmb3JtYXQgPSB0aWNrRm9ybWF0ID09IG51bGwgPyAoc2NhbGUudGlja0Zvcm1hdCA/IHNjYWxlLnRpY2tGb3JtYXQuYXBwbHkoc2NhbGUsIHRpY2tBcmd1bWVudHMpIDogaWRlbnRpdHkkMSkgOiB0aWNrRm9ybWF0LFxuICAgICAgICBzcGFjaW5nID0gTWF0aC5tYXgodGlja1NpemVJbm5lciwgMCkgKyB0aWNrUGFkZGluZyxcbiAgICAgICAgcmFuZ2UgPSBzY2FsZS5yYW5nZSgpLFxuICAgICAgICByYW5nZTAgPSArcmFuZ2VbMF0gKyAwLjUsXG4gICAgICAgIHJhbmdlMSA9ICtyYW5nZVtyYW5nZS5sZW5ndGggLSAxXSArIDAuNSxcbiAgICAgICAgcG9zaXRpb24gPSAoc2NhbGUuYmFuZHdpZHRoID8gY2VudGVyIDogbnVtYmVyJDEpKHNjYWxlLmNvcHkoKSksXG4gICAgICAgIHNlbGVjdGlvbiA9IGNvbnRleHQuc2VsZWN0aW9uID8gY29udGV4dC5zZWxlY3Rpb24oKSA6IGNvbnRleHQsXG4gICAgICAgIHBhdGggPSBzZWxlY3Rpb24uc2VsZWN0QWxsKFwiLmRvbWFpblwiKS5kYXRhKFtudWxsXSksXG4gICAgICAgIHRpY2sgPSBzZWxlY3Rpb24uc2VsZWN0QWxsKFwiLnRpY2tcIikuZGF0YSh2YWx1ZXMsIHNjYWxlKS5vcmRlcigpLFxuICAgICAgICB0aWNrRXhpdCA9IHRpY2suZXhpdCgpLFxuICAgICAgICB0aWNrRW50ZXIgPSB0aWNrLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIiwgXCJ0aWNrXCIpLFxuICAgICAgICBsaW5lID0gdGljay5zZWxlY3QoXCJsaW5lXCIpLFxuICAgICAgICB0ZXh0ID0gdGljay5zZWxlY3QoXCJ0ZXh0XCIpO1xuXG4gICAgcGF0aCA9IHBhdGgubWVyZ2UocGF0aC5lbnRlcigpLmluc2VydChcInBhdGhcIiwgXCIudGlja1wiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiZG9tYWluXCIpXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiY3VycmVudENvbG9yXCIpKTtcblxuICAgIHRpY2sgPSB0aWNrLm1lcmdlKHRpY2tFbnRlcik7XG5cbiAgICBsaW5lID0gbGluZS5tZXJnZSh0aWNrRW50ZXIuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcImN1cnJlbnRDb2xvclwiKVxuICAgICAgICAuYXR0cih4ICsgXCIyXCIsIGsgKiB0aWNrU2l6ZUlubmVyKSk7XG5cbiAgICB0ZXh0ID0gdGV4dC5tZXJnZSh0aWNrRW50ZXIuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJjdXJyZW50Q29sb3JcIilcbiAgICAgICAgLmF0dHIoeCwgayAqIHNwYWNpbmcpXG4gICAgICAgIC5hdHRyKFwiZHlcIiwgb3JpZW50ID09PSB0b3AgPyBcIjBlbVwiIDogb3JpZW50ID09PSBib3R0b20gPyBcIjAuNzFlbVwiIDogXCIwLjMyZW1cIikpO1xuXG4gICAgaWYgKGNvbnRleHQgIT09IHNlbGVjdGlvbikge1xuICAgICAgcGF0aCA9IHBhdGgudHJhbnNpdGlvbihjb250ZXh0KTtcbiAgICAgIHRpY2sgPSB0aWNrLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICBsaW5lID0gbGluZS50cmFuc2l0aW9uKGNvbnRleHQpO1xuICAgICAgdGV4dCA9IHRleHQudHJhbnNpdGlvbihjb250ZXh0KTtcblxuICAgICAgdGlja0V4aXQgPSB0aWNrRXhpdC50cmFuc2l0aW9uKGNvbnRleHQpXG4gICAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIGVwc2lsb24pXG4gICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gaXNGaW5pdGUoZCA9IHBvc2l0aW9uKGQpKSA/IHRyYW5zZm9ybShkKSA6IHRoaXMuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpOyB9KTtcblxuICAgICAgdGlja0VudGVyXG4gICAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIGVwc2lsb24pXG4gICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyB2YXIgcCA9IHRoaXMucGFyZW50Tm9kZS5fX2F4aXM7IHJldHVybiB0cmFuc2Zvcm0ocCAmJiBpc0Zpbml0ZShwID0gcChkKSkgPyBwIDogcG9zaXRpb24oZCkpOyB9KTtcbiAgICB9XG5cbiAgICB0aWNrRXhpdC5yZW1vdmUoKTtcblxuICAgIHBhdGhcbiAgICAgICAgLmF0dHIoXCJkXCIsIG9yaWVudCA9PT0gbGVmdCB8fCBvcmllbnQgPT0gcmlnaHRcbiAgICAgICAgICAgID8gKHRpY2tTaXplT3V0ZXIgPyBcIk1cIiArIGsgKiB0aWNrU2l6ZU91dGVyICsgXCIsXCIgKyByYW5nZTAgKyBcIkgwLjVWXCIgKyByYW5nZTEgKyBcIkhcIiArIGsgKiB0aWNrU2l6ZU91dGVyIDogXCJNMC41LFwiICsgcmFuZ2UwICsgXCJWXCIgKyByYW5nZTEpXG4gICAgICAgICAgICA6ICh0aWNrU2l6ZU91dGVyID8gXCJNXCIgKyByYW5nZTAgKyBcIixcIiArIGsgKiB0aWNrU2l6ZU91dGVyICsgXCJWMC41SFwiICsgcmFuZ2UxICsgXCJWXCIgKyBrICogdGlja1NpemVPdXRlciA6IFwiTVwiICsgcmFuZ2UwICsgXCIsMC41SFwiICsgcmFuZ2UxKSk7XG5cbiAgICB0aWNrXG4gICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCAxKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB0cmFuc2Zvcm0ocG9zaXRpb24oZCkpOyB9KTtcblxuICAgIGxpbmVcbiAgICAgICAgLmF0dHIoeCArIFwiMlwiLCBrICogdGlja1NpemVJbm5lcik7XG5cbiAgICB0ZXh0XG4gICAgICAgIC5hdHRyKHgsIGsgKiBzcGFjaW5nKVxuICAgICAgICAudGV4dChmb3JtYXQpO1xuXG4gICAgc2VsZWN0aW9uLmZpbHRlcihlbnRlcmluZylcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAuYXR0cihcImZvbnQtc2l6ZVwiLCAxMClcbiAgICAgICAgLmF0dHIoXCJmb250LWZhbWlseVwiLCBcInNhbnMtc2VyaWZcIilcbiAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBvcmllbnQgPT09IHJpZ2h0ID8gXCJzdGFydFwiIDogb3JpZW50ID09PSBsZWZ0ID8gXCJlbmRcIiA6IFwibWlkZGxlXCIpO1xuXG4gICAgc2VsZWN0aW9uXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkgeyB0aGlzLl9fYXhpcyA9IHBvc2l0aW9uOyB9KTtcbiAgfVxuXG4gIGF4aXMuc2NhbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2NhbGUgPSBfLCBheGlzKSA6IHNjYWxlO1xuICB9O1xuXG4gIGF4aXMudGlja3MgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGlja0FyZ3VtZW50cyA9IHNsaWNlJDEuY2FsbChhcmd1bWVudHMpLCBheGlzO1xuICB9O1xuXG4gIGF4aXMudGlja0FyZ3VtZW50cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrQXJndW1lbnRzID0gXyA9PSBudWxsID8gW10gOiBzbGljZSQxLmNhbGwoXyksIGF4aXMpIDogdGlja0FyZ3VtZW50cy5zbGljZSgpO1xuICB9O1xuXG4gIGF4aXMudGlja1ZhbHVlcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrVmFsdWVzID0gXyA9PSBudWxsID8gbnVsbCA6IHNsaWNlJDEuY2FsbChfKSwgYXhpcykgOiB0aWNrVmFsdWVzICYmIHRpY2tWYWx1ZXMuc2xpY2UoKTtcbiAgfTtcblxuICBheGlzLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja0Zvcm1hdCA9IF8sIGF4aXMpIDogdGlja0Zvcm1hdDtcbiAgfTtcblxuICBheGlzLnRpY2tTaXplID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplSW5uZXIgPSB0aWNrU2l6ZU91dGVyID0gK18sIGF4aXMpIDogdGlja1NpemVJbm5lcjtcbiAgfTtcblxuICBheGlzLnRpY2tTaXplSW5uZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1NpemVJbm5lciA9ICtfLCBheGlzKSA6IHRpY2tTaXplSW5uZXI7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZU91dGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplT3V0ZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZU91dGVyO1xuICB9O1xuXG4gIGF4aXMudGlja1BhZGRpbmcgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1BhZGRpbmcgPSArXywgYXhpcykgOiB0aWNrUGFkZGluZztcbiAgfTtcblxuICByZXR1cm4gYXhpcztcbn1cblxuZnVuY3Rpb24gYXhpc1RvcChzY2FsZSkge1xuICByZXR1cm4gYXhpcyh0b3AsIHNjYWxlKTtcbn1cblxuZnVuY3Rpb24gYXhpc1JpZ2h0KHNjYWxlKSB7XG4gIHJldHVybiBheGlzKHJpZ2h0LCBzY2FsZSk7XG59XG5cbmZ1bmN0aW9uIGF4aXNCb3R0b20oc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMoYm90dG9tLCBzY2FsZSk7XG59XG5cbmZ1bmN0aW9uIGF4aXNMZWZ0KHNjYWxlKSB7XG4gIHJldHVybiBheGlzKGxlZnQsIHNjYWxlKTtcbn1cblxudmFyIG5vb3AgPSB7dmFsdWU6IGZ1bmN0aW9uKCkge319O1xuXG5mdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoLCBfID0ge30sIHQ7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoISh0ID0gYXJndW1lbnRzW2ldICsgXCJcIikgfHwgKHQgaW4gXykpIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgdHlwZTogXCIgKyB0KTtcbiAgICBfW3RdID0gW107XG4gIH1cbiAgcmV0dXJuIG5ldyBEaXNwYXRjaChfKTtcbn1cblxuZnVuY3Rpb24gRGlzcGF0Y2goXykge1xuICB0aGlzLl8gPSBfO1xufVxuXG5mdW5jdGlvbiBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZXMsIHR5cGVzKSB7XG4gIHJldHVybiB0eXBlbmFtZXMudHJpbSgpLnNwbGl0KC9efFxccysvKS5tYXAoZnVuY3Rpb24odCkge1xuICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgbmFtZSA9IHQuc2xpY2UoaSArIDEpLCB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICBpZiAodCAmJiAhdHlwZXMuaGFzT3duUHJvcGVydHkodCkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0KTtcbiAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xuICB9KTtcbn1cblxuRGlzcGF0Y2gucHJvdG90eXBlID0gZGlzcGF0Y2gucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRGlzcGF0Y2gsXG4gIG9uOiBmdW5jdGlvbih0eXBlbmFtZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgXyA9IHRoaXMuXyxcbiAgICAgICAgVCA9IHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lICsgXCJcIiwgXyksXG4gICAgICAgIHQsXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IFQubGVuZ3RoO1xuXG4gICAgLy8gSWYgbm8gY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwgcmV0dXJuIHRoZSBjYWxsYmFjayBvZiB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSAmJiAodCA9IGdldChfW3RdLCB0eXBlbmFtZS5uYW1lKSkpIHJldHVybiB0O1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIElmIGEgdHlwZSB3YXMgc3BlY2lmaWVkLCBzZXQgdGhlIGNhbGxiYWNrIGZvciB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICAvLyBPdGhlcndpc2UsIGlmIGEgbnVsbCBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZW1vdmUgY2FsbGJhY2tzIG9mIHRoZSBnaXZlbiBuYW1lLlxuICAgIGlmIChjYWxsYmFjayAhPSBudWxsICYmIHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNhbGxiYWNrOiBcIiArIGNhbGxiYWNrKTtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSBfW3RdID0gc2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUsIGNhbGxiYWNrKTtcbiAgICAgIGVsc2UgaWYgKGNhbGxiYWNrID09IG51bGwpIGZvciAodCBpbiBfKSBfW3RdID0gc2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUsIG51bGwpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBjb3B5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY29weSA9IHt9LCBfID0gdGhpcy5fO1xuICAgIGZvciAodmFyIHQgaW4gXykgY29weVt0XSA9IF9bdF0uc2xpY2UoKTtcbiAgICByZXR1cm4gbmV3IERpc3BhdGNoKGNvcHkpO1xuICB9LFxuICBjYWxsOiBmdW5jdGlvbih0eXBlLCB0aGF0KSB7XG4gICAgaWYgKChuID0gYXJndW1lbnRzLmxlbmd0aCAtIDIpID4gMCkgZm9yICh2YXIgYXJncyA9IG5ldyBBcnJheShuKSwgaSA9IDAsIG4sIHQ7IGkgPCBuOyArK2kpIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgZm9yICh0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9LFxuICBhcHBseTogZnVuY3Rpb24odHlwZSwgdGhhdCwgYXJncykge1xuICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgZm9yICh2YXIgdCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0KHR5cGUsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aCwgYzsgaSA8IG47ICsraSkge1xuICAgIGlmICgoYyA9IHR5cGVbaV0pLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHJldHVybiBjLnZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXQodHlwZSwgbmFtZSwgY2FsbGJhY2spIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIGlmICh0eXBlW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHR5cGVbaV0gPSBub29wLCB0eXBlID0gdHlwZS5zbGljZSgwLCBpKS5jb25jYXQodHlwZS5zbGljZShpICsgMSkpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChjYWxsYmFjayAhPSBudWxsKSB0eXBlLnB1c2goe25hbWU6IG5hbWUsIHZhbHVlOiBjYWxsYmFja30pO1xuICByZXR1cm4gdHlwZTtcbn1cblxudmFyIHhodG1sID0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI7XG5cbnZhciBuYW1lc3BhY2VzID0ge1xuICBzdmc6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgeGh0bWw6IHhodG1sLFxuICB4bGluazogXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gIHhtbDogXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIixcbiAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy9cIlxufTtcblxuZnVuY3Rpb24gbmFtZXNwYWNlKG5hbWUpIHtcbiAgdmFyIHByZWZpeCA9IG5hbWUgKz0gXCJcIiwgaSA9IHByZWZpeC5pbmRleE9mKFwiOlwiKTtcbiAgaWYgKGkgPj0gMCAmJiAocHJlZml4ID0gbmFtZS5zbGljZSgwLCBpKSkgIT09IFwieG1sbnNcIikgbmFtZSA9IG5hbWUuc2xpY2UoaSArIDEpO1xuICByZXR1cm4gbmFtZXNwYWNlcy5oYXNPd25Qcm9wZXJ0eShwcmVmaXgpID8ge3NwYWNlOiBuYW1lc3BhY2VzW3ByZWZpeF0sIGxvY2FsOiBuYW1lfSA6IG5hbWU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0b3JJbmhlcml0KG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBkb2N1bWVudCA9IHRoaXMub3duZXJEb2N1bWVudCxcbiAgICAgICAgdXJpID0gdGhpcy5uYW1lc3BhY2VVUkk7XG4gICAgcmV0dXJuIHVyaSA9PT0geGh0bWwgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm5hbWVzcGFjZVVSSSA9PT0geGh0bWxcbiAgICAgICAgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUpXG4gICAgICAgIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHVyaSwgbmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0b3JGaXhlZChmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRvcihuYW1lKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgcmV0dXJuIChmdWxsbmFtZS5sb2NhbFxuICAgICAgPyBjcmVhdG9yRml4ZWRcbiAgICAgIDogY3JlYXRvckluaGVyaXQpKGZ1bGxuYW1lKTtcbn1cblxuZnVuY3Rpb24gbm9uZSgpIHt9XG5cbmZ1bmN0aW9uIHNlbGVjdG9yKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gbm9uZSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fc2VsZWN0KHNlbGVjdCkge1xuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvcihzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpKSB7XG4gICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuXG5mdW5jdGlvbiBlbXB0eSgpIHtcbiAgcmV0dXJuIFtdO1xufVxuXG5mdW5jdGlvbiBzZWxlY3RvckFsbChzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IgPT0gbnVsbCA/IGVtcHR5IDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9zZWxlY3RBbGwoc2VsZWN0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yQWxsKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc3ViZ3JvdXBzLnB1c2goc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKTtcbiAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgcGFyZW50cyk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXIoc2VsZWN0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm1hdGNoZXMoc2VsZWN0b3IpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fZmlsdGVyKG1hdGNoKSB7XG4gIGlmICh0eXBlb2YgbWF0Y2ggIT09IFwiZnVuY3Rpb25cIikgbWF0Y2ggPSBtYXRjaGVyKG1hdGNoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gW10sIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgbWF0Y2guY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpIHtcbiAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuXG5mdW5jdGlvbiBzcGFyc2UodXBkYXRlKSB7XG4gIHJldHVybiBuZXcgQXJyYXkodXBkYXRlLmxlbmd0aCk7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9lbnRlcigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZW50ZXIgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cblxuZnVuY3Rpb24gRW50ZXJOb2RlKHBhcmVudCwgZGF0dW0pIHtcbiAgdGhpcy5vd25lckRvY3VtZW50ID0gcGFyZW50Lm93bmVyRG9jdW1lbnQ7XG4gIHRoaXMubmFtZXNwYWNlVVJJID0gcGFyZW50Lm5hbWVzcGFjZVVSSTtcbiAgdGhpcy5fbmV4dCA9IG51bGw7XG4gIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5fX2RhdGFfXyA9IGRhdHVtO1xufVxuXG5FbnRlck5vZGUucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRW50ZXJOb2RlLFxuICBhcHBlbmRDaGlsZDogZnVuY3Rpb24oY2hpbGQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHRoaXMuX25leHQpOyB9LFxuICBpbnNlcnRCZWZvcmU6IGZ1bmN0aW9uKGNoaWxkLCBuZXh0KSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBuZXh0KTsgfSxcbiAgcXVlcnlTZWxlY3RvcjogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTsgfSxcbiAgcXVlcnlTZWxlY3RvckFsbDogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTsgfVxufTtcblxuZnVuY3Rpb24gY29uc3RhbnQkMSh4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cblxudmFyIGtleVByZWZpeCA9IFwiJFwiOyAvLyBQcm90ZWN0IGFnYWluc3Qga2V5cyBsaWtlIOKAnF9fcHJvdG9fX+KAnS5cblxuZnVuY3Rpb24gYmluZEluZGV4KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEpIHtcbiAgdmFyIGkgPSAwLFxuICAgICAgbm9kZSxcbiAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBmaXQgaW50byB1cGRhdGUuXG4gIC8vIFB1dCBhbnkgbnVsbCBub2RlcyBpbnRvIGVudGVyLlxuICAvLyBQdXQgYW55IHJlbWFpbmluZyBkYXRhIGludG8gZW50ZXIuXG4gIGZvciAoOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBQdXQgYW55IG5vbi1udWxsIG5vZGVzIHRoYXQgZG9u4oCZdCBmaXQgaW50byBleGl0LlxuICBmb3IgKDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBleGl0W2ldID0gbm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYmluZEtleShwYXJlbnQsIGdyb3VwLCBlbnRlciwgdXBkYXRlLCBleGl0LCBkYXRhLCBrZXkpIHtcbiAgdmFyIGksXG4gICAgICBub2RlLFxuICAgICAgbm9kZUJ5S2V5VmFsdWUgPSB7fSxcbiAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAga2V5VmFsdWVzID0gbmV3IEFycmF5KGdyb3VwTGVuZ3RoKSxcbiAgICAgIGtleVZhbHVlO1xuXG4gIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBub2RlLlxuICAvLyBJZiBtdWx0aXBsZSBub2RlcyBoYXZlIHRoZSBzYW1lIGtleSwgdGhlIGR1cGxpY2F0ZXMgYXJlIGFkZGVkIHRvIGV4aXQuXG4gIGZvciAoaSA9IDA7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAga2V5VmFsdWVzW2ldID0ga2V5VmFsdWUgPSBrZXlQcmVmaXggKyBrZXkuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCk7XG4gICAgICBpZiAoa2V5VmFsdWUgaW4gbm9kZUJ5S2V5VmFsdWUpIHtcbiAgICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBkYXR1bS5cbiAgLy8gSWYgdGhlcmUgYSBub2RlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGtleSwgam9pbiBhbmQgYWRkIGl0IHRvIHVwZGF0ZS5cbiAgLy8gSWYgdGhlcmUgaXMgbm90IChvciB0aGUga2V5IGlzIGEgZHVwbGljYXRlKSwgYWRkIGl0IHRvIGVudGVyLlxuICBmb3IgKGkgPSAwOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAga2V5VmFsdWUgPSBrZXlQcmVmaXggKyBrZXkuY2FsbChwYXJlbnQsIGRhdGFbaV0sIGksIGRhdGEpO1xuICAgIGlmIChub2RlID0gbm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVdKSB7XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0gPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgYW55IHJlbWFpbmluZyBub2RlcyB0aGF0IHdlcmUgbm90IGJvdW5kIHRvIGRhdGEgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKG5vZGVCeUtleVZhbHVlW2tleVZhbHVlc1tpXV0gPT09IG5vZGUpKSB7XG4gICAgICBleGl0W2ldID0gbm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2RhdGEodmFsdWUsIGtleSkge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgZGF0YSA9IG5ldyBBcnJheSh0aGlzLnNpemUoKSksIGogPSAtMTtcbiAgICB0aGlzLmVhY2goZnVuY3Rpb24oZCkgeyBkYXRhWysral0gPSBkOyB9KTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBiaW5kID0ga2V5ID8gYmluZEtleSA6IGJpbmRJbmRleCxcbiAgICAgIHBhcmVudHMgPSB0aGlzLl9wYXJlbnRzLFxuICAgICAgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdmFsdWUgPSBjb25zdGFudCQxKHZhbHVlKTtcblxuICBmb3IgKHZhciBtID0gZ3JvdXBzLmxlbmd0aCwgdXBkYXRlID0gbmV3IEFycmF5KG0pLCBlbnRlciA9IG5ldyBBcnJheShtKSwgZXhpdCA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICB2YXIgcGFyZW50ID0gcGFyZW50c1tqXSxcbiAgICAgICAgZ3JvdXAgPSBncm91cHNbal0sXG4gICAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgICBkYXRhID0gdmFsdWUuY2FsbChwYXJlbnQsIHBhcmVudCAmJiBwYXJlbnQuX19kYXRhX18sIGosIHBhcmVudHMpLFxuICAgICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGVudGVyR3JvdXAgPSBlbnRlcltqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgdXBkYXRlR3JvdXAgPSB1cGRhdGVbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIGV4aXRHcm91cCA9IGV4aXRbal0gPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpO1xuXG4gICAgYmluZChwYXJlbnQsIGdyb3VwLCBlbnRlckdyb3VwLCB1cGRhdGVHcm91cCwgZXhpdEdyb3VwLCBkYXRhLCBrZXkpO1xuXG4gICAgLy8gTm93IGNvbm5lY3QgdGhlIGVudGVyIG5vZGVzIHRvIHRoZWlyIGZvbGxvd2luZyB1cGRhdGUgbm9kZSwgc3VjaCB0aGF0XG4gICAgLy8gYXBwZW5kQ2hpbGQgY2FuIGluc2VydCB0aGUgbWF0ZXJpYWxpemVkIGVudGVyIG5vZGUgYmVmb3JlIHRoaXMgbm9kZSxcbiAgICAvLyByYXRoZXIgdGhhbiBhdCB0aGUgZW5kIG9mIHRoZSBwYXJlbnQgbm9kZS5cbiAgICBmb3IgKHZhciBpMCA9IDAsIGkxID0gMCwgcHJldmlvdXMsIG5leHQ7IGkwIDwgZGF0YUxlbmd0aDsgKytpMCkge1xuICAgICAgaWYgKHByZXZpb3VzID0gZW50ZXJHcm91cFtpMF0pIHtcbiAgICAgICAgaWYgKGkwID49IGkxKSBpMSA9IGkwICsgMTtcbiAgICAgICAgd2hpbGUgKCEobmV4dCA9IHVwZGF0ZUdyb3VwW2kxXSkgJiYgKytpMSA8IGRhdGFMZW5ndGgpO1xuICAgICAgICBwcmV2aW91cy5fbmV4dCA9IG5leHQgfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1cGRhdGUgPSBuZXcgU2VsZWN0aW9uKHVwZGF0ZSwgcGFyZW50cyk7XG4gIHVwZGF0ZS5fZW50ZXIgPSBlbnRlcjtcbiAgdXBkYXRlLl9leGl0ID0gZXhpdDtcbiAgcmV0dXJuIHVwZGF0ZTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2V4aXQoKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2V4aXQgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2pvaW4ob25lbnRlciwgb251cGRhdGUsIG9uZXhpdCkge1xuICB2YXIgZW50ZXIgPSB0aGlzLmVudGVyKCksIHVwZGF0ZSA9IHRoaXMsIGV4aXQgPSB0aGlzLmV4aXQoKTtcbiAgZW50ZXIgPSB0eXBlb2Ygb25lbnRlciA9PT0gXCJmdW5jdGlvblwiID8gb25lbnRlcihlbnRlcikgOiBlbnRlci5hcHBlbmQob25lbnRlciArIFwiXCIpO1xuICBpZiAob251cGRhdGUgIT0gbnVsbCkgdXBkYXRlID0gb251cGRhdGUodXBkYXRlKTtcbiAgaWYgKG9uZXhpdCA9PSBudWxsKSBleGl0LnJlbW92ZSgpOyBlbHNlIG9uZXhpdChleGl0KTtcbiAgcmV0dXJuIGVudGVyICYmIHVwZGF0ZSA/IGVudGVyLm1lcmdlKHVwZGF0ZSkub3JkZXIoKSA6IHVwZGF0ZTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX21lcmdlKHNlbGVjdGlvbiQkMSkge1xuXG4gIGZvciAodmFyIGdyb3VwczAgPSB0aGlzLl9ncm91cHMsIGdyb3VwczEgPSBzZWxlY3Rpb24kJDEuX2dyb3VwcywgbTAgPSBncm91cHMwLmxlbmd0aCwgbTEgPSBncm91cHMxLmxlbmd0aCwgbSA9IE1hdGgubWluKG0wLCBtMSksIG1lcmdlcyA9IG5ldyBBcnJheShtMCksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAwID0gZ3JvdXBzMFtqXSwgZ3JvdXAxID0gZ3JvdXBzMVtqXSwgbiA9IGdyb3VwMC5sZW5ndGgsIG1lcmdlID0gbWVyZ2VzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cDBbaV0gfHwgZ3JvdXAxW2ldKSB7XG4gICAgICAgIG1lcmdlW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKDsgaiA8IG0wOyArK2opIHtcbiAgICBtZXJnZXNbal0gPSBncm91cHMwW2pdO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24obWVyZ2VzLCB0aGlzLl9wYXJlbnRzKTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX29yZGVyKCkge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IC0xLCBtID0gZ3JvdXBzLmxlbmd0aDsgKytqIDwgbTspIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IGdyb3VwLmxlbmd0aCAtIDEsIG5leHQgPSBncm91cFtpXSwgbm9kZTsgLS1pID49IDA7KSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIGlmIChuZXh0ICYmIG5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24obmV4dCkgXiA0KSBuZXh0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIG5leHQpO1xuICAgICAgICBuZXh0ID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX3NvcnQoY29tcGFyZSkge1xuICBpZiAoIWNvbXBhcmUpIGNvbXBhcmUgPSBhc2NlbmRpbmckMTtcblxuICBmdW5jdGlvbiBjb21wYXJlTm9kZShhLCBiKSB7XG4gICAgcmV0dXJuIGEgJiYgYiA/IGNvbXBhcmUoYS5fX2RhdGFfXywgYi5fX2RhdGFfXykgOiAhYSAtICFiO1xuICB9XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc29ydGdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc29ydGdyb3VwID0gc29ydGdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc29ydGdyb3VwW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc29ydGdyb3VwLnNvcnQoY29tcGFyZU5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc29ydGdyb3VwcywgdGhpcy5fcGFyZW50cykub3JkZXIoKTtcbn1cblxuZnVuY3Rpb24gYXNjZW5kaW5nJDEoYSwgYikge1xuICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9jYWxsKCkge1xuICB2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHNbMF07XG4gIGFyZ3VtZW50c1swXSA9IHRoaXM7XG4gIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fbm9kZXMoKSB7XG4gIHZhciBub2RlcyA9IG5ldyBBcnJheSh0aGlzLnNpemUoKSksIGkgPSAtMTtcbiAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkgeyBub2Rlc1srK2ldID0gdGhpczsgfSk7XG4gIHJldHVybiBub2Rlcztcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX25vZGUoKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhciBub2RlID0gZ3JvdXBbaV07XG4gICAgICBpZiAobm9kZSkgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9zaXplKCkge1xuICB2YXIgc2l6ZSA9IDA7XG4gIHRoaXMuZWFjaChmdW5jdGlvbigpIHsgKytzaXplOyB9KTtcbiAgcmV0dXJuIHNpemU7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9lbXB0eSgpIHtcbiAgcmV0dXJuICF0aGlzLm5vZGUoKTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2VhY2goY2FsbGJhY2spIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkgY2FsbGJhY2suY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmVOUyhmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHYpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb25OUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9hdHRyKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMubm9kZSgpO1xuICAgIHJldHVybiBmdWxsbmFtZS5sb2NhbFxuICAgICAgICA/IG5vZGUuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKVxuICAgICAgICA6IG5vZGUuZ2V0QXR0cmlidXRlKGZ1bGxuYW1lKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0clJlbW92ZU5TIDogYXR0clJlbW92ZSkgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24pXG4gICAgICA6IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJDb25zdGFudE5TIDogYXR0ckNvbnN0YW50KSkpKGZ1bGxuYW1lLCB2YWx1ZSkpO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0Vmlldyhub2RlKSB7XG4gIHJldHVybiAobm9kZS5vd25lckRvY3VtZW50ICYmIG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldykgLy8gbm9kZSBpcyBhIE5vZGVcbiAgICAgIHx8IChub2RlLmRvY3VtZW50ICYmIG5vZGUpIC8vIG5vZGUgaXMgYSBXaW5kb3dcbiAgICAgIHx8IG5vZGUuZGVmYXVsdFZpZXc7IC8vIG5vZGUgaXMgYSBEb2N1bWVudFxufVxuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gICAgZWxzZSB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHYsIHByaW9yaXR5KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX3N0eWxlKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDFcbiAgICAgID8gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgICA/IHN0eWxlUmVtb3ZlIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgID8gc3R5bGVGdW5jdGlvblxuICAgICAgICAgICAgOiBzdHlsZUNvbnN0YW50KShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkgPT0gbnVsbCA/IFwiXCIgOiBwcmlvcml0eSkpXG4gICAgICA6IHN0eWxlVmFsdWUodGhpcy5ub2RlKCksIG5hbWUpO1xufVxuXG5mdW5jdGlvbiBzdHlsZVZhbHVlKG5vZGUsIG5hbWUpIHtcbiAgcmV0dXJuIG5vZGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKVxuICAgICAgfHwgZGVmYXVsdFZpZXcobm9kZSkuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpO1xufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBkZWxldGUgdGhpc1tuYW1lXTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlDb25zdGFudChuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpc1tuYW1lXSA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgZGVsZXRlIHRoaXNbbmFtZV07XG4gICAgZWxzZSB0aGlzW25hbWVdID0gdjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX3Byb3BlcnR5KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IHByb3BlcnR5UmVtb3ZlIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHByb3BlcnR5RnVuY3Rpb25cbiAgICAgICAgICA6IHByb3BlcnR5Q29uc3RhbnQpKG5hbWUsIHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKClbbmFtZV07XG59XG5cbmZ1bmN0aW9uIGNsYXNzQXJyYXkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcudHJpbSgpLnNwbGl0KC9efFxccysvKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NMaXN0KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0IHx8IG5ldyBDbGFzc0xpc3Qobm9kZSk7XG59XG5cbmZ1bmN0aW9uIENsYXNzTGlzdChub2RlKSB7XG4gIHRoaXMuX25vZGUgPSBub2RlO1xuICB0aGlzLl9uYW1lcyA9IGNsYXNzQXJyYXkobm9kZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiKTtcbn1cblxuQ2xhc3NMaXN0LnByb3RvdHlwZSA9IHtcbiAgYWRkOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpIDwgMCkge1xuICAgICAgdGhpcy5fbmFtZXMucHVzaChuYW1lKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpID49IDApIHtcbiAgICAgIHRoaXMuX25hbWVzLnNwbGljZShpLCAxKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgY29udGFpbnM6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKSA+PSAwO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjbGFzc2VkQWRkKG5vZGUsIG5hbWVzKSB7XG4gIHZhciBsaXN0ID0gY2xhc3NMaXN0KG5vZGUpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBsaXN0LmFkZChuYW1lc1tpXSk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRSZW1vdmUobm9kZSwgbmFtZXMpIHtcbiAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIGxpc3QucmVtb3ZlKG5hbWVzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZFRydWUobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRBZGQodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRmFsc2UobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRSZW1vdmUodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRnVuY3Rpb24obmFtZXMsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAodmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKSA/IGNsYXNzZWRBZGQgOiBjbGFzc2VkUmVtb3ZlKSh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9jbGFzc2VkKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBuYW1lcyA9IGNsYXNzQXJyYXkobmFtZSArIFwiXCIpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBsaXN0ID0gY2xhc3NMaXN0KHRoaXMubm9kZSgpKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWxpc3QuY29udGFpbnMobmFtZXNbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBjbGFzc2VkRnVuY3Rpb24gOiB2YWx1ZVxuICAgICAgPyBjbGFzc2VkVHJ1ZVxuICAgICAgOiBjbGFzc2VkRmFsc2UpKG5hbWVzLCB2YWx1ZSkpO1xufVxuXG5mdW5jdGlvbiB0ZXh0UmVtb3ZlKCkge1xuICB0aGlzLnRleHRDb250ZW50ID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gdGV4dENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRleHRGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX3RleHQodmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IHRleHRSZW1vdmUgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHRleHRGdW5jdGlvblxuICAgICAgICAgIDogdGV4dENvbnN0YW50KSh2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpLnRleHRDb250ZW50O1xufVxuXG5mdW5jdGlvbiBodG1sUmVtb3ZlKCkge1xuICB0aGlzLmlubmVySFRNTCA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGh0bWxDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaHRtbEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy5pbm5lckhUTUwgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2h0bWwodmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IGh0bWxSZW1vdmUgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGh0bWxGdW5jdGlvblxuICAgICAgICAgIDogaHRtbENvbnN0YW50KSh2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpLmlubmVySFRNTDtcbn1cblxuZnVuY3Rpb24gcmFpc2UoKSB7XG4gIGlmICh0aGlzLm5leHRTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodGhpcyk7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9yYWlzZSgpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChyYWlzZSk7XG59XG5cbmZ1bmN0aW9uIGxvd2VyKCkge1xuICBpZiAodGhpcy5wcmV2aW91c1NpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcywgdGhpcy5wYXJlbnROb2RlLmZpcnN0Q2hpbGQpO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fbG93ZXIoKSB7XG4gIHJldHVybiB0aGlzLmVhY2gobG93ZXIpO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fYXBwZW5kKG5hbWUpIHtcbiAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKTtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmFwcGVuZENoaWxkKGNyZWF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNvbnN0YW50TnVsbCgpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9pbnNlcnQobmFtZSwgYmVmb3JlKSB7XG4gIHZhciBjcmVhdGUgPSB0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiID8gbmFtZSA6IGNyZWF0b3IobmFtZSksXG4gICAgICBzZWxlY3QgPSBiZWZvcmUgPT0gbnVsbCA/IGNvbnN0YW50TnVsbCA6IHR5cGVvZiBiZWZvcmUgPT09IFwiZnVuY3Rpb25cIiA/IGJlZm9yZSA6IHNlbGVjdG9yKGJlZm9yZSk7XG4gIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnRCZWZvcmUoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHNlbGVjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IG51bGwpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCkge1xuICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9yZW1vdmUoKSB7XG4gIHJldHVybiB0aGlzLmVhY2gocmVtb3ZlKTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2Nsb25lU2hhbGxvdygpIHtcbiAgcmV0dXJuIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5jbG9uZU5vZGUoZmFsc2UpLCB0aGlzLm5leHRTaWJsaW5nKTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2Nsb25lRGVlcCgpIHtcbiAgcmV0dXJuIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5jbG9uZU5vZGUodHJ1ZSksIHRoaXMubmV4dFNpYmxpbmcpO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fY2xvbmUoZGVlcCkge1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZGVlcCA/IHNlbGVjdGlvbl9jbG9uZURlZXAgOiBzZWxlY3Rpb25fY2xvbmVTaGFsbG93KTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2RhdHVtKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMucHJvcGVydHkoXCJfX2RhdGFfX1wiLCB2YWx1ZSlcbiAgICAgIDogdGhpcy5ub2RlKCkuX19kYXRhX187XG59XG5cbnZhciBmaWx0ZXJFdmVudHMgPSB7fTtcblxuZXhwb3J0cy5ldmVudCA9IG51bGw7XG5cbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIGlmICghKFwib25tb3VzZWVudGVyXCIgaW4gZWxlbWVudCkpIHtcbiAgICBmaWx0ZXJFdmVudHMgPSB7bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIiwgbW91c2VsZWF2ZTogXCJtb3VzZW91dFwifTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaWx0ZXJDb250ZXh0TGlzdGVuZXIobGlzdGVuZXIsIGluZGV4LCBncm91cCkge1xuICBsaXN0ZW5lciA9IGNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0O1xuICAgIGlmICghcmVsYXRlZCB8fCAocmVsYXRlZCAhPT0gdGhpcyAmJiAhKHJlbGF0ZWQuY29tcGFyZURvY3VtZW50UG9zaXRpb24odGhpcykgJiA4KSkpIHtcbiAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50MSkge1xuICAgIHZhciBldmVudDAgPSBleHBvcnRzLmV2ZW50OyAvLyBFdmVudHMgY2FuIGJlIHJlZW50cmFudCAoZS5nLiwgZm9jdXMpLlxuICAgIGV4cG9ydHMuZXZlbnQgPSBldmVudDE7XG4gICAgdHJ5IHtcbiAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgdGhpcy5fX2RhdGFfXywgaW5kZXgsIGdyb3VwKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgZXhwb3J0cy5ldmVudCA9IGV2ZW50MDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzJDEodHlwZW5hbWVzKSB7XG4gIHJldHVybiB0eXBlbmFtZXMudHJpbSgpLnNwbGl0KC9efFxccysvKS5tYXAoZnVuY3Rpb24odCkge1xuICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgbmFtZSA9IHQuc2xpY2UoaSArIDEpLCB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25SZW1vdmUodHlwZW5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBvbiA9IHRoaXMuX19vbjtcbiAgICBpZiAoIW9uKSByZXR1cm47XG4gICAgZm9yICh2YXIgaiA9IDAsIGkgPSAtMSwgbSA9IG9uLmxlbmd0aCwgbzsgaiA8IG07ICsraikge1xuICAgICAgaWYgKG8gPSBvbltqXSwgKCF0eXBlbmFtZS50eXBlIHx8IG8udHlwZSA9PT0gdHlwZW5hbWUudHlwZSkgJiYgby5uYW1lID09PSB0eXBlbmFtZS5uYW1lKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIsIG8uY2FwdHVyZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvblsrK2ldID0gbztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCsraSkgb24ubGVuZ3RoID0gaTtcbiAgICBlbHNlIGRlbGV0ZSB0aGlzLl9fb247XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9uQWRkKHR5cGVuYW1lLCB2YWx1ZSwgY2FwdHVyZSkge1xuICB2YXIgd3JhcCA9IGZpbHRlckV2ZW50cy5oYXNPd25Qcm9wZXJ0eSh0eXBlbmFtZS50eXBlKSA/IGZpbHRlckNvbnRleHRMaXN0ZW5lciA6IGNvbnRleHRMaXN0ZW5lcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKGQsIGksIGdyb3VwKSB7XG4gICAgdmFyIG9uID0gdGhpcy5fX29uLCBvLCBsaXN0ZW5lciA9IHdyYXAodmFsdWUsIGksIGdyb3VwKTtcbiAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgICBpZiAoKG8gPSBvbltqXSkudHlwZSA9PT0gdHlwZW5hbWUudHlwZSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciwgby5jYXB0dXJlKTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciA9IGxpc3RlbmVyLCBvLmNhcHR1cmUgPSBjYXB0dXJlKTtcbiAgICAgICAgby52YWx1ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0eXBlbmFtZS50eXBlLCBsaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgbyA9IHt0eXBlOiB0eXBlbmFtZS50eXBlLCBuYW1lOiB0eXBlbmFtZS5uYW1lLCB2YWx1ZTogdmFsdWUsIGxpc3RlbmVyOiBsaXN0ZW5lciwgY2FwdHVyZTogY2FwdHVyZX07XG4gICAgaWYgKCFvbikgdGhpcy5fX29uID0gW29dO1xuICAgIGVsc2Ugb24ucHVzaChvKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX29uKHR5cGVuYW1lLCB2YWx1ZSwgY2FwdHVyZSkge1xuICB2YXIgdHlwZW5hbWVzID0gcGFyc2VUeXBlbmFtZXMkMSh0eXBlbmFtZSArIFwiXCIpLCBpLCBuID0gdHlwZW5hbWVzLmxlbmd0aCwgdDtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgb24gPSB0aGlzLm5vZGUoKS5fX29uO1xuICAgIGlmIChvbikgZm9yICh2YXIgaiA9IDAsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAoaSA9IDAsIG8gPSBvbltqXTsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoKHQgPSB0eXBlbmFtZXNbaV0pLnR5cGUgPT09IG8udHlwZSAmJiB0Lm5hbWUgPT09IG8ubmFtZSkge1xuICAgICAgICAgIHJldHVybiBvLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIG9uID0gdmFsdWUgPyBvbkFkZCA6IG9uUmVtb3ZlO1xuICBpZiAoY2FwdHVyZSA9PSBudWxsKSBjYXB0dXJlID0gZmFsc2U7XG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHRoaXMuZWFjaChvbih0eXBlbmFtZXNbaV0sIHZhbHVlLCBjYXB0dXJlKSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBjdXN0b21FdmVudChldmVudDEsIGxpc3RlbmVyLCB0aGF0LCBhcmdzKSB7XG4gIHZhciBldmVudDAgPSBleHBvcnRzLmV2ZW50O1xuICBldmVudDEuc291cmNlRXZlbnQgPSBleHBvcnRzLmV2ZW50O1xuICBleHBvcnRzLmV2ZW50ID0gZXZlbnQxO1xuICB0cnkge1xuICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBleHBvcnRzLmV2ZW50ID0gZXZlbnQwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQobm9kZSwgdHlwZSwgcGFyYW1zKSB7XG4gIHZhciB3aW5kb3cgPSBkZWZhdWx0Vmlldyhub2RlKSxcbiAgICAgIGV2ZW50ID0gd2luZG93LkN1c3RvbUV2ZW50O1xuXG4gIGlmICh0eXBlb2YgZXZlbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGV2ZW50ID0gbmV3IGV2ZW50KHR5cGUsIHBhcmFtcyk7XG4gIH0gZWxzZSB7XG4gICAgZXZlbnQgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtcbiAgICBpZiAocGFyYW1zKSBldmVudC5pbml0RXZlbnQodHlwZSwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlKSwgZXZlbnQuZGV0YWlsID0gcGFyYW1zLmRldGFpbDtcbiAgICBlbHNlIGV2ZW50LmluaXRFdmVudCh0eXBlLCBmYWxzZSwgZmFsc2UpO1xuICB9XG5cbiAgbm9kZS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hDb25zdGFudCh0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRnVuY3Rpb24odHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9kaXNwYXRjaCh0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaCgodHlwZW9mIHBhcmFtcyA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IGRpc3BhdGNoRnVuY3Rpb25cbiAgICAgIDogZGlzcGF0Y2hDb25zdGFudCkodHlwZSwgcGFyYW1zKSk7XG59XG5cbnZhciByb290ID0gW251bGxdO1xuXG5mdW5jdGlvbiBTZWxlY3Rpb24oZ3JvdXBzLCBwYXJlbnRzKSB7XG4gIHRoaXMuX2dyb3VwcyA9IGdyb3VwcztcbiAgdGhpcy5fcGFyZW50cyA9IHBhcmVudHM7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdXSwgcm9vdCk7XG59XG5cblNlbGVjdGlvbi5wcm90b3R5cGUgPSBzZWxlY3Rpb24ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogU2VsZWN0aW9uLFxuICBzZWxlY3Q6IHNlbGVjdGlvbl9zZWxlY3QsXG4gIHNlbGVjdEFsbDogc2VsZWN0aW9uX3NlbGVjdEFsbCxcbiAgZmlsdGVyOiBzZWxlY3Rpb25fZmlsdGVyLFxuICBkYXRhOiBzZWxlY3Rpb25fZGF0YSxcbiAgZW50ZXI6IHNlbGVjdGlvbl9lbnRlcixcbiAgZXhpdDogc2VsZWN0aW9uX2V4aXQsXG4gIGpvaW46IHNlbGVjdGlvbl9qb2luLFxuICBtZXJnZTogc2VsZWN0aW9uX21lcmdlLFxuICBvcmRlcjogc2VsZWN0aW9uX29yZGVyLFxuICBzb3J0OiBzZWxlY3Rpb25fc29ydCxcbiAgY2FsbDogc2VsZWN0aW9uX2NhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fbm9kZXMsXG4gIG5vZGU6IHNlbGVjdGlvbl9ub2RlLFxuICBzaXplOiBzZWxlY3Rpb25fc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9lbXB0eSxcbiAgZWFjaDogc2VsZWN0aW9uX2VhY2gsXG4gIGF0dHI6IHNlbGVjdGlvbl9hdHRyLFxuICBzdHlsZTogc2VsZWN0aW9uX3N0eWxlLFxuICBwcm9wZXJ0eTogc2VsZWN0aW9uX3Byb3BlcnR5LFxuICBjbGFzc2VkOiBzZWxlY3Rpb25fY2xhc3NlZCxcbiAgdGV4dDogc2VsZWN0aW9uX3RleHQsXG4gIGh0bWw6IHNlbGVjdGlvbl9odG1sLFxuICByYWlzZTogc2VsZWN0aW9uX3JhaXNlLFxuICBsb3dlcjogc2VsZWN0aW9uX2xvd2VyLFxuICBhcHBlbmQ6IHNlbGVjdGlvbl9hcHBlbmQsXG4gIGluc2VydDogc2VsZWN0aW9uX2luc2VydCxcbiAgcmVtb3ZlOiBzZWxlY3Rpb25fcmVtb3ZlLFxuICBjbG9uZTogc2VsZWN0aW9uX2Nsb25lLFxuICBkYXR1bTogc2VsZWN0aW9uX2RhdHVtLFxuICBvbjogc2VsZWN0aW9uX29uLFxuICBkaXNwYXRjaDogc2VsZWN0aW9uX2Rpc3BhdGNoXG59O1xuXG5mdW5jdGlvbiBzZWxlY3Qoc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIlxuICAgICAgPyBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcildXSwgW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF0pXG4gICAgICA6IG5ldyBTZWxlY3Rpb24oW1tzZWxlY3Rvcl1dLCByb290KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlKG5hbWUpIHtcbiAgcmV0dXJuIHNlbGVjdChjcmVhdG9yKG5hbWUpLmNhbGwoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSk7XG59XG5cbnZhciBuZXh0SWQgPSAwO1xuXG5mdW5jdGlvbiBsb2NhbCgpIHtcbiAgcmV0dXJuIG5ldyBMb2NhbDtcbn1cblxuZnVuY3Rpb24gTG9jYWwoKSB7XG4gIHRoaXMuXyA9IFwiQFwiICsgKCsrbmV4dElkKS50b1N0cmluZygzNik7XG59XG5cbkxvY2FsLnByb3RvdHlwZSA9IGxvY2FsLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IExvY2FsLFxuICBnZXQ6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICB2YXIgaWQgPSB0aGlzLl87XG4gICAgd2hpbGUgKCEoaWQgaW4gbm9kZSkpIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSByZXR1cm47XG4gICAgcmV0dXJuIG5vZGVbaWRdO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKG5vZGUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIG5vZGVbdGhpcy5fXSA9IHZhbHVlO1xuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICByZXR1cm4gdGhpcy5fIGluIG5vZGUgJiYgZGVsZXRlIG5vZGVbdGhpcy5fXTtcbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl87XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHNvdXJjZUV2ZW50KCkge1xuICB2YXIgY3VycmVudCA9IGV4cG9ydHMuZXZlbnQsIHNvdXJjZTtcbiAgd2hpbGUgKHNvdXJjZSA9IGN1cnJlbnQuc291cmNlRXZlbnQpIGN1cnJlbnQgPSBzb3VyY2U7XG4gIHJldHVybiBjdXJyZW50O1xufVxuXG5mdW5jdGlvbiBwb2ludChub2RlLCBldmVudCkge1xuICB2YXIgc3ZnID0gbm9kZS5vd25lclNWR0VsZW1lbnQgfHwgbm9kZTtcblxuICBpZiAoc3ZnLmNyZWF0ZVNWR1BvaW50KSB7XG4gICAgdmFyIHBvaW50ID0gc3ZnLmNyZWF0ZVNWR1BvaW50KCk7XG4gICAgcG9pbnQueCA9IGV2ZW50LmNsaWVudFgsIHBvaW50LnkgPSBldmVudC5jbGllbnRZO1xuICAgIHBvaW50ID0gcG9pbnQubWF0cml4VHJhbnNmb3JtKG5vZGUuZ2V0U2NyZWVuQ1RNKCkuaW52ZXJzZSgpKTtcbiAgICByZXR1cm4gW3BvaW50LngsIHBvaW50LnldO1xuICB9XG5cbiAgdmFyIHJlY3QgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICByZXR1cm4gW2V2ZW50LmNsaWVudFggLSByZWN0LmxlZnQgLSBub2RlLmNsaWVudExlZnQsIGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcCAtIG5vZGUuY2xpZW50VG9wXTtcbn1cblxuZnVuY3Rpb24gbW91c2Uobm9kZSkge1xuICB2YXIgZXZlbnQgPSBzb3VyY2VFdmVudCgpO1xuICBpZiAoZXZlbnQuY2hhbmdlZFRvdWNoZXMpIGV2ZW50ID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF07XG4gIHJldHVybiBwb2ludChub2RlLCBldmVudCk7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdEFsbChzZWxlY3Rvcikge1xuICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiXG4gICAgICA/IG5ldyBTZWxlY3Rpb24oW2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpXSwgW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF0pXG4gICAgICA6IG5ldyBTZWxlY3Rpb24oW3NlbGVjdG9yID09IG51bGwgPyBbXSA6IHNlbGVjdG9yXSwgcm9vdCk7XG59XG5cbmZ1bmN0aW9uIHRvdWNoKG5vZGUsIHRvdWNoZXMsIGlkZW50aWZpZXIpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSBpZGVudGlmaWVyID0gdG91Y2hlcywgdG91Y2hlcyA9IHNvdXJjZUV2ZW50KCkuY2hhbmdlZFRvdWNoZXM7XG5cbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0b3VjaGVzID8gdG91Y2hlcy5sZW5ndGggOiAwLCB0b3VjaDsgaSA8IG47ICsraSkge1xuICAgIGlmICgodG91Y2ggPSB0b3VjaGVzW2ldKS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXR1cm4gcG9pbnQobm9kZSwgdG91Y2gpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiB0b3VjaGVzKG5vZGUsIHRvdWNoZXMpIHtcbiAgaWYgKHRvdWNoZXMgPT0gbnVsbCkgdG91Y2hlcyA9IHNvdXJjZUV2ZW50KCkudG91Y2hlcztcblxuICBmb3IgKHZhciBpID0gMCwgbiA9IHRvdWNoZXMgPyB0b3VjaGVzLmxlbmd0aCA6IDAsIHBvaW50cyA9IG5ldyBBcnJheShuKTsgaSA8IG47ICsraSkge1xuICAgIHBvaW50c1tpXSA9IHBvaW50KG5vZGUsIHRvdWNoZXNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHBvaW50cztcbn1cblxuZnVuY3Rpb24gbm9wcm9wYWdhdGlvbigpIHtcbiAgZXhwb3J0cy5ldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cblxuZnVuY3Rpb24gbm9ldmVudCgpIHtcbiAgZXhwb3J0cy5ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICBleHBvcnRzLmV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuXG5mdW5jdGlvbiBkcmFnRGlzYWJsZSh2aWV3KSB7XG4gIHZhciByb290ID0gdmlldy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gICAgICBzZWxlY3Rpb24kJDEgPSBzZWxlY3Qodmlldykub24oXCJkcmFnc3RhcnQuZHJhZ1wiLCBub2V2ZW50LCB0cnVlKTtcbiAgaWYgKFwib25zZWxlY3RzdGFydFwiIGluIHJvb3QpIHtcbiAgICBzZWxlY3Rpb24kJDEub24oXCJzZWxlY3RzdGFydC5kcmFnXCIsIG5vZXZlbnQsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHJvb3QuX19ub3NlbGVjdCA9IHJvb3Quc3R5bGUuTW96VXNlclNlbGVjdDtcbiAgICByb290LnN0eWxlLk1velVzZXJTZWxlY3QgPSBcIm5vbmVcIjtcbiAgfVxufVxuXG5mdW5jdGlvbiB5ZXNkcmFnKHZpZXcsIG5vY2xpY2spIHtcbiAgdmFyIHJvb3QgPSB2aWV3LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICAgIHNlbGVjdGlvbiQkMSA9IHNlbGVjdCh2aWV3KS5vbihcImRyYWdzdGFydC5kcmFnXCIsIG51bGwpO1xuICBpZiAobm9jbGljaykge1xuICAgIHNlbGVjdGlvbiQkMS5vbihcImNsaWNrLmRyYWdcIiwgbm9ldmVudCwgdHJ1ZSk7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgc2VsZWN0aW9uJCQxLm9uKFwiY2xpY2suZHJhZ1wiLCBudWxsKTsgfSwgMCk7XG4gIH1cbiAgaWYgKFwib25zZWxlY3RzdGFydFwiIGluIHJvb3QpIHtcbiAgICBzZWxlY3Rpb24kJDEub24oXCJzZWxlY3RzdGFydC5kcmFnXCIsIG51bGwpO1xuICB9IGVsc2Uge1xuICAgIHJvb3Quc3R5bGUuTW96VXNlclNlbGVjdCA9IHJvb3QuX19ub3NlbGVjdDtcbiAgICBkZWxldGUgcm9vdC5fX25vc2VsZWN0O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbnN0YW50JDIoeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG5cbmZ1bmN0aW9uIERyYWdFdmVudCh0YXJnZXQsIHR5cGUsIHN1YmplY3QsIGlkLCBhY3RpdmUsIHgsIHksIGR4LCBkeSwgZGlzcGF0Y2gpIHtcbiAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gIHRoaXMudHlwZSA9IHR5cGU7XG4gIHRoaXMuc3ViamVjdCA9IHN1YmplY3Q7XG4gIHRoaXMuaWRlbnRpZmllciA9IGlkO1xuICB0aGlzLmFjdGl2ZSA9IGFjdGl2ZTtcbiAgdGhpcy54ID0geDtcbiAgdGhpcy55ID0geTtcbiAgdGhpcy5keCA9IGR4O1xuICB0aGlzLmR5ID0gZHk7XG4gIHRoaXMuXyA9IGRpc3BhdGNoO1xufVxuXG5EcmFnRXZlbnQucHJvdG90eXBlLm9uID0gZnVuY3Rpb24oKSB7XG4gIHZhciB2YWx1ZSA9IHRoaXMuXy5vbi5hcHBseSh0aGlzLl8sIGFyZ3VtZW50cyk7XG4gIHJldHVybiB2YWx1ZSA9PT0gdGhpcy5fID8gdGhpcyA6IHZhbHVlO1xufTtcblxuLy8gSWdub3JlIHJpZ2h0LWNsaWNrLCBzaW5jZSB0aGF0IHNob3VsZCBvcGVuIHRoZSBjb250ZXh0IG1lbnUuXG5mdW5jdGlvbiBkZWZhdWx0RmlsdGVyKCkge1xuICByZXR1cm4gIWV4cG9ydHMuZXZlbnQuYnV0dG9uO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0Q29udGFpbmVyKCkge1xuICByZXR1cm4gdGhpcy5wYXJlbnROb2RlO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0U3ViamVjdChkKSB7XG4gIHJldHVybiBkID09IG51bGwgPyB7eDogZXhwb3J0cy5ldmVudC54LCB5OiBleHBvcnRzLmV2ZW50Lnl9IDogZDtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFRvdWNoYWJsZSgpIHtcbiAgcmV0dXJuIFwib250b3VjaHN0YXJ0XCIgaW4gdGhpcztcbn1cblxuZnVuY3Rpb24gZHJhZygpIHtcbiAgdmFyIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIsXG4gICAgICBjb250YWluZXIgPSBkZWZhdWx0Q29udGFpbmVyLFxuICAgICAgc3ViamVjdCA9IGRlZmF1bHRTdWJqZWN0LFxuICAgICAgdG91Y2hhYmxlID0gZGVmYXVsdFRvdWNoYWJsZSxcbiAgICAgIGdlc3R1cmVzID0ge30sXG4gICAgICBsaXN0ZW5lcnMgPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiZHJhZ1wiLCBcImVuZFwiKSxcbiAgICAgIGFjdGl2ZSA9IDAsXG4gICAgICBtb3VzZWRvd254LFxuICAgICAgbW91c2Vkb3dueSxcbiAgICAgIG1vdXNlbW92aW5nLFxuICAgICAgdG91Y2hlbmRpbmcsXG4gICAgICBjbGlja0Rpc3RhbmNlMiA9IDA7XG5cbiAgZnVuY3Rpb24gZHJhZyhzZWxlY3Rpb24kJDEpIHtcbiAgICBzZWxlY3Rpb24kJDFcbiAgICAgICAgLm9uKFwibW91c2Vkb3duLmRyYWdcIiwgbW91c2Vkb3duZWQpXG4gICAgICAuZmlsdGVyKHRvdWNoYWJsZSlcbiAgICAgICAgLm9uKFwidG91Y2hzdGFydC5kcmFnXCIsIHRvdWNoc3RhcnRlZClcbiAgICAgICAgLm9uKFwidG91Y2htb3ZlLmRyYWdcIiwgdG91Y2htb3ZlZClcbiAgICAgICAgLm9uKFwidG91Y2hlbmQuZHJhZyB0b3VjaGNhbmNlbC5kcmFnXCIsIHRvdWNoZW5kZWQpXG4gICAgICAgIC5zdHlsZShcInRvdWNoLWFjdGlvblwiLCBcIm5vbmVcIilcbiAgICAgICAgLnN0eWxlKFwiLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yXCIsIFwicmdiYSgwLDAsMCwwKVwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdXNlZG93bmVkKCkge1xuICAgIGlmICh0b3VjaGVuZGluZyB8fCAhZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICB2YXIgZ2VzdHVyZSA9IGJlZm9yZXN0YXJ0KFwibW91c2VcIiwgY29udGFpbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIG1vdXNlLCB0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICghZ2VzdHVyZSkgcmV0dXJuO1xuICAgIHNlbGVjdChleHBvcnRzLmV2ZW50LnZpZXcpLm9uKFwibW91c2Vtb3ZlLmRyYWdcIiwgbW91c2Vtb3ZlZCwgdHJ1ZSkub24oXCJtb3VzZXVwLmRyYWdcIiwgbW91c2V1cHBlZCwgdHJ1ZSk7XG4gICAgZHJhZ0Rpc2FibGUoZXhwb3J0cy5ldmVudC52aWV3KTtcbiAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgbW91c2Vtb3ZpbmcgPSBmYWxzZTtcbiAgICBtb3VzZWRvd254ID0gZXhwb3J0cy5ldmVudC5jbGllbnRYO1xuICAgIG1vdXNlZG93bnkgPSBleHBvcnRzLmV2ZW50LmNsaWVudFk7XG4gICAgZ2VzdHVyZShcInN0YXJ0XCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gbW91c2Vtb3ZlZCgpIHtcbiAgICBub2V2ZW50KCk7XG4gICAgaWYgKCFtb3VzZW1vdmluZykge1xuICAgICAgdmFyIGR4ID0gZXhwb3J0cy5ldmVudC5jbGllbnRYIC0gbW91c2Vkb3dueCwgZHkgPSBleHBvcnRzLmV2ZW50LmNsaWVudFkgLSBtb3VzZWRvd255O1xuICAgICAgbW91c2Vtb3ZpbmcgPSBkeCAqIGR4ICsgZHkgKiBkeSA+IGNsaWNrRGlzdGFuY2UyO1xuICAgIH1cbiAgICBnZXN0dXJlcy5tb3VzZShcImRyYWdcIik7XG4gIH1cblxuICBmdW5jdGlvbiBtb3VzZXVwcGVkKCkge1xuICAgIHNlbGVjdChleHBvcnRzLmV2ZW50LnZpZXcpLm9uKFwibW91c2Vtb3ZlLmRyYWcgbW91c2V1cC5kcmFnXCIsIG51bGwpO1xuICAgIHllc2RyYWcoZXhwb3J0cy5ldmVudC52aWV3LCBtb3VzZW1vdmluZyk7XG4gICAgbm9ldmVudCgpO1xuICAgIGdlc3R1cmVzLm1vdXNlKFwiZW5kXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hzdGFydGVkKCkge1xuICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICB2YXIgdG91Y2hlcyQkMSA9IGV4cG9ydHMuZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgIGMgPSBjb250YWluZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgbiA9IHRvdWNoZXMkJDEubGVuZ3RoLCBpLCBnZXN0dXJlO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKGdlc3R1cmUgPSBiZWZvcmVzdGFydCh0b3VjaGVzJCQxW2ldLmlkZW50aWZpZXIsIGMsIHRvdWNoLCB0aGlzLCBhcmd1bWVudHMpKSB7XG4gICAgICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICAgICAgZ2VzdHVyZShcInN0YXJ0XCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNobW92ZWQoKSB7XG4gICAgdmFyIHRvdWNoZXMkJDEgPSBleHBvcnRzLmV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICBuID0gdG91Y2hlcyQkMS5sZW5ndGgsIGksIGdlc3R1cmU7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoZ2VzdHVyZSA9IGdlc3R1cmVzW3RvdWNoZXMkJDFbaV0uaWRlbnRpZmllcl0pIHtcbiAgICAgICAgbm9ldmVudCgpO1xuICAgICAgICBnZXN0dXJlKFwiZHJhZ1wiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaGVuZGVkKCkge1xuICAgIHZhciB0b3VjaGVzJCQxID0gZXhwb3J0cy5ldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgbiA9IHRvdWNoZXMkJDEubGVuZ3RoLCBpLCBnZXN0dXJlO1xuXG4gICAgaWYgKHRvdWNoZW5kaW5nKSBjbGVhclRpbWVvdXQodG91Y2hlbmRpbmcpO1xuICAgIHRvdWNoZW5kaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hlbmRpbmcgPSBudWxsOyB9LCA1MDApOyAvLyBHaG9zdCBjbGlja3MgYXJlIGRlbGF5ZWQhXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKGdlc3R1cmUgPSBnZXN0dXJlc1t0b3VjaGVzJCQxW2ldLmlkZW50aWZpZXJdKSB7XG4gICAgICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICAgICAgZ2VzdHVyZShcImVuZFwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBiZWZvcmVzdGFydChpZCwgY29udGFpbmVyLCBwb2ludCQkMSwgdGhhdCwgYXJncykge1xuICAgIHZhciBwID0gcG9pbnQkJDEoY29udGFpbmVyLCBpZCksIHMsIGR4LCBkeSxcbiAgICAgICAgc3VibGlzdGVuZXJzID0gbGlzdGVuZXJzLmNvcHkoKTtcblxuICAgIGlmICghY3VzdG9tRXZlbnQobmV3IERyYWdFdmVudChkcmFnLCBcImJlZm9yZXN0YXJ0XCIsIHMsIGlkLCBhY3RpdmUsIHBbMF0sIHBbMV0sIDAsIDAsIHN1Ymxpc3RlbmVycyksIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKChleHBvcnRzLmV2ZW50LnN1YmplY3QgPSBzID0gc3ViamVjdC5hcHBseSh0aGF0LCBhcmdzKSkgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAgICAgZHggPSBzLnggLSBwWzBdIHx8IDA7XG4gICAgICBkeSA9IHMueSAtIHBbMV0gfHwgMDtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pKSByZXR1cm47XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gZ2VzdHVyZSh0eXBlKSB7XG4gICAgICB2YXIgcDAgPSBwLCBuO1xuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJzdGFydFwiOiBnZXN0dXJlc1tpZF0gPSBnZXN0dXJlLCBuID0gYWN0aXZlKys7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiZW5kXCI6IGRlbGV0ZSBnZXN0dXJlc1tpZF0sIC0tYWN0aXZlOyAvLyBub2JyZWFrXG4gICAgICAgIGNhc2UgXCJkcmFnXCI6IHAgPSBwb2ludCQkMShjb250YWluZXIsIGlkKSwgbiA9IGFjdGl2ZTsgYnJlYWs7XG4gICAgICB9XG4gICAgICBjdXN0b21FdmVudChuZXcgRHJhZ0V2ZW50KGRyYWcsIHR5cGUsIHMsIGlkLCBuLCBwWzBdICsgZHgsIHBbMV0gKyBkeSwgcFswXSAtIHAwWzBdLCBwWzFdIC0gcDBbMV0sIHN1Ymxpc3RlbmVycyksIHN1Ymxpc3RlbmVycy5hcHBseSwgc3VibGlzdGVuZXJzLCBbdHlwZSwgdGhhdCwgYXJnc10pO1xuICAgIH07XG4gIH1cblxuICBkcmFnLmZpbHRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmaWx0ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDIoISFfKSwgZHJhZykgOiBmaWx0ZXI7XG4gIH07XG5cbiAgZHJhZy5jb250YWluZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY29udGFpbmVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQyKF8pLCBkcmFnKSA6IGNvbnRhaW5lcjtcbiAgfTtcblxuICBkcmFnLnN1YmplY3QgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3ViamVjdCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMihfKSwgZHJhZykgOiBzdWJqZWN0O1xuICB9O1xuXG4gIGRyYWcudG91Y2hhYmxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRvdWNoYWJsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMighIV8pLCBkcmFnKSA6IHRvdWNoYWJsZTtcbiAgfTtcblxuICBkcmFnLm9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gbGlzdGVuZXJzLm9uLmFwcGx5KGxpc3RlbmVycywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdmFsdWUgPT09IGxpc3RlbmVycyA/IGRyYWcgOiB2YWx1ZTtcbiAgfTtcblxuICBkcmFnLmNsaWNrRGlzdGFuY2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xpY2tEaXN0YW5jZTIgPSAoXyA9ICtfKSAqIF8sIGRyYWcpIDogTWF0aC5zcXJ0KGNsaWNrRGlzdGFuY2UyKTtcbiAgfTtcblxuICByZXR1cm4gZHJhZztcbn1cblxuZnVuY3Rpb24gZGVmaW5lKGNvbnN0cnVjdG9yLCBmYWN0b3J5LCBwcm90b3R5cGUpIHtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlID0gZmFjdG9yeS5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gIHByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xufVxuXG5mdW5jdGlvbiBleHRlbmQocGFyZW50LCBkZWZpbml0aW9uKSB7XG4gIHZhciBwcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHBhcmVudC5wcm90b3R5cGUpO1xuICBmb3IgKHZhciBrZXkgaW4gZGVmaW5pdGlvbikgcHJvdG90eXBlW2tleV0gPSBkZWZpbml0aW9uW2tleV07XG4gIHJldHVybiBwcm90b3R5cGU7XG59XG5cbmZ1bmN0aW9uIENvbG9yKCkge31cblxudmFyIGRhcmtlciA9IDAuNztcbnZhciBicmlnaHRlciA9IDEgLyBkYXJrZXI7XG5cbnZhciByZUkgPSBcIlxcXFxzKihbKy1dP1xcXFxkKylcXFxccypcIixcbiAgICByZU4gPSBcIlxcXFxzKihbKy1dP1xcXFxkKlxcXFwuP1xcXFxkKyg/OltlRV1bKy1dP1xcXFxkKyk/KVxcXFxzKlwiLFxuICAgIHJlUCA9IFwiXFxcXHMqKFsrLV0/XFxcXGQqXFxcXC4/XFxcXGQrKD86W2VFXVsrLV0/XFxcXGQrKT8pJVxcXFxzKlwiLFxuICAgIHJlSGV4MyA9IC9eIyhbMC05YS1mXXszfSkkLyxcbiAgICByZUhleDYgPSAvXiMoWzAtOWEtZl17Nn0pJC8sXG4gICAgcmVSZ2JJbnRlZ2VyID0gbmV3IFJlZ0V4cChcIl5yZ2JcXFxcKFwiICsgW3JlSSwgcmVJLCByZUldICsgXCJcXFxcKSRcIiksXG4gICAgcmVSZ2JQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5yZ2JcXFxcKFwiICsgW3JlUCwgcmVQLCByZVBdICsgXCJcXFxcKSRcIiksXG4gICAgcmVSZ2JhSW50ZWdlciA9IG5ldyBSZWdFeHAoXCJecmdiYVxcXFwoXCIgKyBbcmVJLCByZUksIHJlSSwgcmVOXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiYVBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXnJnYmFcXFxcKFwiICsgW3JlUCwgcmVQLCByZVAsIHJlTl0gKyBcIlxcXFwpJFwiKSxcbiAgICByZUhzbFBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXmhzbFxcXFwoXCIgKyBbcmVOLCByZVAsIHJlUF0gKyBcIlxcXFwpJFwiKSxcbiAgICByZUhzbGFQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5oc2xhXFxcXChcIiArIFtyZU4sIHJlUCwgcmVQLCByZU5dICsgXCJcXFxcKSRcIik7XG5cbnZhciBuYW1lZCA9IHtcbiAgYWxpY2VibHVlOiAweGYwZjhmZixcbiAgYW50aXF1ZXdoaXRlOiAweGZhZWJkNyxcbiAgYXF1YTogMHgwMGZmZmYsXG4gIGFxdWFtYXJpbmU6IDB4N2ZmZmQ0LFxuICBhenVyZTogMHhmMGZmZmYsXG4gIGJlaWdlOiAweGY1ZjVkYyxcbiAgYmlzcXVlOiAweGZmZTRjNCxcbiAgYmxhY2s6IDB4MDAwMDAwLFxuICBibGFuY2hlZGFsbW9uZDogMHhmZmViY2QsXG4gIGJsdWU6IDB4MDAwMGZmLFxuICBibHVldmlvbGV0OiAweDhhMmJlMixcbiAgYnJvd246IDB4YTUyYTJhLFxuICBidXJseXdvb2Q6IDB4ZGViODg3LFxuICBjYWRldGJsdWU6IDB4NWY5ZWEwLFxuICBjaGFydHJldXNlOiAweDdmZmYwMCxcbiAgY2hvY29sYXRlOiAweGQyNjkxZSxcbiAgY29yYWw6IDB4ZmY3ZjUwLFxuICBjb3JuZmxvd2VyYmx1ZTogMHg2NDk1ZWQsXG4gIGNvcm5zaWxrOiAweGZmZjhkYyxcbiAgY3JpbXNvbjogMHhkYzE0M2MsXG4gIGN5YW46IDB4MDBmZmZmLFxuICBkYXJrYmx1ZTogMHgwMDAwOGIsXG4gIGRhcmtjeWFuOiAweDAwOGI4YixcbiAgZGFya2dvbGRlbnJvZDogMHhiODg2MGIsXG4gIGRhcmtncmF5OiAweGE5YTlhOSxcbiAgZGFya2dyZWVuOiAweDAwNjQwMCxcbiAgZGFya2dyZXk6IDB4YTlhOWE5LFxuICBkYXJra2hha2k6IDB4YmRiNzZiLFxuICBkYXJrbWFnZW50YTogMHg4YjAwOGIsXG4gIGRhcmtvbGl2ZWdyZWVuOiAweDU1NmIyZixcbiAgZGFya29yYW5nZTogMHhmZjhjMDAsXG4gIGRhcmtvcmNoaWQ6IDB4OTkzMmNjLFxuICBkYXJrcmVkOiAweDhiMDAwMCxcbiAgZGFya3NhbG1vbjogMHhlOTk2N2EsXG4gIGRhcmtzZWFncmVlbjogMHg4ZmJjOGYsXG4gIGRhcmtzbGF0ZWJsdWU6IDB4NDgzZDhiLFxuICBkYXJrc2xhdGVncmF5OiAweDJmNGY0ZixcbiAgZGFya3NsYXRlZ3JleTogMHgyZjRmNGYsXG4gIGRhcmt0dXJxdW9pc2U6IDB4MDBjZWQxLFxuICBkYXJrdmlvbGV0OiAweDk0MDBkMyxcbiAgZGVlcHBpbms6IDB4ZmYxNDkzLFxuICBkZWVwc2t5Ymx1ZTogMHgwMGJmZmYsXG4gIGRpbWdyYXk6IDB4Njk2OTY5LFxuICBkaW1ncmV5OiAweDY5Njk2OSxcbiAgZG9kZ2VyYmx1ZTogMHgxZTkwZmYsXG4gIGZpcmVicmljazogMHhiMjIyMjIsXG4gIGZsb3JhbHdoaXRlOiAweGZmZmFmMCxcbiAgZm9yZXN0Z3JlZW46IDB4MjI4YjIyLFxuICBmdWNoc2lhOiAweGZmMDBmZixcbiAgZ2FpbnNib3JvOiAweGRjZGNkYyxcbiAgZ2hvc3R3aGl0ZTogMHhmOGY4ZmYsXG4gIGdvbGQ6IDB4ZmZkNzAwLFxuICBnb2xkZW5yb2Q6IDB4ZGFhNTIwLFxuICBncmF5OiAweDgwODA4MCxcbiAgZ3JlZW46IDB4MDA4MDAwLFxuICBncmVlbnllbGxvdzogMHhhZGZmMmYsXG4gIGdyZXk6IDB4ODA4MDgwLFxuICBob25leWRldzogMHhmMGZmZjAsXG4gIGhvdHBpbms6IDB4ZmY2OWI0LFxuICBpbmRpYW5yZWQ6IDB4Y2Q1YzVjLFxuICBpbmRpZ286IDB4NGIwMDgyLFxuICBpdm9yeTogMHhmZmZmZjAsXG4gIGtoYWtpOiAweGYwZTY4YyxcbiAgbGF2ZW5kZXI6IDB4ZTZlNmZhLFxuICBsYXZlbmRlcmJsdXNoOiAweGZmZjBmNSxcbiAgbGF3bmdyZWVuOiAweDdjZmMwMCxcbiAgbGVtb25jaGlmZm9uOiAweGZmZmFjZCxcbiAgbGlnaHRibHVlOiAweGFkZDhlNixcbiAgbGlnaHRjb3JhbDogMHhmMDgwODAsXG4gIGxpZ2h0Y3lhbjogMHhlMGZmZmYsXG4gIGxpZ2h0Z29sZGVucm9keWVsbG93OiAweGZhZmFkMixcbiAgbGlnaHRncmF5OiAweGQzZDNkMyxcbiAgbGlnaHRncmVlbjogMHg5MGVlOTAsXG4gIGxpZ2h0Z3JleTogMHhkM2QzZDMsXG4gIGxpZ2h0cGluazogMHhmZmI2YzEsXG4gIGxpZ2h0c2FsbW9uOiAweGZmYTA3YSxcbiAgbGlnaHRzZWFncmVlbjogMHgyMGIyYWEsXG4gIGxpZ2h0c2t5Ymx1ZTogMHg4N2NlZmEsXG4gIGxpZ2h0c2xhdGVncmF5OiAweDc3ODg5OSxcbiAgbGlnaHRzbGF0ZWdyZXk6IDB4Nzc4ODk5LFxuICBsaWdodHN0ZWVsYmx1ZTogMHhiMGM0ZGUsXG4gIGxpZ2h0eWVsbG93OiAweGZmZmZlMCxcbiAgbGltZTogMHgwMGZmMDAsXG4gIGxpbWVncmVlbjogMHgzMmNkMzIsXG4gIGxpbmVuOiAweGZhZjBlNixcbiAgbWFnZW50YTogMHhmZjAwZmYsXG4gIG1hcm9vbjogMHg4MDAwMDAsXG4gIG1lZGl1bWFxdWFtYXJpbmU6IDB4NjZjZGFhLFxuICBtZWRpdW1ibHVlOiAweDAwMDBjZCxcbiAgbWVkaXVtb3JjaGlkOiAweGJhNTVkMyxcbiAgbWVkaXVtcHVycGxlOiAweDkzNzBkYixcbiAgbWVkaXVtc2VhZ3JlZW46IDB4M2NiMzcxLFxuICBtZWRpdW1zbGF0ZWJsdWU6IDB4N2I2OGVlLFxuICBtZWRpdW1zcHJpbmdncmVlbjogMHgwMGZhOWEsXG4gIG1lZGl1bXR1cnF1b2lzZTogMHg0OGQxY2MsXG4gIG1lZGl1bXZpb2xldHJlZDogMHhjNzE1ODUsXG4gIG1pZG5pZ2h0Ymx1ZTogMHgxOTE5NzAsXG4gIG1pbnRjcmVhbTogMHhmNWZmZmEsXG4gIG1pc3R5cm9zZTogMHhmZmU0ZTEsXG4gIG1vY2Nhc2luOiAweGZmZTRiNSxcbiAgbmF2YWpvd2hpdGU6IDB4ZmZkZWFkLFxuICBuYXZ5OiAweDAwMDA4MCxcbiAgb2xkbGFjZTogMHhmZGY1ZTYsXG4gIG9saXZlOiAweDgwODAwMCxcbiAgb2xpdmVkcmFiOiAweDZiOGUyMyxcbiAgb3JhbmdlOiAweGZmYTUwMCxcbiAgb3JhbmdlcmVkOiAweGZmNDUwMCxcbiAgb3JjaGlkOiAweGRhNzBkNixcbiAgcGFsZWdvbGRlbnJvZDogMHhlZWU4YWEsXG4gIHBhbGVncmVlbjogMHg5OGZiOTgsXG4gIHBhbGV0dXJxdW9pc2U6IDB4YWZlZWVlLFxuICBwYWxldmlvbGV0cmVkOiAweGRiNzA5MyxcbiAgcGFwYXlhd2hpcDogMHhmZmVmZDUsXG4gIHBlYWNocHVmZjogMHhmZmRhYjksXG4gIHBlcnU6IDB4Y2Q4NTNmLFxuICBwaW5rOiAweGZmYzBjYixcbiAgcGx1bTogMHhkZGEwZGQsXG4gIHBvd2RlcmJsdWU6IDB4YjBlMGU2LFxuICBwdXJwbGU6IDB4ODAwMDgwLFxuICByZWJlY2NhcHVycGxlOiAweDY2MzM5OSxcbiAgcmVkOiAweGZmMDAwMCxcbiAgcm9zeWJyb3duOiAweGJjOGY4ZixcbiAgcm95YWxibHVlOiAweDQxNjllMSxcbiAgc2FkZGxlYnJvd246IDB4OGI0NTEzLFxuICBzYWxtb246IDB4ZmE4MDcyLFxuICBzYW5keWJyb3duOiAweGY0YTQ2MCxcbiAgc2VhZ3JlZW46IDB4MmU4YjU3LFxuICBzZWFzaGVsbDogMHhmZmY1ZWUsXG4gIHNpZW5uYTogMHhhMDUyMmQsXG4gIHNpbHZlcjogMHhjMGMwYzAsXG4gIHNreWJsdWU6IDB4ODdjZWViLFxuICBzbGF0ZWJsdWU6IDB4NmE1YWNkLFxuICBzbGF0ZWdyYXk6IDB4NzA4MDkwLFxuICBzbGF0ZWdyZXk6IDB4NzA4MDkwLFxuICBzbm93OiAweGZmZmFmYSxcbiAgc3ByaW5nZ3JlZW46IDB4MDBmZjdmLFxuICBzdGVlbGJsdWU6IDB4NDY4MmI0LFxuICB0YW46IDB4ZDJiNDhjLFxuICB0ZWFsOiAweDAwODA4MCxcbiAgdGhpc3RsZTogMHhkOGJmZDgsXG4gIHRvbWF0bzogMHhmZjYzNDcsXG4gIHR1cnF1b2lzZTogMHg0MGUwZDAsXG4gIHZpb2xldDogMHhlZTgyZWUsXG4gIHdoZWF0OiAweGY1ZGViMyxcbiAgd2hpdGU6IDB4ZmZmZmZmLFxuICB3aGl0ZXNtb2tlOiAweGY1ZjVmNSxcbiAgeWVsbG93OiAweGZmZmYwMCxcbiAgeWVsbG93Z3JlZW46IDB4OWFjZDMyXG59O1xuXG5kZWZpbmUoQ29sb3IsIGNvbG9yLCB7XG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZ2IoKS5kaXNwbGF5YWJsZSgpO1xuICB9LFxuICBoZXg6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJnYigpLmhleCgpO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmdiKCkgKyBcIlwiO1xuICB9XG59KTtcblxuZnVuY3Rpb24gY29sb3IoZm9ybWF0KSB7XG4gIHZhciBtO1xuICBmb3JtYXQgPSAoZm9ybWF0ICsgXCJcIikudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiAobSA9IHJlSGV4My5leGVjKGZvcm1hdCkpID8gKG0gPSBwYXJzZUludChtWzFdLCAxNiksIG5ldyBSZ2IoKG0gPj4gOCAmIDB4ZikgfCAobSA+PiA0ICYgMHgwZjApLCAobSA+PiA0ICYgMHhmKSB8IChtICYgMHhmMCksICgobSAmIDB4ZikgPDwgNCkgfCAobSAmIDB4ZiksIDEpKSAvLyAjZjAwXG4gICAgICA6IChtID0gcmVIZXg2LmV4ZWMoZm9ybWF0KSkgPyByZ2JuKHBhcnNlSW50KG1bMV0sIDE2KSkgLy8gI2ZmMDAwMFxuICAgICAgOiAobSA9IHJlUmdiSW50ZWdlci5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdLCBtWzJdLCBtWzNdLCAxKSAvLyByZ2IoMjU1LCAwLCAwKVxuICAgICAgOiAobSA9IHJlUmdiUGVyY2VudC5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCAxKSAvLyByZ2IoMTAwJSwgMCUsIDAlKVxuICAgICAgOiAobSA9IHJlUmdiYUludGVnZXIuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSwgbVsyXSwgbVszXSwgbVs0XSkgLy8gcmdiYSgyNTUsIDAsIDAsIDEpXG4gICAgICA6IChtID0gcmVSZ2JhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCBtWzRdKSAvLyByZ2IoMTAwJSwgMCUsIDAlLCAxKVxuICAgICAgOiAobSA9IHJlSHNsUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCAxKSAvLyBoc2woMTIwLCA1MCUsIDUwJSlcbiAgICAgIDogKG0gPSByZUhzbGFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIG1bNF0pIC8vIGhzbGEoMTIwLCA1MCUsIDUwJSwgMSlcbiAgICAgIDogbmFtZWQuaGFzT3duUHJvcGVydHkoZm9ybWF0KSA/IHJnYm4obmFtZWRbZm9ybWF0XSlcbiAgICAgIDogZm9ybWF0ID09PSBcInRyYW5zcGFyZW50XCIgPyBuZXcgUmdiKE5hTiwgTmFOLCBOYU4sIDApXG4gICAgICA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIHJnYm4obikge1xuICByZXR1cm4gbmV3IFJnYihuID4+IDE2ICYgMHhmZiwgbiA+PiA4ICYgMHhmZiwgbiAmIDB4ZmYsIDEpO1xufVxuXG5mdW5jdGlvbiByZ2JhKHIsIGcsIGIsIGEpIHtcbiAgaWYgKGEgPD0gMCkgciA9IGcgPSBiID0gTmFOO1xuICByZXR1cm4gbmV3IFJnYihyLCBnLCBiLCBhKTtcbn1cblxuZnVuY3Rpb24gcmdiQ29udmVydChvKSB7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBDb2xvcikpIG8gPSBjb2xvcihvKTtcbiAgaWYgKCFvKSByZXR1cm4gbmV3IFJnYjtcbiAgbyA9IG8ucmdiKCk7XG4gIHJldHVybiBuZXcgUmdiKG8uciwgby5nLCBvLmIsIG8ub3BhY2l0eSk7XG59XG5cbmZ1bmN0aW9uIHJnYihyLCBnLCBiLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gcmdiQ29udmVydChyKSA6IG5ldyBSZ2IociwgZywgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5mdW5jdGlvbiBSZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICB0aGlzLnIgPSArcjtcbiAgdGhpcy5nID0gK2c7XG4gIHRoaXMuYiA9ICtiO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKFJnYiwgcmdiLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoMCA8PSB0aGlzLnIgJiYgdGhpcy5yIDw9IDI1NSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5nICYmIHRoaXMuZyA8PSAyNTUpXG4gICAgICAgICYmICgwIDw9IHRoaXMuYiAmJiB0aGlzLmIgPD0gMjU1KVxuICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xuICB9LFxuICBoZXg6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIiNcIiArIGhleCh0aGlzLnIpICsgaGV4KHRoaXMuZykgKyBoZXgodGhpcy5iKTtcbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhID0gdGhpcy5vcGFjaXR5OyBhID0gaXNOYU4oYSkgPyAxIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgYSkpO1xuICAgIHJldHVybiAoYSA9PT0gMSA/IFwicmdiKFwiIDogXCJyZ2JhKFwiKVxuICAgICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLnIpIHx8IDApKSArIFwiLCBcIlxuICAgICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLmcpIHx8IDApKSArIFwiLCBcIlxuICAgICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLmIpIHx8IDApKVxuICAgICAgICArIChhID09PSAxID8gXCIpXCIgOiBcIiwgXCIgKyBhICsgXCIpXCIpO1xuICB9XG59KSk7XG5cbmZ1bmN0aW9uIGhleCh2YWx1ZSkge1xuICB2YWx1ZSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh2YWx1ZSkgfHwgMCkpO1xuICByZXR1cm4gKHZhbHVlIDwgMTYgPyBcIjBcIiA6IFwiXCIpICsgdmFsdWUudG9TdHJpbmcoMTYpO1xufVxuXG5mdW5jdGlvbiBoc2xhKGgsIHMsIGwsIGEpIHtcbiAgaWYgKGEgPD0gMCkgaCA9IHMgPSBsID0gTmFOO1xuICBlbHNlIGlmIChsIDw9IDAgfHwgbCA+PSAxKSBoID0gcyA9IE5hTjtcbiAgZWxzZSBpZiAocyA8PSAwKSBoID0gTmFOO1xuICByZXR1cm4gbmV3IEhzbChoLCBzLCBsLCBhKTtcbn1cblxuZnVuY3Rpb24gaHNsQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgSHNsKSByZXR1cm4gbmV3IEhzbChvLmgsIG8ucywgby5sLCBvLm9wYWNpdHkpO1xuICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gIGlmICghbykgcmV0dXJuIG5ldyBIc2w7XG4gIGlmIChvIGluc3RhbmNlb2YgSHNsKSByZXR1cm4gbztcbiAgbyA9IG8ucmdiKCk7XG4gIHZhciByID0gby5yIC8gMjU1LFxuICAgICAgZyA9IG8uZyAvIDI1NSxcbiAgICAgIGIgPSBvLmIgLyAyNTUsXG4gICAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKSxcbiAgICAgIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpLFxuICAgICAgaCA9IE5hTixcbiAgICAgIHMgPSBtYXggLSBtaW4sXG4gICAgICBsID0gKG1heCArIG1pbikgLyAyO1xuICBpZiAocykge1xuICAgIGlmIChyID09PSBtYXgpIGggPSAoZyAtIGIpIC8gcyArIChnIDwgYikgKiA2O1xuICAgIGVsc2UgaWYgKGcgPT09IG1heCkgaCA9IChiIC0gcikgLyBzICsgMjtcbiAgICBlbHNlIGggPSAociAtIGcpIC8gcyArIDQ7XG4gICAgcyAvPSBsIDwgMC41ID8gbWF4ICsgbWluIDogMiAtIG1heCAtIG1pbjtcbiAgICBoICo9IDYwO1xuICB9IGVsc2Uge1xuICAgIHMgPSBsID4gMCAmJiBsIDwgMSA/IDAgOiBoO1xuICB9XG4gIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIG8ub3BhY2l0eSk7XG59XG5cbmZ1bmN0aW9uIGhzbChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaHNsQ29udmVydChoKSA6IG5ldyBIc2woaCwgcywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5mdW5jdGlvbiBIc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5zID0gK3M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKEhzbCwgaHNsLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgSHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoID0gdGhpcy5oICUgMzYwICsgKHRoaXMuaCA8IDApICogMzYwLFxuICAgICAgICBzID0gaXNOYU4oaCkgfHwgaXNOYU4odGhpcy5zKSA/IDAgOiB0aGlzLnMsXG4gICAgICAgIGwgPSB0aGlzLmwsXG4gICAgICAgIG0yID0gbCArIChsIDwgMC41ID8gbCA6IDEgLSBsKSAqIHMsXG4gICAgICAgIG0xID0gMiAqIGwgLSBtMjtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIGhzbDJyZ2IoaCA+PSAyNDAgPyBoIC0gMjQwIDogaCArIDEyMCwgbTEsIG0yKSxcbiAgICAgIGhzbDJyZ2IoaCwgbTEsIG0yKSxcbiAgICAgIGhzbDJyZ2IoaCA8IDEyMCA/IGggKyAyNDAgOiBoIC0gMTIwLCBtMSwgbTIpLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfSxcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoMCA8PSB0aGlzLnMgJiYgdGhpcy5zIDw9IDEgfHwgaXNOYU4odGhpcy5zKSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5sICYmIHRoaXMubCA8PSAxKVxuICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xuICB9XG59KSk7XG5cbi8qIEZyb20gRnZEIDEzLjM3LCBDU1MgQ29sb3IgTW9kdWxlIExldmVsIDMgKi9cbmZ1bmN0aW9uIGhzbDJyZ2IoaCwgbTEsIG0yKSB7XG4gIHJldHVybiAoaCA8IDYwID8gbTEgKyAobTIgLSBtMSkgKiBoIC8gNjBcbiAgICAgIDogaCA8IDE4MCA/IG0yXG4gICAgICA6IGggPCAyNDAgPyBtMSArIChtMiAtIG0xKSAqICgyNDAgLSBoKSAvIDYwXG4gICAgICA6IG0xKSAqIDI1NTtcbn1cblxudmFyIGRlZzJyYWQgPSBNYXRoLlBJIC8gMTgwO1xudmFyIHJhZDJkZWcgPSAxODAgLyBNYXRoLlBJO1xuXG4vLyBodHRwczovL2JldGEub2JzZXJ2YWJsZWhxLmNvbS9AbWJvc3RvY2svbGFiLWFuZC1yZ2JcbnZhciBLID0gMTgsXG4gICAgWG4gPSAwLjk2NDIyLFxuICAgIFluID0gMSxcbiAgICBabiA9IDAuODI1MjEsXG4gICAgdDAgPSA0IC8gMjksXG4gICAgdDEgPSA2IC8gMjksXG4gICAgdDIgPSAzICogdDEgKiB0MSxcbiAgICB0MyA9IHQxICogdDEgKiB0MTtcblxuZnVuY3Rpb24gbGFiQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgTGFiKSByZXR1cm4gbmV3IExhYihvLmwsIG8uYSwgby5iLCBvLm9wYWNpdHkpO1xuICBpZiAobyBpbnN0YW5jZW9mIEhjbCkge1xuICAgIGlmIChpc05hTihvLmgpKSByZXR1cm4gbmV3IExhYihvLmwsIDAsIDAsIG8ub3BhY2l0eSk7XG4gICAgdmFyIGggPSBvLmggKiBkZWcycmFkO1xuICAgIHJldHVybiBuZXcgTGFiKG8ubCwgTWF0aC5jb3MoaCkgKiBvLmMsIE1hdGguc2luKGgpICogby5jLCBvLm9wYWNpdHkpO1xuICB9XG4gIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcbiAgdmFyIHIgPSByZ2IybHJnYihvLnIpLFxuICAgICAgZyA9IHJnYjJscmdiKG8uZyksXG4gICAgICBiID0gcmdiMmxyZ2Ioby5iKSxcbiAgICAgIHkgPSB4eXoybGFiKCgwLjIyMjUwNDUgKiByICsgMC43MTY4Nzg2ICogZyArIDAuMDYwNjE2OSAqIGIpIC8gWW4pLCB4LCB6O1xuICBpZiAociA9PT0gZyAmJiBnID09PSBiKSB4ID0geiA9IHk7IGVsc2Uge1xuICAgIHggPSB4eXoybGFiKCgwLjQzNjA3NDcgKiByICsgMC4zODUwNjQ5ICogZyArIDAuMTQzMDgwNCAqIGIpIC8gWG4pO1xuICAgIHogPSB4eXoybGFiKCgwLjAxMzkzMjIgKiByICsgMC4wOTcxMDQ1ICogZyArIDAuNzE0MTczMyAqIGIpIC8gWm4pO1xuICB9XG4gIHJldHVybiBuZXcgTGFiKDExNiAqIHkgLSAxNiwgNTAwICogKHggLSB5KSwgMjAwICogKHkgLSB6KSwgby5vcGFjaXR5KTtcbn1cblxuZnVuY3Rpb24gZ3JheShsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBuZXcgTGFiKGwsIDAsIDAsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZnVuY3Rpb24gbGFiKGwsIGEsIGIsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBsYWJDb252ZXJ0KGwpIDogbmV3IExhYihsLCBhLCBiLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmZ1bmN0aW9uIExhYihsLCBhLCBiLCBvcGFjaXR5KSB7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLmEgPSArYTtcbiAgdGhpcy5iID0gK2I7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoTGFiLCBsYWIsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgTGFiKHRoaXMubCArIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBMYWIodGhpcy5sIC0gSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMuYSwgdGhpcy5iLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB5ID0gKHRoaXMubCArIDE2KSAvIDExNixcbiAgICAgICAgeCA9IGlzTmFOKHRoaXMuYSkgPyB5IDogeSArIHRoaXMuYSAvIDUwMCxcbiAgICAgICAgeiA9IGlzTmFOKHRoaXMuYikgPyB5IDogeSAtIHRoaXMuYiAvIDIwMDtcbiAgICB4ID0gWG4gKiBsYWIyeHl6KHgpO1xuICAgIHkgPSBZbiAqIGxhYjJ4eXooeSk7XG4gICAgeiA9IFpuICogbGFiMnh5eih6KTtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIGxyZ2IycmdiKCAzLjEzMzg1NjEgKiB4IC0gMS42MTY4NjY3ICogeSAtIDAuNDkwNjE0NiAqIHopLFxuICAgICAgbHJnYjJyZ2IoLTAuOTc4NzY4NCAqIHggKyAxLjkxNjE0MTUgKiB5ICsgMC4wMzM0NTQwICogeiksXG4gICAgICBscmdiMnJnYiggMC4wNzE5NDUzICogeCAtIDAuMjI4OTkxNCAqIHkgKyAxLjQwNTI0MjcgKiB6KSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH1cbn0pKTtcblxuZnVuY3Rpb24geHl6MmxhYih0KSB7XG4gIHJldHVybiB0ID4gdDMgPyBNYXRoLnBvdyh0LCAxIC8gMykgOiB0IC8gdDIgKyB0MDtcbn1cblxuZnVuY3Rpb24gbGFiMnh5eih0KSB7XG4gIHJldHVybiB0ID4gdDEgPyB0ICogdCAqIHQgOiB0MiAqICh0IC0gdDApO1xufVxuXG5mdW5jdGlvbiBscmdiMnJnYih4KSB7XG4gIHJldHVybiAyNTUgKiAoeCA8PSAwLjAwMzEzMDggPyAxMi45MiAqIHggOiAxLjA1NSAqIE1hdGgucG93KHgsIDEgLyAyLjQpIC0gMC4wNTUpO1xufVxuXG5mdW5jdGlvbiByZ2IybHJnYih4KSB7XG4gIHJldHVybiAoeCAvPSAyNTUpIDw9IDAuMDQwNDUgPyB4IC8gMTIuOTIgOiBNYXRoLnBvdygoeCArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xufVxuXG5mdW5jdGlvbiBoY2xDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIY2wpIHJldHVybiBuZXcgSGNsKG8uaCwgby5jLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBMYWIpKSBvID0gbGFiQ29udmVydChvKTtcbiAgaWYgKG8uYSA9PT0gMCAmJiBvLmIgPT09IDApIHJldHVybiBuZXcgSGNsKE5hTiwgMCwgby5sLCBvLm9wYWNpdHkpO1xuICB2YXIgaCA9IE1hdGguYXRhbjIoby5iLCBvLmEpICogcmFkMmRlZztcbiAgcmV0dXJuIG5ldyBIY2woaCA8IDAgPyBoICsgMzYwIDogaCwgTWF0aC5zcXJ0KG8uYSAqIG8uYSArIG8uYiAqIG8uYiksIG8ubCwgby5vcGFjaXR5KTtcbn1cblxuZnVuY3Rpb24gbGNoKGwsIGMsIGgsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoY2xDb252ZXJ0KGwpIDogbmV3IEhjbChoLCBjLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmZ1bmN0aW9uIGhjbChoLCBjLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaGNsQ29udmVydChoKSA6IG5ldyBIY2woaCwgYywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5mdW5jdGlvbiBIY2woaCwgYywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5jID0gK2M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKEhjbCwgaGNsLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IEhjbCh0aGlzLmgsIHRoaXMuYywgdGhpcy5sICsgSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgSGNsKHRoaXMuaCwgdGhpcy5jLCB0aGlzLmwgLSBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbGFiQ29udmVydCh0aGlzKS5yZ2IoKTtcbiAgfVxufSkpO1xuXG52YXIgQSA9IC0wLjE0ODYxLFxuICAgIEIgPSArMS43ODI3NyxcbiAgICBDID0gLTAuMjkyMjcsXG4gICAgRCA9IC0wLjkwNjQ5LFxuICAgIEUgPSArMS45NzI5NCxcbiAgICBFRCA9IEUgKiBELFxuICAgIEVCID0gRSAqIEIsXG4gICAgQkNfREEgPSBCICogQyAtIEQgKiBBO1xuXG5mdW5jdGlvbiBjdWJlaGVsaXhDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBDdWJlaGVsaXgpIHJldHVybiBuZXcgQ3ViZWhlbGl4KG8uaCwgby5zLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcbiAgdmFyIHIgPSBvLnIgLyAyNTUsXG4gICAgICBnID0gby5nIC8gMjU1LFxuICAgICAgYiA9IG8uYiAvIDI1NSxcbiAgICAgIGwgPSAoQkNfREEgKiBiICsgRUQgKiByIC0gRUIgKiBnKSAvIChCQ19EQSArIEVEIC0gRUIpLFxuICAgICAgYmwgPSBiIC0gbCxcbiAgICAgIGsgPSAoRSAqIChnIC0gbCkgLSBDICogYmwpIC8gRCxcbiAgICAgIHMgPSBNYXRoLnNxcnQoayAqIGsgKyBibCAqIGJsKSAvIChFICogbCAqICgxIC0gbCkpLCAvLyBOYU4gaWYgbD0wIG9yIGw9MVxuICAgICAgaCA9IHMgPyBNYXRoLmF0YW4yKGssIGJsKSAqIHJhZDJkZWcgLSAxMjAgOiBOYU47XG4gIHJldHVybiBuZXcgQ3ViZWhlbGl4KGggPCAwID8gaCArIDM2MCA6IGgsIHMsIGwsIG8ub3BhY2l0eSk7XG59XG5cbmZ1bmN0aW9uIGN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gY3ViZWhlbGl4Q29udmVydChoKSA6IG5ldyBDdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5mdW5jdGlvbiBDdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5zID0gK3M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKEN1YmVoZWxpeCwgY3ViZWhlbGl4LCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBDdWJlaGVsaXgodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgQ3ViZWhlbGl4KHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoID0gaXNOYU4odGhpcy5oKSA/IDAgOiAodGhpcy5oICsgMTIwKSAqIGRlZzJyYWQsXG4gICAgICAgIGwgPSArdGhpcy5sLFxuICAgICAgICBhID0gaXNOYU4odGhpcy5zKSA/IDAgOiB0aGlzLnMgKiBsICogKDEgLSBsKSxcbiAgICAgICAgY29zaCA9IE1hdGguY29zKGgpLFxuICAgICAgICBzaW5oID0gTWF0aC5zaW4oaCk7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICAyNTUgKiAobCArIGEgKiAoQSAqIGNvc2ggKyBCICogc2luaCkpLFxuICAgICAgMjU1ICogKGwgKyBhICogKEMgKiBjb3NoICsgRCAqIHNpbmgpKSxcbiAgICAgIDI1NSAqIChsICsgYSAqIChFICogY29zaCkpLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfVxufSkpO1xuXG5mdW5jdGlvbiBiYXNpcyh0MSwgdjAsIHYxLCB2MiwgdjMpIHtcbiAgdmFyIHQyID0gdDEgKiB0MSwgdDMgPSB0MiAqIHQxO1xuICByZXR1cm4gKCgxIC0gMyAqIHQxICsgMyAqIHQyIC0gdDMpICogdjBcbiAgICAgICsgKDQgLSA2ICogdDIgKyAzICogdDMpICogdjFcbiAgICAgICsgKDEgKyAzICogdDEgKyAzICogdDIgLSAzICogdDMpICogdjJcbiAgICAgICsgdDMgKiB2MykgLyA2O1xufVxuXG5mdW5jdGlvbiBiYXNpcyQxKHZhbHVlcykge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGggLSAxO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gdCA8PSAwID8gKHQgPSAwKSA6IHQgPj0gMSA/ICh0ID0gMSwgbiAtIDEpIDogTWF0aC5mbG9vcih0ICogbiksXG4gICAgICAgIHYxID0gdmFsdWVzW2ldLFxuICAgICAgICB2MiA9IHZhbHVlc1tpICsgMV0sXG4gICAgICAgIHYwID0gaSA+IDAgPyB2YWx1ZXNbaSAtIDFdIDogMiAqIHYxIC0gdjIsXG4gICAgICAgIHYzID0gaSA8IG4gLSAxID8gdmFsdWVzW2kgKyAyXSA6IDIgKiB2MiAtIHYxO1xuICAgIHJldHVybiBiYXNpcygodCAtIGkgLyBuKSAqIG4sIHYwLCB2MSwgdjIsIHYzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYmFzaXNDbG9zZWQodmFsdWVzKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aDtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgaSA9IE1hdGguZmxvb3IoKCh0ICU9IDEpIDwgMCA/ICsrdCA6IHQpICogbiksXG4gICAgICAgIHYwID0gdmFsdWVzWyhpICsgbiAtIDEpICUgbl0sXG4gICAgICAgIHYxID0gdmFsdWVzW2kgJSBuXSxcbiAgICAgICAgdjIgPSB2YWx1ZXNbKGkgKyAxKSAlIG5dLFxuICAgICAgICB2MyA9IHZhbHVlc1soaSArIDIpICUgbl07XG4gICAgcmV0dXJuIGJhc2lzKCh0IC0gaSAvIG4pICogbiwgdjAsIHYxLCB2MiwgdjMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjb25zdGFudCQzKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuXG5mdW5jdGlvbiBsaW5lYXIoYSwgZCkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICsgdCAqIGQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGV4cG9uZW50aWFsKGEsIGIsIHkpIHtcbiAgcmV0dXJuIGEgPSBNYXRoLnBvdyhhLCB5KSwgYiA9IE1hdGgucG93KGIsIHkpIC0gYSwgeSA9IDEgLyB5LCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucG93KGEgKyB0ICogYiwgeSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGh1ZShhLCBiKSB7XG4gIHZhciBkID0gYiAtIGE7XG4gIHJldHVybiBkID8gbGluZWFyKGEsIGQgPiAxODAgfHwgZCA8IC0xODAgPyBkIC0gMzYwICogTWF0aC5yb3VuZChkIC8gMzYwKSA6IGQpIDogY29uc3RhbnQkMyhpc05hTihhKSA/IGIgOiBhKTtcbn1cblxuZnVuY3Rpb24gZ2FtbWEoeSkge1xuICByZXR1cm4gKHkgPSAreSkgPT09IDEgPyBub2dhbW1hIDogZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBiIC0gYSA/IGV4cG9uZW50aWFsKGEsIGIsIHkpIDogY29uc3RhbnQkMyhpc05hTihhKSA/IGIgOiBhKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9nYW1tYShhLCBiKSB7XG4gIHZhciBkID0gYiAtIGE7XG4gIHJldHVybiBkID8gbGluZWFyKGEsIGQpIDogY29uc3RhbnQkMyhpc05hTihhKSA/IGIgOiBhKTtcbn1cblxudmFyIGludGVycG9sYXRlUmdiID0gKGZ1bmN0aW9uIHJnYkdhbW1hKHkpIHtcbiAgdmFyIGNvbG9yJCQxID0gZ2FtbWEoeSk7XG5cbiAgZnVuY3Rpb24gcmdiJCQxKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgciA9IGNvbG9yJCQxKChzdGFydCA9IHJnYihzdGFydCkpLnIsIChlbmQgPSByZ2IoZW5kKSkuciksXG4gICAgICAgIGcgPSBjb2xvciQkMShzdGFydC5nLCBlbmQuZyksXG4gICAgICAgIGIgPSBjb2xvciQkMShzdGFydC5iLCBlbmQuYiksXG4gICAgICAgIG9wYWNpdHkgPSBub2dhbW1hKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgc3RhcnQuciA9IHIodCk7XG4gICAgICBzdGFydC5nID0gZyh0KTtcbiAgICAgIHN0YXJ0LmIgPSBiKHQpO1xuICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgIH07XG4gIH1cblxuICByZ2IkJDEuZ2FtbWEgPSByZ2JHYW1tYTtcblxuICByZXR1cm4gcmdiJCQxO1xufSkoMSk7XG5cbmZ1bmN0aW9uIHJnYlNwbGluZShzcGxpbmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbG9ycykge1xuICAgIHZhciBuID0gY29sb3JzLmxlbmd0aCxcbiAgICAgICAgciA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgZyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgYiA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgaSwgY29sb3IkJDE7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgY29sb3IkJDEgPSByZ2IoY29sb3JzW2ldKTtcbiAgICAgIHJbaV0gPSBjb2xvciQkMS5yIHx8IDA7XG4gICAgICBnW2ldID0gY29sb3IkJDEuZyB8fCAwO1xuICAgICAgYltpXSA9IGNvbG9yJCQxLmIgfHwgMDtcbiAgICB9XG4gICAgciA9IHNwbGluZShyKTtcbiAgICBnID0gc3BsaW5lKGcpO1xuICAgIGIgPSBzcGxpbmUoYik7XG4gICAgY29sb3IkJDEub3BhY2l0eSA9IDE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIGNvbG9yJCQxLnIgPSByKHQpO1xuICAgICAgY29sb3IkJDEuZyA9IGcodCk7XG4gICAgICBjb2xvciQkMS5iID0gYih0KTtcbiAgICAgIHJldHVybiBjb2xvciQkMSArIFwiXCI7XG4gICAgfTtcbiAgfTtcbn1cblxudmFyIHJnYkJhc2lzID0gcmdiU3BsaW5lKGJhc2lzJDEpO1xudmFyIHJnYkJhc2lzQ2xvc2VkID0gcmdiU3BsaW5lKGJhc2lzQ2xvc2VkKTtcblxuZnVuY3Rpb24gYXJyYXkkMShhLCBiKSB7XG4gIHZhciBuYiA9IGIgPyBiLmxlbmd0aCA6IDAsXG4gICAgICBuYSA9IGEgPyBNYXRoLm1pbihuYiwgYS5sZW5ndGgpIDogMCxcbiAgICAgIHggPSBuZXcgQXJyYXkobmEpLFxuICAgICAgYyA9IG5ldyBBcnJheShuYiksXG4gICAgICBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBuYTsgKytpKSB4W2ldID0gaW50ZXJwb2xhdGVWYWx1ZShhW2ldLCBiW2ldKTtcbiAgZm9yICg7IGkgPCBuYjsgKytpKSBjW2ldID0gYltpXTtcblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBuYTsgKytpKSBjW2ldID0geFtpXSh0KTtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGF0ZShhLCBiKSB7XG4gIHZhciBkID0gbmV3IERhdGU7XG4gIHJldHVybiBhID0gK2EsIGIgLT0gYSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBkLnNldFRpbWUoYSArIGIgKiB0KSwgZDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW50ZXJwb2xhdGVOdW1iZXIoYSwgYikge1xuICByZXR1cm4gYSA9ICthLCBiIC09IGEsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSArIGIgKiB0O1xuICB9O1xufVxuXG5mdW5jdGlvbiBvYmplY3QoYSwgYikge1xuICB2YXIgaSA9IHt9LFxuICAgICAgYyA9IHt9LFxuICAgICAgaztcblxuICBpZiAoYSA9PT0gbnVsbCB8fCB0eXBlb2YgYSAhPT0gXCJvYmplY3RcIikgYSA9IHt9O1xuICBpZiAoYiA9PT0gbnVsbCB8fCB0eXBlb2YgYiAhPT0gXCJvYmplY3RcIikgYiA9IHt9O1xuXG4gIGZvciAoayBpbiBiKSB7XG4gICAgaWYgKGsgaW4gYSkge1xuICAgICAgaVtrXSA9IGludGVycG9sYXRlVmFsdWUoYVtrXSwgYltrXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNba10gPSBiW2tdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChrIGluIGkpIGNba10gPSBpW2tdKHQpO1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuXG52YXIgcmVBID0gL1stK10/KD86XFxkK1xcLj9cXGQqfFxcLj9cXGQrKSg/OltlRV1bLStdP1xcZCspPy9nLFxuICAgIHJlQiA9IG5ldyBSZWdFeHAocmVBLnNvdXJjZSwgXCJnXCIpO1xuXG5mdW5jdGlvbiB6ZXJvKGIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBiO1xuICB9O1xufVxuXG5mdW5jdGlvbiBvbmUoYikge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBiKHQpICsgXCJcIjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW50ZXJwb2xhdGVTdHJpbmcoYSwgYikge1xuICB2YXIgYmkgPSByZUEubGFzdEluZGV4ID0gcmVCLmxhc3RJbmRleCA9IDAsIC8vIHNjYW4gaW5kZXggZm9yIG5leHQgbnVtYmVyIGluIGJcbiAgICAgIGFtLCAvLyBjdXJyZW50IG1hdGNoIGluIGFcbiAgICAgIGJtLCAvLyBjdXJyZW50IG1hdGNoIGluIGJcbiAgICAgIGJzLCAvLyBzdHJpbmcgcHJlY2VkaW5nIGN1cnJlbnQgbnVtYmVyIGluIGIsIGlmIGFueVxuICAgICAgaSA9IC0xLCAvLyBpbmRleCBpbiBzXG4gICAgICBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgcSA9IFtdOyAvLyBudW1iZXIgaW50ZXJwb2xhdG9yc1xuXG4gIC8vIENvZXJjZSBpbnB1dHMgdG8gc3RyaW5ncy5cbiAgYSA9IGEgKyBcIlwiLCBiID0gYiArIFwiXCI7XG5cbiAgLy8gSW50ZXJwb2xhdGUgcGFpcnMgb2YgbnVtYmVycyBpbiBhICYgYi5cbiAgd2hpbGUgKChhbSA9IHJlQS5leGVjKGEpKVxuICAgICAgJiYgKGJtID0gcmVCLmV4ZWMoYikpKSB7XG4gICAgaWYgKChicyA9IGJtLmluZGV4KSA+IGJpKSB7IC8vIGEgc3RyaW5nIHByZWNlZGVzIHRoZSBuZXh0IG51bWJlciBpbiBiXG4gICAgICBicyA9IGIuc2xpY2UoYmksIGJzKTtcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgZWxzZSBzWysraV0gPSBicztcbiAgICB9XG4gICAgaWYgKChhbSA9IGFtWzBdKSA9PT0gKGJtID0gYm1bMF0pKSB7IC8vIG51bWJlcnMgaW4gYSAmIGIgbWF0Y2hcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJtOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgZWxzZSBzWysraV0gPSBibTtcbiAgICB9IGVsc2UgeyAvLyBpbnRlcnBvbGF0ZSBub24tbWF0Y2hpbmcgbnVtYmVyc1xuICAgICAgc1srK2ldID0gbnVsbDtcbiAgICAgIHEucHVzaCh7aTogaSwgeDogaW50ZXJwb2xhdGVOdW1iZXIoYW0sIGJtKX0pO1xuICAgIH1cbiAgICBiaSA9IHJlQi5sYXN0SW5kZXg7XG4gIH1cblxuICAvLyBBZGQgcmVtYWlucyBvZiBiLlxuICBpZiAoYmkgPCBiLmxlbmd0aCkge1xuICAgIGJzID0gYi5zbGljZShiaSk7XG4gICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgZWxzZSBzWysraV0gPSBicztcbiAgfVxuXG4gIC8vIFNwZWNpYWwgb3B0aW1pemF0aW9uIGZvciBvbmx5IGEgc2luZ2xlIG1hdGNoLlxuICAvLyBPdGhlcndpc2UsIGludGVycG9sYXRlIGVhY2ggb2YgdGhlIG51bWJlcnMgYW5kIHJlam9pbiB0aGUgc3RyaW5nLlxuICByZXR1cm4gcy5sZW5ndGggPCAyID8gKHFbMF1cbiAgICAgID8gb25lKHFbMF0ueClcbiAgICAgIDogemVybyhiKSlcbiAgICAgIDogKGIgPSBxLmxlbmd0aCwgZnVuY3Rpb24odCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBvOyBpIDwgYjsgKytpKSBzWyhvID0gcVtpXSkuaV0gPSBvLngodCk7XG4gICAgICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICAgICAgfSk7XG59XG5cbmZ1bmN0aW9uIGludGVycG9sYXRlVmFsdWUoYSwgYikge1xuICB2YXIgdCA9IHR5cGVvZiBiLCBjO1xuICByZXR1cm4gYiA9PSBudWxsIHx8IHQgPT09IFwiYm9vbGVhblwiID8gY29uc3RhbnQkMyhiKVxuICAgICAgOiAodCA9PT0gXCJudW1iZXJcIiA/IGludGVycG9sYXRlTnVtYmVyXG4gICAgICA6IHQgPT09IFwic3RyaW5nXCIgPyAoKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIGludGVycG9sYXRlUmdiKSA6IGludGVycG9sYXRlU3RyaW5nKVxuICAgICAgOiBiIGluc3RhbmNlb2YgY29sb3IgPyBpbnRlcnBvbGF0ZVJnYlxuICAgICAgOiBiIGluc3RhbmNlb2YgRGF0ZSA/IGRhdGVcbiAgICAgIDogQXJyYXkuaXNBcnJheShiKSA/IGFycmF5JDFcbiAgICAgIDogdHlwZW9mIGIudmFsdWVPZiAhPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBiLnRvU3RyaW5nICE9PSBcImZ1bmN0aW9uXCIgfHwgaXNOYU4oYikgPyBvYmplY3RcbiAgICAgIDogaW50ZXJwb2xhdGVOdW1iZXIpKGEsIGIpO1xufVxuXG5mdW5jdGlvbiBkaXNjcmV0ZShyYW5nZSkge1xuICB2YXIgbiA9IHJhbmdlLmxlbmd0aDtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gcmFuZ2VbTWF0aC5tYXgoMCwgTWF0aC5taW4obiAtIDEsIE1hdGguZmxvb3IodCAqIG4pKSldO1xuICB9O1xufVxuXG5mdW5jdGlvbiBodWUkMShhLCBiKSB7XG4gIHZhciBpID0gaHVlKCthLCArYik7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdmFyIHggPSBpKHQpO1xuICAgIHJldHVybiB4IC0gMzYwICogTWF0aC5mbG9vcih4IC8gMzYwKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW50ZXJwb2xhdGVSb3VuZChhLCBiKSB7XG4gIHJldHVybiBhID0gK2EsIGIgLT0gYSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKGEgKyBiICogdCk7XG4gIH07XG59XG5cbnZhciBkZWdyZWVzID0gMTgwIC8gTWF0aC5QSTtcblxudmFyIGlkZW50aXR5JDIgPSB7XG4gIHRyYW5zbGF0ZVg6IDAsXG4gIHRyYW5zbGF0ZVk6IDAsXG4gIHJvdGF0ZTogMCxcbiAgc2tld1g6IDAsXG4gIHNjYWxlWDogMSxcbiAgc2NhbGVZOiAxXG59O1xuXG5mdW5jdGlvbiBkZWNvbXBvc2UoYSwgYiwgYywgZCwgZSwgZikge1xuICB2YXIgc2NhbGVYLCBzY2FsZVksIHNrZXdYO1xuICBpZiAoc2NhbGVYID0gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpKSBhIC89IHNjYWxlWCwgYiAvPSBzY2FsZVg7XG4gIGlmIChza2V3WCA9IGEgKiBjICsgYiAqIGQpIGMgLT0gYSAqIHNrZXdYLCBkIC09IGIgKiBza2V3WDtcbiAgaWYgKHNjYWxlWSA9IE1hdGguc3FydChjICogYyArIGQgKiBkKSkgYyAvPSBzY2FsZVksIGQgLz0gc2NhbGVZLCBza2V3WCAvPSBzY2FsZVk7XG4gIGlmIChhICogZCA8IGIgKiBjKSBhID0gLWEsIGIgPSAtYiwgc2tld1ggPSAtc2tld1gsIHNjYWxlWCA9IC1zY2FsZVg7XG4gIHJldHVybiB7XG4gICAgdHJhbnNsYXRlWDogZSxcbiAgICB0cmFuc2xhdGVZOiBmLFxuICAgIHJvdGF0ZTogTWF0aC5hdGFuMihiLCBhKSAqIGRlZ3JlZXMsXG4gICAgc2tld1g6IE1hdGguYXRhbihza2V3WCkgKiBkZWdyZWVzLFxuICAgIHNjYWxlWDogc2NhbGVYLFxuICAgIHNjYWxlWTogc2NhbGVZXG4gIH07XG59XG5cbnZhciBjc3NOb2RlLFxuICAgIGNzc1Jvb3QsXG4gICAgY3NzVmlldyxcbiAgICBzdmdOb2RlO1xuXG5mdW5jdGlvbiBwYXJzZUNzcyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IFwibm9uZVwiKSByZXR1cm4gaWRlbnRpdHkkMjtcbiAgaWYgKCFjc3NOb2RlKSBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKSwgY3NzUm9vdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgY3NzVmlldyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICBjc3NOb2RlLnN0eWxlLnRyYW5zZm9ybSA9IHZhbHVlO1xuICB2YWx1ZSA9IGNzc1ZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShjc3NSb290LmFwcGVuZENoaWxkKGNzc05vZGUpLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKFwidHJhbnNmb3JtXCIpO1xuICBjc3NSb290LnJlbW92ZUNoaWxkKGNzc05vZGUpO1xuICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDcsIC0xKS5zcGxpdChcIixcIik7XG4gIHJldHVybiBkZWNvbXBvc2UoK3ZhbHVlWzBdLCArdmFsdWVbMV0sICt2YWx1ZVsyXSwgK3ZhbHVlWzNdLCArdmFsdWVbNF0sICt2YWx1ZVs1XSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlU3ZnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gaWRlbnRpdHkkMjtcbiAgaWYgKCFzdmdOb2RlKSBzdmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJnXCIpO1xuICBzdmdOb2RlLnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB2YWx1ZSk7XG4gIGlmICghKHZhbHVlID0gc3ZnTm9kZS50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpKSkgcmV0dXJuIGlkZW50aXR5JDI7XG4gIHZhbHVlID0gdmFsdWUubWF0cml4O1xuICByZXR1cm4gZGVjb21wb3NlKHZhbHVlLmEsIHZhbHVlLmIsIHZhbHVlLmMsIHZhbHVlLmQsIHZhbHVlLmUsIHZhbHVlLmYpO1xufVxuXG5mdW5jdGlvbiBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZSwgcHhDb21tYSwgcHhQYXJlbiwgZGVnUGFyZW4pIHtcblxuICBmdW5jdGlvbiBwb3Aocykge1xuICAgIHJldHVybiBzLmxlbmd0aCA/IHMucG9wKCkgKyBcIiBcIiA6IFwiXCI7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2xhdGUoeGEsIHlhLCB4YiwgeWIsIHMsIHEpIHtcbiAgICBpZiAoeGEgIT09IHhiIHx8IHlhICE9PSB5Yikge1xuICAgICAgdmFyIGkgPSBzLnB1c2goXCJ0cmFuc2xhdGUoXCIsIG51bGwsIHB4Q29tbWEsIG51bGwsIHB4UGFyZW4pO1xuICAgICAgcS5wdXNoKHtpOiBpIC0gNCwgeDogaW50ZXJwb2xhdGVOdW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogaW50ZXJwb2xhdGVOdW1iZXIoeWEsIHliKX0pO1xuICAgIH0gZWxzZSBpZiAoeGIgfHwgeWIpIHtcbiAgICAgIHMucHVzaChcInRyYW5zbGF0ZShcIiArIHhiICsgcHhDb21tYSArIHliICsgcHhQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcm90YXRlKGEsIGIsIHMsIHEpIHtcbiAgICBpZiAoYSAhPT0gYikge1xuICAgICAgaWYgKGEgLSBiID4gMTgwKSBiICs9IDM2MDsgZWxzZSBpZiAoYiAtIGEgPiAxODApIGEgKz0gMzYwOyAvLyBzaG9ydGVzdCBwYXRoXG4gICAgICBxLnB1c2goe2k6IHMucHVzaChwb3AocykgKyBcInJvdGF0ZShcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogaW50ZXJwb2xhdGVOdW1iZXIoYSwgYil9KTtcbiAgICB9IGVsc2UgaWYgKGIpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInJvdGF0ZShcIiArIGIgKyBkZWdQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2tld1goYSwgYiwgcywgcSkge1xuICAgIGlmIChhICE9PSBiKSB7XG4gICAgICBxLnB1c2goe2k6IHMucHVzaChwb3AocykgKyBcInNrZXdYKFwiLCBudWxsLCBkZWdQYXJlbikgLSAyLCB4OiBpbnRlcnBvbGF0ZU51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKHBvcChzKSArIFwic2NhbGUoXCIsIG51bGwsIFwiLFwiLCBudWxsLCBcIilcIik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBpbnRlcnBvbGF0ZU51bWJlcih4YSwgeGIpfSwge2k6IGkgLSAyLCB4OiBpbnRlcnBvbGF0ZU51bWJlcih5YSwgeWIpfSk7XG4gICAgfSBlbHNlIGlmICh4YiAhPT0gMSB8fCB5YiAhPT0gMSkge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwic2NhbGUoXCIgKyB4YiArIFwiLFwiICsgeWIgKyBcIilcIik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICB2YXIgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgICAgcSA9IFtdOyAvLyBudW1iZXIgaW50ZXJwb2xhdG9yc1xuICAgIGEgPSBwYXJzZShhKSwgYiA9IHBhcnNlKGIpO1xuICAgIHRyYW5zbGF0ZShhLnRyYW5zbGF0ZVgsIGEudHJhbnNsYXRlWSwgYi50cmFuc2xhdGVYLCBiLnRyYW5zbGF0ZVksIHMsIHEpO1xuICAgIHJvdGF0ZShhLnJvdGF0ZSwgYi5yb3RhdGUsIHMsIHEpO1xuICAgIHNrZXdYKGEuc2tld1gsIGIuc2tld1gsIHMsIHEpO1xuICAgIHNjYWxlKGEuc2NhbGVYLCBhLnNjYWxlWSwgYi5zY2FsZVgsIGIuc2NhbGVZLCBzLCBxKTtcbiAgICBhID0gYiA9IG51bGw7IC8vIGdjXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHZhciBpID0gLTEsIG4gPSBxLmxlbmd0aCwgbztcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBzWyhvID0gcVtpXSkuaV0gPSBvLngodCk7XG4gICAgICByZXR1cm4gcy5qb2luKFwiXCIpO1xuICAgIH07XG4gIH07XG59XG5cbnZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlQ3NzLCBcInB4LCBcIiwgXCJweClcIiwgXCJkZWcpXCIpO1xudmFyIGludGVycG9sYXRlVHJhbnNmb3JtU3ZnID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VTdmcsIFwiLCBcIiwgXCIpXCIsIFwiKVwiKTtcblxudmFyIHJobyA9IE1hdGguU1FSVDIsXG4gICAgcmhvMiA9IDIsXG4gICAgcmhvNCA9IDQsXG4gICAgZXBzaWxvbjIgPSAxZS0xMjtcblxuZnVuY3Rpb24gY29zaCh4KSB7XG4gIHJldHVybiAoKHggPSBNYXRoLmV4cCh4KSkgKyAxIC8geCkgLyAyO1xufVxuXG5mdW5jdGlvbiBzaW5oKHgpIHtcbiAgcmV0dXJuICgoeCA9IE1hdGguZXhwKHgpKSAtIDEgLyB4KSAvIDI7XG59XG5cbmZ1bmN0aW9uIHRhbmgoeCkge1xuICByZXR1cm4gKCh4ID0gTWF0aC5leHAoMiAqIHgpKSAtIDEpIC8gKHggKyAxKTtcbn1cblxuLy8gcDAgPSBbdXgwLCB1eTAsIHcwXVxuLy8gcDEgPSBbdXgxLCB1eTEsIHcxXVxuZnVuY3Rpb24gaW50ZXJwb2xhdGVab29tKHAwLCBwMSkge1xuICB2YXIgdXgwID0gcDBbMF0sIHV5MCA9IHAwWzFdLCB3MCA9IHAwWzJdLFxuICAgICAgdXgxID0gcDFbMF0sIHV5MSA9IHAxWzFdLCB3MSA9IHAxWzJdLFxuICAgICAgZHggPSB1eDEgLSB1eDAsXG4gICAgICBkeSA9IHV5MSAtIHV5MCxcbiAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHksXG4gICAgICBpLFxuICAgICAgUztcblxuICAvLyBTcGVjaWFsIGNhc2UgZm9yIHUwIOKJhSB1MS5cbiAgaWYgKGQyIDwgZXBzaWxvbjIpIHtcbiAgICBTID0gTWF0aC5sb2codzEgLyB3MCkgLyByaG87XG4gICAgaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHV4MCArIHQgKiBkeCxcbiAgICAgICAgdXkwICsgdCAqIGR5LFxuICAgICAgICB3MCAqIE1hdGguZXhwKHJobyAqIHQgKiBTKVxuICAgICAgXTtcbiAgICB9O1xuICB9XG5cbiAgLy8gR2VuZXJhbCBjYXNlLlxuICBlbHNlIHtcbiAgICB2YXIgZDEgPSBNYXRoLnNxcnQoZDIpLFxuICAgICAgICBiMCA9ICh3MSAqIHcxIC0gdzAgKiB3MCArIHJobzQgKiBkMikgLyAoMiAqIHcwICogcmhvMiAqIGQxKSxcbiAgICAgICAgYjEgPSAodzEgKiB3MSAtIHcwICogdzAgLSByaG80ICogZDIpIC8gKDIgKiB3MSAqIHJobzIgKiBkMSksXG4gICAgICAgIHIwID0gTWF0aC5sb2coTWF0aC5zcXJ0KGIwICogYjAgKyAxKSAtIGIwKSxcbiAgICAgICAgcjEgPSBNYXRoLmxvZyhNYXRoLnNxcnQoYjEgKiBiMSArIDEpIC0gYjEpO1xuICAgIFMgPSAocjEgLSByMCkgLyByaG87XG4gICAgaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgIHZhciBzID0gdCAqIFMsXG4gICAgICAgICAgY29zaHIwID0gY29zaChyMCksXG4gICAgICAgICAgdSA9IHcwIC8gKHJobzIgKiBkMSkgKiAoY29zaHIwICogdGFuaChyaG8gKiBzICsgcjApIC0gc2luaChyMCkpO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgdXgwICsgdSAqIGR4LFxuICAgICAgICB1eTAgKyB1ICogZHksXG4gICAgICAgIHcwICogY29zaHIwIC8gY29zaChyaG8gKiBzICsgcjApXG4gICAgICBdO1xuICAgIH07XG4gIH1cblxuICBpLmR1cmF0aW9uID0gUyAqIDEwMDA7XG5cbiAgcmV0dXJuIGk7XG59XG5cbmZ1bmN0aW9uIGhzbCQxKGh1ZSQkMSkge1xuICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHZhciBoID0gaHVlJCQxKChzdGFydCA9IGhzbChzdGFydCkpLmgsIChlbmQgPSBoc2woZW5kKSkuaCksXG4gICAgICAgIHMgPSBub2dhbW1hKHN0YXJ0LnMsIGVuZC5zKSxcbiAgICAgICAgbCA9IG5vZ2FtbWEoc3RhcnQubCwgZW5kLmwpLFxuICAgICAgICBvcGFjaXR5ID0gbm9nYW1tYShzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHN0YXJ0LmggPSBoKHQpO1xuICAgICAgc3RhcnQucyA9IHModCk7XG4gICAgICBzdGFydC5sID0gbCh0KTtcbiAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICB9O1xuICB9XG59XG5cbnZhciBoc2wkMiA9IGhzbCQxKGh1ZSk7XG52YXIgaHNsTG9uZyA9IGhzbCQxKG5vZ2FtbWEpO1xuXG5mdW5jdGlvbiBsYWIkMShzdGFydCwgZW5kKSB7XG4gIHZhciBsID0gbm9nYW1tYSgoc3RhcnQgPSBsYWIoc3RhcnQpKS5sLCAoZW5kID0gbGFiKGVuZCkpLmwpLFxuICAgICAgYSA9IG5vZ2FtbWEoc3RhcnQuYSwgZW5kLmEpLFxuICAgICAgYiA9IG5vZ2FtbWEoc3RhcnQuYiwgZW5kLmIpLFxuICAgICAgb3BhY2l0eSA9IG5vZ2FtbWEoc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHN0YXJ0LmwgPSBsKHQpO1xuICAgIHN0YXJ0LmEgPSBhKHQpO1xuICAgIHN0YXJ0LmIgPSBiKHQpO1xuICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGhjbCQxKGh1ZSQkMSkge1xuICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHZhciBoID0gaHVlJCQxKChzdGFydCA9IGhjbChzdGFydCkpLmgsIChlbmQgPSBoY2woZW5kKSkuaCksXG4gICAgICAgIGMgPSBub2dhbW1hKHN0YXJ0LmMsIGVuZC5jKSxcbiAgICAgICAgbCA9IG5vZ2FtbWEoc3RhcnQubCwgZW5kLmwpLFxuICAgICAgICBvcGFjaXR5ID0gbm9nYW1tYShzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHN0YXJ0LmggPSBoKHQpO1xuICAgICAgc3RhcnQuYyA9IGModCk7XG4gICAgICBzdGFydC5sID0gbCh0KTtcbiAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICB9O1xuICB9XG59XG5cbnZhciBoY2wkMiA9IGhjbCQxKGh1ZSk7XG52YXIgaGNsTG9uZyA9IGhjbCQxKG5vZ2FtbWEpO1xuXG5mdW5jdGlvbiBjdWJlaGVsaXgkMShodWUkJDEpIHtcbiAgcmV0dXJuIChmdW5jdGlvbiBjdWJlaGVsaXhHYW1tYSh5KSB7XG4gICAgeSA9ICt5O1xuXG4gICAgZnVuY3Rpb24gY3ViZWhlbGl4JCQxKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBoID0gaHVlJCQxKChzdGFydCA9IGN1YmVoZWxpeChzdGFydCkpLmgsIChlbmQgPSBjdWJlaGVsaXgoZW5kKSkuaCksXG4gICAgICAgICAgcyA9IG5vZ2FtbWEoc3RhcnQucywgZW5kLnMpLFxuICAgICAgICAgIGwgPSBub2dhbW1hKHN0YXJ0LmwsIGVuZC5sKSxcbiAgICAgICAgICBvcGFjaXR5ID0gbm9nYW1tYShzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICBzdGFydC5oID0gaCh0KTtcbiAgICAgICAgc3RhcnQucyA9IHModCk7XG4gICAgICAgIHN0YXJ0LmwgPSBsKE1hdGgucG93KHQsIHkpKTtcbiAgICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGN1YmVoZWxpeCQkMS5nYW1tYSA9IGN1YmVoZWxpeEdhbW1hO1xuXG4gICAgcmV0dXJuIGN1YmVoZWxpeCQkMTtcbiAgfSkoMSk7XG59XG5cbnZhciBjdWJlaGVsaXgkMiA9IGN1YmVoZWxpeCQxKGh1ZSk7XG52YXIgY3ViZWhlbGl4TG9uZyA9IGN1YmVoZWxpeCQxKG5vZ2FtbWEpO1xuXG5mdW5jdGlvbiBwaWVjZXdpc2UoaW50ZXJwb2xhdGUsIHZhbHVlcykge1xuICB2YXIgaSA9IDAsIG4gPSB2YWx1ZXMubGVuZ3RoIC0gMSwgdiA9IHZhbHVlc1swXSwgSSA9IG5ldyBBcnJheShuIDwgMCA/IDAgOiBuKTtcbiAgd2hpbGUgKGkgPCBuKSBJW2ldID0gaW50ZXJwb2xhdGUodiwgdiA9IHZhbHVlc1srK2ldKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgaSA9IE1hdGgubWF4KDAsIE1hdGgubWluKG4gLSAxLCBNYXRoLmZsb29yKHQgKj0gbikpKTtcbiAgICByZXR1cm4gSVtpXSh0IC0gaSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHF1YW50aXplKGludGVycG9sYXRvciwgbikge1xuICB2YXIgc2FtcGxlcyA9IG5ldyBBcnJheShuKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpIHNhbXBsZXNbaV0gPSBpbnRlcnBvbGF0b3IoaSAvIChuIC0gMSkpO1xuICByZXR1cm4gc2FtcGxlcztcbn1cblxudmFyIGZyYW1lID0gMCwgLy8gaXMgYW4gYW5pbWF0aW9uIGZyYW1lIHBlbmRpbmc/XG4gICAgdGltZW91dCA9IDAsIC8vIGlzIGEgdGltZW91dCBwZW5kaW5nP1xuICAgIGludGVydmFsID0gMCwgLy8gYXJlIGFueSB0aW1lcnMgYWN0aXZlP1xuICAgIHBva2VEZWxheSA9IDEwMDAsIC8vIGhvdyBmcmVxdWVudGx5IHdlIGNoZWNrIGZvciBjbG9jayBza2V3XG4gICAgdGFza0hlYWQsXG4gICAgdGFza1RhaWwsXG4gICAgY2xvY2tMYXN0ID0gMCxcbiAgICBjbG9ja05vdyA9IDAsXG4gICAgY2xvY2tTa2V3ID0gMCxcbiAgICBjbG9jayA9IHR5cGVvZiBwZXJmb3JtYW5jZSA9PT0gXCJvYmplY3RcIiAmJiBwZXJmb3JtYW5jZS5ub3cgPyBwZXJmb3JtYW5jZSA6IERhdGUsXG4gICAgc2V0RnJhbWUgPSB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KSA6IGZ1bmN0aW9uKGYpIHsgc2V0VGltZW91dChmLCAxNyk7IH07XG5cbmZ1bmN0aW9uIG5vdygpIHtcbiAgcmV0dXJuIGNsb2NrTm93IHx8IChzZXRGcmFtZShjbGVhck5vdyksIGNsb2NrTm93ID0gY2xvY2subm93KCkgKyBjbG9ja1NrZXcpO1xufVxuXG5mdW5jdGlvbiBjbGVhck5vdygpIHtcbiAgY2xvY2tOb3cgPSAwO1xufVxuXG5mdW5jdGlvbiBUaW1lcigpIHtcbiAgdGhpcy5fY2FsbCA9XG4gIHRoaXMuX3RpbWUgPVxuICB0aGlzLl9uZXh0ID0gbnVsbDtcbn1cblxuVGltZXIucHJvdG90eXBlID0gdGltZXIucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVGltZXIsXG4gIHJlc3RhcnQ6IGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbGxiYWNrIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuICAgIHRpbWUgPSAodGltZSA9PSBudWxsID8gbm93KCkgOiArdGltZSkgKyAoZGVsYXkgPT0gbnVsbCA/IDAgOiArZGVsYXkpO1xuICAgIGlmICghdGhpcy5fbmV4dCAmJiB0YXNrVGFpbCAhPT0gdGhpcykge1xuICAgICAgaWYgKHRhc2tUYWlsKSB0YXNrVGFpbC5fbmV4dCA9IHRoaXM7XG4gICAgICBlbHNlIHRhc2tIZWFkID0gdGhpcztcbiAgICAgIHRhc2tUYWlsID0gdGhpcztcbiAgICB9XG4gICAgdGhpcy5fY2FsbCA9IGNhbGxiYWNrO1xuICAgIHRoaXMuX3RpbWUgPSB0aW1lO1xuICAgIHNsZWVwKCk7XG4gIH0sXG4gIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9jYWxsKSB7XG4gICAgICB0aGlzLl9jYWxsID0gbnVsbDtcbiAgICAgIHRoaXMuX3RpbWUgPSBJbmZpbml0eTtcbiAgICAgIHNsZWVwKCk7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiB0aW1lcihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgdmFyIHQgPSBuZXcgVGltZXI7XG4gIHQucmVzdGFydChjYWxsYmFjaywgZGVsYXksIHRpbWUpO1xuICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gdGltZXJGbHVzaCgpIHtcbiAgbm93KCk7IC8vIEdldCB0aGUgY3VycmVudCB0aW1lLCBpZiBub3QgYWxyZWFkeSBzZXQuXG4gICsrZnJhbWU7IC8vIFByZXRlbmQgd2XigJl2ZSBzZXQgYW4gYWxhcm0sIGlmIHdlIGhhdmVu4oCZdCBhbHJlYWR5LlxuICB2YXIgdCA9IHRhc2tIZWFkLCBlO1xuICB3aGlsZSAodCkge1xuICAgIGlmICgoZSA9IGNsb2NrTm93IC0gdC5fdGltZSkgPj0gMCkgdC5fY2FsbC5jYWxsKG51bGwsIGUpO1xuICAgIHQgPSB0Ll9uZXh0O1xuICB9XG4gIC0tZnJhbWU7XG59XG5cbmZ1bmN0aW9uIHdha2UoKSB7XG4gIGNsb2NrTm93ID0gKGNsb2NrTGFzdCA9IGNsb2NrLm5vdygpKSArIGNsb2NrU2tldztcbiAgZnJhbWUgPSB0aW1lb3V0ID0gMDtcbiAgdHJ5IHtcbiAgICB0aW1lckZsdXNoKCk7XG4gIH0gZmluYWxseSB7XG4gICAgZnJhbWUgPSAwO1xuICAgIG5hcCgpO1xuICAgIGNsb2NrTm93ID0gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwb2tlKCkge1xuICB2YXIgbm93ID0gY2xvY2subm93KCksIGRlbGF5ID0gbm93IC0gY2xvY2tMYXN0O1xuICBpZiAoZGVsYXkgPiBwb2tlRGVsYXkpIGNsb2NrU2tldyAtPSBkZWxheSwgY2xvY2tMYXN0ID0gbm93O1xufVxuXG5mdW5jdGlvbiBuYXAoKSB7XG4gIHZhciB0MCwgdDEgPSB0YXNrSGVhZCwgdDIsIHRpbWUgPSBJbmZpbml0eTtcbiAgd2hpbGUgKHQxKSB7XG4gICAgaWYgKHQxLl9jYWxsKSB7XG4gICAgICBpZiAodGltZSA+IHQxLl90aW1lKSB0aW1lID0gdDEuX3RpbWU7XG4gICAgICB0MCA9IHQxLCB0MSA9IHQxLl9uZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0MiA9IHQxLl9uZXh0LCB0MS5fbmV4dCA9IG51bGw7XG4gICAgICB0MSA9IHQwID8gdDAuX25leHQgPSB0MiA6IHRhc2tIZWFkID0gdDI7XG4gICAgfVxuICB9XG4gIHRhc2tUYWlsID0gdDA7XG4gIHNsZWVwKHRpbWUpO1xufVxuXG5mdW5jdGlvbiBzbGVlcCh0aW1lKSB7XG4gIGlmIChmcmFtZSkgcmV0dXJuOyAvLyBTb29uZXN0IGFsYXJtIGFscmVhZHkgc2V0LCBvciB3aWxsIGJlLlxuICBpZiAodGltZW91dCkgdGltZW91dCA9IGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgdmFyIGRlbGF5ID0gdGltZSAtIGNsb2NrTm93OyAvLyBTdHJpY3RseSBsZXNzIHRoYW4gaWYgd2UgcmVjb21wdXRlZCBjbG9ja05vdy5cbiAgaWYgKGRlbGF5ID4gMjQpIHtcbiAgICBpZiAodGltZSA8IEluZmluaXR5KSB0aW1lb3V0ID0gc2V0VGltZW91dCh3YWtlLCB0aW1lIC0gY2xvY2subm93KCkgLSBjbG9ja1NrZXcpO1xuICAgIGlmIChpbnRlcnZhbCkgaW50ZXJ2YWwgPSBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWludGVydmFsKSBjbG9ja0xhc3QgPSBjbG9jay5ub3coKSwgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChwb2tlLCBwb2tlRGVsYXkpO1xuICAgIGZyYW1lID0gMSwgc2V0RnJhbWUod2FrZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdGltZW91dCQxKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgZGVsYXkgPSBkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheTtcbiAgdC5yZXN0YXJ0KGZ1bmN0aW9uKGVsYXBzZWQpIHtcbiAgICB0LnN0b3AoKTtcbiAgICBjYWxsYmFjayhlbGFwc2VkICsgZGVsYXkpO1xuICB9LCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuXG5mdW5jdGlvbiBpbnRlcnZhbCQxKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lciwgdG90YWwgPSBkZWxheTtcbiAgaWYgKGRlbGF5ID09IG51bGwpIHJldHVybiB0LnJlc3RhcnQoY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSwgdDtcbiAgZGVsYXkgPSArZGVsYXksIHRpbWUgPSB0aW1lID09IG51bGwgPyBub3coKSA6ICt0aW1lO1xuICB0LnJlc3RhcnQoZnVuY3Rpb24gdGljayhlbGFwc2VkKSB7XG4gICAgZWxhcHNlZCArPSB0b3RhbDtcbiAgICB0LnJlc3RhcnQodGljaywgdG90YWwgKz0gZGVsYXksIHRpbWUpO1xuICAgIGNhbGxiYWNrKGVsYXBzZWQpO1xuICB9LCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuXG52YXIgZW1wdHlPbiA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJlbmRcIiwgXCJjYW5jZWxcIiwgXCJpbnRlcnJ1cHRcIik7XG52YXIgZW1wdHlUd2VlbiA9IFtdO1xuXG52YXIgQ1JFQVRFRCA9IDA7XG52YXIgU0NIRURVTEVEID0gMTtcbnZhciBTVEFSVElORyA9IDI7XG52YXIgU1RBUlRFRCA9IDM7XG52YXIgUlVOTklORyA9IDQ7XG52YXIgRU5ESU5HID0gNTtcbnZhciBFTkRFRCA9IDY7XG5cbmZ1bmN0aW9uIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkLCBpbmRleCwgZ3JvdXAsIHRpbWluZykge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb247XG4gIGlmICghc2NoZWR1bGVzKSBub2RlLl9fdHJhbnNpdGlvbiA9IHt9O1xuICBlbHNlIGlmIChpZCBpbiBzY2hlZHVsZXMpIHJldHVybjtcbiAgY3JlYXRlJDEobm9kZSwgaWQsIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIGluZGV4OiBpbmRleCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxuICAgIGdyb3VwOiBncm91cCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxuICAgIG9uOiBlbXB0eU9uLFxuICAgIHR3ZWVuOiBlbXB0eVR3ZWVuLFxuICAgIHRpbWU6IHRpbWluZy50aW1lLFxuICAgIGRlbGF5OiB0aW1pbmcuZGVsYXksXG4gICAgZHVyYXRpb246IHRpbWluZy5kdXJhdGlvbixcbiAgICBlYXNlOiB0aW1pbmcuZWFzZSxcbiAgICB0aW1lcjogbnVsbCxcbiAgICBzdGF0ZTogQ1JFQVRFRFxuICB9KTtcbn1cblxuZnVuY3Rpb24gaW5pdChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBnZXQkMShub2RlLCBpZCk7XG4gIGlmIChzY2hlZHVsZS5zdGF0ZSA+IENSRUFURUQpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlOyBhbHJlYWR5IHNjaGVkdWxlZFwiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5mdW5jdGlvbiBzZXQkMShub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBnZXQkMShub2RlLCBpZCk7XG4gIGlmIChzY2hlZHVsZS5zdGF0ZSA+IFNUQVJURUQpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlOyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZnVuY3Rpb24gZ2V0JDEobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gbm9kZS5fX3RyYW5zaXRpb247XG4gIGlmICghc2NoZWR1bGUgfHwgIShzY2hlZHVsZSA9IHNjaGVkdWxlW2lkXSkpIHRocm93IG5ldyBFcnJvcihcInRyYW5zaXRpb24gbm90IGZvdW5kXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZSQxKG5vZGUsIGlkLCBzZWxmKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHR3ZWVuO1xuXG4gIC8vIEluaXRpYWxpemUgdGhlIHNlbGYgdGltZXIgd2hlbiB0aGUgdHJhbnNpdGlvbiBpcyBjcmVhdGVkLlxuICAvLyBOb3RlIHRoZSBhY3R1YWwgZGVsYXkgaXMgbm90IGtub3duIHVudGlsIHRoZSBmaXJzdCBjYWxsYmFjayFcbiAgc2NoZWR1bGVzW2lkXSA9IHNlbGY7XG4gIHNlbGYudGltZXIgPSB0aW1lcihzY2hlZHVsZSwgMCwgc2VsZi50aW1lKTtcblxuICBmdW5jdGlvbiBzY2hlZHVsZShlbGFwc2VkKSB7XG4gICAgc2VsZi5zdGF0ZSA9IFNDSEVEVUxFRDtcbiAgICBzZWxmLnRpbWVyLnJlc3RhcnQoc3RhcnQsIHNlbGYuZGVsYXksIHNlbGYudGltZSk7XG5cbiAgICAvLyBJZiB0aGUgZWxhcHNlZCBkZWxheSBpcyBsZXNzIHRoYW4gb3VyIGZpcnN0IHNsZWVwLCBzdGFydCBpbW1lZGlhdGVseS5cbiAgICBpZiAoc2VsZi5kZWxheSA8PSBlbGFwc2VkKSBzdGFydChlbGFwc2VkIC0gc2VsZi5kZWxheSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydChlbGFwc2VkKSB7XG4gICAgdmFyIGksIGosIG4sIG87XG5cbiAgICAvLyBJZiB0aGUgc3RhdGUgaXMgbm90IFNDSEVEVUxFRCwgdGhlbiB3ZSBwcmV2aW91c2x5IGVycm9yZWQgb24gc3RhcnQuXG4gICAgaWYgKHNlbGYuc3RhdGUgIT09IFNDSEVEVUxFRCkgcmV0dXJuIHN0b3AoKTtcblxuICAgIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICAgIG8gPSBzY2hlZHVsZXNbaV07XG4gICAgICBpZiAoby5uYW1lICE9PSBzZWxmLm5hbWUpIGNvbnRpbnVlO1xuXG4gICAgICAvLyBXaGlsZSB0aGlzIGVsZW1lbnQgYWxyZWFkeSBoYXMgYSBzdGFydGluZyB0cmFuc2l0aW9uIGR1cmluZyB0aGlzIGZyYW1lLFxuICAgICAgLy8gZGVmZXIgc3RhcnRpbmcgYW4gaW50ZXJydXB0aW5nIHRyYW5zaXRpb24gdW50aWwgdGhhdCB0cmFuc2l0aW9uIGhhcyBhXG4gICAgICAvLyBjaGFuY2UgdG8gdGljayAoYW5kIHBvc3NpYmx5IGVuZCk7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzU0IVxuICAgICAgaWYgKG8uc3RhdGUgPT09IFNUQVJURUQpIHJldHVybiB0aW1lb3V0JDEoc3RhcnQpO1xuXG4gICAgICAvLyBJbnRlcnJ1cHQgdGhlIGFjdGl2ZSB0cmFuc2l0aW9uLCBpZiBhbnkuXG4gICAgICBpZiAoby5zdGF0ZSA9PT0gUlVOTklORykge1xuICAgICAgICBvLnN0YXRlID0gRU5ERUQ7XG4gICAgICAgIG8udGltZXIuc3RvcCgpO1xuICAgICAgICBvLm9uLmNhbGwoXCJpbnRlcnJ1cHRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgby5pbmRleCwgby5ncm91cCk7XG4gICAgICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gICAgICB9XG5cbiAgICAgIC8vIENhbmNlbCBhbnkgcHJlLWVtcHRlZCB0cmFuc2l0aW9ucy5cbiAgICAgIGVsc2UgaWYgKCtpIDwgaWQpIHtcbiAgICAgICAgby5zdGF0ZSA9IEVOREVEO1xuICAgICAgICBvLnRpbWVyLnN0b3AoKTtcbiAgICAgICAgby5vbi5jYWxsKFwiY2FuY2VsXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIG8uaW5kZXgsIG8uZ3JvdXApO1xuICAgICAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERlZmVyIHRoZSBmaXJzdCB0aWNrIHRvIGVuZCBvZiB0aGUgY3VycmVudCBmcmFtZTsgc2VlIGQzL2QzIzE1NzYuXG4gICAgLy8gTm90ZSB0aGUgdHJhbnNpdGlvbiBtYXkgYmUgY2FuY2VsZWQgYWZ0ZXIgc3RhcnQgYW5kIGJlZm9yZSB0aGUgZmlyc3QgdGljayFcbiAgICAvLyBOb3RlIHRoaXMgbXVzdCBiZSBzY2hlZHVsZWQgYmVmb3JlIHRoZSBzdGFydCBldmVudDsgc2VlIGQzL2QzLXRyYW5zaXRpb24jMTYhXG4gICAgLy8gQXNzdW1pbmcgdGhpcyBpcyBzdWNjZXNzZnVsLCBzdWJzZXF1ZW50IGNhbGxiYWNrcyBnbyBzdHJhaWdodCB0byB0aWNrLlxuICAgIHRpbWVvdXQkMShmdW5jdGlvbigpIHtcbiAgICAgIGlmIChzZWxmLnN0YXRlID09PSBTVEFSVEVEKSB7XG4gICAgICAgIHNlbGYuc3RhdGUgPSBSVU5OSU5HO1xuICAgICAgICBzZWxmLnRpbWVyLnJlc3RhcnQodGljaywgc2VsZi5kZWxheSwgc2VsZi50aW1lKTtcbiAgICAgICAgdGljayhlbGFwc2VkKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIERpc3BhdGNoIHRoZSBzdGFydCBldmVudC5cbiAgICAvLyBOb3RlIHRoaXMgbXVzdCBiZSBkb25lIGJlZm9yZSB0aGUgdHdlZW4gYXJlIGluaXRpYWxpemVkLlxuICAgIHNlbGYuc3RhdGUgPSBTVEFSVElORztcbiAgICBzZWxmLm9uLmNhbGwoXCJzdGFydFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKTtcbiAgICBpZiAoc2VsZi5zdGF0ZSAhPT0gU1RBUlRJTkcpIHJldHVybjsgLy8gaW50ZXJydXB0ZWRcbiAgICBzZWxmLnN0YXRlID0gU1RBUlRFRDtcblxuICAgIC8vIEluaXRpYWxpemUgdGhlIHR3ZWVuLCBkZWxldGluZyBudWxsIHR3ZWVuLlxuICAgIHR3ZWVuID0gbmV3IEFycmF5KG4gPSBzZWxmLnR3ZWVuLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgaiA9IC0xOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobyA9IHNlbGYudHdlZW5baV0udmFsdWUuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKSkge1xuICAgICAgICB0d2VlblsrK2pdID0gbztcbiAgICAgIH1cbiAgICB9XG4gICAgdHdlZW4ubGVuZ3RoID0gaiArIDE7XG4gIH1cblxuICBmdW5jdGlvbiB0aWNrKGVsYXBzZWQpIHtcbiAgICB2YXIgdCA9IGVsYXBzZWQgPCBzZWxmLmR1cmF0aW9uID8gc2VsZi5lYXNlLmNhbGwobnVsbCwgZWxhcHNlZCAvIHNlbGYuZHVyYXRpb24pIDogKHNlbGYudGltZXIucmVzdGFydChzdG9wKSwgc2VsZi5zdGF0ZSA9IEVORElORywgMSksXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IHR3ZWVuLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICB0d2VlbltpXS5jYWxsKG5vZGUsIHQpO1xuICAgIH1cblxuICAgIC8vIERpc3BhdGNoIHRoZSBlbmQgZXZlbnQuXG4gICAgaWYgKHNlbGYuc3RhdGUgPT09IEVORElORykge1xuICAgICAgc2VsZi5vbi5jYWxsKFwiZW5kXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgICAgc3RvcCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgc2VsZi5zdGF0ZSA9IEVOREVEO1xuICAgIHNlbGYudGltZXIuc3RvcCgpO1xuICAgIGRlbGV0ZSBzY2hlZHVsZXNbaWRdO1xuICAgIGZvciAodmFyIGkgaW4gc2NoZWR1bGVzKSByZXR1cm47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBkZWxldGUgbm9kZS5fX3RyYW5zaXRpb247XG4gIH1cbn1cblxuZnVuY3Rpb24gaW50ZXJydXB0KG5vZGUsIG5hbWUpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uLFxuICAgICAgc2NoZWR1bGUkJDEsXG4gICAgICBhY3RpdmUsXG4gICAgICBlbXB0eSA9IHRydWUsXG4gICAgICBpO1xuXG4gIGlmICghc2NoZWR1bGVzKSByZXR1cm47XG5cbiAgbmFtZSA9IG5hbWUgPT0gbnVsbCA/IG51bGwgOiBuYW1lICsgXCJcIjtcblxuICBmb3IgKGkgaW4gc2NoZWR1bGVzKSB7XG4gICAgaWYgKChzY2hlZHVsZSQkMSA9IHNjaGVkdWxlc1tpXSkubmFtZSAhPT0gbmFtZSkgeyBlbXB0eSA9IGZhbHNlOyBjb250aW51ZTsgfVxuICAgIGFjdGl2ZSA9IHNjaGVkdWxlJCQxLnN0YXRlID4gU1RBUlRJTkcgJiYgc2NoZWR1bGUkJDEuc3RhdGUgPCBFTkRJTkc7XG4gICAgc2NoZWR1bGUkJDEuc3RhdGUgPSBFTkRFRDtcbiAgICBzY2hlZHVsZSQkMS50aW1lci5zdG9wKCk7XG4gICAgc2NoZWR1bGUkJDEub24uY2FsbChhY3RpdmUgPyBcImludGVycnVwdFwiIDogXCJjYW5jZWxcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2NoZWR1bGUkJDEuaW5kZXgsIHNjaGVkdWxlJCQxLmdyb3VwKTtcbiAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICB9XG5cbiAgaWYgKGVtcHR5KSBkZWxldGUgbm9kZS5fX3RyYW5zaXRpb247XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9pbnRlcnJ1cHQobmFtZSkge1xuICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIGludGVycnVwdCh0aGlzLCBuYW1lKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHR3ZWVuUmVtb3ZlKGlkLCBuYW1lKSB7XG4gIHZhciB0d2VlbjAsIHR3ZWVuMTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSQkMSA9IHNldCQxKHRoaXMsIGlkKSxcbiAgICAgICAgdHdlZW4gPSBzY2hlZHVsZSQkMS50d2VlbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgdHdlZW4gd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgdHdlZW4gYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKHR3ZWVuICE9PSB0d2VlbjApIHtcbiAgICAgIHR3ZWVuMSA9IHR3ZWVuMCA9IHR3ZWVuO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHR3ZWVuMSA9IHR3ZWVuMS5zbGljZSgpO1xuICAgICAgICAgIHR3ZWVuMS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzY2hlZHVsZSQkMS50d2VlbiA9IHR3ZWVuMTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdHdlZW5GdW5jdGlvbihpZCwgbmFtZSwgdmFsdWUpIHtcbiAgdmFyIHR3ZWVuMCwgdHdlZW4xO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSQkMSA9IHNldCQxKHRoaXMsIGlkKSxcbiAgICAgICAgdHdlZW4gPSBzY2hlZHVsZSQkMS50d2VlbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgdHdlZW4gd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgdHdlZW4gYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKHR3ZWVuICE9PSB0d2VlbjApIHtcbiAgICAgIHR3ZWVuMSA9ICh0d2VlbjAgPSB0d2Vlbikuc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIHQgPSB7bmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlfSwgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHR3ZWVuMVtpXSA9IHQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpID09PSBuKSB0d2VlbjEucHVzaCh0KTtcbiAgICB9XG5cbiAgICBzY2hlZHVsZSQkMS50d2VlbiA9IHR3ZWVuMTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvbl90d2VlbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICBuYW1lICs9IFwiXCI7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIHR3ZWVuID0gZ2V0JDEodGhpcy5ub2RlKCksIGlkKS50d2VlbjtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR3ZWVuLmxlbmd0aCwgdDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKCh0ID0gdHdlZW5baV0pLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHQudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbCA/IHR3ZWVuUmVtb3ZlIDogdHdlZW5GdW5jdGlvbikoaWQsIG5hbWUsIHZhbHVlKSk7XG59XG5cbmZ1bmN0aW9uIHR3ZWVuVmFsdWUodHJhbnNpdGlvbiwgbmFtZSwgdmFsdWUpIHtcbiAgdmFyIGlkID0gdHJhbnNpdGlvbi5faWQ7XG5cbiAgdHJhbnNpdGlvbi5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSQkMSA9IHNldCQxKHRoaXMsIGlkKTtcbiAgICAoc2NoZWR1bGUkJDEudmFsdWUgfHwgKHNjaGVkdWxlJCQxLnZhbHVlID0ge30pKVtuYW1lXSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH0pO1xuXG4gIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgcmV0dXJuIGdldCQxKG5vZGUsIGlkKS52YWx1ZVtuYW1lXTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW50ZXJwb2xhdGUoYSwgYikge1xuICB2YXIgYztcbiAgcmV0dXJuICh0eXBlb2YgYiA9PT0gXCJudW1iZXJcIiA/IGludGVycG9sYXRlTnVtYmVyXG4gICAgICA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IGludGVycG9sYXRlUmdiXG4gICAgICA6IChjID0gY29sb3IoYikpID8gKGIgPSBjLCBpbnRlcnBvbGF0ZVJnYilcbiAgICAgIDogaW50ZXJwb2xhdGVTdHJpbmcpKGEsIGIpO1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlJDEobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmVOUyQxKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudCQxKG5hbWUsIGludGVycG9sYXRlJCQxLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUkJDEoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnROUyQxKGZ1bGxuYW1lLCBpbnRlcnBvbGF0ZSQkMSwgdmFsdWUxKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSB0aGlzLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZSQkMShzdHJpbmcwMCA9IHN0cmluZzAsIHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbiQxKG5hbWUsIGludGVycG9sYXRlJCQxLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSwgc3RyaW5nMTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIHN0cmluZzAgPSB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCAmJiBzdHJpbmcxID09PSBzdHJpbmcxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IChzdHJpbmcxMCA9IHN0cmluZzEsIGludGVycG9sYXRlMCA9IGludGVycG9sYXRlJCQxKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbk5TJDEoZnVsbG5hbWUsIGludGVycG9sYXRlJCQxLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSwgc3RyaW5nMTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUkJDEoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvbl9hdHRyKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKSwgaSA9IGZ1bGxuYW1lID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmcgOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHRoaXMuYXR0clR3ZWVuKG5hbWUsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TJDEgOiBhdHRyRnVuY3Rpb24kMSkoZnVsbG5hbWUsIGksIHR3ZWVuVmFsdWUodGhpcywgXCJhdHRyLlwiICsgbmFtZSwgdmFsdWUpKVxuICAgICAgOiB2YWx1ZSA9PSBudWxsID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0clJlbW92ZU5TJDEgOiBhdHRyUmVtb3ZlJDEpKGZ1bGxuYW1lKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyQxIDogYXR0ckNvbnN0YW50JDEpKGZ1bGxuYW1lLCBpLCB2YWx1ZSkpO1xufVxuXG5mdW5jdGlvbiBhdHRySW50ZXJwb2xhdGUobmFtZSwgaSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIGkodCkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRySW50ZXJwb2xhdGVOUyhmdWxsbmFtZSwgaSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCBpKHQpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clR3ZWVuTlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgYXR0ckludGVycG9sYXRlTlMoZnVsbG5hbWUsIGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5mdW5jdGlvbiBhdHRyVHdlZW4obmFtZSwgdmFsdWUpIHtcbiAgdmFyIHQwLCBpMDtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChpICE9PSBpMCkgdDAgPSAoaTAgPSBpKSAmJiBhdHRySW50ZXJwb2xhdGUobmFtZSwgaSk7XG4gICAgcmV0dXJuIHQwO1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25fYXR0clR3ZWVuKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBrZXkgPSBcImF0dHIuXCIgKyBuYW1lO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHJldHVybiAoa2V5ID0gdGhpcy50d2VlbihrZXkpKSAmJiBrZXkuX3ZhbHVlO1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBudWxsKTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCAoZnVsbG5hbWUubG9jYWwgPyBhdHRyVHdlZW5OUyA6IGF0dHJUd2VlbikoZnVsbG5hbWUsIHZhbHVlKSk7XG59XG5cbmZ1bmN0aW9uIGRlbGF5RnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9ICt2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkZWxheUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgIGluaXQodGhpcywgaWQpLmRlbGF5ID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25fZGVsYXkodmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gZGVsYXlGdW5jdGlvblxuICAgICAgICAgIDogZGVsYXlDb25zdGFudCkoaWQsIHZhbHVlKSlcbiAgICAgIDogZ2V0JDEodGhpcy5ub2RlKCksIGlkKS5kZWxheTtcbn1cblxuZnVuY3Rpb24gZHVyYXRpb25GdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCQxKHRoaXMsIGlkKS5kdXJhdGlvbiA9ICt2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkdXJhdGlvbkNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgIHNldCQxKHRoaXMsIGlkKS5kdXJhdGlvbiA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uX2R1cmF0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGR1cmF0aW9uRnVuY3Rpb25cbiAgICAgICAgICA6IGR1cmF0aW9uQ29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCQxKHRoaXMubm9kZSgpLCBpZCkuZHVyYXRpb247XG59XG5cbmZ1bmN0aW9uIGVhc2VDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBzZXQkMSh0aGlzLCBpZCkuZWFzZSA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uX2Vhc2UodmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKGVhc2VDb25zdGFudChpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQkMSh0aGlzLm5vZGUoKSwgaWQpLmVhc2U7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25fZmlsdGVyKG1hdGNoKSB7XG4gIGlmICh0eXBlb2YgbWF0Y2ggIT09IFwiZnVuY3Rpb25cIikgbWF0Y2ggPSBtYXRjaGVyKG1hdGNoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gW10sIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgbWF0Y2guY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpIHtcbiAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCB0aGlzLl9uYW1lLCB0aGlzLl9pZCk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25fbWVyZ2UodHJhbnNpdGlvbiQkMSkge1xuICBpZiAodHJhbnNpdGlvbiQkMS5faWQgIT09IHRoaXMuX2lkKSB0aHJvdyBuZXcgRXJyb3I7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHRyYW5zaXRpb24kJDEuX2dyb3VwcywgbTAgPSBncm91cHMwLmxlbmd0aCwgbTEgPSBncm91cHMxLmxlbmd0aCwgbSA9IE1hdGgubWluKG0wLCBtMSksIG1lcmdlcyA9IG5ldyBBcnJheShtMCksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAwID0gZ3JvdXBzMFtqXSwgZ3JvdXAxID0gZ3JvdXBzMVtqXSwgbiA9IGdyb3VwMC5sZW5ndGgsIG1lcmdlID0gbWVyZ2VzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cDBbaV0gfHwgZ3JvdXAxW2ldKSB7XG4gICAgICAgIG1lcmdlW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKDsgaiA8IG0wOyArK2opIHtcbiAgICBtZXJnZXNbal0gPSBncm91cHMwW2pdO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuXG5mdW5jdGlvbiBzdGFydChuYW1lKSB7XG4gIHJldHVybiAobmFtZSArIFwiXCIpLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykuZXZlcnkoZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4gIXQgfHwgdCA9PT0gXCJzdGFydFwiO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpIHtcbiAgdmFyIG9uMCwgb24xLCBzaXQgPSBzdGFydChuYW1lKSA/IGluaXQgOiBzZXQkMTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSQkMSA9IHNpdCh0aGlzLCBpZCksXG4gICAgICAgIG9uID0gc2NoZWR1bGUkJDEub247XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKG9uICE9PSBvbjApIChvbjEgPSAob24wID0gb24pLmNvcHkoKSkub24obmFtZSwgbGlzdGVuZXIpO1xuXG4gICAgc2NoZWR1bGUkJDEub24gPSBvbjE7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25fb24obmFtZSwgbGlzdGVuZXIpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyXG4gICAgICA/IGdldCQxKHRoaXMubm9kZSgpLCBpZCkub24ub24obmFtZSlcbiAgICAgIDogdGhpcy5lYWNoKG9uRnVuY3Rpb24oaWQsIG5hbWUsIGxpc3RlbmVyKSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUZ1bmN0aW9uKGlkKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICAgIGZvciAodmFyIGkgaW4gdGhpcy5fX3RyYW5zaXRpb24pIGlmICgraSAhPT0gaWQpIHJldHVybjtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25fcmVtb3ZlKCkge1xuICByZXR1cm4gdGhpcy5vbihcImVuZC5yZW1vdmVcIiwgcmVtb3ZlRnVuY3Rpb24odGhpcy5faWQpKTtcbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvbl9zZWxlY3Qoc2VsZWN0JCQxKSB7XG4gIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgIGlkID0gdGhpcy5faWQ7XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3QkJDEgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0JCQxID0gc2VsZWN0b3Ioc2VsZWN0JCQxKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBzdWJub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChzdWJub2RlID0gc2VsZWN0JCQxLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSkge1xuICAgICAgICBpZiAoXCJfX2RhdGFfX1wiIGluIG5vZGUpIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuICAgICAgICBzdWJncm91cFtpXSA9IHN1Ym5vZGU7XG4gICAgICAgIHNjaGVkdWxlKHN1Ymdyb3VwW2ldLCBuYW1lLCBpZCwgaSwgc3ViZ3JvdXAsIGdldCQxKG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uX3NlbGVjdEFsbChzZWxlY3QkJDEpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCQkMSAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QkJDEgPSBzZWxlY3RvckFsbChzZWxlY3QkJDEpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIGZvciAodmFyIGNoaWxkcmVuID0gc2VsZWN0JCQxLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApLCBjaGlsZCwgaW5oZXJpdCA9IGdldCQxKG5vZGUsIGlkKSwgayA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGsgPCBsOyArK2spIHtcbiAgICAgICAgICBpZiAoY2hpbGQgPSBjaGlsZHJlbltrXSkge1xuICAgICAgICAgICAgc2NoZWR1bGUoY2hpbGQsIG5hbWUsIGlkLCBrLCBjaGlsZHJlbiwgaW5oZXJpdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN1Ymdyb3Vwcy5wdXNoKGNoaWxkcmVuKTtcbiAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHBhcmVudHMsIG5hbWUsIGlkKTtcbn1cblxudmFyIFNlbGVjdGlvbiQxID0gc2VsZWN0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcblxuZnVuY3Rpb24gdHJhbnNpdGlvbl9zZWxlY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uJDEodGhpcy5fZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cblxuZnVuY3Rpb24gc3R5bGVOdWxsKG5hbWUsIGludGVycG9sYXRlJCQxKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSBzdHlsZVZhbHVlKHRoaXMsIG5hbWUpLFxuICAgICAgICBzdHJpbmcxID0gKHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSksIHN0eWxlVmFsdWUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUkJDEoc3RyaW5nMDAgPSBzdHJpbmcwLCBzdHJpbmcxMCA9IHN0cmluZzEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZSQxKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQkMShuYW1lLCBpbnRlcnBvbGF0ZSQkMSwgdmFsdWUxKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSBzdHlsZVZhbHVlKHRoaXMsIG5hbWUpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUkJDEoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uJDEobmFtZSwgaW50ZXJwb2xhdGUkJDEsIHZhbHVlKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSBzdHlsZVZhbHVlKHRoaXMsIG5hbWUpLFxuICAgICAgICB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSxcbiAgICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCI7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSBzdHJpbmcxID0gdmFsdWUxID0gKHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSksIHN0eWxlVmFsdWUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUkJDEoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVNYXliZVJlbW92ZShpZCwgbmFtZSkge1xuICB2YXIgb24wLCBvbjEsIGxpc3RlbmVyMCwga2V5ID0gXCJzdHlsZS5cIiArIG5hbWUsIGV2ZW50ID0gXCJlbmQuXCIgKyBrZXksIHJlbW92ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSQkMSA9IHNldCQxKHRoaXMsIGlkKSxcbiAgICAgICAgb24gPSBzY2hlZHVsZSQkMS5vbixcbiAgICAgICAgbGlzdGVuZXIgPSBzY2hlZHVsZSQkMS52YWx1ZVtrZXldID09IG51bGwgPyByZW1vdmUgfHwgKHJlbW92ZSA9IHN0eWxlUmVtb3ZlJDEobmFtZSkpIDogdW5kZWZpbmVkO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmIChvbiAhPT0gb24wIHx8IGxpc3RlbmVyMCAhPT0gbGlzdGVuZXIpIChvbjEgPSAob24wID0gb24pLmNvcHkoKSkub24oZXZlbnQsIGxpc3RlbmVyMCA9IGxpc3RlbmVyKTtcblxuICAgIHNjaGVkdWxlJCQxLm9uID0gb24xO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uX3N0eWxlKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgaSA9IChuYW1lICs9IFwiXCIpID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MgOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZU51bGwobmFtZSwgaSkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBzdHlsZVJlbW92ZSQxKG5hbWUpKVxuICAgIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZUZ1bmN0aW9uJDEobmFtZSwgaSwgdHdlZW5WYWx1ZSh0aGlzLCBcInN0eWxlLlwiICsgbmFtZSwgdmFsdWUpKSlcbiAgICAgIC5lYWNoKHN0eWxlTWF5YmVSZW1vdmUodGhpcy5faWQsIG5hbWUpKVxuICAgIDogdGhpc1xuICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVDb25zdGFudCQxKG5hbWUsIGksIHZhbHVlKSwgcHJpb3JpdHkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBudWxsKTtcbn1cblxuZnVuY3Rpb24gc3R5bGVJbnRlcnBvbGF0ZShuYW1lLCBpLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgaSh0KSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgdCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQgPSAoaTAgPSBpKSAmJiBzdHlsZUludGVycG9sYXRlKG5hbWUsIGksIHByaW9yaXR5KTtcbiAgICByZXR1cm4gdDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uX3N0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHZhciBrZXkgPSBcInN0eWxlLlwiICsgKG5hbWUgKz0gXCJcIik7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSk7XG59XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCQxKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRleHRGdW5jdGlvbiQxKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlMSA9PSBudWxsID8gXCJcIiA6IHZhbHVlMTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvbl90ZXh0KHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLnR3ZWVuKFwidGV4dFwiLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyB0ZXh0RnVuY3Rpb24kMSh0d2VlblZhbHVlKHRoaXMsIFwidGV4dFwiLCB2YWx1ZSkpXG4gICAgICA6IHRleHRDb25zdGFudCQxKHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiKSk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25fdHJhbnNpdGlvbigpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQwID0gdGhpcy5faWQsXG4gICAgICBpZDEgPSBuZXdJZCgpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHZhciBpbmhlcml0ID0gZ2V0JDEobm9kZSwgaWQwKTtcbiAgICAgICAgc2NoZWR1bGUobm9kZSwgbmFtZSwgaWQxLCBpLCBncm91cCwge1xuICAgICAgICAgIHRpbWU6IGluaGVyaXQudGltZSArIGluaGVyaXQuZGVsYXkgKyBpbmhlcml0LmR1cmF0aW9uLFxuICAgICAgICAgIGRlbGF5OiAwLFxuICAgICAgICAgIGR1cmF0aW9uOiBpbmhlcml0LmR1cmF0aW9uLFxuICAgICAgICAgIGVhc2U6IGluaGVyaXQuZWFzZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZDEpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uX2VuZCgpIHtcbiAgdmFyIG9uMCwgb24xLCB0aGF0ID0gdGhpcywgaWQgPSB0aGF0Ll9pZCwgc2l6ZSA9IHRoYXQuc2l6ZSgpO1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIGNhbmNlbCA9IHt2YWx1ZTogcmVqZWN0fSxcbiAgICAgICAgZW5kID0ge3ZhbHVlOiBmdW5jdGlvbigpIHsgaWYgKC0tc2l6ZSA9PT0gMCkgcmVzb2x2ZSgpOyB9fTtcblxuICAgIHRoYXQuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzY2hlZHVsZSQkMSA9IHNldCQxKHRoaXMsIGlkKSxcbiAgICAgICAgICBvbiA9IHNjaGVkdWxlJCQxLm9uO1xuXG4gICAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCBkaXNwYXRjaCBhbmQgd2XigJlyZSBkb25lIVxuICAgICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgICAgaWYgKG9uICE9PSBvbjApIHtcbiAgICAgICAgb24xID0gKG9uMCA9IG9uKS5jb3B5KCk7XG4gICAgICAgIG9uMS5fLmNhbmNlbC5wdXNoKGNhbmNlbCk7XG4gICAgICAgIG9uMS5fLmludGVycnVwdC5wdXNoKGNhbmNlbCk7XG4gICAgICAgIG9uMS5fLmVuZC5wdXNoKGVuZCk7XG4gICAgICB9XG5cbiAgICAgIHNjaGVkdWxlJCQxLm9uID0gb24xO1xuICAgIH0pO1xuICB9KTtcbn1cblxudmFyIGlkID0gMDtcblxuZnVuY3Rpb24gVHJhbnNpdGlvbihncm91cHMsIHBhcmVudHMsIG5hbWUsIGlkKSB7XG4gIHRoaXMuX2dyb3VwcyA9IGdyb3VwcztcbiAgdGhpcy5fcGFyZW50cyA9IHBhcmVudHM7XG4gIHRoaXMuX25hbWUgPSBuYW1lO1xuICB0aGlzLl9pZCA9IGlkO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHNlbGVjdGlvbigpLnRyYW5zaXRpb24obmFtZSk7XG59XG5cbmZ1bmN0aW9uIG5ld0lkKCkge1xuICByZXR1cm4gKytpZDtcbn1cblxudmFyIHNlbGVjdGlvbl9wcm90b3R5cGUgPSBzZWxlY3Rpb24ucHJvdG90eXBlO1xuXG5UcmFuc2l0aW9uLnByb3RvdHlwZSA9IHRyYW5zaXRpb24ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVHJhbnNpdGlvbixcbiAgc2VsZWN0OiB0cmFuc2l0aW9uX3NlbGVjdCxcbiAgc2VsZWN0QWxsOiB0cmFuc2l0aW9uX3NlbGVjdEFsbCxcbiAgZmlsdGVyOiB0cmFuc2l0aW9uX2ZpbHRlcixcbiAgbWVyZ2U6IHRyYW5zaXRpb25fbWVyZ2UsXG4gIHNlbGVjdGlvbjogdHJhbnNpdGlvbl9zZWxlY3Rpb24sXG4gIHRyYW5zaXRpb246IHRyYW5zaXRpb25fdHJhbnNpdGlvbixcbiAgY2FsbDogc2VsZWN0aW9uX3Byb3RvdHlwZS5jYWxsLFxuICBub2Rlczogc2VsZWN0aW9uX3Byb3RvdHlwZS5ub2RlcyxcbiAgbm9kZTogc2VsZWN0aW9uX3Byb3RvdHlwZS5ub2RlLFxuICBzaXplOiBzZWxlY3Rpb25fcHJvdG90eXBlLnNpemUsXG4gIGVtcHR5OiBzZWxlY3Rpb25fcHJvdG90eXBlLmVtcHR5LFxuICBlYWNoOiBzZWxlY3Rpb25fcHJvdG90eXBlLmVhY2gsXG4gIG9uOiB0cmFuc2l0aW9uX29uLFxuICBhdHRyOiB0cmFuc2l0aW9uX2F0dHIsXG4gIGF0dHJUd2VlbjogdHJhbnNpdGlvbl9hdHRyVHdlZW4sXG4gIHN0eWxlOiB0cmFuc2l0aW9uX3N0eWxlLFxuICBzdHlsZVR3ZWVuOiB0cmFuc2l0aW9uX3N0eWxlVHdlZW4sXG4gIHRleHQ6IHRyYW5zaXRpb25fdGV4dCxcbiAgcmVtb3ZlOiB0cmFuc2l0aW9uX3JlbW92ZSxcbiAgdHdlZW46IHRyYW5zaXRpb25fdHdlZW4sXG4gIGRlbGF5OiB0cmFuc2l0aW9uX2RlbGF5LFxuICBkdXJhdGlvbjogdHJhbnNpdGlvbl9kdXJhdGlvbixcbiAgZWFzZTogdHJhbnNpdGlvbl9lYXNlLFxuICBlbmQ6IHRyYW5zaXRpb25fZW5kXG59O1xuXG5mdW5jdGlvbiBsaW5lYXIkMSh0KSB7XG4gIHJldHVybiArdDtcbn1cblxuZnVuY3Rpb24gcXVhZEluKHQpIHtcbiAgcmV0dXJuIHQgKiB0O1xufVxuXG5mdW5jdGlvbiBxdWFkT3V0KHQpIHtcbiAgcmV0dXJuIHQgKiAoMiAtIHQpO1xufVxuXG5mdW5jdGlvbiBxdWFkSW5PdXQodCkge1xuICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyB0ICogdCA6IC0tdCAqICgyIC0gdCkgKyAxKSAvIDI7XG59XG5cbmZ1bmN0aW9uIGN1YmljSW4odCkge1xuICByZXR1cm4gdCAqIHQgKiB0O1xufVxuXG5mdW5jdGlvbiBjdWJpY091dCh0KSB7XG4gIHJldHVybiAtLXQgKiB0ICogdCArIDE7XG59XG5cbmZ1bmN0aW9uIGN1YmljSW5PdXQodCkge1xuICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyB0ICogdCAqIHQgOiAodCAtPSAyKSAqIHQgKiB0ICsgMikgLyAyO1xufVxuXG52YXIgZXhwb25lbnQgPSAzO1xuXG52YXIgcG9seUluID0gKGZ1bmN0aW9uIGN1c3RvbShlKSB7XG4gIGUgPSArZTtcblxuICBmdW5jdGlvbiBwb2x5SW4odCkge1xuICAgIHJldHVybiBNYXRoLnBvdyh0LCBlKTtcbiAgfVxuXG4gIHBvbHlJbi5leHBvbmVudCA9IGN1c3RvbTtcblxuICByZXR1cm4gcG9seUluO1xufSkoZXhwb25lbnQpO1xuXG52YXIgcG9seU91dCA9IChmdW5jdGlvbiBjdXN0b20oZSkge1xuICBlID0gK2U7XG5cbiAgZnVuY3Rpb24gcG9seU91dCh0KSB7XG4gICAgcmV0dXJuIDEgLSBNYXRoLnBvdygxIC0gdCwgZSk7XG4gIH1cblxuICBwb2x5T3V0LmV4cG9uZW50ID0gY3VzdG9tO1xuXG4gIHJldHVybiBwb2x5T3V0O1xufSkoZXhwb25lbnQpO1xuXG52YXIgcG9seUluT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShlKSB7XG4gIGUgPSArZTtcblxuICBmdW5jdGlvbiBwb2x5SW5PdXQodCkge1xuICAgIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IE1hdGgucG93KHQsIGUpIDogMiAtIE1hdGgucG93KDIgLSB0LCBlKSkgLyAyO1xuICB9XG5cbiAgcG9seUluT3V0LmV4cG9uZW50ID0gY3VzdG9tO1xuXG4gIHJldHVybiBwb2x5SW5PdXQ7XG59KShleHBvbmVudCk7XG5cbnZhciBwaSA9IE1hdGguUEksXG4gICAgaGFsZlBpID0gcGkgLyAyO1xuXG5mdW5jdGlvbiBzaW5Jbih0KSB7XG4gIHJldHVybiAxIC0gTWF0aC5jb3ModCAqIGhhbGZQaSk7XG59XG5cbmZ1bmN0aW9uIHNpbk91dCh0KSB7XG4gIHJldHVybiBNYXRoLnNpbih0ICogaGFsZlBpKTtcbn1cblxuZnVuY3Rpb24gc2luSW5PdXQodCkge1xuICByZXR1cm4gKDEgLSBNYXRoLmNvcyhwaSAqIHQpKSAvIDI7XG59XG5cbmZ1bmN0aW9uIGV4cEluKHQpIHtcbiAgcmV0dXJuIE1hdGgucG93KDIsIDEwICogdCAtIDEwKTtcbn1cblxuZnVuY3Rpb24gZXhwT3V0KHQpIHtcbiAgcmV0dXJuIDEgLSBNYXRoLnBvdygyLCAtMTAgKiB0KTtcbn1cblxuZnVuY3Rpb24gZXhwSW5PdXQodCkge1xuICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyBNYXRoLnBvdygyLCAxMCAqIHQgLSAxMCkgOiAyIC0gTWF0aC5wb3coMiwgMTAgLSAxMCAqIHQpKSAvIDI7XG59XG5cbmZ1bmN0aW9uIGNpcmNsZUluKHQpIHtcbiAgcmV0dXJuIDEgLSBNYXRoLnNxcnQoMSAtIHQgKiB0KTtcbn1cblxuZnVuY3Rpb24gY2lyY2xlT3V0KHQpIHtcbiAgcmV0dXJuIE1hdGguc3FydCgxIC0gLS10ICogdCk7XG59XG5cbmZ1bmN0aW9uIGNpcmNsZUluT3V0KHQpIHtcbiAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gMSAtIE1hdGguc3FydCgxIC0gdCAqIHQpIDogTWF0aC5zcXJ0KDEgLSAodCAtPSAyKSAqIHQpICsgMSkgLyAyO1xufVxuXG52YXIgYjEgPSA0IC8gMTEsXG4gICAgYjIgPSA2IC8gMTEsXG4gICAgYjMgPSA4IC8gMTEsXG4gICAgYjQgPSAzIC8gNCxcbiAgICBiNSA9IDkgLyAxMSxcbiAgICBiNiA9IDEwIC8gMTEsXG4gICAgYjcgPSAxNSAvIDE2LFxuICAgIGI4ID0gMjEgLyAyMixcbiAgICBiOSA9IDYzIC8gNjQsXG4gICAgYjAgPSAxIC8gYjEgLyBiMTtcblxuZnVuY3Rpb24gYm91bmNlSW4odCkge1xuICByZXR1cm4gMSAtIGJvdW5jZU91dCgxIC0gdCk7XG59XG5cbmZ1bmN0aW9uIGJvdW5jZU91dCh0KSB7XG4gIHJldHVybiAodCA9ICt0KSA8IGIxID8gYjAgKiB0ICogdCA6IHQgPCBiMyA/IGIwICogKHQgLT0gYjIpICogdCArIGI0IDogdCA8IGI2ID8gYjAgKiAodCAtPSBiNSkgKiB0ICsgYjcgOiBiMCAqICh0IC09IGI4KSAqIHQgKyBiOTtcbn1cblxuZnVuY3Rpb24gYm91bmNlSW5PdXQodCkge1xuICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyAxIC0gYm91bmNlT3V0KDEgLSB0KSA6IGJvdW5jZU91dCh0IC0gMSkgKyAxKSAvIDI7XG59XG5cbnZhciBvdmVyc2hvb3QgPSAxLjcwMTU4O1xuXG52YXIgYmFja0luID0gKGZ1bmN0aW9uIGN1c3RvbShzKSB7XG4gIHMgPSArcztcblxuICBmdW5jdGlvbiBiYWNrSW4odCkge1xuICAgIHJldHVybiB0ICogdCAqICgocyArIDEpICogdCAtIHMpO1xuICB9XG5cbiAgYmFja0luLm92ZXJzaG9vdCA9IGN1c3RvbTtcblxuICByZXR1cm4gYmFja0luO1xufSkob3ZlcnNob290KTtcblxudmFyIGJhY2tPdXQgPSAoZnVuY3Rpb24gY3VzdG9tKHMpIHtcbiAgcyA9ICtzO1xuXG4gIGZ1bmN0aW9uIGJhY2tPdXQodCkge1xuICAgIHJldHVybiAtLXQgKiB0ICogKChzICsgMSkgKiB0ICsgcykgKyAxO1xuICB9XG5cbiAgYmFja091dC5vdmVyc2hvb3QgPSBjdXN0b207XG5cbiAgcmV0dXJuIGJhY2tPdXQ7XG59KShvdmVyc2hvb3QpO1xuXG52YXIgYmFja0luT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShzKSB7XG4gIHMgPSArcztcblxuICBmdW5jdGlvbiBiYWNrSW5PdXQodCkge1xuICAgIHJldHVybiAoKHQgKj0gMikgPCAxID8gdCAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKSA6ICh0IC09IDIpICogdCAqICgocyArIDEpICogdCArIHMpICsgMikgLyAyO1xuICB9XG5cbiAgYmFja0luT3V0Lm92ZXJzaG9vdCA9IGN1c3RvbTtcblxuICByZXR1cm4gYmFja0luT3V0O1xufSkob3ZlcnNob290KTtcblxudmFyIHRhdSA9IDIgKiBNYXRoLlBJLFxuICAgIGFtcGxpdHVkZSA9IDEsXG4gICAgcGVyaW9kID0gMC4zO1xuXG52YXIgZWxhc3RpY0luID0gKGZ1bmN0aW9uIGN1c3RvbShhLCBwKSB7XG4gIHZhciBzID0gTWF0aC5hc2luKDEgLyAoYSA9IE1hdGgubWF4KDEsIGEpKSkgKiAocCAvPSB0YXUpO1xuXG4gIGZ1bmN0aW9uIGVsYXN0aWNJbih0KSB7XG4gICAgcmV0dXJuIGEgKiBNYXRoLnBvdygyLCAxMCAqIC0tdCkgKiBNYXRoLnNpbigocyAtIHQpIC8gcCk7XG4gIH1cblxuICBlbGFzdGljSW4uYW1wbGl0dWRlID0gZnVuY3Rpb24oYSkgeyByZXR1cm4gY3VzdG9tKGEsIHAgKiB0YXUpOyB9O1xuICBlbGFzdGljSW4ucGVyaW9kID0gZnVuY3Rpb24ocCkgeyByZXR1cm4gY3VzdG9tKGEsIHApOyB9O1xuXG4gIHJldHVybiBlbGFzdGljSW47XG59KShhbXBsaXR1ZGUsIHBlcmlvZCk7XG5cbnZhciBlbGFzdGljT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShhLCBwKSB7XG4gIHZhciBzID0gTWF0aC5hc2luKDEgLyAoYSA9IE1hdGgubWF4KDEsIGEpKSkgKiAocCAvPSB0YXUpO1xuXG4gIGZ1bmN0aW9uIGVsYXN0aWNPdXQodCkge1xuICAgIHJldHVybiAxIC0gYSAqIE1hdGgucG93KDIsIC0xMCAqICh0ID0gK3QpKSAqIE1hdGguc2luKCh0ICsgcykgLyBwKTtcbiAgfVxuXG4gIGVsYXN0aWNPdXQuYW1wbGl0dWRlID0gZnVuY3Rpb24oYSkgeyByZXR1cm4gY3VzdG9tKGEsIHAgKiB0YXUpOyB9O1xuICBlbGFzdGljT3V0LnBlcmlvZCA9IGZ1bmN0aW9uKHApIHsgcmV0dXJuIGN1c3RvbShhLCBwKTsgfTtcblxuICByZXR1cm4gZWxhc3RpY091dDtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcblxudmFyIGVsYXN0aWNJbk91dCA9IChmdW5jdGlvbiBjdXN0b20oYSwgcCkge1xuICB2YXIgcyA9IE1hdGguYXNpbigxIC8gKGEgPSBNYXRoLm1heCgxLCBhKSkpICogKHAgLz0gdGF1KTtcblxuICBmdW5jdGlvbiBlbGFzdGljSW5PdXQodCkge1xuICAgIHJldHVybiAoKHQgPSB0ICogMiAtIDEpIDwgMFxuICAgICAgICA/IGEgKiBNYXRoLnBvdygyLCAxMCAqIHQpICogTWF0aC5zaW4oKHMgLSB0KSAvIHApXG4gICAgICAgIDogMiAtIGEgKiBNYXRoLnBvdygyLCAtMTAgKiB0KSAqIE1hdGguc2luKChzICsgdCkgLyBwKSkgLyAyO1xuICB9XG5cbiAgZWxhc3RpY0luT3V0LmFtcGxpdHVkZSA9IGZ1bmN0aW9uKGEpIHsgcmV0dXJuIGN1c3RvbShhLCBwICogdGF1KTsgfTtcbiAgZWxhc3RpY0luT3V0LnBlcmlvZCA9IGZ1bmN0aW9uKHApIHsgcmV0dXJuIGN1c3RvbShhLCBwKTsgfTtcblxuICByZXR1cm4gZWxhc3RpY0luT3V0O1xufSkoYW1wbGl0dWRlLCBwZXJpb2QpO1xuXG52YXIgZGVmYXVsdFRpbWluZyA9IHtcbiAgdGltZTogbnVsbCwgLy8gU2V0IG9uIHVzZS5cbiAgZGVsYXk6IDAsXG4gIGR1cmF0aW9uOiAyNTAsXG4gIGVhc2U6IGN1YmljSW5PdXRcbn07XG5cbmZ1bmN0aW9uIGluaGVyaXQobm9kZSwgaWQpIHtcbiAgdmFyIHRpbWluZztcbiAgd2hpbGUgKCEodGltaW5nID0gbm9kZS5fX3RyYW5zaXRpb24pIHx8ICEodGltaW5nID0gdGltaW5nW2lkXSkpIHtcbiAgICBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRUaW1pbmcudGltZSA9IG5vdygpLCBkZWZhdWx0VGltaW5nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGltaW5nO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fdHJhbnNpdGlvbihuYW1lKSB7XG4gIHZhciBpZCxcbiAgICAgIHRpbWluZztcblxuICBpZiAobmFtZSBpbnN0YW5jZW9mIFRyYW5zaXRpb24pIHtcbiAgICBpZCA9IG5hbWUuX2lkLCBuYW1lID0gbmFtZS5fbmFtZTtcbiAgfSBlbHNlIHtcbiAgICBpZCA9IG5ld0lkKCksICh0aW1pbmcgPSBkZWZhdWx0VGltaW5nKS50aW1lID0gbm93KCksIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG4gIH1cblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZCwgaSwgZ3JvdXAsIHRpbWluZyB8fCBpbmhlcml0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuXG5zZWxlY3Rpb24ucHJvdG90eXBlLmludGVycnVwdCA9IHNlbGVjdGlvbl9pbnRlcnJ1cHQ7XG5zZWxlY3Rpb24ucHJvdG90eXBlLnRyYW5zaXRpb24gPSBzZWxlY3Rpb25fdHJhbnNpdGlvbjtcblxudmFyIHJvb3QkMSA9IFtudWxsXTtcblxuZnVuY3Rpb24gYWN0aXZlKG5vZGUsIG5hbWUpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uLFxuICAgICAgc2NoZWR1bGUkJDEsXG4gICAgICBpO1xuXG4gIGlmIChzY2hlZHVsZXMpIHtcbiAgICBuYW1lID0gbmFtZSA9PSBudWxsID8gbnVsbCA6IG5hbWUgKyBcIlwiO1xuICAgIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICAgIGlmICgoc2NoZWR1bGUkJDEgPSBzY2hlZHVsZXNbaV0pLnN0YXRlID4gU0NIRURVTEVEICYmIHNjaGVkdWxlJCQxLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKFtbbm9kZV1dLCByb290JDEsIG5hbWUsICtpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gY29uc3RhbnQkNCh4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gQnJ1c2hFdmVudCh0YXJnZXQsIHR5cGUsIHNlbGVjdGlvbikge1xuICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy5zZWxlY3Rpb24gPSBzZWxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIG5vcHJvcGFnYXRpb24kMSgpIHtcbiAgZXhwb3J0cy5ldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cblxuZnVuY3Rpb24gbm9ldmVudCQxKCkge1xuICBleHBvcnRzLmV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGV4cG9ydHMuZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG5cbnZhciBNT0RFX0RSQUcgPSB7bmFtZTogXCJkcmFnXCJ9LFxuICAgIE1PREVfU1BBQ0UgPSB7bmFtZTogXCJzcGFjZVwifSxcbiAgICBNT0RFX0hBTkRMRSA9IHtuYW1lOiBcImhhbmRsZVwifSxcbiAgICBNT0RFX0NFTlRFUiA9IHtuYW1lOiBcImNlbnRlclwifTtcblxudmFyIFggPSB7XG4gIG5hbWU6IFwieFwiLFxuICBoYW5kbGVzOiBbXCJlXCIsIFwid1wiXS5tYXAodHlwZSksXG4gIGlucHV0OiBmdW5jdGlvbih4LCBlKSB7IHJldHVybiB4ICYmIFtbeFswXSwgZVswXVsxXV0sIFt4WzFdLCBlWzFdWzFdXV07IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ICYmIFt4eVswXVswXSwgeHlbMV1bMF1dOyB9XG59O1xuXG52YXIgWSA9IHtcbiAgbmFtZTogXCJ5XCIsXG4gIGhhbmRsZXM6IFtcIm5cIiwgXCJzXCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHksIGUpIHsgcmV0dXJuIHkgJiYgW1tlWzBdWzBdLCB5WzBdXSwgW2VbMV1bMF0sIHlbMV1dXTsgfSxcbiAgb3V0cHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHkgJiYgW3h5WzBdWzFdLCB4eVsxXVsxXV07IH1cbn07XG5cbnZhciBYWSA9IHtcbiAgbmFtZTogXCJ4eVwiLFxuICBoYW5kbGVzOiBbXCJuXCIsIFwiZVwiLCBcInNcIiwgXCJ3XCIsIFwibndcIiwgXCJuZVwiLCBcInNlXCIsIFwic3dcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5OyB9LFxuICBvdXRwdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eTsgfVxufTtcblxudmFyIGN1cnNvcnMgPSB7XG4gIG92ZXJsYXk6IFwiY3Jvc3NoYWlyXCIsXG4gIHNlbGVjdGlvbjogXCJtb3ZlXCIsXG4gIG46IFwibnMtcmVzaXplXCIsXG4gIGU6IFwiZXctcmVzaXplXCIsXG4gIHM6IFwibnMtcmVzaXplXCIsXG4gIHc6IFwiZXctcmVzaXplXCIsXG4gIG53OiBcIm53c2UtcmVzaXplXCIsXG4gIG5lOiBcIm5lc3ctcmVzaXplXCIsXG4gIHNlOiBcIm53c2UtcmVzaXplXCIsXG4gIHN3OiBcIm5lc3ctcmVzaXplXCJcbn07XG5cbnZhciBmbGlwWCA9IHtcbiAgZTogXCJ3XCIsXG4gIHc6IFwiZVwiLFxuICBudzogXCJuZVwiLFxuICBuZTogXCJud1wiLFxuICBzZTogXCJzd1wiLFxuICBzdzogXCJzZVwiXG59O1xuXG52YXIgZmxpcFkgPSB7XG4gIG46IFwic1wiLFxuICBzOiBcIm5cIixcbiAgbnc6IFwic3dcIixcbiAgbmU6IFwic2VcIixcbiAgc2U6IFwibmVcIixcbiAgc3c6IFwibndcIlxufTtcblxudmFyIHNpZ25zWCA9IHtcbiAgb3ZlcmxheTogKzEsXG4gIHNlbGVjdGlvbjogKzEsXG4gIG46IG51bGwsXG4gIGU6ICsxLFxuICBzOiBudWxsLFxuICB3OiAtMSxcbiAgbnc6IC0xLFxuICBuZTogKzEsXG4gIHNlOiArMSxcbiAgc3c6IC0xXG59O1xuXG52YXIgc2lnbnNZID0ge1xuICBvdmVybGF5OiArMSxcbiAgc2VsZWN0aW9uOiArMSxcbiAgbjogLTEsXG4gIGU6IG51bGwsXG4gIHM6ICsxLFxuICB3OiBudWxsLFxuICBudzogLTEsXG4gIG5lOiAtMSxcbiAgc2U6ICsxLFxuICBzdzogKzFcbn07XG5cbmZ1bmN0aW9uIHR5cGUodCkge1xuICByZXR1cm4ge3R5cGU6IHR9O1xufVxuXG4vLyBJZ25vcmUgcmlnaHQtY2xpY2ssIHNpbmNlIHRoYXQgc2hvdWxkIG9wZW4gdGhlIGNvbnRleHQgbWVudS5cbmZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXIkMSgpIHtcbiAgcmV0dXJuICFleHBvcnRzLmV2ZW50LmJ1dHRvbjtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEV4dGVudCgpIHtcbiAgdmFyIHN2ZyA9IHRoaXMub3duZXJTVkdFbGVtZW50IHx8IHRoaXM7XG4gIHJldHVybiBbWzAsIDBdLCBbc3ZnLndpZHRoLmJhc2VWYWwudmFsdWUsIHN2Zy5oZWlnaHQuYmFzZVZhbC52YWx1ZV1dO1xufVxuXG4vLyBMaWtlIGQzLmxvY2FsLCBidXQgd2l0aCB0aGUgbmFtZSDigJxfX2JydXNo4oCdIHJhdGhlciB0aGFuIGF1dG8tZ2VuZXJhdGVkLlxuZnVuY3Rpb24gbG9jYWwkMShub2RlKSB7XG4gIHdoaWxlICghbm9kZS5fX2JydXNoKSBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgcmV0dXJuO1xuICByZXR1cm4gbm9kZS5fX2JydXNoO1xufVxuXG5mdW5jdGlvbiBlbXB0eSQxKGV4dGVudCkge1xuICByZXR1cm4gZXh0ZW50WzBdWzBdID09PSBleHRlbnRbMV1bMF1cbiAgICAgIHx8IGV4dGVudFswXVsxXSA9PT0gZXh0ZW50WzFdWzFdO1xufVxuXG5mdW5jdGlvbiBicnVzaFNlbGVjdGlvbihub2RlKSB7XG4gIHZhciBzdGF0ZSA9IG5vZGUuX19icnVzaDtcbiAgcmV0dXJuIHN0YXRlID8gc3RhdGUuZGltLm91dHB1dChzdGF0ZS5zZWxlY3Rpb24pIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gYnJ1c2hYKCkge1xuICByZXR1cm4gYnJ1c2gkMShYKTtcbn1cblxuZnVuY3Rpb24gYnJ1c2hZKCkge1xuICByZXR1cm4gYnJ1c2gkMShZKTtcbn1cblxuZnVuY3Rpb24gYnJ1c2goKSB7XG4gIHJldHVybiBicnVzaCQxKFhZKTtcbn1cblxuZnVuY3Rpb24gYnJ1c2gkMShkaW0pIHtcbiAgdmFyIGV4dGVudCA9IGRlZmF1bHRFeHRlbnQsXG4gICAgICBmaWx0ZXIgPSBkZWZhdWx0RmlsdGVyJDEsXG4gICAgICBsaXN0ZW5lcnMgPSBkaXNwYXRjaChicnVzaCwgXCJzdGFydFwiLCBcImJydXNoXCIsIFwiZW5kXCIpLFxuICAgICAgaGFuZGxlU2l6ZSA9IDYsXG4gICAgICB0b3VjaGVuZGluZztcblxuICBmdW5jdGlvbiBicnVzaChncm91cCkge1xuICAgIHZhciBvdmVybGF5ID0gZ3JvdXBcbiAgICAgICAgLnByb3BlcnR5KFwiX19icnVzaFwiLCBpbml0aWFsaXplKVxuICAgICAgLnNlbGVjdEFsbChcIi5vdmVybGF5XCIpXG4gICAgICAuZGF0YShbdHlwZShcIm92ZXJsYXlcIildKTtcblxuICAgIG92ZXJsYXkuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJvdmVybGF5XCIpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIilcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5vdmVybGF5KVxuICAgICAgLm1lcmdlKG92ZXJsYXkpXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBleHRlbnQgPSBsb2NhbCQxKHRoaXMpLmV4dGVudDtcbiAgICAgICAgICBzZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGV4dGVudFswXVswXSlcbiAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGV4dGVudFswXVsxXSlcbiAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBleHRlbnRbMV1bMF0gLSBleHRlbnRbMF1bMF0pXG4gICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGV4dGVudFsxXVsxXSAtIGV4dGVudFswXVsxXSk7XG4gICAgICAgIH0pO1xuXG4gICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvblwiKVxuICAgICAgLmRhdGEoW3R5cGUoXCJzZWxlY3Rpb25cIildKVxuICAgICAgLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwic2VsZWN0aW9uXCIpXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMuc2VsZWN0aW9uKVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCIjNzc3XCIpXG4gICAgICAgIC5hdHRyKFwiZmlsbC1vcGFjaXR5XCIsIDAuMylcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCIjZmZmXCIpXG4gICAgICAgIC5hdHRyKFwic2hhcGUtcmVuZGVyaW5nXCIsIFwiY3Jpc3BFZGdlc1wiKTtcblxuICAgIHZhciBoYW5kbGUgPSBncm91cC5zZWxlY3RBbGwoXCIuaGFuZGxlXCIpXG4gICAgICAuZGF0YShkaW0uaGFuZGxlcywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlOyB9KTtcblxuICAgIGhhbmRsZS5leGl0KCkucmVtb3ZlKCk7XG5cbiAgICBoYW5kbGUuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gXCJoYW5kbGUgaGFuZGxlLS1cIiArIGQudHlwZTsgfSlcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gY3Vyc29yc1tkLnR5cGVdOyB9KTtcblxuICAgIGdyb3VwXG4gICAgICAgIC5lYWNoKHJlZHJhdylcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpXG4gICAgICAgIC5zdHlsZShcIi13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvclwiLCBcInJnYmEoMCwwLDAsMClcIilcbiAgICAgICAgLm9uKFwibW91c2Vkb3duLmJydXNoIHRvdWNoc3RhcnQuYnJ1c2hcIiwgc3RhcnRlZCk7XG4gIH1cblxuICBicnVzaC5tb3ZlID0gZnVuY3Rpb24oZ3JvdXAsIHNlbGVjdGlvbiQkMSkge1xuICAgIGlmIChncm91cC5zZWxlY3Rpb24pIHtcbiAgICAgIGdyb3VwXG4gICAgICAgICAgLm9uKFwic3RhcnQuYnJ1c2hcIiwgZnVuY3Rpb24oKSB7IGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5iZWZvcmVzdGFydCgpLnN0YXJ0KCk7IH0pXG4gICAgICAgICAgLm9uKFwiaW50ZXJydXB0LmJydXNoIGVuZC5icnVzaFwiLCBmdW5jdGlvbigpIHsgZW1pdHRlcih0aGlzLCBhcmd1bWVudHMpLmVuZCgpOyB9KVxuICAgICAgICAgIC50d2VlbihcImJydXNoXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIHN0YXRlID0gdGhhdC5fX2JydXNoLFxuICAgICAgICAgICAgICAgIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3VtZW50cyksXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMCA9IHN0YXRlLnNlbGVjdGlvbixcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24xID0gZGltLmlucHV0KHR5cGVvZiBzZWxlY3Rpb24kJDEgPT09IFwiZnVuY3Rpb25cIiA/IHNlbGVjdGlvbiQkMS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogc2VsZWN0aW9uJCQxLCBzdGF0ZS5leHRlbnQpLFxuICAgICAgICAgICAgICAgIGkgPSBpbnRlcnBvbGF0ZVZhbHVlKHNlbGVjdGlvbjAsIHNlbGVjdGlvbjEpO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiB0d2Vlbih0KSB7XG4gICAgICAgICAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IHQgPT09IDEgJiYgZW1wdHkkMShzZWxlY3Rpb24xKSA/IG51bGwgOiBpKHQpO1xuICAgICAgICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgICAgICAgZW1pdC5icnVzaCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0aW9uMCAmJiBzZWxlY3Rpb24xID8gdHdlZW4gOiB0d2VlbigxKTtcbiAgICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ3JvdXBcbiAgICAgICAgICAuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICAgIHN0YXRlID0gdGhhdC5fX2JydXNoLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbjEgPSBkaW0uaW5wdXQodHlwZW9mIHNlbGVjdGlvbiQkMSA9PT0gXCJmdW5jdGlvblwiID8gc2VsZWN0aW9uJCQxLmFwcGx5KHRoYXQsIGFyZ3MpIDogc2VsZWN0aW9uJCQxLCBzdGF0ZS5leHRlbnQpLFxuICAgICAgICAgICAgICAgIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3MpLmJlZm9yZXN0YXJ0KCk7XG5cbiAgICAgICAgICAgIGludGVycnVwdCh0aGF0KTtcbiAgICAgICAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IHNlbGVjdGlvbjEgPT0gbnVsbCB8fCBlbXB0eSQxKHNlbGVjdGlvbjEpID8gbnVsbCA6IHNlbGVjdGlvbjE7XG4gICAgICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgICAgIGVtaXQuc3RhcnQoKS5icnVzaCgpLmVuZCgpO1xuICAgICAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiByZWRyYXcoKSB7XG4gICAgdmFyIGdyb3VwID0gc2VsZWN0KHRoaXMpLFxuICAgICAgICBzZWxlY3Rpb24kJDEgPSBsb2NhbCQxKHRoaXMpLnNlbGVjdGlvbjtcblxuICAgIGlmIChzZWxlY3Rpb24kJDEpIHtcbiAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb25cIilcbiAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIHNlbGVjdGlvbiQkMVswXVswXSlcbiAgICAgICAgICAuYXR0cihcInlcIiwgc2VsZWN0aW9uJCQxWzBdWzFdKVxuICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgc2VsZWN0aW9uJCQxWzFdWzBdIC0gc2VsZWN0aW9uJCQxWzBdWzBdKVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHNlbGVjdGlvbiQkMVsxXVsxXSAtIHNlbGVjdGlvbiQkMVswXVsxXSk7XG5cbiAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5oYW5kbGVcIilcbiAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZVtkLnR5cGUubGVuZ3RoIC0gMV0gPT09IFwiZVwiID8gc2VsZWN0aW9uJCQxWzFdWzBdIC0gaGFuZGxlU2l6ZSAvIDIgOiBzZWxlY3Rpb24kJDFbMF1bMF0gLSBoYW5kbGVTaXplIC8gMjsgfSlcbiAgICAgICAgICAuYXR0cihcInlcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlWzBdID09PSBcInNcIiA/IHNlbGVjdGlvbiQkMVsxXVsxXSAtIGhhbmRsZVNpemUgLyAyIDogc2VsZWN0aW9uJCQxWzBdWzFdIC0gaGFuZGxlU2l6ZSAvIDI7IH0pXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGUgPT09IFwiblwiIHx8IGQudHlwZSA9PT0gXCJzXCIgPyBzZWxlY3Rpb24kJDFbMV1bMF0gLSBzZWxlY3Rpb24kJDFbMF1bMF0gKyBoYW5kbGVTaXplIDogaGFuZGxlU2l6ZTsgfSlcbiAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGUgPT09IFwiZVwiIHx8IGQudHlwZSA9PT0gXCJ3XCIgPyBzZWxlY3Rpb24kJDFbMV1bMV0gLSBzZWxlY3Rpb24kJDFbMF1bMV0gKyBoYW5kbGVTaXplIDogaGFuZGxlU2l6ZTsgfSk7XG4gICAgfVxuXG4gICAgZWxzZSB7XG4gICAgICBncm91cC5zZWxlY3RBbGwoXCIuc2VsZWN0aW9uLC5oYW5kbGVcIilcbiAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIFwibm9uZVwiKVxuICAgICAgICAgIC5hdHRyKFwieFwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBudWxsKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbWl0dGVyKHRoYXQsIGFyZ3MpIHtcbiAgICByZXR1cm4gdGhhdC5fX2JydXNoLmVtaXR0ZXIgfHwgbmV3IEVtaXR0ZXIodGhhdCwgYXJncyk7XG4gIH1cblxuICBmdW5jdGlvbiBFbWl0dGVyKHRoYXQsIGFyZ3MpIHtcbiAgICB0aGlzLnRoYXQgPSB0aGF0O1xuICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgdGhpcy5zdGF0ZSA9IHRoYXQuX19icnVzaDtcbiAgICB0aGlzLmFjdGl2ZSA9IDA7XG4gIH1cblxuICBFbWl0dGVyLnByb3RvdHlwZSA9IHtcbiAgICBiZWZvcmVzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoKyt0aGlzLmFjdGl2ZSA9PT0gMSkgdGhpcy5zdGF0ZS5lbWl0dGVyID0gdGhpcywgdGhpcy5zdGFydGluZyA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnN0YXJ0aW5nKSB0aGlzLnN0YXJ0aW5nID0gZmFsc2UsIHRoaXMuZW1pdChcInN0YXJ0XCIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBicnVzaDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmVtaXQoXCJicnVzaFwiKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgtLXRoaXMuYWN0aXZlID09PSAwKSBkZWxldGUgdGhpcy5zdGF0ZS5lbWl0dGVyLCB0aGlzLmVtaXQoXCJlbmRcIik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGVtaXQ6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgIGN1c3RvbUV2ZW50KG5ldyBCcnVzaEV2ZW50KGJydXNoLCB0eXBlLCBkaW0ub3V0cHV0KHRoaXMuc3RhdGUuc2VsZWN0aW9uKSksIGxpc3RlbmVycy5hcHBseSwgbGlzdGVuZXJzLCBbdHlwZSwgdGhpcy50aGF0LCB0aGlzLmFyZ3NdKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gc3RhcnRlZCgpIHtcbiAgICBpZiAoZXhwb3J0cy5ldmVudC50b3VjaGVzKSB7IGlmIChleHBvcnRzLmV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aCA8IGV4cG9ydHMuZXZlbnQudG91Y2hlcy5sZW5ndGgpIHJldHVybiBub2V2ZW50JDEoKTsgfVxuICAgIGVsc2UgaWYgKHRvdWNoZW5kaW5nKSByZXR1cm47XG4gICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuXG4gICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICB0eXBlID0gZXhwb3J0cy5ldmVudC50YXJnZXQuX19kYXRhX18udHlwZSxcbiAgICAgICAgbW9kZSA9IChleHBvcnRzLmV2ZW50Lm1ldGFLZXkgPyB0eXBlID0gXCJvdmVybGF5XCIgOiB0eXBlKSA9PT0gXCJzZWxlY3Rpb25cIiA/IE1PREVfRFJBRyA6IChleHBvcnRzLmV2ZW50LmFsdEtleSA/IE1PREVfQ0VOVEVSIDogTU9ERV9IQU5ETEUpLFxuICAgICAgICBzaWduWCA9IGRpbSA9PT0gWSA/IG51bGwgOiBzaWduc1hbdHlwZV0sXG4gICAgICAgIHNpZ25ZID0gZGltID09PSBYID8gbnVsbCA6IHNpZ25zWVt0eXBlXSxcbiAgICAgICAgc3RhdGUgPSBsb2NhbCQxKHRoYXQpLFxuICAgICAgICBleHRlbnQgPSBzdGF0ZS5leHRlbnQsXG4gICAgICAgIHNlbGVjdGlvbiQkMSA9IHN0YXRlLnNlbGVjdGlvbixcbiAgICAgICAgVyA9IGV4dGVudFswXVswXSwgdzAsIHcxLFxuICAgICAgICBOID0gZXh0ZW50WzBdWzFdLCBuMCwgbjEsXG4gICAgICAgIEUgPSBleHRlbnRbMV1bMF0sIGUwLCBlMSxcbiAgICAgICAgUyA9IGV4dGVudFsxXVsxXSwgczAsIHMxLFxuICAgICAgICBkeCxcbiAgICAgICAgZHksXG4gICAgICAgIG1vdmluZyxcbiAgICAgICAgc2hpZnRpbmcgPSBzaWduWCAmJiBzaWduWSAmJiBleHBvcnRzLmV2ZW50LnNoaWZ0S2V5LFxuICAgICAgICBsb2NrWCxcbiAgICAgICAgbG9ja1ksXG4gICAgICAgIHBvaW50MCA9IG1vdXNlKHRoYXQpLFxuICAgICAgICBwb2ludCQkMSA9IHBvaW50MCxcbiAgICAgICAgZW1pdCA9IGVtaXR0ZXIodGhhdCwgYXJndW1lbnRzKS5iZWZvcmVzdGFydCgpO1xuXG4gICAgaWYgKHR5cGUgPT09IFwib3ZlcmxheVwiKSB7XG4gICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBzZWxlY3Rpb24kJDEgPSBbXG4gICAgICAgIFt3MCA9IGRpbSA9PT0gWSA/IFcgOiBwb2ludDBbMF0sIG4wID0gZGltID09PSBYID8gTiA6IHBvaW50MFsxXV0sXG4gICAgICAgIFtlMCA9IGRpbSA9PT0gWSA/IEUgOiB3MCwgczAgPSBkaW0gPT09IFggPyBTIDogbjBdXG4gICAgICBdO1xuICAgIH0gZWxzZSB7XG4gICAgICB3MCA9IHNlbGVjdGlvbiQkMVswXVswXTtcbiAgICAgIG4wID0gc2VsZWN0aW9uJCQxWzBdWzFdO1xuICAgICAgZTAgPSBzZWxlY3Rpb24kJDFbMV1bMF07XG4gICAgICBzMCA9IHNlbGVjdGlvbiQkMVsxXVsxXTtcbiAgICB9XG5cbiAgICB3MSA9IHcwO1xuICAgIG4xID0gbjA7XG4gICAgZTEgPSBlMDtcbiAgICBzMSA9IHMwO1xuXG4gICAgdmFyIGdyb3VwID0gc2VsZWN0KHRoYXQpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJub25lXCIpO1xuXG4gICAgdmFyIG92ZXJsYXkgPSBncm91cC5zZWxlY3RBbGwoXCIub3ZlcmxheVwiKVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGVdKTtcblxuICAgIGlmIChleHBvcnRzLmV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIGdyb3VwXG4gICAgICAgICAgLm9uKFwidG91Y2htb3ZlLmJydXNoXCIsIG1vdmVkLCB0cnVlKVxuICAgICAgICAgIC5vbihcInRvdWNoZW5kLmJydXNoIHRvdWNoY2FuY2VsLmJydXNoXCIsIGVuZGVkLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHZpZXcgPSBzZWxlY3QoZXhwb3J0cy5ldmVudC52aWV3KVxuICAgICAgICAgIC5vbihcImtleWRvd24uYnJ1c2hcIiwga2V5ZG93bmVkLCB0cnVlKVxuICAgICAgICAgIC5vbihcImtleXVwLmJydXNoXCIsIGtleXVwcGVkLCB0cnVlKVxuICAgICAgICAgIC5vbihcIm1vdXNlbW92ZS5icnVzaFwiLCBtb3ZlZCwgdHJ1ZSlcbiAgICAgICAgICAub24oXCJtb3VzZXVwLmJydXNoXCIsIGVuZGVkLCB0cnVlKTtcblxuICAgICAgZHJhZ0Rpc2FibGUoZXhwb3J0cy5ldmVudC52aWV3KTtcbiAgICB9XG5cbiAgICBub3Byb3BhZ2F0aW9uJDEoKTtcbiAgICBpbnRlcnJ1cHQodGhhdCk7XG4gICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgZW1pdC5zdGFydCgpO1xuXG4gICAgZnVuY3Rpb24gbW92ZWQoKSB7XG4gICAgICB2YXIgcG9pbnQxID0gbW91c2UodGhhdCk7XG4gICAgICBpZiAoc2hpZnRpbmcgJiYgIWxvY2tYICYmICFsb2NrWSkge1xuICAgICAgICBpZiAoTWF0aC5hYnMocG9pbnQxWzBdIC0gcG9pbnQkJDFbMF0pID4gTWF0aC5hYnMocG9pbnQxWzFdIC0gcG9pbnQkJDFbMV0pKSBsb2NrWSA9IHRydWU7XG4gICAgICAgIGVsc2UgbG9ja1ggPSB0cnVlO1xuICAgICAgfVxuICAgICAgcG9pbnQkJDEgPSBwb2ludDE7XG4gICAgICBtb3ZpbmcgPSB0cnVlO1xuICAgICAgbm9ldmVudCQxKCk7XG4gICAgICBtb3ZlKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW92ZSgpIHtcbiAgICAgIHZhciB0O1xuXG4gICAgICBkeCA9IHBvaW50JCQxWzBdIC0gcG9pbnQwWzBdO1xuICAgICAgZHkgPSBwb2ludCQkMVsxXSAtIHBvaW50MFsxXTtcblxuICAgICAgc3dpdGNoIChtb2RlKSB7XG4gICAgICAgIGNhc2UgTU9ERV9TUEFDRTpcbiAgICAgICAgY2FzZSBNT0RFX0RSQUc6IHtcbiAgICAgICAgICBpZiAoc2lnblgpIGR4ID0gTWF0aC5tYXgoVyAtIHcwLCBNYXRoLm1pbihFIC0gZTAsIGR4KSksIHcxID0gdzAgKyBkeCwgZTEgPSBlMCArIGR4O1xuICAgICAgICAgIGlmIChzaWduWSkgZHkgPSBNYXRoLm1heChOIC0gbjAsIE1hdGgubWluKFMgLSBzMCwgZHkpKSwgbjEgPSBuMCArIGR5LCBzMSA9IHMwICsgZHk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBNT0RFX0hBTkRMRToge1xuICAgICAgICAgIGlmIChzaWduWCA8IDApIGR4ID0gTWF0aC5tYXgoVyAtIHcwLCBNYXRoLm1pbihFIC0gdzAsIGR4KSksIHcxID0gdzAgKyBkeCwgZTEgPSBlMDtcbiAgICAgICAgICBlbHNlIGlmIChzaWduWCA+IDApIGR4ID0gTWF0aC5tYXgoVyAtIGUwLCBNYXRoLm1pbihFIC0gZTAsIGR4KSksIHcxID0gdzAsIGUxID0gZTAgKyBkeDtcbiAgICAgICAgICBpZiAoc2lnblkgPCAwKSBkeSA9IE1hdGgubWF4KE4gLSBuMCwgTWF0aC5taW4oUyAtIG4wLCBkeSkpLCBuMSA9IG4wICsgZHksIHMxID0gczA7XG4gICAgICAgICAgZWxzZSBpZiAoc2lnblkgPiAwKSBkeSA9IE1hdGgubWF4KE4gLSBzMCwgTWF0aC5taW4oUyAtIHMwLCBkeSkpLCBuMSA9IG4wLCBzMSA9IHMwICsgZHk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBNT0RFX0NFTlRFUjoge1xuICAgICAgICAgIGlmIChzaWduWCkgdzEgPSBNYXRoLm1heChXLCBNYXRoLm1pbihFLCB3MCAtIGR4ICogc2lnblgpKSwgZTEgPSBNYXRoLm1heChXLCBNYXRoLm1pbihFLCBlMCArIGR4ICogc2lnblgpKTtcbiAgICAgICAgICBpZiAoc2lnblkpIG4xID0gTWF0aC5tYXgoTiwgTWF0aC5taW4oUywgbjAgLSBkeSAqIHNpZ25ZKSksIHMxID0gTWF0aC5tYXgoTiwgTWF0aC5taW4oUywgczAgKyBkeSAqIHNpZ25ZKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGUxIDwgdzEpIHtcbiAgICAgICAgc2lnblggKj0gLTE7XG4gICAgICAgIHQgPSB3MCwgdzAgPSBlMCwgZTAgPSB0O1xuICAgICAgICB0ID0gdzEsIHcxID0gZTEsIGUxID0gdDtcbiAgICAgICAgaWYgKHR5cGUgaW4gZmxpcFgpIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGUgPSBmbGlwWFt0eXBlXV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoczEgPCBuMSkge1xuICAgICAgICBzaWduWSAqPSAtMTtcbiAgICAgICAgdCA9IG4wLCBuMCA9IHMwLCBzMCA9IHQ7XG4gICAgICAgIHQgPSBuMSwgbjEgPSBzMSwgczEgPSB0O1xuICAgICAgICBpZiAodHlwZSBpbiBmbGlwWSkgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZSA9IGZsaXBZW3R5cGVdXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZS5zZWxlY3Rpb24pIHNlbGVjdGlvbiQkMSA9IHN0YXRlLnNlbGVjdGlvbjsgLy8gTWF5IGJlIHNldCBieSBicnVzaC5tb3ZlIVxuICAgICAgaWYgKGxvY2tYKSB3MSA9IHNlbGVjdGlvbiQkMVswXVswXSwgZTEgPSBzZWxlY3Rpb24kJDFbMV1bMF07XG4gICAgICBpZiAobG9ja1kpIG4xID0gc2VsZWN0aW9uJCQxWzBdWzFdLCBzMSA9IHNlbGVjdGlvbiQkMVsxXVsxXTtcblxuICAgICAgaWYgKHNlbGVjdGlvbiQkMVswXVswXSAhPT0gdzFcbiAgICAgICAgICB8fCBzZWxlY3Rpb24kJDFbMF1bMV0gIT09IG4xXG4gICAgICAgICAgfHwgc2VsZWN0aW9uJCQxWzFdWzBdICE9PSBlMVxuICAgICAgICAgIHx8IHNlbGVjdGlvbiQkMVsxXVsxXSAhPT0gczEpIHtcbiAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gW1t3MSwgbjFdLCBbZTEsIHMxXV07XG4gICAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgICBlbWl0LmJydXNoKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW5kZWQoKSB7XG4gICAgICBub3Byb3BhZ2F0aW9uJDEoKTtcbiAgICAgIGlmIChleHBvcnRzLmV2ZW50LnRvdWNoZXMpIHtcbiAgICAgICAgaWYgKGV4cG9ydHMuZXZlbnQudG91Y2hlcy5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgaWYgKHRvdWNoZW5kaW5nKSBjbGVhclRpbWVvdXQodG91Y2hlbmRpbmcpO1xuICAgICAgICB0b3VjaGVuZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoZW5kaW5nID0gbnVsbDsgfSwgNTAwKTsgLy8gR2hvc3QgY2xpY2tzIGFyZSBkZWxheWVkIVxuICAgICAgICBncm91cC5vbihcInRvdWNobW92ZS5icnVzaCB0b3VjaGVuZC5icnVzaCB0b3VjaGNhbmNlbC5icnVzaFwiLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHllc2RyYWcoZXhwb3J0cy5ldmVudC52aWV3LCBtb3ZpbmcpO1xuICAgICAgICB2aWV3Lm9uKFwia2V5ZG93bi5icnVzaCBrZXl1cC5icnVzaCBtb3VzZW1vdmUuYnJ1c2ggbW91c2V1cC5icnVzaFwiLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIGdyb3VwLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKTtcbiAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLm92ZXJsYXkpO1xuICAgICAgaWYgKHN0YXRlLnNlbGVjdGlvbikgc2VsZWN0aW9uJCQxID0gc3RhdGUuc2VsZWN0aW9uOyAvLyBNYXkgYmUgc2V0IGJ5IGJydXNoLm1vdmUgKG9uIHN0YXJ0KSFcbiAgICAgIGlmIChlbXB0eSQxKHNlbGVjdGlvbiQkMSkpIHN0YXRlLnNlbGVjdGlvbiA9IG51bGwsIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgZW1pdC5lbmQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBrZXlkb3duZWQoKSB7XG4gICAgICBzd2l0Y2ggKGV4cG9ydHMuZXZlbnQua2V5Q29kZSkge1xuICAgICAgICBjYXNlIDE2OiB7IC8vIFNISUZUXG4gICAgICAgICAgc2hpZnRpbmcgPSBzaWduWCAmJiBzaWduWTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDE4OiB7IC8vIEFMVFxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX0hBTkRMRSkge1xuICAgICAgICAgICAgaWYgKHNpZ25YKSBlMCA9IGUxIC0gZHggKiBzaWduWCwgdzAgPSB3MSArIGR4ICogc2lnblg7XG4gICAgICAgICAgICBpZiAoc2lnblkpIHMwID0gczEgLSBkeSAqIHNpZ25ZLCBuMCA9IG4xICsgZHkgKiBzaWduWTtcbiAgICAgICAgICAgIG1vZGUgPSBNT0RFX0NFTlRFUjtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzMjogeyAvLyBTUEFDRTsgdGFrZXMgcHJpb3JpdHkgb3ZlciBBTFRcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9IQU5ETEUgfHwgbW9kZSA9PT0gTU9ERV9DRU5URVIpIHtcbiAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTEgLSBkeDsgZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxIC0gZHg7XG4gICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxIC0gZHk7IGVsc2UgaWYgKHNpZ25ZID4gMCkgbjAgPSBuMSAtIGR5O1xuICAgICAgICAgICAgbW9kZSA9IE1PREVfU1BBQ0U7XG4gICAgICAgICAgICBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5zZWxlY3Rpb24pO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiByZXR1cm47XG4gICAgICB9XG4gICAgICBub2V2ZW50JDEoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBrZXl1cHBlZCgpIHtcbiAgICAgIHN3aXRjaCAoZXhwb3J0cy5ldmVudC5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgMTY6IHsgLy8gU0hJRlRcbiAgICAgICAgICBpZiAoc2hpZnRpbmcpIHtcbiAgICAgICAgICAgIGxvY2tYID0gbG9ja1kgPSBzaGlmdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDE4OiB7IC8vIEFMVFxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX0NFTlRFUikge1xuICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZTAgPSBlMTsgZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxO1xuICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMTsgZWxzZSBpZiAoc2lnblkgPiAwKSBuMCA9IG4xO1xuICAgICAgICAgICAgbW9kZSA9IE1PREVfSEFORExFO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDMyOiB7IC8vIFNQQUNFXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfU1BBQ0UpIHtcbiAgICAgICAgICAgIGlmIChleHBvcnRzLmV2ZW50LmFsdEtleSkge1xuICAgICAgICAgICAgICBpZiAoc2lnblgpIGUwID0gZTEgLSBkeCAqIHNpZ25YLCB3MCA9IHcxICsgZHggKiBzaWduWDtcbiAgICAgICAgICAgICAgaWYgKHNpZ25ZKSBzMCA9IHMxIC0gZHkgKiBzaWduWSwgbjAgPSBuMSArIGR5ICogc2lnblk7XG4gICAgICAgICAgICAgIG1vZGUgPSBNT0RFX0NFTlRFUjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTE7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MTtcbiAgICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMTsgZWxzZSBpZiAoc2lnblkgPiAwKSBuMCA9IG4xO1xuICAgICAgICAgICAgICBtb2RlID0gTU9ERV9IQU5ETEU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlXSk7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vZXZlbnQkMSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5fX2JydXNoIHx8IHtzZWxlY3Rpb246IG51bGx9O1xuICAgIHN0YXRlLmV4dGVudCA9IGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHN0YXRlLmRpbSA9IGRpbTtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICBicnVzaC5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXh0ZW50ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ0KFtbK19bMF1bMF0sICtfWzBdWzFdXSwgWytfWzFdWzBdLCArX1sxXVsxXV1dKSwgYnJ1c2gpIDogZXh0ZW50O1xuICB9O1xuXG4gIGJydXNoLmZpbHRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmaWx0ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDQoISFfKSwgYnJ1c2gpIDogZmlsdGVyO1xuICB9O1xuXG4gIGJydXNoLmhhbmRsZVNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaGFuZGxlU2l6ZSA9ICtfLCBicnVzaCkgOiBoYW5kbGVTaXplO1xuICB9O1xuXG4gIGJydXNoLm9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gbGlzdGVuZXJzLm9uLmFwcGx5KGxpc3RlbmVycywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdmFsdWUgPT09IGxpc3RlbmVycyA/IGJydXNoIDogdmFsdWU7XG4gIH07XG5cbiAgcmV0dXJuIGJydXNoO1xufVxuXG52YXIgY29zID0gTWF0aC5jb3M7XG52YXIgc2luID0gTWF0aC5zaW47XG52YXIgcGkkMSA9IE1hdGguUEk7XG52YXIgaGFsZlBpJDEgPSBwaSQxIC8gMjtcbnZhciB0YXUkMSA9IHBpJDEgKiAyO1xudmFyIG1heCQxID0gTWF0aC5tYXg7XG5cbmZ1bmN0aW9uIGNvbXBhcmVWYWx1ZShjb21wYXJlKSB7XG4gIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGNvbXBhcmUoXG4gICAgICBhLnNvdXJjZS52YWx1ZSArIGEudGFyZ2V0LnZhbHVlLFxuICAgICAgYi5zb3VyY2UudmFsdWUgKyBiLnRhcmdldC52YWx1ZVxuICAgICk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNob3JkKCkge1xuICB2YXIgcGFkQW5nbGUgPSAwLFxuICAgICAgc29ydEdyb3VwcyA9IG51bGwsXG4gICAgICBzb3J0U3ViZ3JvdXBzID0gbnVsbCxcbiAgICAgIHNvcnRDaG9yZHMgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGNob3JkKG1hdHJpeCkge1xuICAgIHZhciBuID0gbWF0cml4Lmxlbmd0aCxcbiAgICAgICAgZ3JvdXBTdW1zID0gW10sXG4gICAgICAgIGdyb3VwSW5kZXggPSBzZXF1ZW5jZShuKSxcbiAgICAgICAgc3ViZ3JvdXBJbmRleCA9IFtdLFxuICAgICAgICBjaG9yZHMgPSBbXSxcbiAgICAgICAgZ3JvdXBzID0gY2hvcmRzLmdyb3VwcyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG4gKiBuKSxcbiAgICAgICAgayxcbiAgICAgICAgeCxcbiAgICAgICAgeDAsXG4gICAgICAgIGR4LFxuICAgICAgICBpLFxuICAgICAgICBqO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgc3VtLlxuICAgIGsgPSAwLCBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICB4ID0gMCwgaiA9IC0xOyB3aGlsZSAoKytqIDwgbikge1xuICAgICAgICB4ICs9IG1hdHJpeFtpXVtqXTtcbiAgICAgIH1cbiAgICAgIGdyb3VwU3Vtcy5wdXNoKHgpO1xuICAgICAgc3ViZ3JvdXBJbmRleC5wdXNoKHNlcXVlbmNlKG4pKTtcbiAgICAgIGsgKz0geDtcbiAgICB9XG5cbiAgICAvLyBTb3J0IGdyb3Vwc+KAplxuICAgIGlmIChzb3J0R3JvdXBzKSBncm91cEluZGV4LnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgcmV0dXJuIHNvcnRHcm91cHMoZ3JvdXBTdW1zW2FdLCBncm91cFN1bXNbYl0pO1xuICAgIH0pO1xuXG4gICAgLy8gU29ydCBzdWJncm91cHPigKZcbiAgICBpZiAoc29ydFN1Ymdyb3Vwcykgc3ViZ3JvdXBJbmRleC5mb3JFYWNoKGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgIGQuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIHJldHVybiBzb3J0U3ViZ3JvdXBzKG1hdHJpeFtpXVthXSwgbWF0cml4W2ldW2JdKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gQ29udmVydCB0aGUgc3VtIHRvIHNjYWxpbmcgZmFjdG9yIGZvciBbMCwgMnBpXS5cbiAgICAvLyBUT0RPIEFsbG93IHN0YXJ0IGFuZCBlbmQgYW5nbGUgdG8gYmUgc3BlY2lmaWVkP1xuICAgIC8vIFRPRE8gQWxsb3cgcGFkZGluZyB0byBiZSBzcGVjaWZpZWQgYXMgcGVyY2VudGFnZT9cbiAgICBrID0gbWF4JDEoMCwgdGF1JDEgLSBwYWRBbmdsZSAqIG4pIC8gaztcbiAgICBkeCA9IGsgPyBwYWRBbmdsZSA6IHRhdSQxIC8gbjtcblxuICAgIC8vIENvbXB1dGUgdGhlIHN0YXJ0IGFuZCBlbmQgYW5nbGUgZm9yIGVhY2ggZ3JvdXAgYW5kIHN1Ymdyb3VwLlxuICAgIC8vIE5vdGU6IE9wZXJhIGhhcyBhIGJ1ZyByZW9yZGVyaW5nIG9iamVjdCBsaXRlcmFsIHByb3BlcnRpZXMhXG4gICAgeCA9IDAsIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHgwID0geCwgaiA9IC0xOyB3aGlsZSAoKytqIDwgbikge1xuICAgICAgICB2YXIgZGkgPSBncm91cEluZGV4W2ldLFxuICAgICAgICAgICAgZGogPSBzdWJncm91cEluZGV4W2RpXVtqXSxcbiAgICAgICAgICAgIHYgPSBtYXRyaXhbZGldW2RqXSxcbiAgICAgICAgICAgIGEwID0geCxcbiAgICAgICAgICAgIGExID0geCArPSB2ICogaztcbiAgICAgICAgc3ViZ3JvdXBzW2RqICogbiArIGRpXSA9IHtcbiAgICAgICAgICBpbmRleDogZGksXG4gICAgICAgICAgc3ViaW5kZXg6IGRqLFxuICAgICAgICAgIHN0YXJ0QW5nbGU6IGEwLFxuICAgICAgICAgIGVuZEFuZ2xlOiBhMSxcbiAgICAgICAgICB2YWx1ZTogdlxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgZ3JvdXBzW2RpXSA9IHtcbiAgICAgICAgaW5kZXg6IGRpLFxuICAgICAgICBzdGFydEFuZ2xlOiB4MCxcbiAgICAgICAgZW5kQW5nbGU6IHgsXG4gICAgICAgIHZhbHVlOiBncm91cFN1bXNbZGldXG4gICAgICB9O1xuICAgICAgeCArPSBkeDtcbiAgICB9XG5cbiAgICAvLyBHZW5lcmF0ZSBjaG9yZHMgZm9yIGVhY2ggKG5vbi1lbXB0eSkgc3ViZ3JvdXAtc3ViZ3JvdXAgbGluay5cbiAgICBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBqID0gaSAtIDE7IHdoaWxlICgrK2ogPCBuKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBzdWJncm91cHNbaiAqIG4gKyBpXSxcbiAgICAgICAgICAgIHRhcmdldCA9IHN1Ymdyb3Vwc1tpICogbiArIGpdO1xuICAgICAgICBpZiAoc291cmNlLnZhbHVlIHx8IHRhcmdldC52YWx1ZSkge1xuICAgICAgICAgIGNob3Jkcy5wdXNoKHNvdXJjZS52YWx1ZSA8IHRhcmdldC52YWx1ZVxuICAgICAgICAgICAgICA/IHtzb3VyY2U6IHRhcmdldCwgdGFyZ2V0OiBzb3VyY2V9XG4gICAgICAgICAgICAgIDoge3NvdXJjZTogc291cmNlLCB0YXJnZXQ6IHRhcmdldH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNvcnRDaG9yZHMgPyBjaG9yZHMuc29ydChzb3J0Q2hvcmRzKSA6IGNob3JkcztcbiAgfVxuXG4gIGNob3JkLnBhZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZEFuZ2xlID0gbWF4JDEoMCwgXyksIGNob3JkKSA6IHBhZEFuZ2xlO1xuICB9O1xuXG4gIGNob3JkLnNvcnRHcm91cHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc29ydEdyb3VwcyA9IF8sIGNob3JkKSA6IHNvcnRHcm91cHM7XG4gIH07XG5cbiAgY2hvcmQuc29ydFN1Ymdyb3VwcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3J0U3ViZ3JvdXBzID0gXywgY2hvcmQpIDogc29ydFN1Ymdyb3VwcztcbiAgfTtcblxuICBjaG9yZC5zb3J0Q2hvcmRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF8gPT0gbnVsbCA/IHNvcnRDaG9yZHMgPSBudWxsIDogKHNvcnRDaG9yZHMgPSBjb21wYXJlVmFsdWUoXykpLl8gPSBfLCBjaG9yZCkgOiBzb3J0Q2hvcmRzICYmIHNvcnRDaG9yZHMuXztcbiAgfTtcblxuICByZXR1cm4gY2hvcmQ7XG59XG5cbnZhciBzbGljZSQyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG5mdW5jdGlvbiBjb25zdGFudCQ1KHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuXG52YXIgcGkkMiA9IE1hdGguUEksXG4gICAgdGF1JDIgPSAyICogcGkkMixcbiAgICBlcHNpbG9uJDEgPSAxZS02LFxuICAgIHRhdUVwc2lsb24gPSB0YXUkMiAtIGVwc2lsb24kMTtcblxuZnVuY3Rpb24gUGF0aCgpIHtcbiAgdGhpcy5feDAgPSB0aGlzLl95MCA9IC8vIHN0YXJ0IG9mIGN1cnJlbnQgc3VicGF0aFxuICB0aGlzLl94MSA9IHRoaXMuX3kxID0gbnVsbDsgLy8gZW5kIG9mIGN1cnJlbnQgc3VicGF0aFxuICB0aGlzLl8gPSBcIlwiO1xufVxuXG5mdW5jdGlvbiBwYXRoKCkge1xuICByZXR1cm4gbmV3IFBhdGg7XG59XG5cblBhdGgucHJvdG90eXBlID0gcGF0aC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBQYXRoLFxuICBtb3ZlVG86IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDAgPSB0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kwID0gdGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGNsb3NlUGF0aDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX3gxICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl94MSA9IHRoaXMuX3gwLCB0aGlzLl95MSA9IHRoaXMuX3kwO1xuICAgICAgdGhpcy5fICs9IFwiWlwiO1xuICAgIH1cbiAgfSxcbiAgbGluZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiTFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIHF1YWRyYXRpY0N1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIlFcIiArICgreDEpICsgXCIsXCIgKyAoK3kxKSArIFwiLFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGJlemllckN1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCB4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiQ1wiICsgKCt4MSkgKyBcIixcIiArICgreTEpICsgXCIsXCIgKyAoK3gyKSArIFwiLFwiICsgKCt5MikgKyBcIixcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBhcmNUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHIpIHtcbiAgICB4MSA9ICt4MSwgeTEgPSAreTEsIHgyID0gK3gyLCB5MiA9ICt5MiwgciA9ICtyO1xuICAgIHZhciB4MCA9IHRoaXMuX3gxLFxuICAgICAgICB5MCA9IHRoaXMuX3kxLFxuICAgICAgICB4MjEgPSB4MiAtIHgxLFxuICAgICAgICB5MjEgPSB5MiAtIHkxLFxuICAgICAgICB4MDEgPSB4MCAtIHgxLFxuICAgICAgICB5MDEgPSB5MCAtIHkxLFxuICAgICAgICBsMDFfMiA9IHgwMSAqIHgwMSArIHkwMSAqIHkwMTtcblxuICAgIC8vIElzIHRoZSByYWRpdXMgbmVnYXRpdmU/IEVycm9yLlxuICAgIGlmIChyIDwgMCkgdGhyb3cgbmV3IEVycm9yKFwibmVnYXRpdmUgcmFkaXVzOiBcIiArIHIpO1xuXG4gICAgLy8gSXMgdGhpcyBwYXRoIGVtcHR5PyBNb3ZlIHRvICh4MSx5MSkuXG4gICAgaWYgKHRoaXMuX3gxID09PSBudWxsKSB7XG4gICAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDEgPSB4MSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxKTtcbiAgICB9XG5cbiAgICAvLyBPciwgaXMgKHgxLHkxKSBjb2luY2lkZW50IHdpdGggKHgwLHkwKT8gRG8gbm90aGluZy5cbiAgICBlbHNlIGlmICghKGwwMV8yID4gZXBzaWxvbiQxKSk7XG5cbiAgICAvLyBPciwgYXJlICh4MCx5MCksICh4MSx5MSkgYW5kICh4Mix5MikgY29sbGluZWFyP1xuICAgIC8vIEVxdWl2YWxlbnRseSwgaXMgKHgxLHkxKSBjb2luY2lkZW50IHdpdGggKHgyLHkyKT9cbiAgICAvLyBPciwgaXMgdGhlIHJhZGl1cyB6ZXJvPyBMaW5lIHRvICh4MSx5MSkuXG4gICAgZWxzZSBpZiAoIShNYXRoLmFicyh5MDEgKiB4MjEgLSB5MjEgKiB4MDEpID4gZXBzaWxvbiQxKSB8fCAhcikge1xuICAgICAgdGhpcy5fICs9IFwiTFwiICsgKHRoaXMuX3gxID0geDEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSk7XG4gICAgfVxuXG4gICAgLy8gT3RoZXJ3aXNlLCBkcmF3IGFuIGFyYyFcbiAgICBlbHNlIHtcbiAgICAgIHZhciB4MjAgPSB4MiAtIHgwLFxuICAgICAgICAgIHkyMCA9IHkyIC0geTAsXG4gICAgICAgICAgbDIxXzIgPSB4MjEgKiB4MjEgKyB5MjEgKiB5MjEsXG4gICAgICAgICAgbDIwXzIgPSB4MjAgKiB4MjAgKyB5MjAgKiB5MjAsXG4gICAgICAgICAgbDIxID0gTWF0aC5zcXJ0KGwyMV8yKSxcbiAgICAgICAgICBsMDEgPSBNYXRoLnNxcnQobDAxXzIpLFxuICAgICAgICAgIGwgPSByICogTWF0aC50YW4oKHBpJDIgLSBNYXRoLmFjb3MoKGwyMV8yICsgbDAxXzIgLSBsMjBfMikgLyAoMiAqIGwyMSAqIGwwMSkpKSAvIDIpLFxuICAgICAgICAgIHQwMSA9IGwgLyBsMDEsXG4gICAgICAgICAgdDIxID0gbCAvIGwyMTtcblxuICAgICAgLy8gSWYgdGhlIHN0YXJ0IHRhbmdlbnQgaXMgbm90IGNvaW5jaWRlbnQgd2l0aCAoeDAseTApLCBsaW5lIHRvLlxuICAgICAgaWYgKE1hdGguYWJzKHQwMSAtIDEpID4gZXBzaWxvbiQxKSB7XG4gICAgICAgIHRoaXMuXyArPSBcIkxcIiArICh4MSArIHQwMSAqIHgwMSkgKyBcIixcIiArICh5MSArIHQwMSAqIHkwMSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuXyArPSBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLDAsXCIgKyAoKyh5MDEgKiB4MjAgPiB4MDEgKiB5MjApKSArIFwiLFwiICsgKHRoaXMuX3gxID0geDEgKyB0MjEgKiB4MjEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSArIHQyMSAqIHkyMSk7XG4gICAgfVxuICB9LFxuICBhcmM6IGZ1bmN0aW9uKHgsIHksIHIsIGEwLCBhMSwgY2N3KSB7XG4gICAgeCA9ICt4LCB5ID0gK3ksIHIgPSArcjtcbiAgICB2YXIgZHggPSByICogTWF0aC5jb3MoYTApLFxuICAgICAgICBkeSA9IHIgKiBNYXRoLnNpbihhMCksXG4gICAgICAgIHgwID0geCArIGR4LFxuICAgICAgICB5MCA9IHkgKyBkeSxcbiAgICAgICAgY3cgPSAxIF4gY2N3LFxuICAgICAgICBkYSA9IGNjdyA/IGEwIC0gYTEgOiBhMSAtIGEwO1xuXG4gICAgLy8gSXMgdGhlIHJhZGl1cyBuZWdhdGl2ZT8gRXJyb3IuXG4gICAgaWYgKHIgPCAwKSB0aHJvdyBuZXcgRXJyb3IoXCJuZWdhdGl2ZSByYWRpdXM6IFwiICsgcik7XG5cbiAgICAvLyBJcyB0aGlzIHBhdGggZW1wdHk/IE1vdmUgdG8gKHgwLHkwKS5cbiAgICBpZiAodGhpcy5feDEgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuXyArPSBcIk1cIiArIHgwICsgXCIsXCIgKyB5MDtcbiAgICB9XG5cbiAgICAvLyBPciwgaXMgKHgwLHkwKSBub3QgY29pbmNpZGVudCB3aXRoIHRoZSBwcmV2aW91cyBwb2ludD8gTGluZSB0byAoeDAseTApLlxuICAgIGVsc2UgaWYgKE1hdGguYWJzKHRoaXMuX3gxIC0geDApID4gZXBzaWxvbiQxIHx8IE1hdGguYWJzKHRoaXMuX3kxIC0geTApID4gZXBzaWxvbiQxKSB7XG4gICAgICB0aGlzLl8gKz0gXCJMXCIgKyB4MCArIFwiLFwiICsgeTA7XG4gICAgfVxuXG4gICAgLy8gSXMgdGhpcyBhcmMgZW1wdHk/IFdl4oCZcmUgZG9uZS5cbiAgICBpZiAoIXIpIHJldHVybjtcblxuICAgIC8vIERvZXMgdGhlIGFuZ2xlIGdvIHRoZSB3cm9uZyB3YXk/IEZsaXAgdGhlIGRpcmVjdGlvbi5cbiAgICBpZiAoZGEgPCAwKSBkYSA9IGRhICUgdGF1JDIgKyB0YXUkMjtcblxuICAgIC8vIElzIHRoaXMgYSBjb21wbGV0ZSBjaXJjbGU/IERyYXcgdHdvIGFyY3MgdG8gY29tcGxldGUgdGhlIGNpcmNsZS5cbiAgICBpZiAoZGEgPiB0YXVFcHNpbG9uKSB7XG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwxLFwiICsgY3cgKyBcIixcIiArICh4IC0gZHgpICsgXCIsXCIgKyAoeSAtIGR5KSArIFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMSxcIiArIGN3ICsgXCIsXCIgKyAodGhpcy5feDEgPSB4MCkgKyBcIixcIiArICh0aGlzLl95MSA9IHkwKTtcbiAgICB9XG5cbiAgICAvLyBJcyB0aGlzIGFyYyBub24tZW1wdHk/IERyYXcgYW4gYXJjIVxuICAgIGVsc2UgaWYgKGRhID4gZXBzaWxvbiQxKSB7XG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCxcIiArICgrKGRhID49IHBpJDIpKSArIFwiLFwiICsgY3cgKyBcIixcIiArICh0aGlzLl94MSA9IHggKyByICogTWF0aC5jb3MoYTEpKSArIFwiLFwiICsgKHRoaXMuX3kxID0geSArIHIgKiBNYXRoLnNpbihhMSkpO1xuICAgIH1cbiAgfSxcbiAgcmVjdDogZnVuY3Rpb24oeCwgeSwgdywgaCkge1xuICAgIHRoaXMuXyArPSBcIk1cIiArICh0aGlzLl94MCA9IHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTAgPSB0aGlzLl95MSA9ICt5KSArIFwiaFwiICsgKCt3KSArIFwidlwiICsgKCtoKSArIFwiaFwiICsgKC13KSArIFwiWlwiO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuXztcbiAgfVxufTtcblxuZnVuY3Rpb24gZGVmYXVsdFNvdXJjZShkKSB7XG4gIHJldHVybiBkLnNvdXJjZTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFRhcmdldChkKSB7XG4gIHJldHVybiBkLnRhcmdldDtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFJhZGl1cyhkKSB7XG4gIHJldHVybiBkLnJhZGl1cztcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFN0YXJ0QW5nbGUoZCkge1xuICByZXR1cm4gZC5zdGFydEFuZ2xlO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0RW5kQW5nbGUoZCkge1xuICByZXR1cm4gZC5lbmRBbmdsZTtcbn1cblxuZnVuY3Rpb24gcmliYm9uKCkge1xuICB2YXIgc291cmNlID0gZGVmYXVsdFNvdXJjZSxcbiAgICAgIHRhcmdldCA9IGRlZmF1bHRUYXJnZXQsXG4gICAgICByYWRpdXMgPSBkZWZhdWx0UmFkaXVzLFxuICAgICAgc3RhcnRBbmdsZSA9IGRlZmF1bHRTdGFydEFuZ2xlLFxuICAgICAgZW5kQW5nbGUgPSBkZWZhdWx0RW5kQW5nbGUsXG4gICAgICBjb250ZXh0ID0gbnVsbDtcblxuICBmdW5jdGlvbiByaWJib24oKSB7XG4gICAgdmFyIGJ1ZmZlcixcbiAgICAgICAgYXJndiA9IHNsaWNlJDIuY2FsbChhcmd1bWVudHMpLFxuICAgICAgICBzID0gc291cmNlLmFwcGx5KHRoaXMsIGFyZ3YpLFxuICAgICAgICB0ID0gdGFyZ2V0LmFwcGx5KHRoaXMsIGFyZ3YpLFxuICAgICAgICBzciA9ICtyYWRpdXMuYXBwbHkodGhpcywgKGFyZ3ZbMF0gPSBzLCBhcmd2KSksXG4gICAgICAgIHNhMCA9IHN0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndikgLSBoYWxmUGkkMSxcbiAgICAgICAgc2ExID0gZW5kQW5nbGUuYXBwbHkodGhpcywgYXJndikgLSBoYWxmUGkkMSxcbiAgICAgICAgc3gwID0gc3IgKiBjb3Moc2EwKSxcbiAgICAgICAgc3kwID0gc3IgKiBzaW4oc2EwKSxcbiAgICAgICAgdHIgPSArcmFkaXVzLmFwcGx5KHRoaXMsIChhcmd2WzBdID0gdCwgYXJndikpLFxuICAgICAgICB0YTAgPSBzdGFydEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3YpIC0gaGFsZlBpJDEsXG4gICAgICAgIHRhMSA9IGVuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3YpIC0gaGFsZlBpJDE7XG5cbiAgICBpZiAoIWNvbnRleHQpIGNvbnRleHQgPSBidWZmZXIgPSBwYXRoKCk7XG5cbiAgICBjb250ZXh0Lm1vdmVUbyhzeDAsIHN5MCk7XG4gICAgY29udGV4dC5hcmMoMCwgMCwgc3IsIHNhMCwgc2ExKTtcbiAgICBpZiAoc2EwICE9PSB0YTAgfHwgc2ExICE9PSB0YTEpIHsgLy8gVE9ETyBzciAhPT0gdHI/XG4gICAgICBjb250ZXh0LnF1YWRyYXRpY0N1cnZlVG8oMCwgMCwgdHIgKiBjb3ModGEwKSwgdHIgKiBzaW4odGEwKSk7XG4gICAgICBjb250ZXh0LmFyYygwLCAwLCB0ciwgdGEwLCB0YTEpO1xuICAgIH1cbiAgICBjb250ZXh0LnF1YWRyYXRpY0N1cnZlVG8oMCwgMCwgc3gwLCBzeTApO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG5cbiAgICBpZiAoYnVmZmVyKSByZXR1cm4gY29udGV4dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIHJpYmJvbi5yYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ1KCtfKSwgcmliYm9uKSA6IHJhZGl1cztcbiAgfTtcblxuICByaWJib24uc3RhcnRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdGFydEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ1KCtfKSwgcmliYm9uKSA6IHN0YXJ0QW5nbGU7XG4gIH07XG5cbiAgcmliYm9uLmVuZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGVuZEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ1KCtfKSwgcmliYm9uKSA6IGVuZEFuZ2xlO1xuICB9O1xuXG4gIHJpYmJvbi5zb3VyY2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc291cmNlID0gXywgcmliYm9uKSA6IHNvdXJjZTtcbiAgfTtcblxuICByaWJib24udGFyZ2V0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRhcmdldCA9IF8sIHJpYmJvbikgOiB0YXJnZXQ7XG4gIH07XG5cbiAgcmliYm9uLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoKGNvbnRleHQgPSBfID09IG51bGwgPyBudWxsIDogXyksIHJpYmJvbikgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiByaWJib247XG59XG5cbnZhciBwcmVmaXggPSBcIiRcIjtcblxuZnVuY3Rpb24gTWFwKCkge31cblxuTWFwLnByb3RvdHlwZSA9IG1hcCQxLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IE1hcCxcbiAgaGFzOiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gKHByZWZpeCArIGtleSkgaW4gdGhpcztcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gdGhpc1twcmVmaXggKyBrZXldO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICB0aGlzW3ByZWZpeCArIGtleV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihrZXkpIHtcbiAgICB2YXIgcHJvcGVydHkgPSBwcmVmaXggKyBrZXk7XG4gICAgcmV0dXJuIHByb3BlcnR5IGluIHRoaXMgJiYgZGVsZXRlIHRoaXNbcHJvcGVydHldO1xuICB9LFxuICBjbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGRlbGV0ZSB0aGlzW3Byb3BlcnR5XTtcbiAgfSxcbiAga2V5czogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkga2V5cy5wdXNoKHByb3BlcnR5LnNsaWNlKDEpKTtcbiAgICByZXR1cm4ga2V5cztcbiAgfSxcbiAgdmFsdWVzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIHZhbHVlcy5wdXNoKHRoaXNbcHJvcGVydHldKTtcbiAgICByZXR1cm4gdmFsdWVzO1xuICB9LFxuICBlbnRyaWVzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZW50cmllcyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBlbnRyaWVzLnB1c2goe2tleTogcHJvcGVydHkuc2xpY2UoMSksIHZhbHVlOiB0aGlzW3Byb3BlcnR5XX0pO1xuICAgIHJldHVybiBlbnRyaWVzO1xuICB9LFxuICBzaXplOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2l6ZSA9IDA7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpICsrc2l6ZTtcbiAgICByZXR1cm4gc2l6ZTtcbiAgfSxcbiAgZW1wdHk6IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGVhY2g6IGZ1bmN0aW9uKGYpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZih0aGlzW3Byb3BlcnR5XSwgcHJvcGVydHkuc2xpY2UoMSksIHRoaXMpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBtYXAkMShvYmplY3QsIGYpIHtcbiAgdmFyIG1hcCA9IG5ldyBNYXA7XG5cbiAgLy8gQ29weSBjb25zdHJ1Y3Rvci5cbiAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIE1hcCkgb2JqZWN0LmVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkgeyBtYXAuc2V0KGtleSwgdmFsdWUpOyB9KTtcblxuICAvLyBJbmRleCBhcnJheSBieSBudW1lcmljIGluZGV4IG9yIHNwZWNpZmllZCBrZXkgZnVuY3Rpb24uXG4gIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuICAgIHZhciBpID0gLTEsXG4gICAgICAgIG4gPSBvYmplY3QubGVuZ3RoLFxuICAgICAgICBvO1xuXG4gICAgaWYgKGYgPT0gbnVsbCkgd2hpbGUgKCsraSA8IG4pIG1hcC5zZXQoaSwgb2JqZWN0W2ldKTtcbiAgICBlbHNlIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGYobyA9IG9iamVjdFtpXSwgaSwgb2JqZWN0KSwgbyk7XG4gIH1cblxuICAvLyBDb252ZXJ0IG9iamVjdCB0byBtYXAuXG4gIGVsc2UgaWYgKG9iamVjdCkgZm9yICh2YXIga2V5IGluIG9iamVjdCkgbWFwLnNldChrZXksIG9iamVjdFtrZXldKTtcblxuICByZXR1cm4gbWFwO1xufVxuXG5mdW5jdGlvbiBuZXN0KCkge1xuICB2YXIga2V5cyA9IFtdLFxuICAgICAgc29ydEtleXMgPSBbXSxcbiAgICAgIHNvcnRWYWx1ZXMsXG4gICAgICByb2xsdXAsXG4gICAgICBuZXN0O1xuXG4gIGZ1bmN0aW9uIGFwcGx5KGFycmF5LCBkZXB0aCwgY3JlYXRlUmVzdWx0LCBzZXRSZXN1bHQpIHtcbiAgICBpZiAoZGVwdGggPj0ga2V5cy5sZW5ndGgpIHtcbiAgICAgIGlmIChzb3J0VmFsdWVzICE9IG51bGwpIGFycmF5LnNvcnQoc29ydFZhbHVlcyk7XG4gICAgICByZXR1cm4gcm9sbHVwICE9IG51bGwgPyByb2xsdXAoYXJyYXkpIDogYXJyYXk7XG4gICAgfVxuXG4gICAgdmFyIGkgPSAtMSxcbiAgICAgICAgbiA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAga2V5ID0ga2V5c1tkZXB0aCsrXSxcbiAgICAgICAga2V5VmFsdWUsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICB2YWx1ZXNCeUtleSA9IG1hcCQxKCksXG4gICAgICAgIHZhbHVlcyxcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlUmVzdWx0KCk7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHZhbHVlcyA9IHZhbHVlc0J5S2V5LmdldChrZXlWYWx1ZSA9IGtleSh2YWx1ZSA9IGFycmF5W2ldKSArIFwiXCIpKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlc0J5S2V5LnNldChrZXlWYWx1ZSwgW3ZhbHVlXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFsdWVzQnlLZXkuZWFjaChmdW5jdGlvbih2YWx1ZXMsIGtleSkge1xuICAgICAgc2V0UmVzdWx0KHJlc3VsdCwga2V5LCBhcHBseSh2YWx1ZXMsIGRlcHRoLCBjcmVhdGVSZXN1bHQsIHNldFJlc3VsdCkpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVudHJpZXMobWFwLCBkZXB0aCkge1xuICAgIGlmICgrK2RlcHRoID4ga2V5cy5sZW5ndGgpIHJldHVybiBtYXA7XG4gICAgdmFyIGFycmF5LCBzb3J0S2V5ID0gc29ydEtleXNbZGVwdGggLSAxXTtcbiAgICBpZiAocm9sbHVwICE9IG51bGwgJiYgZGVwdGggPj0ga2V5cy5sZW5ndGgpIGFycmF5ID0gbWFwLmVudHJpZXMoKTtcbiAgICBlbHNlIGFycmF5ID0gW10sIG1hcC5lYWNoKGZ1bmN0aW9uKHYsIGspIHsgYXJyYXkucHVzaCh7a2V5OiBrLCB2YWx1ZXM6IGVudHJpZXModiwgZGVwdGgpfSk7IH0pO1xuICAgIHJldHVybiBzb3J0S2V5ICE9IG51bGwgPyBhcnJheS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIHNvcnRLZXkoYS5rZXksIGIua2V5KTsgfSkgOiBhcnJheTtcbiAgfVxuXG4gIHJldHVybiBuZXN0ID0ge1xuICAgIG9iamVjdDogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGFwcGx5KGFycmF5LCAwLCBjcmVhdGVPYmplY3QsIHNldE9iamVjdCk7IH0sXG4gICAgbWFwOiBmdW5jdGlvbihhcnJheSkgeyByZXR1cm4gYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU1hcCwgc2V0TWFwKTsgfSxcbiAgICBlbnRyaWVzOiBmdW5jdGlvbihhcnJheSkgeyByZXR1cm4gZW50cmllcyhhcHBseShhcnJheSwgMCwgY3JlYXRlTWFwLCBzZXRNYXApLCAwKTsgfSxcbiAgICBrZXk6IGZ1bmN0aW9uKGQpIHsga2V5cy5wdXNoKGQpOyByZXR1cm4gbmVzdDsgfSxcbiAgICBzb3J0S2V5czogZnVuY3Rpb24ob3JkZXIpIHsgc29ydEtleXNba2V5cy5sZW5ndGggLSAxXSA9IG9yZGVyOyByZXR1cm4gbmVzdDsgfSxcbiAgICBzb3J0VmFsdWVzOiBmdW5jdGlvbihvcmRlcikgeyBzb3J0VmFsdWVzID0gb3JkZXI7IHJldHVybiBuZXN0OyB9LFxuICAgIHJvbGx1cDogZnVuY3Rpb24oZikgeyByb2xsdXAgPSBmOyByZXR1cm4gbmVzdDsgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPYmplY3QoKSB7XG4gIHJldHVybiB7fTtcbn1cblxuZnVuY3Rpb24gc2V0T2JqZWN0KG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNYXAoKSB7XG4gIHJldHVybiBtYXAkMSgpO1xufVxuXG5mdW5jdGlvbiBzZXRNYXAobWFwLCBrZXksIHZhbHVlKSB7XG4gIG1hcC5zZXQoa2V5LCB2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIFNldCgpIHt9XG5cbnZhciBwcm90byA9IG1hcCQxLnByb3RvdHlwZTtcblxuU2V0LnByb3RvdHlwZSA9IHNldCQyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFNldCxcbiAgaGFzOiBwcm90by5oYXMsXG4gIGFkZDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YWx1ZSArPSBcIlwiO1xuICAgIHRoaXNbcHJlZml4ICsgdmFsdWVdID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHJlbW92ZTogcHJvdG8ucmVtb3ZlLFxuICBjbGVhcjogcHJvdG8uY2xlYXIsXG4gIHZhbHVlczogcHJvdG8ua2V5cyxcbiAgc2l6ZTogcHJvdG8uc2l6ZSxcbiAgZW1wdHk6IHByb3RvLmVtcHR5LFxuICBlYWNoOiBwcm90by5lYWNoXG59O1xuXG5mdW5jdGlvbiBzZXQkMihvYmplY3QsIGYpIHtcbiAgdmFyIHNldCA9IG5ldyBTZXQ7XG5cbiAgLy8gQ29weSBjb25zdHJ1Y3Rvci5cbiAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIFNldCkgb2JqZWN0LmVhY2goZnVuY3Rpb24odmFsdWUpIHsgc2V0LmFkZCh2YWx1ZSk7IH0pO1xuXG4gIC8vIE90aGVyd2lzZSwgYXNzdW1lIGl04oCZcyBhbiBhcnJheS5cbiAgZWxzZSBpZiAob2JqZWN0KSB7XG4gICAgdmFyIGkgPSAtMSwgbiA9IG9iamVjdC5sZW5ndGg7XG4gICAgaWYgKGYgPT0gbnVsbCkgd2hpbGUgKCsraSA8IG4pIHNldC5hZGQob2JqZWN0W2ldKTtcbiAgICBlbHNlIHdoaWxlICgrK2kgPCBuKSBzZXQuYWRkKGYob2JqZWN0W2ldLCBpLCBvYmplY3QpKTtcbiAgfVxuXG4gIHJldHVybiBzZXQ7XG59XG5cbmZ1bmN0aW9uIGtleXMobWFwKSB7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBtYXApIGtleXMucHVzaChrZXkpO1xuICByZXR1cm4ga2V5cztcbn1cblxuZnVuY3Rpb24gdmFsdWVzKG1hcCkge1xuICB2YXIgdmFsdWVzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBtYXApIHZhbHVlcy5wdXNoKG1hcFtrZXldKTtcbiAgcmV0dXJuIHZhbHVlcztcbn1cblxuZnVuY3Rpb24gZW50cmllcyhtYXApIHtcbiAgdmFyIGVudHJpZXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG1hcCkgZW50cmllcy5wdXNoKHtrZXk6IGtleSwgdmFsdWU6IG1hcFtrZXldfSk7XG4gIHJldHVybiBlbnRyaWVzO1xufVxuXG52YXIgYXJyYXkkMiA9IEFycmF5LnByb3RvdHlwZTtcblxudmFyIHNsaWNlJDMgPSBhcnJheSQyLnNsaWNlO1xuXG5mdW5jdGlvbiBhc2NlbmRpbmckMihhLCBiKSB7XG4gIHJldHVybiBhIC0gYjtcbn1cblxuZnVuY3Rpb24gYXJlYShyaW5nKSB7XG4gIHZhciBpID0gMCwgbiA9IHJpbmcubGVuZ3RoLCBhcmVhID0gcmluZ1tuIC0gMV1bMV0gKiByaW5nWzBdWzBdIC0gcmluZ1tuIC0gMV1bMF0gKiByaW5nWzBdWzFdO1xuICB3aGlsZSAoKytpIDwgbikgYXJlYSArPSByaW5nW2kgLSAxXVsxXSAqIHJpbmdbaV1bMF0gLSByaW5nW2kgLSAxXVswXSAqIHJpbmdbaV1bMV07XG4gIHJldHVybiBhcmVhO1xufVxuXG5mdW5jdGlvbiBjb25zdGFudCQ2KHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuXG5mdW5jdGlvbiBjb250YWlucyhyaW5nLCBob2xlKSB7XG4gIHZhciBpID0gLTEsIG4gPSBob2xlLmxlbmd0aCwgYztcbiAgd2hpbGUgKCsraSA8IG4pIGlmIChjID0gcmluZ0NvbnRhaW5zKHJpbmcsIGhvbGVbaV0pKSByZXR1cm4gYztcbiAgcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIHJpbmdDb250YWlucyhyaW5nLCBwb2ludCkge1xuICB2YXIgeCA9IHBvaW50WzBdLCB5ID0gcG9pbnRbMV0sIGNvbnRhaW5zID0gLTE7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gcmluZy5sZW5ndGgsIGogPSBuIC0gMTsgaSA8IG47IGogPSBpKyspIHtcbiAgICB2YXIgcGkgPSByaW5nW2ldLCB4aSA9IHBpWzBdLCB5aSA9IHBpWzFdLCBwaiA9IHJpbmdbal0sIHhqID0gcGpbMF0sIHlqID0gcGpbMV07XG4gICAgaWYgKHNlZ21lbnRDb250YWlucyhwaSwgcGosIHBvaW50KSkgcmV0dXJuIDA7XG4gICAgaWYgKCgoeWkgPiB5KSAhPT0gKHlqID4geSkpICYmICgoeCA8ICh4aiAtIHhpKSAqICh5IC0geWkpIC8gKHlqIC0geWkpICsgeGkpKSkgY29udGFpbnMgPSAtY29udGFpbnM7XG4gIH1cbiAgcmV0dXJuIGNvbnRhaW5zO1xufVxuXG5mdW5jdGlvbiBzZWdtZW50Q29udGFpbnMoYSwgYiwgYykge1xuICB2YXIgaTsgcmV0dXJuIGNvbGxpbmVhcihhLCBiLCBjKSAmJiB3aXRoaW4oYVtpID0gKyhhWzBdID09PSBiWzBdKV0sIGNbaV0sIGJbaV0pO1xufVxuXG5mdW5jdGlvbiBjb2xsaW5lYXIoYSwgYiwgYykge1xuICByZXR1cm4gKGJbMF0gLSBhWzBdKSAqIChjWzFdIC0gYVsxXSkgPT09IChjWzBdIC0gYVswXSkgKiAoYlsxXSAtIGFbMV0pO1xufVxuXG5mdW5jdGlvbiB3aXRoaW4ocCwgcSwgcikge1xuICByZXR1cm4gcCA8PSBxICYmIHEgPD0gciB8fCByIDw9IHEgJiYgcSA8PSBwO1xufVxuXG5mdW5jdGlvbiBub29wJDEoKSB7fVxuXG52YXIgY2FzZXMgPSBbXG4gIFtdLFxuICBbW1sxLjAsIDEuNV0sIFswLjUsIDEuMF1dXSxcbiAgW1tbMS41LCAxLjBdLCBbMS4wLCAxLjVdXV0sXG4gIFtbWzEuNSwgMS4wXSwgWzAuNSwgMS4wXV1dLFxuICBbW1sxLjAsIDAuNV0sIFsxLjUsIDEuMF1dXSxcbiAgW1tbMS4wLCAxLjVdLCBbMC41LCAxLjBdXSwgW1sxLjAsIDAuNV0sIFsxLjUsIDEuMF1dXSxcbiAgW1tbMS4wLCAwLjVdLCBbMS4wLCAxLjVdXV0sXG4gIFtbWzEuMCwgMC41XSwgWzAuNSwgMS4wXV1dLFxuICBbW1swLjUsIDEuMF0sIFsxLjAsIDAuNV1dXSxcbiAgW1tbMS4wLCAxLjVdLCBbMS4wLCAwLjVdXV0sXG4gIFtbWzAuNSwgMS4wXSwgWzEuMCwgMC41XV0sIFtbMS41LCAxLjBdLCBbMS4wLCAxLjVdXV0sXG4gIFtbWzEuNSwgMS4wXSwgWzEuMCwgMC41XV1dLFxuICBbW1swLjUsIDEuMF0sIFsxLjUsIDEuMF1dXSxcbiAgW1tbMS4wLCAxLjVdLCBbMS41LCAxLjBdXV0sXG4gIFtbWzAuNSwgMS4wXSwgWzEuMCwgMS41XV1dLFxuICBbXVxuXTtcblxuZnVuY3Rpb24gY29udG91cnMoKSB7XG4gIHZhciBkeCA9IDEsXG4gICAgICBkeSA9IDEsXG4gICAgICB0aHJlc2hvbGQkJDEgPSB0aHJlc2hvbGRTdHVyZ2VzLFxuICAgICAgc21vb3RoID0gc21vb3RoTGluZWFyO1xuXG4gIGZ1bmN0aW9uIGNvbnRvdXJzKHZhbHVlcykge1xuICAgIHZhciB0eiA9IHRocmVzaG9sZCQkMSh2YWx1ZXMpO1xuXG4gICAgLy8gQ29udmVydCBudW1iZXIgb2YgdGhyZXNob2xkcyBpbnRvIHVuaWZvcm0gdGhyZXNob2xkcy5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodHopKSB7XG4gICAgICB2YXIgZG9tYWluID0gZXh0ZW50KHZhbHVlcyksIHN0YXJ0ID0gZG9tYWluWzBdLCBzdG9wID0gZG9tYWluWzFdO1xuICAgICAgdHogPSB0aWNrU3RlcChzdGFydCwgc3RvcCwgdHopO1xuICAgICAgdHogPSBzZXF1ZW5jZShNYXRoLmZsb29yKHN0YXJ0IC8gdHopICogdHosIE1hdGguZmxvb3Ioc3RvcCAvIHR6KSAqIHR6LCB0eik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHR6ID0gdHouc2xpY2UoKS5zb3J0KGFzY2VuZGluZyQyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHoubWFwKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gY29udG91cih2YWx1ZXMsIHZhbHVlKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIEFjY3VtdWxhdGUsIHNtb290aCBjb250b3VyIHJpbmdzLCBhc3NpZ24gaG9sZXMgdG8gZXh0ZXJpb3IgcmluZ3MuXG4gIC8vIEJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9tYm9zdG9jay9zaGFwZWZpbGUvYmxvYi92MC42LjIvc2hwL3BvbHlnb24uanNcbiAgZnVuY3Rpb24gY29udG91cih2YWx1ZXMsIHZhbHVlKSB7XG4gICAgdmFyIHBvbHlnb25zID0gW10sXG4gICAgICAgIGhvbGVzID0gW107XG5cbiAgICBpc29yaW5ncyh2YWx1ZXMsIHZhbHVlLCBmdW5jdGlvbihyaW5nKSB7XG4gICAgICBzbW9vdGgocmluZywgdmFsdWVzLCB2YWx1ZSk7XG4gICAgICBpZiAoYXJlYShyaW5nKSA+IDApIHBvbHlnb25zLnB1c2goW3JpbmddKTtcbiAgICAgIGVsc2UgaG9sZXMucHVzaChyaW5nKTtcbiAgICB9KTtcblxuICAgIGhvbGVzLmZvckVhY2goZnVuY3Rpb24oaG9sZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2x5Z29ucy5sZW5ndGgsIHBvbHlnb247IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKGNvbnRhaW5zKChwb2x5Z29uID0gcG9seWdvbnNbaV0pWzBdLCBob2xlKSAhPT0gLTEpIHtcbiAgICAgICAgICBwb2x5Z29uLnB1c2goaG9sZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJNdWx0aVBvbHlnb25cIixcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGNvb3JkaW5hdGVzOiBwb2x5Z29uc1xuICAgIH07XG4gIH1cblxuICAvLyBNYXJjaGluZyBzcXVhcmVzIHdpdGggaXNvbGluZXMgc3RpdGNoZWQgaW50byByaW5ncy5cbiAgLy8gQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL3RvcG9qc29uL3RvcG9qc29uLWNsaWVudC9ibG9iL3YzLjAuMC9zcmMvc3RpdGNoLmpzXG4gIGZ1bmN0aW9uIGlzb3JpbmdzKHZhbHVlcywgdmFsdWUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGZyYWdtZW50QnlTdGFydCA9IG5ldyBBcnJheSxcbiAgICAgICAgZnJhZ21lbnRCeUVuZCA9IG5ldyBBcnJheSxcbiAgICAgICAgeCwgeSwgdDAsIHQxLCB0MiwgdDM7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIHRoZSBmaXJzdCByb3cgKHkgPSAtMSwgdDIgPSB0MyA9IDApLlxuICAgIHggPSB5ID0gLTE7XG4gICAgdDEgPSB2YWx1ZXNbMF0gPj0gdmFsdWU7XG4gICAgY2FzZXNbdDEgPDwgMV0uZm9yRWFjaChzdGl0Y2gpO1xuICAgIHdoaWxlICgrK3ggPCBkeCAtIDEpIHtcbiAgICAgIHQwID0gdDEsIHQxID0gdmFsdWVzW3ggKyAxXSA+PSB2YWx1ZTtcbiAgICAgIGNhc2VzW3QwIHwgdDEgPDwgMV0uZm9yRWFjaChzdGl0Y2gpO1xuICAgIH1cbiAgICBjYXNlc1t0MSA8PCAwXS5mb3JFYWNoKHN0aXRjaCk7XG5cbiAgICAvLyBHZW5lcmFsIGNhc2UgZm9yIHRoZSBpbnRlcm1lZGlhdGUgcm93cy5cbiAgICB3aGlsZSAoKyt5IDwgZHkgLSAxKSB7XG4gICAgICB4ID0gLTE7XG4gICAgICB0MSA9IHZhbHVlc1t5ICogZHggKyBkeF0gPj0gdmFsdWU7XG4gICAgICB0MiA9IHZhbHVlc1t5ICogZHhdID49IHZhbHVlO1xuICAgICAgY2FzZXNbdDEgPDwgMSB8IHQyIDw8IDJdLmZvckVhY2goc3RpdGNoKTtcbiAgICAgIHdoaWxlICgrK3ggPCBkeCAtIDEpIHtcbiAgICAgICAgdDAgPSB0MSwgdDEgPSB2YWx1ZXNbeSAqIGR4ICsgZHggKyB4ICsgMV0gPj0gdmFsdWU7XG4gICAgICAgIHQzID0gdDIsIHQyID0gdmFsdWVzW3kgKiBkeCArIHggKyAxXSA+PSB2YWx1ZTtcbiAgICAgICAgY2FzZXNbdDAgfCB0MSA8PCAxIHwgdDIgPDwgMiB8IHQzIDw8IDNdLmZvckVhY2goc3RpdGNoKTtcbiAgICAgIH1cbiAgICAgIGNhc2VzW3QxIHwgdDIgPDwgM10uZm9yRWFjaChzdGl0Y2gpO1xuICAgIH1cblxuICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgdGhlIGxhc3Qgcm93ICh5ID0gZHkgLSAxLCB0MCA9IHQxID0gMCkuXG4gICAgeCA9IC0xO1xuICAgIHQyID0gdmFsdWVzW3kgKiBkeF0gPj0gdmFsdWU7XG4gICAgY2FzZXNbdDIgPDwgMl0uZm9yRWFjaChzdGl0Y2gpO1xuICAgIHdoaWxlICgrK3ggPCBkeCAtIDEpIHtcbiAgICAgIHQzID0gdDIsIHQyID0gdmFsdWVzW3kgKiBkeCArIHggKyAxXSA+PSB2YWx1ZTtcbiAgICAgIGNhc2VzW3QyIDw8IDIgfCB0MyA8PCAzXS5mb3JFYWNoKHN0aXRjaCk7XG4gICAgfVxuICAgIGNhc2VzW3QyIDw8IDNdLmZvckVhY2goc3RpdGNoKTtcblxuICAgIGZ1bmN0aW9uIHN0aXRjaChsaW5lKSB7XG4gICAgICB2YXIgc3RhcnQgPSBbbGluZVswXVswXSArIHgsIGxpbmVbMF1bMV0gKyB5XSxcbiAgICAgICAgICBlbmQgPSBbbGluZVsxXVswXSArIHgsIGxpbmVbMV1bMV0gKyB5XSxcbiAgICAgICAgICBzdGFydEluZGV4ID0gaW5kZXgoc3RhcnQpLFxuICAgICAgICAgIGVuZEluZGV4ID0gaW5kZXgoZW5kKSxcbiAgICAgICAgICBmLCBnO1xuICAgICAgaWYgKGYgPSBmcmFnbWVudEJ5RW5kW3N0YXJ0SW5kZXhdKSB7XG4gICAgICAgIGlmIChnID0gZnJhZ21lbnRCeVN0YXJ0W2VuZEluZGV4XSkge1xuICAgICAgICAgIGRlbGV0ZSBmcmFnbWVudEJ5RW5kW2YuZW5kXTtcbiAgICAgICAgICBkZWxldGUgZnJhZ21lbnRCeVN0YXJ0W2cuc3RhcnRdO1xuICAgICAgICAgIGlmIChmID09PSBnKSB7XG4gICAgICAgICAgICBmLnJpbmcucHVzaChlbmQpO1xuICAgICAgICAgICAgY2FsbGJhY2soZi5yaW5nKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZnJhZ21lbnRCeVN0YXJ0W2Yuc3RhcnRdID0gZnJhZ21lbnRCeUVuZFtnLmVuZF0gPSB7c3RhcnQ6IGYuc3RhcnQsIGVuZDogZy5lbmQsIHJpbmc6IGYucmluZy5jb25jYXQoZy5yaW5nKX07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSBmcmFnbWVudEJ5RW5kW2YuZW5kXTtcbiAgICAgICAgICBmLnJpbmcucHVzaChlbmQpO1xuICAgICAgICAgIGZyYWdtZW50QnlFbmRbZi5lbmQgPSBlbmRJbmRleF0gPSBmO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGYgPSBmcmFnbWVudEJ5U3RhcnRbZW5kSW5kZXhdKSB7XG4gICAgICAgIGlmIChnID0gZnJhZ21lbnRCeUVuZFtzdGFydEluZGV4XSkge1xuICAgICAgICAgIGRlbGV0ZSBmcmFnbWVudEJ5U3RhcnRbZi5zdGFydF07XG4gICAgICAgICAgZGVsZXRlIGZyYWdtZW50QnlFbmRbZy5lbmRdO1xuICAgICAgICAgIGlmIChmID09PSBnKSB7XG4gICAgICAgICAgICBmLnJpbmcucHVzaChlbmQpO1xuICAgICAgICAgICAgY2FsbGJhY2soZi5yaW5nKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZnJhZ21lbnRCeVN0YXJ0W2cuc3RhcnRdID0gZnJhZ21lbnRCeUVuZFtmLmVuZF0gPSB7c3RhcnQ6IGcuc3RhcnQsIGVuZDogZi5lbmQsIHJpbmc6IGcucmluZy5jb25jYXQoZi5yaW5nKX07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSBmcmFnbWVudEJ5U3RhcnRbZi5zdGFydF07XG4gICAgICAgICAgZi5yaW5nLnVuc2hpZnQoc3RhcnQpO1xuICAgICAgICAgIGZyYWdtZW50QnlTdGFydFtmLnN0YXJ0ID0gc3RhcnRJbmRleF0gPSBmO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmcmFnbWVudEJ5U3RhcnRbc3RhcnRJbmRleF0gPSBmcmFnbWVudEJ5RW5kW2VuZEluZGV4XSA9IHtzdGFydDogc3RhcnRJbmRleCwgZW5kOiBlbmRJbmRleCwgcmluZzogW3N0YXJ0LCBlbmRdfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbmRleChwb2ludCkge1xuICAgIHJldHVybiBwb2ludFswXSAqIDIgKyBwb2ludFsxXSAqIChkeCArIDEpICogNDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNtb290aExpbmVhcihyaW5nLCB2YWx1ZXMsIHZhbHVlKSB7XG4gICAgcmluZy5mb3JFYWNoKGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgICB2YXIgeCA9IHBvaW50WzBdLFxuICAgICAgICAgIHkgPSBwb2ludFsxXSxcbiAgICAgICAgICB4dCA9IHggfCAwLFxuICAgICAgICAgIHl0ID0geSB8IDAsXG4gICAgICAgICAgdjAsXG4gICAgICAgICAgdjEgPSB2YWx1ZXNbeXQgKiBkeCArIHh0XTtcbiAgICAgIGlmICh4ID4gMCAmJiB4IDwgZHggJiYgeHQgPT09IHgpIHtcbiAgICAgICAgdjAgPSB2YWx1ZXNbeXQgKiBkeCArIHh0IC0gMV07XG4gICAgICAgIHBvaW50WzBdID0geCArICh2YWx1ZSAtIHYwKSAvICh2MSAtIHYwKSAtIDAuNTtcbiAgICAgIH1cbiAgICAgIGlmICh5ID4gMCAmJiB5IDwgZHkgJiYgeXQgPT09IHkpIHtcbiAgICAgICAgdjAgPSB2YWx1ZXNbKHl0IC0gMSkgKiBkeCArIHh0XTtcbiAgICAgICAgcG9pbnRbMV0gPSB5ICsgKHZhbHVlIC0gdjApIC8gKHYxIC0gdjApIC0gMC41O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgY29udG91cnMuY29udG91ciA9IGNvbnRvdXI7XG5cbiAgY29udG91cnMuc2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbZHgsIGR5XTtcbiAgICB2YXIgXzAgPSBNYXRoLmNlaWwoX1swXSksIF8xID0gTWF0aC5jZWlsKF9bMV0pO1xuICAgIGlmICghKF8wID4gMCkgfHwgIShfMSA+IDApKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHNpemVcIik7XG4gICAgcmV0dXJuIGR4ID0gXzAsIGR5ID0gXzEsIGNvbnRvdXJzO1xuICB9O1xuXG4gIGNvbnRvdXJzLnRocmVzaG9sZHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGhyZXNob2xkJCQxID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBBcnJheS5pc0FycmF5KF8pID8gY29uc3RhbnQkNihzbGljZSQzLmNhbGwoXykpIDogY29uc3RhbnQkNihfKSwgY29udG91cnMpIDogdGhyZXNob2xkJCQxO1xuICB9O1xuXG4gIGNvbnRvdXJzLnNtb290aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzbW9vdGggPSBfID8gc21vb3RoTGluZWFyIDogbm9vcCQxLCBjb250b3VycykgOiBzbW9vdGggPT09IHNtb290aExpbmVhcjtcbiAgfTtcblxuICByZXR1cm4gY29udG91cnM7XG59XG5cbi8vIFRPRE8gT3B0aW1pemUgZWRnZSBjYXNlcy5cbi8vIFRPRE8gT3B0aW1pemUgaW5kZXggY2FsY3VsYXRpb24uXG4vLyBUT0RPIE9wdGltaXplIGFyZ3VtZW50cy5cbmZ1bmN0aW9uIGJsdXJYKHNvdXJjZSwgdGFyZ2V0LCByKSB7XG4gIHZhciBuID0gc291cmNlLndpZHRoLFxuICAgICAgbSA9IHNvdXJjZS5oZWlnaHQsXG4gICAgICB3ID0gKHIgPDwgMSkgKyAxO1xuICBmb3IgKHZhciBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGkgPSAwLCBzciA9IDA7IGkgPCBuICsgcjsgKytpKSB7XG4gICAgICBpZiAoaSA8IG4pIHtcbiAgICAgICAgc3IgKz0gc291cmNlLmRhdGFbaSArIGogKiBuXTtcbiAgICAgIH1cbiAgICAgIGlmIChpID49IHIpIHtcbiAgICAgICAgaWYgKGkgPj0gdykge1xuICAgICAgICAgIHNyIC09IHNvdXJjZS5kYXRhW2kgLSB3ICsgaiAqIG5dO1xuICAgICAgICB9XG4gICAgICAgIHRhcmdldC5kYXRhW2kgLSByICsgaiAqIG5dID0gc3IgLyBNYXRoLm1pbihpICsgMSwgbiAtIDEgKyB3IC0gaSwgdyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIFRPRE8gT3B0aW1pemUgZWRnZSBjYXNlcy5cbi8vIFRPRE8gT3B0aW1pemUgaW5kZXggY2FsY3VsYXRpb24uXG4vLyBUT0RPIE9wdGltaXplIGFyZ3VtZW50cy5cbmZ1bmN0aW9uIGJsdXJZKHNvdXJjZSwgdGFyZ2V0LCByKSB7XG4gIHZhciBuID0gc291cmNlLndpZHRoLFxuICAgICAgbSA9IHNvdXJjZS5oZWlnaHQsXG4gICAgICB3ID0gKHIgPDwgMSkgKyAxO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSkge1xuICAgIGZvciAodmFyIGogPSAwLCBzciA9IDA7IGogPCBtICsgcjsgKytqKSB7XG4gICAgICBpZiAoaiA8IG0pIHtcbiAgICAgICAgc3IgKz0gc291cmNlLmRhdGFbaSArIGogKiBuXTtcbiAgICAgIH1cbiAgICAgIGlmIChqID49IHIpIHtcbiAgICAgICAgaWYgKGogPj0gdykge1xuICAgICAgICAgIHNyIC09IHNvdXJjZS5kYXRhW2kgKyAoaiAtIHcpICogbl07XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0LmRhdGFbaSArIChqIC0gcikgKiBuXSA9IHNyIC8gTWF0aC5taW4oaiArIDEsIG0gLSAxICsgdyAtIGosIHcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0WChkKSB7XG4gIHJldHVybiBkWzBdO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0WShkKSB7XG4gIHJldHVybiBkWzFdO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0V2VpZ2h0KCkge1xuICByZXR1cm4gMTtcbn1cblxuZnVuY3Rpb24gZGVuc2l0eSgpIHtcbiAgdmFyIHggPSBkZWZhdWx0WCxcbiAgICAgIHkgPSBkZWZhdWx0WSxcbiAgICAgIHdlaWdodCA9IGRlZmF1bHRXZWlnaHQsXG4gICAgICBkeCA9IDk2MCxcbiAgICAgIGR5ID0gNTAwLFxuICAgICAgciA9IDIwLCAvLyBibHVyIHJhZGl1c1xuICAgICAgayA9IDIsIC8vIGxvZzIoZ3JpZCBjZWxsIHNpemUpXG4gICAgICBvID0gciAqIDMsIC8vIGdyaWQgb2Zmc2V0LCB0byBwYWQgZm9yIGJsdXJcbiAgICAgIG4gPSAoZHggKyBvICogMikgPj4gaywgLy8gZ3JpZCB3aWR0aFxuICAgICAgbSA9IChkeSArIG8gKiAyKSA+PiBrLCAvLyBncmlkIGhlaWdodFxuICAgICAgdGhyZXNob2xkJCQxID0gY29uc3RhbnQkNigyMCk7XG5cbiAgZnVuY3Rpb24gZGVuc2l0eShkYXRhKSB7XG4gICAgdmFyIHZhbHVlczAgPSBuZXcgRmxvYXQzMkFycmF5KG4gKiBtKSxcbiAgICAgICAgdmFsdWVzMSA9IG5ldyBGbG9hdDMyQXJyYXkobiAqIG0pO1xuXG4gICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGQsIGksIGRhdGEpIHtcbiAgICAgIHZhciB4aSA9ICgreChkLCBpLCBkYXRhKSArIG8pID4+IGssXG4gICAgICAgICAgeWkgPSAoK3koZCwgaSwgZGF0YSkgKyBvKSA+PiBrLFxuICAgICAgICAgIHdpID0gK3dlaWdodChkLCBpLCBkYXRhKTtcbiAgICAgIGlmICh4aSA+PSAwICYmIHhpIDwgbiAmJiB5aSA+PSAwICYmIHlpIDwgbSkge1xuICAgICAgICB2YWx1ZXMwW3hpICsgeWkgKiBuXSArPSB3aTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFRPRE8gT3B0aW1pemUuXG4gICAgYmx1clgoe3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczB9LCB7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMX0sIHIgPj4gayk7XG4gICAgYmx1clkoe3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczF9LCB7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMH0sIHIgPj4gayk7XG4gICAgYmx1clgoe3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczB9LCB7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMX0sIHIgPj4gayk7XG4gICAgYmx1clkoe3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczF9LCB7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMH0sIHIgPj4gayk7XG4gICAgYmx1clgoe3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczB9LCB7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMX0sIHIgPj4gayk7XG4gICAgYmx1clkoe3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczF9LCB7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMH0sIHIgPj4gayk7XG5cbiAgICB2YXIgdHogPSB0aHJlc2hvbGQkJDEodmFsdWVzMCk7XG5cbiAgICAvLyBDb252ZXJ0IG51bWJlciBvZiB0aHJlc2hvbGRzIGludG8gdW5pZm9ybSB0aHJlc2hvbGRzLlxuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eikpIHtcbiAgICAgIHZhciBzdG9wID0gbWF4KHZhbHVlczApO1xuICAgICAgdHogPSB0aWNrU3RlcCgwLCBzdG9wLCB0eik7XG4gICAgICB0eiA9IHNlcXVlbmNlKDAsIE1hdGguZmxvb3Ioc3RvcCAvIHR6KSAqIHR6LCB0eik7XG4gICAgICB0ei5zaGlmdCgpO1xuICAgIH1cblxuICAgIHJldHVybiBjb250b3VycygpXG4gICAgICAgIC50aHJlc2hvbGRzKHR6KVxuICAgICAgICAuc2l6ZShbbiwgbV0pXG4gICAgICAodmFsdWVzMClcbiAgICAgICAgLm1hcCh0cmFuc2Zvcm0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNmb3JtKGdlb21ldHJ5KSB7XG4gICAgZ2VvbWV0cnkudmFsdWUgKj0gTWF0aC5wb3coMiwgLTIgKiBrKTsgLy8gRGVuc2l0eSBpbiBwb2ludHMgcGVyIHNxdWFyZSBwaXhlbC5cbiAgICBnZW9tZXRyeS5jb29yZGluYXRlcy5mb3JFYWNoKHRyYW5zZm9ybVBvbHlnb24pO1xuICAgIHJldHVybiBnZW9tZXRyeTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zZm9ybVBvbHlnb24oY29vcmRpbmF0ZXMpIHtcbiAgICBjb29yZGluYXRlcy5mb3JFYWNoKHRyYW5zZm9ybVJpbmcpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNmb3JtUmluZyhjb29yZGluYXRlcykge1xuICAgIGNvb3JkaW5hdGVzLmZvckVhY2godHJhbnNmb3JtUG9pbnQpO1xuICB9XG5cbiAgLy8gVE9ETyBPcHRpbWl6ZS5cbiAgZnVuY3Rpb24gdHJhbnNmb3JtUG9pbnQoY29vcmRpbmF0ZXMpIHtcbiAgICBjb29yZGluYXRlc1swXSA9IGNvb3JkaW5hdGVzWzBdICogTWF0aC5wb3coMiwgaykgLSBvO1xuICAgIGNvb3JkaW5hdGVzWzFdID0gY29vcmRpbmF0ZXNbMV0gKiBNYXRoLnBvdygyLCBrKSAtIG87XG4gIH1cblxuICBmdW5jdGlvbiByZXNpemUoKSB7XG4gICAgbyA9IHIgKiAzO1xuICAgIG4gPSAoZHggKyBvICogMikgPj4gaztcbiAgICBtID0gKGR5ICsgbyAqIDIpID4+IGs7XG4gICAgcmV0dXJuIGRlbnNpdHk7XG4gIH1cblxuICBkZW5zaXR5LnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNigrXyksIGRlbnNpdHkpIDogeDtcbiAgfTtcblxuICBkZW5zaXR5LnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNigrXyksIGRlbnNpdHkpIDogeTtcbiAgfTtcblxuICBkZW5zaXR5LndlaWdodCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh3ZWlnaHQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDYoK18pLCBkZW5zaXR5KSA6IHdlaWdodDtcbiAgfTtcblxuICBkZW5zaXR5LnNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gW2R4LCBkeV07XG4gICAgdmFyIF8wID0gTWF0aC5jZWlsKF9bMF0pLCBfMSA9IE1hdGguY2VpbChfWzFdKTtcbiAgICBpZiAoIShfMCA+PSAwKSAmJiAhKF8wID49IDApKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHNpemVcIik7XG4gICAgcmV0dXJuIGR4ID0gXzAsIGR5ID0gXzEsIHJlc2l6ZSgpO1xuICB9O1xuXG4gIGRlbnNpdHkuY2VsbFNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gMSA8PCBrO1xuICAgIGlmICghKChfID0gK18pID49IDEpKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNlbGwgc2l6ZVwiKTtcbiAgICByZXR1cm4gayA9IE1hdGguZmxvb3IoTWF0aC5sb2coXykgLyBNYXRoLkxOMiksIHJlc2l6ZSgpO1xuICB9O1xuXG4gIGRlbnNpdHkudGhyZXNob2xkcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aHJlc2hvbGQkJDEgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IEFycmF5LmlzQXJyYXkoXykgPyBjb25zdGFudCQ2KHNsaWNlJDMuY2FsbChfKSkgOiBjb25zdGFudCQ2KF8pLCBkZW5zaXR5KSA6IHRocmVzaG9sZCQkMTtcbiAgfTtcblxuICBkZW5zaXR5LmJhbmR3aWR0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBNYXRoLnNxcnQociAqIChyICsgMSkpO1xuICAgIGlmICghKChfID0gK18pID49IDApKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGJhbmR3aWR0aFwiKTtcbiAgICByZXR1cm4gciA9IE1hdGgucm91bmQoKE1hdGguc3FydCg0ICogXyAqIF8gKyAxKSAtIDEpIC8gMiksIHJlc2l6ZSgpO1xuICB9O1xuXG4gIHJldHVybiBkZW5zaXR5O1xufVxuXG52YXIgRU9MID0ge30sXG4gICAgRU9GID0ge30sXG4gICAgUVVPVEUgPSAzNCxcbiAgICBORVdMSU5FID0gMTAsXG4gICAgUkVUVVJOID0gMTM7XG5cbmZ1bmN0aW9uIG9iamVjdENvbnZlcnRlcihjb2x1bW5zKSB7XG4gIHJldHVybiBuZXcgRnVuY3Rpb24oXCJkXCIsIFwicmV0dXJuIHtcIiArIGNvbHVtbnMubWFwKGZ1bmN0aW9uKG5hbWUsIGkpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkobmFtZSkgKyBcIjogZFtcIiArIGkgKyBcIl1cIjtcbiAgfSkuam9pbihcIixcIikgKyBcIn1cIik7XG59XG5cbmZ1bmN0aW9uIGN1c3RvbUNvbnZlcnRlcihjb2x1bW5zLCBmKSB7XG4gIHZhciBvYmplY3QgPSBvYmplY3RDb252ZXJ0ZXIoY29sdW1ucyk7XG4gIHJldHVybiBmdW5jdGlvbihyb3csIGkpIHtcbiAgICByZXR1cm4gZihvYmplY3Qocm93KSwgaSwgY29sdW1ucyk7XG4gIH07XG59XG5cbi8vIENvbXB1dGUgdW5pcXVlIGNvbHVtbnMgaW4gb3JkZXIgb2YgZGlzY292ZXJ5LlxuZnVuY3Rpb24gaW5mZXJDb2x1bW5zKHJvd3MpIHtcbiAgdmFyIGNvbHVtblNldCA9IE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICBjb2x1bW5zID0gW107XG5cbiAgcm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdykge1xuICAgIGZvciAodmFyIGNvbHVtbiBpbiByb3cpIHtcbiAgICAgIGlmICghKGNvbHVtbiBpbiBjb2x1bW5TZXQpKSB7XG4gICAgICAgIGNvbHVtbnMucHVzaChjb2x1bW5TZXRbY29sdW1uXSA9IGNvbHVtbik7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY29sdW1ucztcbn1cblxuZnVuY3Rpb24gcGFkKHZhbHVlLCB3aWR0aCkge1xuICB2YXIgcyA9IHZhbHVlICsgXCJcIiwgbGVuZ3RoID0gcy5sZW5ndGg7XG4gIHJldHVybiBsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oMCkgKyBzIDogcztcbn1cblxuZnVuY3Rpb24gZm9ybWF0WWVhcih5ZWFyKSB7XG4gIHJldHVybiB5ZWFyIDwgMCA/IFwiLVwiICsgcGFkKC15ZWFyLCA2KVxuICAgIDogeWVhciA+IDk5OTkgPyBcIitcIiArIHBhZCh5ZWFyLCA2KVxuICAgIDogcGFkKHllYXIsIDQpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXREYXRlKGRhdGUpIHtcbiAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpLFxuICAgICAgbWludXRlcyA9IGRhdGUuZ2V0VVRDTWludXRlcygpLFxuICAgICAgc2Vjb25kcyA9IGRhdGUuZ2V0VVRDU2Vjb25kcygpLFxuICAgICAgbWlsbGlzZWNvbmRzID0gZGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgcmV0dXJuIGlzTmFOKGRhdGUpID8gXCJJbnZhbGlkIERhdGVcIlxuICAgICAgOiBmb3JtYXRZZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSwgNCkgKyBcIi1cIiArIHBhZChkYXRlLmdldFVUQ01vbnRoKCkgKyAxLCAyKSArIFwiLVwiICsgcGFkKGRhdGUuZ2V0VVRDRGF0ZSgpLCAyKVxuICAgICAgKyAobWlsbGlzZWNvbmRzID8gXCJUXCIgKyBwYWQoaG91cnMsIDIpICsgXCI6XCIgKyBwYWQobWludXRlcywgMikgKyBcIjpcIiArIHBhZChzZWNvbmRzLCAyKSArIFwiLlwiICsgcGFkKG1pbGxpc2Vjb25kcywgMykgKyBcIlpcIlxuICAgICAgOiBzZWNvbmRzID8gXCJUXCIgKyBwYWQoaG91cnMsIDIpICsgXCI6XCIgKyBwYWQobWludXRlcywgMikgKyBcIjpcIiArIHBhZChzZWNvbmRzLCAyKSArIFwiWlwiXG4gICAgICA6IG1pbnV0ZXMgfHwgaG91cnMgPyBcIlRcIiArIHBhZChob3VycywgMikgKyBcIjpcIiArIHBhZChtaW51dGVzLCAyKSArIFwiWlwiXG4gICAgICA6IFwiXCIpO1xufVxuXG5mdW5jdGlvbiBkc3ZGb3JtYXQoZGVsaW1pdGVyKSB7XG4gIHZhciByZUZvcm1hdCA9IG5ldyBSZWdFeHAoXCJbXFxcIlwiICsgZGVsaW1pdGVyICsgXCJcXG5cXHJdXCIpLFxuICAgICAgREVMSU1JVEVSID0gZGVsaW1pdGVyLmNoYXJDb2RlQXQoMCk7XG5cbiAgZnVuY3Rpb24gcGFyc2UodGV4dCwgZikge1xuICAgIHZhciBjb252ZXJ0LCBjb2x1bW5zLCByb3dzID0gcGFyc2VSb3dzKHRleHQsIGZ1bmN0aW9uKHJvdywgaSkge1xuICAgICAgaWYgKGNvbnZlcnQpIHJldHVybiBjb252ZXJ0KHJvdywgaSAtIDEpO1xuICAgICAgY29sdW1ucyA9IHJvdywgY29udmVydCA9IGYgPyBjdXN0b21Db252ZXJ0ZXIocm93LCBmKSA6IG9iamVjdENvbnZlcnRlcihyb3cpO1xuICAgIH0pO1xuICAgIHJvd3MuY29sdW1ucyA9IGNvbHVtbnMgfHwgW107XG4gICAgcmV0dXJuIHJvd3M7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVJvd3ModGV4dCwgZikge1xuICAgIHZhciByb3dzID0gW10sIC8vIG91dHB1dCByb3dzXG4gICAgICAgIE4gPSB0ZXh0Lmxlbmd0aCxcbiAgICAgICAgSSA9IDAsIC8vIGN1cnJlbnQgY2hhcmFjdGVyIGluZGV4XG4gICAgICAgIG4gPSAwLCAvLyBjdXJyZW50IGxpbmUgbnVtYmVyXG4gICAgICAgIHQsIC8vIGN1cnJlbnQgdG9rZW5cbiAgICAgICAgZW9mID0gTiA8PSAwLCAvLyBjdXJyZW50IHRva2VuIGZvbGxvd2VkIGJ5IEVPRj9cbiAgICAgICAgZW9sID0gZmFsc2U7IC8vIGN1cnJlbnQgdG9rZW4gZm9sbG93ZWQgYnkgRU9MP1xuXG4gICAgLy8gU3RyaXAgdGhlIHRyYWlsaW5nIG5ld2xpbmUuXG4gICAgaWYgKHRleHQuY2hhckNvZGVBdChOIC0gMSkgPT09IE5FV0xJTkUpIC0tTjtcbiAgICBpZiAodGV4dC5jaGFyQ29kZUF0KE4gLSAxKSA9PT0gUkVUVVJOKSAtLU47XG5cbiAgICBmdW5jdGlvbiB0b2tlbigpIHtcbiAgICAgIGlmIChlb2YpIHJldHVybiBFT0Y7XG4gICAgICBpZiAoZW9sKSByZXR1cm4gZW9sID0gZmFsc2UsIEVPTDtcblxuICAgICAgLy8gVW5lc2NhcGUgcXVvdGVzLlxuICAgICAgdmFyIGksIGogPSBJLCBjO1xuICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChqKSA9PT0gUVVPVEUpIHtcbiAgICAgICAgd2hpbGUgKEkrKyA8IE4gJiYgdGV4dC5jaGFyQ29kZUF0KEkpICE9PSBRVU9URSB8fCB0ZXh0LmNoYXJDb2RlQXQoKytJKSA9PT0gUVVPVEUpO1xuICAgICAgICBpZiAoKGkgPSBJKSA+PSBOKSBlb2YgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmICgoYyA9IHRleHQuY2hhckNvZGVBdChJKyspKSA9PT0gTkVXTElORSkgZW9sID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gUkVUVVJOKSB7IGVvbCA9IHRydWU7IGlmICh0ZXh0LmNoYXJDb2RlQXQoSSkgPT09IE5FV0xJTkUpICsrSTsgfVxuICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqICsgMSwgaSAtIDEpLnJlcGxhY2UoL1wiXCIvZywgXCJcXFwiXCIpO1xuICAgICAgfVxuXG4gICAgICAvLyBGaW5kIG5leHQgZGVsaW1pdGVyIG9yIG5ld2xpbmUuXG4gICAgICB3aGlsZSAoSSA8IE4pIHtcbiAgICAgICAgaWYgKChjID0gdGV4dC5jaGFyQ29kZUF0KGkgPSBJKyspKSA9PT0gTkVXTElORSkgZW9sID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gUkVUVVJOKSB7IGVvbCA9IHRydWU7IGlmICh0ZXh0LmNoYXJDb2RlQXQoSSkgPT09IE5FV0xJTkUpICsrSTsgfVxuICAgICAgICBlbHNlIGlmIChjICE9PSBERUxJTUlURVIpIGNvbnRpbnVlO1xuICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqLCBpKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmV0dXJuIGxhc3QgdG9rZW4gYmVmb3JlIEVPRi5cbiAgICAgIHJldHVybiBlb2YgPSB0cnVlLCB0ZXh0LnNsaWNlKGosIE4pO1xuICAgIH1cblxuICAgIHdoaWxlICgodCA9IHRva2VuKCkpICE9PSBFT0YpIHtcbiAgICAgIHZhciByb3cgPSBbXTtcbiAgICAgIHdoaWxlICh0ICE9PSBFT0wgJiYgdCAhPT0gRU9GKSByb3cucHVzaCh0KSwgdCA9IHRva2VuKCk7XG4gICAgICBpZiAoZiAmJiAocm93ID0gZihyb3csIG4rKykpID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgcm93cy5wdXNoKHJvdyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJvd3M7XG4gIH1cblxuICBmdW5jdGlvbiBwcmVmb3JtYXRCb2R5KHJvd3MsIGNvbHVtbnMpIHtcbiAgICByZXR1cm4gcm93cy5tYXAoZnVuY3Rpb24ocm93KSB7XG4gICAgICByZXR1cm4gY29sdW1ucy5tYXAoZnVuY3Rpb24oY29sdW1uKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXRWYWx1ZShyb3dbY29sdW1uXSk7XG4gICAgICB9KS5qb2luKGRlbGltaXRlcik7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXQocm93cywgY29sdW1ucykge1xuICAgIGlmIChjb2x1bW5zID09IG51bGwpIGNvbHVtbnMgPSBpbmZlckNvbHVtbnMocm93cyk7XG4gICAgcmV0dXJuIFtjb2x1bW5zLm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpXS5jb25jYXQocHJlZm9ybWF0Qm9keShyb3dzLCBjb2x1bW5zKSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdEJvZHkocm93cywgY29sdW1ucykge1xuICAgIGlmIChjb2x1bW5zID09IG51bGwpIGNvbHVtbnMgPSBpbmZlckNvbHVtbnMocm93cyk7XG4gICAgcmV0dXJuIHByZWZvcm1hdEJvZHkocm93cywgY29sdW1ucykuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFJvd3Mocm93cykge1xuICAgIHJldHVybiByb3dzLm1hcChmb3JtYXRSb3cpLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRSb3cocm93KSB7XG4gICAgcmV0dXJuIHJvdy5tYXAoZm9ybWF0VmFsdWUpLmpvaW4oZGVsaW1pdGVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiXG4gICAgICAgIDogdmFsdWUgaW5zdGFuY2VvZiBEYXRlID8gZm9ybWF0RGF0ZSh2YWx1ZSlcbiAgICAgICAgOiByZUZvcm1hdC50ZXN0KHZhbHVlICs9IFwiXCIpID8gXCJcXFwiXCIgKyB2YWx1ZS5yZXBsYWNlKC9cIi9nLCBcIlxcXCJcXFwiXCIpICsgXCJcXFwiXCJcbiAgICAgICAgOiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGFyc2U6IHBhcnNlLFxuICAgIHBhcnNlUm93czogcGFyc2VSb3dzLFxuICAgIGZvcm1hdDogZm9ybWF0LFxuICAgIGZvcm1hdEJvZHk6IGZvcm1hdEJvZHksXG4gICAgZm9ybWF0Um93czogZm9ybWF0Um93c1xuICB9O1xufVxuXG52YXIgY3N2ID0gZHN2Rm9ybWF0KFwiLFwiKTtcblxudmFyIGNzdlBhcnNlID0gY3N2LnBhcnNlO1xudmFyIGNzdlBhcnNlUm93cyA9IGNzdi5wYXJzZVJvd3M7XG52YXIgY3N2Rm9ybWF0ID0gY3N2LmZvcm1hdDtcbnZhciBjc3ZGb3JtYXRCb2R5ID0gY3N2LmZvcm1hdEJvZHk7XG52YXIgY3N2Rm9ybWF0Um93cyA9IGNzdi5mb3JtYXRSb3dzO1xuXG52YXIgdHN2ID0gZHN2Rm9ybWF0KFwiXFx0XCIpO1xuXG52YXIgdHN2UGFyc2UgPSB0c3YucGFyc2U7XG52YXIgdHN2UGFyc2VSb3dzID0gdHN2LnBhcnNlUm93cztcbnZhciB0c3ZGb3JtYXQgPSB0c3YuZm9ybWF0O1xudmFyIHRzdkZvcm1hdEJvZHkgPSB0c3YuZm9ybWF0Qm9keTtcbnZhciB0c3ZGb3JtYXRSb3dzID0gdHN2LmZvcm1hdFJvd3M7XG5cbmZ1bmN0aW9uIGF1dG9UeXBlKG9iamVjdCkge1xuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgdmFyIHZhbHVlID0gb2JqZWN0W2tleV0udHJpbSgpLCBudW1iZXI7XG4gICAgaWYgKCF2YWx1ZSkgdmFsdWUgPSBudWxsO1xuICAgIGVsc2UgaWYgKHZhbHVlID09PSBcInRydWVcIikgdmFsdWUgPSB0cnVlO1xuICAgIGVsc2UgaWYgKHZhbHVlID09PSBcImZhbHNlXCIpIHZhbHVlID0gZmFsc2U7XG4gICAgZWxzZSBpZiAodmFsdWUgPT09IFwiTmFOXCIpIHZhbHVlID0gTmFOO1xuICAgIGVsc2UgaWYgKCFpc05hTihudW1iZXIgPSArdmFsdWUpKSB2YWx1ZSA9IG51bWJlcjtcbiAgICBlbHNlIGlmICgvXihbLStdXFxkezJ9KT9cXGR7NH0oLVxcZHsyfSgtXFxkezJ9KT8pPyhUXFxkezJ9OlxcZHsyfSg6XFxkezJ9KFxcLlxcZHszfSk/KT8oWnxbLStdXFxkezJ9OlxcZHsyfSk/KT8kLy50ZXN0KHZhbHVlKSkgdmFsdWUgPSBuZXcgRGF0ZSh2YWx1ZSk7XG4gICAgZWxzZSBjb250aW51ZTtcbiAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbmZ1bmN0aW9uIHJlc3BvbnNlQmxvYihyZXNwb25zZSkge1xuICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzICsgXCIgXCIgKyByZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgcmV0dXJuIHJlc3BvbnNlLmJsb2IoKTtcbn1cblxuZnVuY3Rpb24gYmxvYihpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gZmV0Y2goaW5wdXQsIGluaXQpLnRoZW4ocmVzcG9uc2VCbG9iKTtcbn1cblxuZnVuY3Rpb24gcmVzcG9uc2VBcnJheUJ1ZmZlcihyZXNwb25zZSkge1xuICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzICsgXCIgXCIgKyByZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgcmV0dXJuIHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XG59XG5cbmZ1bmN0aW9uIGJ1ZmZlcihpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gZmV0Y2goaW5wdXQsIGluaXQpLnRoZW4ocmVzcG9uc2VBcnJheUJ1ZmZlcik7XG59XG5cbmZ1bmN0aW9uIHJlc3BvbnNlVGV4dChyZXNwb25zZSkge1xuICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzICsgXCIgXCIgKyByZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgcmV0dXJuIHJlc3BvbnNlLnRleHQoKTtcbn1cblxuZnVuY3Rpb24gdGV4dChpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gZmV0Y2goaW5wdXQsIGluaXQpLnRoZW4ocmVzcG9uc2VUZXh0KTtcbn1cblxuZnVuY3Rpb24gZHN2UGFyc2UocGFyc2UpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0LCBpbml0LCByb3cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiB0eXBlb2YgaW5pdCA9PT0gXCJmdW5jdGlvblwiKSByb3cgPSBpbml0LCBpbml0ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiB0ZXh0KGlucHV0LCBpbml0KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gcGFyc2UocmVzcG9uc2UsIHJvdyk7XG4gICAgfSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRzdihkZWxpbWl0ZXIsIGlucHV0LCBpbml0LCByb3cpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMgJiYgdHlwZW9mIGluaXQgPT09IFwiZnVuY3Rpb25cIikgcm93ID0gaW5pdCwgaW5pdCA9IHVuZGVmaW5lZDtcbiAgdmFyIGZvcm1hdCA9IGRzdkZvcm1hdChkZWxpbWl0ZXIpO1xuICByZXR1cm4gdGV4dChpbnB1dCwgaW5pdCkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgIHJldHVybiBmb3JtYXQucGFyc2UocmVzcG9uc2UsIHJvdyk7XG4gIH0pO1xufVxuXG52YXIgY3N2JDEgPSBkc3ZQYXJzZShjc3ZQYXJzZSk7XG52YXIgdHN2JDEgPSBkc3ZQYXJzZSh0c3ZQYXJzZSk7XG5cbmZ1bmN0aW9uIGltYWdlKGlucHV0LCBpbml0KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgaW1hZ2UgPSBuZXcgSW1hZ2U7XG4gICAgZm9yICh2YXIga2V5IGluIGluaXQpIGltYWdlW2tleV0gPSBpbml0W2tleV07XG4gICAgaW1hZ2Uub25lcnJvciA9IHJlamVjdDtcbiAgICBpbWFnZS5vbmxvYWQgPSBmdW5jdGlvbigpIHsgcmVzb2x2ZShpbWFnZSk7IH07XG4gICAgaW1hZ2Uuc3JjID0gaW5wdXQ7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZXNwb25zZUpzb24ocmVzcG9uc2UpIHtcbiAgaWYgKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlLnN0YXR1cyArIFwiIFwiICsgcmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG4gIHJldHVybiByZXNwb25zZS5qc29uKCk7XG59XG5cbmZ1bmN0aW9uIGpzb24oaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIGZldGNoKGlucHV0LCBpbml0KS50aGVuKHJlc3BvbnNlSnNvbik7XG59XG5cbmZ1bmN0aW9uIHBhcnNlcih0eXBlKSB7XG4gIHJldHVybiBmdW5jdGlvbihpbnB1dCwgaW5pdCkgIHtcbiAgICByZXR1cm4gdGV4dChpbnB1dCwgaW5pdCkudGhlbihmdW5jdGlvbih0ZXh0JCQxKSB7XG4gICAgICByZXR1cm4gKG5ldyBET01QYXJzZXIpLnBhcnNlRnJvbVN0cmluZyh0ZXh0JCQxLCB0eXBlKTtcbiAgICB9KTtcbiAgfTtcbn1cblxudmFyIHhtbCA9IHBhcnNlcihcImFwcGxpY2F0aW9uL3htbFwiKTtcblxudmFyIGh0bWwgPSBwYXJzZXIoXCJ0ZXh0L2h0bWxcIik7XG5cbnZhciBzdmcgPSBwYXJzZXIoXCJpbWFnZS9zdmcreG1sXCIpO1xuXG5mdW5jdGlvbiBjZW50ZXIkMSh4LCB5KSB7XG4gIHZhciBub2RlcztcblxuICBpZiAoeCA9PSBudWxsKSB4ID0gMDtcbiAgaWYgKHkgPT0gbnVsbCkgeSA9IDA7XG5cbiAgZnVuY3Rpb24gZm9yY2UoKSB7XG4gICAgdmFyIGksXG4gICAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICAgIG5vZGUsXG4gICAgICAgIHN4ID0gMCxcbiAgICAgICAgc3kgPSAwO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBzeCArPSBub2RlLngsIHN5ICs9IG5vZGUueTtcbiAgICB9XG5cbiAgICBmb3IgKHN4ID0gc3ggLyBuIC0geCwgc3kgPSBzeSAvIG4gLSB5LCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLnggLT0gc3gsIG5vZGUueSAtPSBzeTtcbiAgICB9XG4gIH1cblxuICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oXykge1xuICAgIG5vZGVzID0gXztcbiAgfTtcblxuICBmb3JjZS54ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSArXywgZm9yY2UpIDogeDtcbiAgfTtcblxuICBmb3JjZS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSArXywgZm9yY2UpIDogeTtcbiAgfTtcblxuICByZXR1cm4gZm9yY2U7XG59XG5cbmZ1bmN0aW9uIGNvbnN0YW50JDcoeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGppZ2dsZSgpIHtcbiAgcmV0dXJuIChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDFlLTY7XG59XG5cbmZ1bmN0aW9uIHRyZWVfYWRkKGQpIHtcbiAgdmFyIHggPSArdGhpcy5feC5jYWxsKG51bGwsIGQpLFxuICAgICAgeSA9ICt0aGlzLl95LmNhbGwobnVsbCwgZCk7XG4gIHJldHVybiBhZGQodGhpcy5jb3Zlcih4LCB5KSwgeCwgeSwgZCk7XG59XG5cbmZ1bmN0aW9uIGFkZCh0cmVlLCB4LCB5LCBkKSB7XG4gIGlmIChpc05hTih4KSB8fCBpc05hTih5KSkgcmV0dXJuIHRyZWU7IC8vIGlnbm9yZSBpbnZhbGlkIHBvaW50c1xuXG4gIHZhciBwYXJlbnQsXG4gICAgICBub2RlID0gdHJlZS5fcm9vdCxcbiAgICAgIGxlYWYgPSB7ZGF0YTogZH0sXG4gICAgICB4MCA9IHRyZWUuX3gwLFxuICAgICAgeTAgPSB0cmVlLl95MCxcbiAgICAgIHgxID0gdHJlZS5feDEsXG4gICAgICB5MSA9IHRyZWUuX3kxLFxuICAgICAgeG0sXG4gICAgICB5bSxcbiAgICAgIHhwLFxuICAgICAgeXAsXG4gICAgICByaWdodCxcbiAgICAgIGJvdHRvbSxcbiAgICAgIGksXG4gICAgICBqO1xuXG4gIC8vIElmIHRoZSB0cmVlIGlzIGVtcHR5LCBpbml0aWFsaXplIHRoZSByb290IGFzIGEgbGVhZi5cbiAgaWYgKCFub2RlKSByZXR1cm4gdHJlZS5fcm9vdCA9IGxlYWYsIHRyZWU7XG5cbiAgLy8gRmluZCB0aGUgZXhpc3RpbmcgbGVhZiBmb3IgdGhlIG5ldyBwb2ludCwgb3IgYWRkIGl0LlxuICB3aGlsZSAobm9kZS5sZW5ndGgpIHtcbiAgICBpZiAocmlnaHQgPSB4ID49ICh4bSA9ICh4MCArIHgxKSAvIDIpKSB4MCA9IHhtOyBlbHNlIHgxID0geG07XG4gICAgaWYgKGJvdHRvbSA9IHkgPj0gKHltID0gKHkwICsgeTEpIC8gMikpIHkwID0geW07IGVsc2UgeTEgPSB5bTtcbiAgICBpZiAocGFyZW50ID0gbm9kZSwgIShub2RlID0gbm9kZVtpID0gYm90dG9tIDw8IDEgfCByaWdodF0pKSByZXR1cm4gcGFyZW50W2ldID0gbGVhZiwgdHJlZTtcbiAgfVxuXG4gIC8vIElzIHRoZSBuZXcgcG9pbnQgaXMgZXhhY3RseSBjb2luY2lkZW50IHdpdGggdGhlIGV4aXN0aW5nIHBvaW50P1xuICB4cCA9ICt0cmVlLl94LmNhbGwobnVsbCwgbm9kZS5kYXRhKTtcbiAgeXAgPSArdHJlZS5feS5jYWxsKG51bGwsIG5vZGUuZGF0YSk7XG4gIGlmICh4ID09PSB4cCAmJiB5ID09PSB5cCkgcmV0dXJuIGxlYWYubmV4dCA9IG5vZGUsIHBhcmVudCA/IHBhcmVudFtpXSA9IGxlYWYgOiB0cmVlLl9yb290ID0gbGVhZiwgdHJlZTtcblxuICAvLyBPdGhlcndpc2UsIHNwbGl0IHRoZSBsZWFmIG5vZGUgdW50aWwgdGhlIG9sZCBhbmQgbmV3IHBvaW50IGFyZSBzZXBhcmF0ZWQuXG4gIGRvIHtcbiAgICBwYXJlbnQgPSBwYXJlbnQgPyBwYXJlbnRbaV0gPSBuZXcgQXJyYXkoNCkgOiB0cmVlLl9yb290ID0gbmV3IEFycmF5KDQpO1xuICAgIGlmIChyaWdodCA9IHggPj0gKHhtID0gKHgwICsgeDEpIC8gMikpIHgwID0geG07IGVsc2UgeDEgPSB4bTtcbiAgICBpZiAoYm90dG9tID0geSA+PSAoeW0gPSAoeTAgKyB5MSkgLyAyKSkgeTAgPSB5bTsgZWxzZSB5MSA9IHltO1xuICB9IHdoaWxlICgoaSA9IGJvdHRvbSA8PCAxIHwgcmlnaHQpID09PSAoaiA9ICh5cCA+PSB5bSkgPDwgMSB8ICh4cCA+PSB4bSkpKTtcbiAgcmV0dXJuIHBhcmVudFtqXSA9IG5vZGUsIHBhcmVudFtpXSA9IGxlYWYsIHRyZWU7XG59XG5cbmZ1bmN0aW9uIGFkZEFsbChkYXRhKSB7XG4gIHZhciBkLCBpLCBuID0gZGF0YS5sZW5ndGgsXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIHh6ID0gbmV3IEFycmF5KG4pLFxuICAgICAgeXogPSBuZXcgQXJyYXkobiksXG4gICAgICB4MCA9IEluZmluaXR5LFxuICAgICAgeTAgPSBJbmZpbml0eSxcbiAgICAgIHgxID0gLUluZmluaXR5LFxuICAgICAgeTEgPSAtSW5maW5pdHk7XG5cbiAgLy8gQ29tcHV0ZSB0aGUgcG9pbnRzIGFuZCB0aGVpciBleHRlbnQuXG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoaXNOYU4oeCA9ICt0aGlzLl94LmNhbGwobnVsbCwgZCA9IGRhdGFbaV0pKSB8fCBpc05hTih5ID0gK3RoaXMuX3kuY2FsbChudWxsLCBkKSkpIGNvbnRpbnVlO1xuICAgIHh6W2ldID0geDtcbiAgICB5eltpXSA9IHk7XG4gICAgaWYgKHggPCB4MCkgeDAgPSB4O1xuICAgIGlmICh4ID4geDEpIHgxID0geDtcbiAgICBpZiAoeSA8IHkwKSB5MCA9IHk7XG4gICAgaWYgKHkgPiB5MSkgeTEgPSB5O1xuICB9XG5cbiAgLy8gSWYgdGhlcmUgd2VyZSBubyAodmFsaWQpIHBvaW50cywgYWJvcnQuXG4gIGlmICh4MCA+IHgxIHx8IHkwID4geTEpIHJldHVybiB0aGlzO1xuXG4gIC8vIEV4cGFuZCB0aGUgdHJlZSB0byBjb3ZlciB0aGUgbmV3IHBvaW50cy5cbiAgdGhpcy5jb3Zlcih4MCwgeTApLmNvdmVyKHgxLCB5MSk7XG5cbiAgLy8gQWRkIHRoZSBuZXcgcG9pbnRzLlxuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgYWRkKHRoaXMsIHh6W2ldLCB5eltpXSwgZGF0YVtpXSk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdHJlZV9jb3Zlcih4LCB5KSB7XG4gIGlmIChpc05hTih4ID0gK3gpIHx8IGlzTmFOKHkgPSAreSkpIHJldHVybiB0aGlzOyAvLyBpZ25vcmUgaW52YWxpZCBwb2ludHNcblxuICB2YXIgeDAgPSB0aGlzLl94MCxcbiAgICAgIHkwID0gdGhpcy5feTAsXG4gICAgICB4MSA9IHRoaXMuX3gxLFxuICAgICAgeTEgPSB0aGlzLl95MTtcblxuICAvLyBJZiB0aGUgcXVhZHRyZWUgaGFzIG5vIGV4dGVudCwgaW5pdGlhbGl6ZSB0aGVtLlxuICAvLyBJbnRlZ2VyIGV4dGVudCBhcmUgbmVjZXNzYXJ5IHNvIHRoYXQgaWYgd2UgbGF0ZXIgZG91YmxlIHRoZSBleHRlbnQsXG4gIC8vIHRoZSBleGlzdGluZyBxdWFkcmFudCBib3VuZGFyaWVzIGRvbuKAmXQgY2hhbmdlIGR1ZSB0byBmbG9hdGluZyBwb2ludCBlcnJvciFcbiAgaWYgKGlzTmFOKHgwKSkge1xuICAgIHgxID0gKHgwID0gTWF0aC5mbG9vcih4KSkgKyAxO1xuICAgIHkxID0gKHkwID0gTWF0aC5mbG9vcih5KSkgKyAxO1xuICB9XG5cbiAgLy8gT3RoZXJ3aXNlLCBkb3VibGUgcmVwZWF0ZWRseSB0byBjb3Zlci5cbiAgZWxzZSB7XG4gICAgdmFyIHogPSB4MSAtIHgwLFxuICAgICAgICBub2RlID0gdGhpcy5fcm9vdCxcbiAgICAgICAgcGFyZW50LFxuICAgICAgICBpO1xuXG4gICAgd2hpbGUgKHgwID4geCB8fCB4ID49IHgxIHx8IHkwID4geSB8fCB5ID49IHkxKSB7XG4gICAgICBpID0gKHkgPCB5MCkgPDwgMSB8ICh4IDwgeDApO1xuICAgICAgcGFyZW50ID0gbmV3IEFycmF5KDQpLCBwYXJlbnRbaV0gPSBub2RlLCBub2RlID0gcGFyZW50LCB6ICo9IDI7XG4gICAgICBzd2l0Y2ggKGkpIHtcbiAgICAgICAgY2FzZSAwOiB4MSA9IHgwICsgeiwgeTEgPSB5MCArIHo7IGJyZWFrO1xuICAgICAgICBjYXNlIDE6IHgwID0geDEgLSB6LCB5MSA9IHkwICsgejsgYnJlYWs7XG4gICAgICAgIGNhc2UgMjogeDEgPSB4MCArIHosIHkwID0geTEgLSB6OyBicmVhaztcbiAgICAgICAgY2FzZSAzOiB4MCA9IHgxIC0geiwgeTAgPSB5MSAtIHo7IGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9yb290ICYmIHRoaXMuX3Jvb3QubGVuZ3RoKSB0aGlzLl9yb290ID0gbm9kZTtcbiAgfVxuXG4gIHRoaXMuX3gwID0geDA7XG4gIHRoaXMuX3kwID0geTA7XG4gIHRoaXMuX3gxID0geDE7XG4gIHRoaXMuX3kxID0geTE7XG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB0cmVlX2RhdGEoKSB7XG4gIHZhciBkYXRhID0gW107XG4gIHRoaXMudmlzaXQoZnVuY3Rpb24obm9kZSkge1xuICAgIGlmICghbm9kZS5sZW5ndGgpIGRvIGRhdGEucHVzaChub2RlLmRhdGEpOyB3aGlsZSAobm9kZSA9IG5vZGUubmV4dClcbiAgfSk7XG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiB0cmVlX2V4dGVudChfKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuY292ZXIoK19bMF1bMF0sICtfWzBdWzFdKS5jb3ZlcigrX1sxXVswXSwgK19bMV1bMV0pXG4gICAgICA6IGlzTmFOKHRoaXMuX3gwKSA/IHVuZGVmaW5lZCA6IFtbdGhpcy5feDAsIHRoaXMuX3kwXSwgW3RoaXMuX3gxLCB0aGlzLl95MV1dO1xufVxuXG5mdW5jdGlvbiBRdWFkKG5vZGUsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHRoaXMubm9kZSA9IG5vZGU7XG4gIHRoaXMueDAgPSB4MDtcbiAgdGhpcy55MCA9IHkwO1xuICB0aGlzLngxID0geDE7XG4gIHRoaXMueTEgPSB5MTtcbn1cblxuZnVuY3Rpb24gdHJlZV9maW5kKHgsIHksIHJhZGl1cykge1xuICB2YXIgZGF0YSxcbiAgICAgIHgwID0gdGhpcy5feDAsXG4gICAgICB5MCA9IHRoaXMuX3kwLFxuICAgICAgeDEsXG4gICAgICB5MSxcbiAgICAgIHgyLFxuICAgICAgeTIsXG4gICAgICB4MyA9IHRoaXMuX3gxLFxuICAgICAgeTMgPSB0aGlzLl95MSxcbiAgICAgIHF1YWRzID0gW10sXG4gICAgICBub2RlID0gdGhpcy5fcm9vdCxcbiAgICAgIHEsXG4gICAgICBpO1xuXG4gIGlmIChub2RlKSBxdWFkcy5wdXNoKG5ldyBRdWFkKG5vZGUsIHgwLCB5MCwgeDMsIHkzKSk7XG4gIGlmIChyYWRpdXMgPT0gbnVsbCkgcmFkaXVzID0gSW5maW5pdHk7XG4gIGVsc2Uge1xuICAgIHgwID0geCAtIHJhZGl1cywgeTAgPSB5IC0gcmFkaXVzO1xuICAgIHgzID0geCArIHJhZGl1cywgeTMgPSB5ICsgcmFkaXVzO1xuICAgIHJhZGl1cyAqPSByYWRpdXM7XG4gIH1cblxuICB3aGlsZSAocSA9IHF1YWRzLnBvcCgpKSB7XG5cbiAgICAvLyBTdG9wIHNlYXJjaGluZyBpZiB0aGlzIHF1YWRyYW50IGNhbuKAmXQgY29udGFpbiBhIGNsb3NlciBub2RlLlxuICAgIGlmICghKG5vZGUgPSBxLm5vZGUpXG4gICAgICAgIHx8ICh4MSA9IHEueDApID4geDNcbiAgICAgICAgfHwgKHkxID0gcS55MCkgPiB5M1xuICAgICAgICB8fCAoeDIgPSBxLngxKSA8IHgwXG4gICAgICAgIHx8ICh5MiA9IHEueTEpIDwgeTApIGNvbnRpbnVlO1xuXG4gICAgLy8gQmlzZWN0IHRoZSBjdXJyZW50IHF1YWRyYW50LlxuICAgIGlmIChub2RlLmxlbmd0aCkge1xuICAgICAgdmFyIHhtID0gKHgxICsgeDIpIC8gMixcbiAgICAgICAgICB5bSA9ICh5MSArIHkyKSAvIDI7XG5cbiAgICAgIHF1YWRzLnB1c2goXG4gICAgICAgIG5ldyBRdWFkKG5vZGVbM10sIHhtLCB5bSwgeDIsIHkyKSxcbiAgICAgICAgbmV3IFF1YWQobm9kZVsyXSwgeDEsIHltLCB4bSwgeTIpLFxuICAgICAgICBuZXcgUXVhZChub2RlWzFdLCB4bSwgeTEsIHgyLCB5bSksXG4gICAgICAgIG5ldyBRdWFkKG5vZGVbMF0sIHgxLCB5MSwgeG0sIHltKVxuICAgICAgKTtcblxuICAgICAgLy8gVmlzaXQgdGhlIGNsb3Nlc3QgcXVhZHJhbnQgZmlyc3QuXG4gICAgICBpZiAoaSA9ICh5ID49IHltKSA8PCAxIHwgKHggPj0geG0pKSB7XG4gICAgICAgIHEgPSBxdWFkc1txdWFkcy5sZW5ndGggLSAxXTtcbiAgICAgICAgcXVhZHNbcXVhZHMubGVuZ3RoIC0gMV0gPSBxdWFkc1txdWFkcy5sZW5ndGggLSAxIC0gaV07XG4gICAgICAgIHF1YWRzW3F1YWRzLmxlbmd0aCAtIDEgLSBpXSA9IHE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVmlzaXQgdGhpcyBwb2ludC4gKFZpc2l0aW5nIGNvaW5jaWRlbnQgcG9pbnRzIGlzbuKAmXQgbmVjZXNzYXJ5ISlcbiAgICBlbHNlIHtcbiAgICAgIHZhciBkeCA9IHggLSArdGhpcy5feC5jYWxsKG51bGwsIG5vZGUuZGF0YSksXG4gICAgICAgICAgZHkgPSB5IC0gK3RoaXMuX3kuY2FsbChudWxsLCBub2RlLmRhdGEpLFxuICAgICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICBpZiAoZDIgPCByYWRpdXMpIHtcbiAgICAgICAgdmFyIGQgPSBNYXRoLnNxcnQocmFkaXVzID0gZDIpO1xuICAgICAgICB4MCA9IHggLSBkLCB5MCA9IHkgLSBkO1xuICAgICAgICB4MyA9IHggKyBkLCB5MyA9IHkgKyBkO1xuICAgICAgICBkYXRhID0gbm9kZS5kYXRhO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiB0cmVlX3JlbW92ZShkKSB7XG4gIGlmIChpc05hTih4ID0gK3RoaXMuX3guY2FsbChudWxsLCBkKSkgfHwgaXNOYU4oeSA9ICt0aGlzLl95LmNhbGwobnVsbCwgZCkpKSByZXR1cm4gdGhpczsgLy8gaWdub3JlIGludmFsaWQgcG9pbnRzXG5cbiAgdmFyIHBhcmVudCxcbiAgICAgIG5vZGUgPSB0aGlzLl9yb290LFxuICAgICAgcmV0YWluZXIsXG4gICAgICBwcmV2aW91cyxcbiAgICAgIG5leHQsXG4gICAgICB4MCA9IHRoaXMuX3gwLFxuICAgICAgeTAgPSB0aGlzLl95MCxcbiAgICAgIHgxID0gdGhpcy5feDEsXG4gICAgICB5MSA9IHRoaXMuX3kxLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB4bSxcbiAgICAgIHltLFxuICAgICAgcmlnaHQsXG4gICAgICBib3R0b20sXG4gICAgICBpLFxuICAgICAgajtcblxuICAvLyBJZiB0aGUgdHJlZSBpcyBlbXB0eSwgaW5pdGlhbGl6ZSB0aGUgcm9vdCBhcyBhIGxlYWYuXG4gIGlmICghbm9kZSkgcmV0dXJuIHRoaXM7XG5cbiAgLy8gRmluZCB0aGUgbGVhZiBub2RlIGZvciB0aGUgcG9pbnQuXG4gIC8vIFdoaWxlIGRlc2NlbmRpbmcsIGFsc28gcmV0YWluIHRoZSBkZWVwZXN0IHBhcmVudCB3aXRoIGEgbm9uLXJlbW92ZWQgc2libGluZy5cbiAgaWYgKG5vZGUubGVuZ3RoKSB3aGlsZSAodHJ1ZSkge1xuICAgIGlmIChyaWdodCA9IHggPj0gKHhtID0gKHgwICsgeDEpIC8gMikpIHgwID0geG07IGVsc2UgeDEgPSB4bTtcbiAgICBpZiAoYm90dG9tID0geSA+PSAoeW0gPSAoeTAgKyB5MSkgLyAyKSkgeTAgPSB5bTsgZWxzZSB5MSA9IHltO1xuICAgIGlmICghKHBhcmVudCA9IG5vZGUsIG5vZGUgPSBub2RlW2kgPSBib3R0b20gPDwgMSB8IHJpZ2h0XSkpIHJldHVybiB0aGlzO1xuICAgIGlmICghbm9kZS5sZW5ndGgpIGJyZWFrO1xuICAgIGlmIChwYXJlbnRbKGkgKyAxKSAmIDNdIHx8IHBhcmVudFsoaSArIDIpICYgM10gfHwgcGFyZW50WyhpICsgMykgJiAzXSkgcmV0YWluZXIgPSBwYXJlbnQsIGogPSBpO1xuICB9XG5cbiAgLy8gRmluZCB0aGUgcG9pbnQgdG8gcmVtb3ZlLlxuICB3aGlsZSAobm9kZS5kYXRhICE9PSBkKSBpZiAoIShwcmV2aW91cyA9IG5vZGUsIG5vZGUgPSBub2RlLm5leHQpKSByZXR1cm4gdGhpcztcbiAgaWYgKG5leHQgPSBub2RlLm5leHQpIGRlbGV0ZSBub2RlLm5leHQ7XG5cbiAgLy8gSWYgdGhlcmUgYXJlIG11bHRpcGxlIGNvaW5jaWRlbnQgcG9pbnRzLCByZW1vdmUganVzdCB0aGUgcG9pbnQuXG4gIGlmIChwcmV2aW91cykgcmV0dXJuIChuZXh0ID8gcHJldmlvdXMubmV4dCA9IG5leHQgOiBkZWxldGUgcHJldmlvdXMubmV4dCksIHRoaXM7XG5cbiAgLy8gSWYgdGhpcyBpcyB0aGUgcm9vdCBwb2ludCwgcmVtb3ZlIGl0LlxuICBpZiAoIXBhcmVudCkgcmV0dXJuIHRoaXMuX3Jvb3QgPSBuZXh0LCB0aGlzO1xuXG4gIC8vIFJlbW92ZSB0aGlzIGxlYWYuXG4gIG5leHQgPyBwYXJlbnRbaV0gPSBuZXh0IDogZGVsZXRlIHBhcmVudFtpXTtcblxuICAvLyBJZiB0aGUgcGFyZW50IG5vdyBjb250YWlucyBleGFjdGx5IG9uZSBsZWFmLCBjb2xsYXBzZSBzdXBlcmZsdW91cyBwYXJlbnRzLlxuICBpZiAoKG5vZGUgPSBwYXJlbnRbMF0gfHwgcGFyZW50WzFdIHx8IHBhcmVudFsyXSB8fCBwYXJlbnRbM10pXG4gICAgICAmJiBub2RlID09PSAocGFyZW50WzNdIHx8IHBhcmVudFsyXSB8fCBwYXJlbnRbMV0gfHwgcGFyZW50WzBdKVxuICAgICAgJiYgIW5vZGUubGVuZ3RoKSB7XG4gICAgaWYgKHJldGFpbmVyKSByZXRhaW5lcltqXSA9IG5vZGU7XG4gICAgZWxzZSB0aGlzLl9yb290ID0gbm9kZTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiByZW1vdmVBbGwoZGF0YSkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IGRhdGEubGVuZ3RoOyBpIDwgbjsgKytpKSB0aGlzLnJlbW92ZShkYXRhW2ldKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHRyZWVfcm9vdCgpIHtcbiAgcmV0dXJuIHRoaXMuX3Jvb3Q7XG59XG5cbmZ1bmN0aW9uIHRyZWVfc2l6ZSgpIHtcbiAgdmFyIHNpemUgPSAwO1xuICB0aGlzLnZpc2l0KGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUubGVuZ3RoKSBkbyArK3NpemU7IHdoaWxlIChub2RlID0gbm9kZS5uZXh0KVxuICB9KTtcbiAgcmV0dXJuIHNpemU7XG59XG5cbmZ1bmN0aW9uIHRyZWVfdmlzaXQoY2FsbGJhY2spIHtcbiAgdmFyIHF1YWRzID0gW10sIHEsIG5vZGUgPSB0aGlzLl9yb290LCBjaGlsZCwgeDAsIHkwLCB4MSwgeTE7XG4gIGlmIChub2RlKSBxdWFkcy5wdXNoKG5ldyBRdWFkKG5vZGUsIHRoaXMuX3gwLCB0aGlzLl95MCwgdGhpcy5feDEsIHRoaXMuX3kxKSk7XG4gIHdoaWxlIChxID0gcXVhZHMucG9wKCkpIHtcbiAgICBpZiAoIWNhbGxiYWNrKG5vZGUgPSBxLm5vZGUsIHgwID0gcS54MCwgeTAgPSBxLnkwLCB4MSA9IHEueDEsIHkxID0gcS55MSkgJiYgbm9kZS5sZW5ndGgpIHtcbiAgICAgIHZhciB4bSA9ICh4MCArIHgxKSAvIDIsIHltID0gKHkwICsgeTEpIC8gMjtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbM10pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHhtLCB5bSwgeDEsIHkxKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzJdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeW0sIHhtLCB5MSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVsxXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeG0sIHkwLCB4MSwgeW0pKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMF0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHgwLCB5MCwgeG0sIHltKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB0cmVlX3Zpc2l0QWZ0ZXIoY2FsbGJhY2spIHtcbiAgdmFyIHF1YWRzID0gW10sIG5leHQgPSBbXSwgcTtcbiAgaWYgKHRoaXMuX3Jvb3QpIHF1YWRzLnB1c2gobmV3IFF1YWQodGhpcy5fcm9vdCwgdGhpcy5feDAsIHRoaXMuX3kwLCB0aGlzLl94MSwgdGhpcy5feTEpKTtcbiAgd2hpbGUgKHEgPSBxdWFkcy5wb3AoKSkge1xuICAgIHZhciBub2RlID0gcS5ub2RlO1xuICAgIGlmIChub2RlLmxlbmd0aCkge1xuICAgICAgdmFyIGNoaWxkLCB4MCA9IHEueDAsIHkwID0gcS55MCwgeDEgPSBxLngxLCB5MSA9IHEueTEsIHhtID0gKHgwICsgeDEpIC8gMiwgeW0gPSAoeTAgKyB5MSkgLyAyO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVswXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeDAsIHkwLCB4bSwgeW0pKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMV0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHhtLCB5MCwgeDEsIHltKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzJdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeW0sIHhtLCB5MSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVszXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeG0sIHltLCB4MSwgeTEpKTtcbiAgICB9XG4gICAgbmV4dC5wdXNoKHEpO1xuICB9XG4gIHdoaWxlIChxID0gbmV4dC5wb3AoKSkge1xuICAgIGNhbGxiYWNrKHEubm9kZSwgcS54MCwgcS55MCwgcS54MSwgcS55MSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRYJDEoZCkge1xuICByZXR1cm4gZFswXTtcbn1cblxuZnVuY3Rpb24gdHJlZV94KF8pIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGhpcy5feCA9IF8sIHRoaXMpIDogdGhpcy5feDtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFkkMShkKSB7XG4gIHJldHVybiBkWzFdO1xufVxuXG5mdW5jdGlvbiB0cmVlX3koXykge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aGlzLl95ID0gXywgdGhpcykgOiB0aGlzLl95O1xufVxuXG5mdW5jdGlvbiBxdWFkdHJlZShub2RlcywgeCwgeSkge1xuICB2YXIgdHJlZSA9IG5ldyBRdWFkdHJlZSh4ID09IG51bGwgPyBkZWZhdWx0WCQxIDogeCwgeSA9PSBudWxsID8gZGVmYXVsdFkkMSA6IHksIE5hTiwgTmFOLCBOYU4sIE5hTik7XG4gIHJldHVybiBub2RlcyA9PSBudWxsID8gdHJlZSA6IHRyZWUuYWRkQWxsKG5vZGVzKTtcbn1cblxuZnVuY3Rpb24gUXVhZHRyZWUoeCwgeSwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgdGhpcy5feCA9IHg7XG4gIHRoaXMuX3kgPSB5O1xuICB0aGlzLl94MCA9IHgwO1xuICB0aGlzLl95MCA9IHkwO1xuICB0aGlzLl94MSA9IHgxO1xuICB0aGlzLl95MSA9IHkxO1xuICB0aGlzLl9yb290ID0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBsZWFmX2NvcHkobGVhZikge1xuICB2YXIgY29weSA9IHtkYXRhOiBsZWFmLmRhdGF9LCBuZXh0ID0gY29weTtcbiAgd2hpbGUgKGxlYWYgPSBsZWFmLm5leHQpIG5leHQgPSBuZXh0Lm5leHQgPSB7ZGF0YTogbGVhZi5kYXRhfTtcbiAgcmV0dXJuIGNvcHk7XG59XG5cbnZhciB0cmVlUHJvdG8gPSBxdWFkdHJlZS5wcm90b3R5cGUgPSBRdWFkdHJlZS5wcm90b3R5cGU7XG5cbnRyZWVQcm90by5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjb3B5ID0gbmV3IFF1YWR0cmVlKHRoaXMuX3gsIHRoaXMuX3ksIHRoaXMuX3gwLCB0aGlzLl95MCwgdGhpcy5feDEsIHRoaXMuX3kxKSxcbiAgICAgIG5vZGUgPSB0aGlzLl9yb290LFxuICAgICAgbm9kZXMsXG4gICAgICBjaGlsZDtcblxuICBpZiAoIW5vZGUpIHJldHVybiBjb3B5O1xuXG4gIGlmICghbm9kZS5sZW5ndGgpIHJldHVybiBjb3B5Ll9yb290ID0gbGVhZl9jb3B5KG5vZGUpLCBjb3B5O1xuXG4gIG5vZGVzID0gW3tzb3VyY2U6IG5vZGUsIHRhcmdldDogY29weS5fcm9vdCA9IG5ldyBBcnJheSg0KX1dO1xuICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyArK2kpIHtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGUuc291cmNlW2ldKSB7XG4gICAgICAgIGlmIChjaGlsZC5sZW5ndGgpIG5vZGVzLnB1c2goe3NvdXJjZTogY2hpbGQsIHRhcmdldDogbm9kZS50YXJnZXRbaV0gPSBuZXcgQXJyYXkoNCl9KTtcbiAgICAgICAgZWxzZSBub2RlLnRhcmdldFtpXSA9IGxlYWZfY29weShjaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvcHk7XG59O1xuXG50cmVlUHJvdG8uYWRkID0gdHJlZV9hZGQ7XG50cmVlUHJvdG8uYWRkQWxsID0gYWRkQWxsO1xudHJlZVByb3RvLmNvdmVyID0gdHJlZV9jb3ZlcjtcbnRyZWVQcm90by5kYXRhID0gdHJlZV9kYXRhO1xudHJlZVByb3RvLmV4dGVudCA9IHRyZWVfZXh0ZW50O1xudHJlZVByb3RvLmZpbmQgPSB0cmVlX2ZpbmQ7XG50cmVlUHJvdG8ucmVtb3ZlID0gdHJlZV9yZW1vdmU7XG50cmVlUHJvdG8ucmVtb3ZlQWxsID0gcmVtb3ZlQWxsO1xudHJlZVByb3RvLnJvb3QgPSB0cmVlX3Jvb3Q7XG50cmVlUHJvdG8uc2l6ZSA9IHRyZWVfc2l6ZTtcbnRyZWVQcm90by52aXNpdCA9IHRyZWVfdmlzaXQ7XG50cmVlUHJvdG8udmlzaXRBZnRlciA9IHRyZWVfdmlzaXRBZnRlcjtcbnRyZWVQcm90by54ID0gdHJlZV94O1xudHJlZVByb3RvLnkgPSB0cmVlX3k7XG5cbmZ1bmN0aW9uIHgoZCkge1xuICByZXR1cm4gZC54ICsgZC52eDtcbn1cblxuZnVuY3Rpb24geShkKSB7XG4gIHJldHVybiBkLnkgKyBkLnZ5O1xufVxuXG5mdW5jdGlvbiBjb2xsaWRlKHJhZGl1cykge1xuICB2YXIgbm9kZXMsXG4gICAgICByYWRpaSxcbiAgICAgIHN0cmVuZ3RoID0gMSxcbiAgICAgIGl0ZXJhdGlvbnMgPSAxO1xuXG4gIGlmICh0eXBlb2YgcmFkaXVzICE9PSBcImZ1bmN0aW9uXCIpIHJhZGl1cyA9IGNvbnN0YW50JDcocmFkaXVzID09IG51bGwgPyAxIDogK3JhZGl1cyk7XG5cbiAgZnVuY3Rpb24gZm9yY2UoKSB7XG4gICAgdmFyIGksIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICAgIHRyZWUsXG4gICAgICAgIG5vZGUsXG4gICAgICAgIHhpLFxuICAgICAgICB5aSxcbiAgICAgICAgcmksXG4gICAgICAgIHJpMjtcblxuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgaXRlcmF0aW9uczsgKytrKSB7XG4gICAgICB0cmVlID0gcXVhZHRyZWUobm9kZXMsIHgsIHkpLnZpc2l0QWZ0ZXIocHJlcGFyZSk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgcmkgPSByYWRpaVtub2RlLmluZGV4XSwgcmkyID0gcmkgKiByaTtcbiAgICAgICAgeGkgPSBub2RlLnggKyBub2RlLnZ4O1xuICAgICAgICB5aSA9IG5vZGUueSArIG5vZGUudnk7XG4gICAgICAgIHRyZWUudmlzaXQoYXBwbHkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcGx5KHF1YWQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgICB2YXIgZGF0YSA9IHF1YWQuZGF0YSwgcmogPSBxdWFkLnIsIHIgPSByaSArIHJqO1xuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgaWYgKGRhdGEuaW5kZXggPiBub2RlLmluZGV4KSB7XG4gICAgICAgICAgdmFyIHggPSB4aSAtIGRhdGEueCAtIGRhdGEudngsXG4gICAgICAgICAgICAgIHkgPSB5aSAtIGRhdGEueSAtIGRhdGEudnksXG4gICAgICAgICAgICAgIGwgPSB4ICogeCArIHkgKiB5O1xuICAgICAgICAgIGlmIChsIDwgciAqIHIpIHtcbiAgICAgICAgICAgIGlmICh4ID09PSAwKSB4ID0gamlnZ2xlKCksIGwgKz0geCAqIHg7XG4gICAgICAgICAgICBpZiAoeSA9PT0gMCkgeSA9IGppZ2dsZSgpLCBsICs9IHkgKiB5O1xuICAgICAgICAgICAgbCA9IChyIC0gKGwgPSBNYXRoLnNxcnQobCkpKSAvIGwgKiBzdHJlbmd0aDtcbiAgICAgICAgICAgIG5vZGUudnggKz0gKHggKj0gbCkgKiAociA9IChyaiAqPSByaikgLyAocmkyICsgcmopKTtcbiAgICAgICAgICAgIG5vZGUudnkgKz0gKHkgKj0gbCkgKiByO1xuICAgICAgICAgICAgZGF0YS52eCAtPSB4ICogKHIgPSAxIC0gcik7XG4gICAgICAgICAgICBkYXRhLnZ5IC09IHkgKiByO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXR1cm4geDAgPiB4aSArIHIgfHwgeDEgPCB4aSAtIHIgfHwgeTAgPiB5aSArIHIgfHwgeTEgPCB5aSAtIHI7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHJlcGFyZShxdWFkKSB7XG4gICAgaWYgKHF1YWQuZGF0YSkgcmV0dXJuIHF1YWQuciA9IHJhZGlpW3F1YWQuZGF0YS5pbmRleF07XG4gICAgZm9yICh2YXIgaSA9IHF1YWQuciA9IDA7IGkgPCA0OyArK2kpIHtcbiAgICAgIGlmIChxdWFkW2ldICYmIHF1YWRbaV0uciA+IHF1YWQucikge1xuICAgICAgICBxdWFkLnIgPSBxdWFkW2ldLnI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICBpZiAoIW5vZGVzKSByZXR1cm47XG4gICAgdmFyIGksIG4gPSBub2Rlcy5sZW5ndGgsIG5vZGU7XG4gICAgcmFkaWkgPSBuZXcgQXJyYXkobik7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgbm9kZSA9IG5vZGVzW2ldLCByYWRpaVtub2RlLmluZGV4XSA9ICtyYWRpdXMobm9kZSwgaSwgbm9kZXMpO1xuICB9XG5cbiAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBub2RlcyA9IF87XG4gICAgaW5pdGlhbGl6ZSgpO1xuICB9O1xuXG4gIGZvcmNlLml0ZXJhdGlvbnMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaXRlcmF0aW9ucyA9ICtfLCBmb3JjZSkgOiBpdGVyYXRpb25zO1xuICB9O1xuXG4gIGZvcmNlLnN0cmVuZ3RoID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0cmVuZ3RoID0gK18sIGZvcmNlKSA6IHN0cmVuZ3RoO1xuICB9O1xuXG4gIGZvcmNlLnJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDcoK18pLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IHJhZGl1cztcbiAgfTtcblxuICByZXR1cm4gZm9yY2U7XG59XG5cbmZ1bmN0aW9uIGluZGV4KGQpIHtcbiAgcmV0dXJuIGQuaW5kZXg7XG59XG5cbmZ1bmN0aW9uIGZpbmQobm9kZUJ5SWQsIG5vZGVJZCkge1xuICB2YXIgbm9kZSA9IG5vZGVCeUlkLmdldChub2RlSWQpO1xuICBpZiAoIW5vZGUpIHRocm93IG5ldyBFcnJvcihcIm1pc3Npbmc6IFwiICsgbm9kZUlkKTtcbiAgcmV0dXJuIG5vZGU7XG59XG5cbmZ1bmN0aW9uIGxpbmsobGlua3MpIHtcbiAgdmFyIGlkID0gaW5kZXgsXG4gICAgICBzdHJlbmd0aCA9IGRlZmF1bHRTdHJlbmd0aCxcbiAgICAgIHN0cmVuZ3RocyxcbiAgICAgIGRpc3RhbmNlID0gY29uc3RhbnQkNygzMCksXG4gICAgICBkaXN0YW5jZXMsXG4gICAgICBub2RlcyxcbiAgICAgIGNvdW50LFxuICAgICAgYmlhcyxcbiAgICAgIGl0ZXJhdGlvbnMgPSAxO1xuXG4gIGlmIChsaW5rcyA9PSBudWxsKSBsaW5rcyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGRlZmF1bHRTdHJlbmd0aChsaW5rKSB7XG4gICAgcmV0dXJuIDEgLyBNYXRoLm1pbihjb3VudFtsaW5rLnNvdXJjZS5pbmRleF0sIGNvdW50W2xpbmsudGFyZ2V0LmluZGV4XSk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JjZShhbHBoYSkge1xuICAgIGZvciAodmFyIGsgPSAwLCBuID0gbGlua3MubGVuZ3RoOyBrIDwgaXRlcmF0aW9uczsgKytrKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGluaywgc291cmNlLCB0YXJnZXQsIHgsIHksIGwsIGI7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbGluayA9IGxpbmtzW2ldLCBzb3VyY2UgPSBsaW5rLnNvdXJjZSwgdGFyZ2V0ID0gbGluay50YXJnZXQ7XG4gICAgICAgIHggPSB0YXJnZXQueCArIHRhcmdldC52eCAtIHNvdXJjZS54IC0gc291cmNlLnZ4IHx8IGppZ2dsZSgpO1xuICAgICAgICB5ID0gdGFyZ2V0LnkgKyB0YXJnZXQudnkgLSBzb3VyY2UueSAtIHNvdXJjZS52eSB8fCBqaWdnbGUoKTtcbiAgICAgICAgbCA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5KTtcbiAgICAgICAgbCA9IChsIC0gZGlzdGFuY2VzW2ldKSAvIGwgKiBhbHBoYSAqIHN0cmVuZ3Roc1tpXTtcbiAgICAgICAgeCAqPSBsLCB5ICo9IGw7XG4gICAgICAgIHRhcmdldC52eCAtPSB4ICogKGIgPSBiaWFzW2ldKTtcbiAgICAgICAgdGFyZ2V0LnZ5IC09IHkgKiBiO1xuICAgICAgICBzb3VyY2UudnggKz0geCAqIChiID0gMSAtIGIpO1xuICAgICAgICBzb3VyY2UudnkgKz0geSAqIGI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICBpZiAoIW5vZGVzKSByZXR1cm47XG5cbiAgICB2YXIgaSxcbiAgICAgICAgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgICAgbSA9IGxpbmtzLmxlbmd0aCxcbiAgICAgICAgbm9kZUJ5SWQgPSBtYXAkMShub2RlcywgaWQpLFxuICAgICAgICBsaW5rO1xuXG4gICAgZm9yIChpID0gMCwgY291bnQgPSBuZXcgQXJyYXkobik7IGkgPCBtOyArK2kpIHtcbiAgICAgIGxpbmsgPSBsaW5rc1tpXSwgbGluay5pbmRleCA9IGk7XG4gICAgICBpZiAodHlwZW9mIGxpbmsuc291cmNlICE9PSBcIm9iamVjdFwiKSBsaW5rLnNvdXJjZSA9IGZpbmQobm9kZUJ5SWQsIGxpbmsuc291cmNlKTtcbiAgICAgIGlmICh0eXBlb2YgbGluay50YXJnZXQgIT09IFwib2JqZWN0XCIpIGxpbmsudGFyZ2V0ID0gZmluZChub2RlQnlJZCwgbGluay50YXJnZXQpO1xuICAgICAgY291bnRbbGluay5zb3VyY2UuaW5kZXhdID0gKGNvdW50W2xpbmsuc291cmNlLmluZGV4XSB8fCAwKSArIDE7XG4gICAgICBjb3VudFtsaW5rLnRhcmdldC5pbmRleF0gPSAoY291bnRbbGluay50YXJnZXQuaW5kZXhdIHx8IDApICsgMTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwLCBiaWFzID0gbmV3IEFycmF5KG0pOyBpIDwgbTsgKytpKSB7XG4gICAgICBsaW5rID0gbGlua3NbaV0sIGJpYXNbaV0gPSBjb3VudFtsaW5rLnNvdXJjZS5pbmRleF0gLyAoY291bnRbbGluay5zb3VyY2UuaW5kZXhdICsgY291bnRbbGluay50YXJnZXQuaW5kZXhdKTtcbiAgICB9XG5cbiAgICBzdHJlbmd0aHMgPSBuZXcgQXJyYXkobSksIGluaXRpYWxpemVTdHJlbmd0aCgpO1xuICAgIGRpc3RhbmNlcyA9IG5ldyBBcnJheShtKSwgaW5pdGlhbGl6ZURpc3RhbmNlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplU3RyZW5ndGgoKSB7XG4gICAgaWYgKCFub2RlcykgcmV0dXJuO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBsaW5rcy5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIHN0cmVuZ3Roc1tpXSA9ICtzdHJlbmd0aChsaW5rc1tpXSwgaSwgbGlua3MpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemVEaXN0YW5jZSgpIHtcbiAgICBpZiAoIW5vZGVzKSByZXR1cm47XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IGxpbmtzLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgZGlzdGFuY2VzW2ldID0gK2Rpc3RhbmNlKGxpbmtzW2ldLCBpLCBsaW5rcyk7XG4gICAgfVxuICB9XG5cbiAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBub2RlcyA9IF87XG4gICAgaW5pdGlhbGl6ZSgpO1xuICB9O1xuXG4gIGZvcmNlLmxpbmtzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGxpbmtzID0gXywgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiBsaW5rcztcbiAgfTtcblxuICBmb3JjZS5pZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpZCA9IF8sIGZvcmNlKSA6IGlkO1xuICB9O1xuXG4gIGZvcmNlLml0ZXJhdGlvbnMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaXRlcmF0aW9ucyA9ICtfLCBmb3JjZSkgOiBpdGVyYXRpb25zO1xuICB9O1xuXG4gIGZvcmNlLnN0cmVuZ3RoID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0cmVuZ3RoID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ3KCtfKSwgaW5pdGlhbGl6ZVN0cmVuZ3RoKCksIGZvcmNlKSA6IHN0cmVuZ3RoO1xuICB9O1xuXG4gIGZvcmNlLmRpc3RhbmNlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRpc3RhbmNlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ3KCtfKSwgaW5pdGlhbGl6ZURpc3RhbmNlKCksIGZvcmNlKSA6IGRpc3RhbmNlO1xuICB9O1xuXG4gIHJldHVybiBmb3JjZTtcbn1cblxuZnVuY3Rpb24geCQxKGQpIHtcbiAgcmV0dXJuIGQueDtcbn1cblxuZnVuY3Rpb24geSQxKGQpIHtcbiAgcmV0dXJuIGQueTtcbn1cblxudmFyIGluaXRpYWxSYWRpdXMgPSAxMCxcbiAgICBpbml0aWFsQW5nbGUgPSBNYXRoLlBJICogKDMgLSBNYXRoLnNxcnQoNSkpO1xuXG5mdW5jdGlvbiBzaW11bGF0aW9uKG5vZGVzKSB7XG4gIHZhciBzaW11bGF0aW9uLFxuICAgICAgYWxwaGEgPSAxLFxuICAgICAgYWxwaGFNaW4gPSAwLjAwMSxcbiAgICAgIGFscGhhRGVjYXkgPSAxIC0gTWF0aC5wb3coYWxwaGFNaW4sIDEgLyAzMDApLFxuICAgICAgYWxwaGFUYXJnZXQgPSAwLFxuICAgICAgdmVsb2NpdHlEZWNheSA9IDAuNixcbiAgICAgIGZvcmNlcyA9IG1hcCQxKCksXG4gICAgICBzdGVwcGVyID0gdGltZXIoc3RlcCksXG4gICAgICBldmVudCA9IGRpc3BhdGNoKFwidGlja1wiLCBcImVuZFwiKTtcblxuICBpZiAobm9kZXMgPT0gbnVsbCkgbm9kZXMgPSBbXTtcblxuICBmdW5jdGlvbiBzdGVwKCkge1xuICAgIHRpY2soKTtcbiAgICBldmVudC5jYWxsKFwidGlja1wiLCBzaW11bGF0aW9uKTtcbiAgICBpZiAoYWxwaGEgPCBhbHBoYU1pbikge1xuICAgICAgc3RlcHBlci5zdG9wKCk7XG4gICAgICBldmVudC5jYWxsKFwiZW5kXCIsIHNpbXVsYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2soaXRlcmF0aW9ucykge1xuICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlO1xuXG4gICAgaWYgKGl0ZXJhdGlvbnMgPT09IHVuZGVmaW5lZCkgaXRlcmF0aW9ucyA9IDE7XG5cbiAgICBmb3IgKHZhciBrID0gMDsgayA8IGl0ZXJhdGlvbnM7ICsraykge1xuICAgICAgYWxwaGEgKz0gKGFscGhhVGFyZ2V0IC0gYWxwaGEpICogYWxwaGFEZWNheTtcblxuICAgICAgZm9yY2VzLmVhY2goZnVuY3Rpb24gKGZvcmNlKSB7XG4gICAgICAgIGZvcmNlKGFscGhhKTtcbiAgICAgIH0pO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgaWYgKG5vZGUuZnggPT0gbnVsbCkgbm9kZS54ICs9IG5vZGUudnggKj0gdmVsb2NpdHlEZWNheTtcbiAgICAgICAgZWxzZSBub2RlLnggPSBub2RlLmZ4LCBub2RlLnZ4ID0gMDtcbiAgICAgICAgaWYgKG5vZGUuZnkgPT0gbnVsbCkgbm9kZS55ICs9IG5vZGUudnkgKj0gdmVsb2NpdHlEZWNheTtcbiAgICAgICAgZWxzZSBub2RlLnkgPSBub2RlLmZ5LCBub2RlLnZ5ID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2ltdWxhdGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemVOb2RlcygpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLmluZGV4ID0gaTtcbiAgICAgIGlmIChub2RlLmZ4ICE9IG51bGwpIG5vZGUueCA9IG5vZGUuZng7XG4gICAgICBpZiAobm9kZS5meSAhPSBudWxsKSBub2RlLnkgPSBub2RlLmZ5O1xuICAgICAgaWYgKGlzTmFOKG5vZGUueCkgfHwgaXNOYU4obm9kZS55KSkge1xuICAgICAgICB2YXIgcmFkaXVzID0gaW5pdGlhbFJhZGl1cyAqIE1hdGguc3FydChpKSwgYW5nbGUgPSBpICogaW5pdGlhbEFuZ2xlO1xuICAgICAgICBub2RlLnggPSByYWRpdXMgKiBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgIG5vZGUueSA9IHJhZGl1cyAqIE1hdGguc2luKGFuZ2xlKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc05hTihub2RlLnZ4KSB8fCBpc05hTihub2RlLnZ5KSkge1xuICAgICAgICBub2RlLnZ4ID0gbm9kZS52eSA9IDA7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZUZvcmNlKGZvcmNlKSB7XG4gICAgaWYgKGZvcmNlLmluaXRpYWxpemUpIGZvcmNlLmluaXRpYWxpemUobm9kZXMpO1xuICAgIHJldHVybiBmb3JjZTtcbiAgfVxuXG4gIGluaXRpYWxpemVOb2RlcygpO1xuXG4gIHJldHVybiBzaW11bGF0aW9uID0ge1xuICAgIHRpY2s6IHRpY2ssXG5cbiAgICByZXN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzdGVwcGVyLnJlc3RhcnQoc3RlcCksIHNpbXVsYXRpb247XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHN0ZXBwZXIuc3RvcCgpLCBzaW11bGF0aW9uO1xuICAgIH0sXG5cbiAgICBub2RlczogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobm9kZXMgPSBfLCBpbml0aWFsaXplTm9kZXMoKSwgZm9yY2VzLmVhY2goaW5pdGlhbGl6ZUZvcmNlKSwgc2ltdWxhdGlvbikgOiBub2RlcztcbiAgICB9LFxuXG4gICAgYWxwaGE6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFscGhhID0gK18sIHNpbXVsYXRpb24pIDogYWxwaGE7XG4gICAgfSxcblxuICAgIGFscGhhTWluOiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbHBoYU1pbiA9ICtfLCBzaW11bGF0aW9uKSA6IGFscGhhTWluO1xuICAgIH0sXG5cbiAgICBhbHBoYURlY2F5OiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbHBoYURlY2F5ID0gK18sIHNpbXVsYXRpb24pIDogK2FscGhhRGVjYXk7XG4gICAgfSxcblxuICAgIGFscGhhVGFyZ2V0OiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbHBoYVRhcmdldCA9ICtfLCBzaW11bGF0aW9uKSA6IGFscGhhVGFyZ2V0O1xuICAgIH0sXG5cbiAgICB2ZWxvY2l0eURlY2F5OiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh2ZWxvY2l0eURlY2F5ID0gMSAtIF8sIHNpbXVsYXRpb24pIDogMSAtIHZlbG9jaXR5RGVjYXk7XG4gICAgfSxcblxuICAgIGZvcmNlOiBmdW5jdGlvbihuYW1lLCBfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyAoKF8gPT0gbnVsbCA/IGZvcmNlcy5yZW1vdmUobmFtZSkgOiBmb3JjZXMuc2V0KG5hbWUsIGluaXRpYWxpemVGb3JjZShfKSkpLCBzaW11bGF0aW9uKSA6IGZvcmNlcy5nZXQobmFtZSk7XG4gICAgfSxcblxuICAgIGZpbmQ6IGZ1bmN0aW9uKHgsIHksIHJhZGl1cykge1xuICAgICAgdmFyIGkgPSAwLFxuICAgICAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICAgICAgZHgsXG4gICAgICAgICAgZHksXG4gICAgICAgICAgZDIsXG4gICAgICAgICAgbm9kZSxcbiAgICAgICAgICBjbG9zZXN0O1xuXG4gICAgICBpZiAocmFkaXVzID09IG51bGwpIHJhZGl1cyA9IEluZmluaXR5O1xuICAgICAgZWxzZSByYWRpdXMgKj0gcmFkaXVzO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgZHggPSB4IC0gbm9kZS54O1xuICAgICAgICBkeSA9IHkgLSBub2RlLnk7XG4gICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgIGlmIChkMiA8IHJhZGl1cykgY2xvc2VzdCA9IG5vZGUsIHJhZGl1cyA9IGQyO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2xvc2VzdDtcbiAgICB9LFxuXG4gICAgb246IGZ1bmN0aW9uKG5hbWUsIF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMSA/IChldmVudC5vbihuYW1lLCBfKSwgc2ltdWxhdGlvbikgOiBldmVudC5vbihuYW1lKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1hbnlCb2R5KCkge1xuICB2YXIgbm9kZXMsXG4gICAgICBub2RlLFxuICAgICAgYWxwaGEsXG4gICAgICBzdHJlbmd0aCA9IGNvbnN0YW50JDcoLTMwKSxcbiAgICAgIHN0cmVuZ3RocyxcbiAgICAgIGRpc3RhbmNlTWluMiA9IDEsXG4gICAgICBkaXN0YW5jZU1heDIgPSBJbmZpbml0eSxcbiAgICAgIHRoZXRhMiA9IDAuODE7XG5cbiAgZnVuY3Rpb24gZm9yY2UoXykge1xuICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoLCB0cmVlID0gcXVhZHRyZWUobm9kZXMsIHgkMSwgeSQxKS52aXNpdEFmdGVyKGFjY3VtdWxhdGUpO1xuICAgIGZvciAoYWxwaGEgPSBfLCBpID0gMDsgaSA8IG47ICsraSkgbm9kZSA9IG5vZGVzW2ldLCB0cmVlLnZpc2l0KGFwcGx5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgaWYgKCFub2RlcykgcmV0dXJuO1xuICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlO1xuICAgIHN0cmVuZ3RocyA9IG5ldyBBcnJheShuKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBub2RlID0gbm9kZXNbaV0sIHN0cmVuZ3Roc1tub2RlLmluZGV4XSA9ICtzdHJlbmd0aChub2RlLCBpLCBub2Rlcyk7XG4gIH1cblxuICBmdW5jdGlvbiBhY2N1bXVsYXRlKHF1YWQpIHtcbiAgICB2YXIgc3RyZW5ndGggPSAwLCBxLCBjLCB3ZWlnaHQgPSAwLCB4LCB5LCBpO1xuXG4gICAgLy8gRm9yIGludGVybmFsIG5vZGVzLCBhY2N1bXVsYXRlIGZvcmNlcyBmcm9tIGNoaWxkIHF1YWRyYW50cy5cbiAgICBpZiAocXVhZC5sZW5ndGgpIHtcbiAgICAgIGZvciAoeCA9IHkgPSBpID0gMDsgaSA8IDQ7ICsraSkge1xuICAgICAgICBpZiAoKHEgPSBxdWFkW2ldKSAmJiAoYyA9IE1hdGguYWJzKHEudmFsdWUpKSkge1xuICAgICAgICAgIHN0cmVuZ3RoICs9IHEudmFsdWUsIHdlaWdodCArPSBjLCB4ICs9IGMgKiBxLngsIHkgKz0gYyAqIHEueTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcXVhZC54ID0geCAvIHdlaWdodDtcbiAgICAgIHF1YWQueSA9IHkgLyB3ZWlnaHQ7XG4gICAgfVxuXG4gICAgLy8gRm9yIGxlYWYgbm9kZXMsIGFjY3VtdWxhdGUgZm9yY2VzIGZyb20gY29pbmNpZGVudCBxdWFkcmFudHMuXG4gICAgZWxzZSB7XG4gICAgICBxID0gcXVhZDtcbiAgICAgIHEueCA9IHEuZGF0YS54O1xuICAgICAgcS55ID0gcS5kYXRhLnk7XG4gICAgICBkbyBzdHJlbmd0aCArPSBzdHJlbmd0aHNbcS5kYXRhLmluZGV4XTtcbiAgICAgIHdoaWxlIChxID0gcS5uZXh0KTtcbiAgICB9XG5cbiAgICBxdWFkLnZhbHVlID0gc3RyZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBhcHBseShxdWFkLCB4MSwgXywgeDIpIHtcbiAgICBpZiAoIXF1YWQudmFsdWUpIHJldHVybiB0cnVlO1xuXG4gICAgdmFyIHggPSBxdWFkLnggLSBub2RlLngsXG4gICAgICAgIHkgPSBxdWFkLnkgLSBub2RlLnksXG4gICAgICAgIHcgPSB4MiAtIHgxLFxuICAgICAgICBsID0geCAqIHggKyB5ICogeTtcblxuICAgIC8vIEFwcGx5IHRoZSBCYXJuZXMtSHV0IGFwcHJveGltYXRpb24gaWYgcG9zc2libGUuXG4gICAgLy8gTGltaXQgZm9yY2VzIGZvciB2ZXJ5IGNsb3NlIG5vZGVzOyByYW5kb21pemUgZGlyZWN0aW9uIGlmIGNvaW5jaWRlbnQuXG4gICAgaWYgKHcgKiB3IC8gdGhldGEyIDwgbCkge1xuICAgICAgaWYgKGwgPCBkaXN0YW5jZU1heDIpIHtcbiAgICAgICAgaWYgKHggPT09IDApIHggPSBqaWdnbGUoKSwgbCArPSB4ICogeDtcbiAgICAgICAgaWYgKHkgPT09IDApIHkgPSBqaWdnbGUoKSwgbCArPSB5ICogeTtcbiAgICAgICAgaWYgKGwgPCBkaXN0YW5jZU1pbjIpIGwgPSBNYXRoLnNxcnQoZGlzdGFuY2VNaW4yICogbCk7XG4gICAgICAgIG5vZGUudnggKz0geCAqIHF1YWQudmFsdWUgKiBhbHBoYSAvIGw7XG4gICAgICAgIG5vZGUudnkgKz0geSAqIHF1YWQudmFsdWUgKiBhbHBoYSAvIGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UsIHByb2Nlc3MgcG9pbnRzIGRpcmVjdGx5LlxuICAgIGVsc2UgaWYgKHF1YWQubGVuZ3RoIHx8IGwgPj0gZGlzdGFuY2VNYXgyKSByZXR1cm47XG5cbiAgICAvLyBMaW1pdCBmb3JjZXMgZm9yIHZlcnkgY2xvc2Ugbm9kZXM7IHJhbmRvbWl6ZSBkaXJlY3Rpb24gaWYgY29pbmNpZGVudC5cbiAgICBpZiAocXVhZC5kYXRhICE9PSBub2RlIHx8IHF1YWQubmV4dCkge1xuICAgICAgaWYgKHggPT09IDApIHggPSBqaWdnbGUoKSwgbCArPSB4ICogeDtcbiAgICAgIGlmICh5ID09PSAwKSB5ID0gamlnZ2xlKCksIGwgKz0geSAqIHk7XG4gICAgICBpZiAobCA8IGRpc3RhbmNlTWluMikgbCA9IE1hdGguc3FydChkaXN0YW5jZU1pbjIgKiBsKTtcbiAgICB9XG5cbiAgICBkbyBpZiAocXVhZC5kYXRhICE9PSBub2RlKSB7XG4gICAgICB3ID0gc3RyZW5ndGhzW3F1YWQuZGF0YS5pbmRleF0gKiBhbHBoYSAvIGw7XG4gICAgICBub2RlLnZ4ICs9IHggKiB3O1xuICAgICAgbm9kZS52eSArPSB5ICogdztcbiAgICB9IHdoaWxlIChxdWFkID0gcXVhZC5uZXh0KTtcbiAgfVxuXG4gIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgbm9kZXMgPSBfO1xuICAgIGluaXRpYWxpemUoKTtcbiAgfTtcblxuICBmb3JjZS5zdHJlbmd0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNygrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogc3RyZW5ndGg7XG4gIH07XG5cbiAgZm9yY2UuZGlzdGFuY2VNaW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGlzdGFuY2VNaW4yID0gXyAqIF8sIGZvcmNlKSA6IE1hdGguc3FydChkaXN0YW5jZU1pbjIpO1xuICB9O1xuXG4gIGZvcmNlLmRpc3RhbmNlTWF4ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRpc3RhbmNlTWF4MiA9IF8gKiBfLCBmb3JjZSkgOiBNYXRoLnNxcnQoZGlzdGFuY2VNYXgyKTtcbiAgfTtcblxuICBmb3JjZS50aGV0YSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aGV0YTIgPSBfICogXywgZm9yY2UpIDogTWF0aC5zcXJ0KHRoZXRhMik7XG4gIH07XG5cbiAgcmV0dXJuIGZvcmNlO1xufVxuXG5mdW5jdGlvbiByYWRpYWwocmFkaXVzLCB4LCB5KSB7XG4gIHZhciBub2RlcyxcbiAgICAgIHN0cmVuZ3RoID0gY29uc3RhbnQkNygwLjEpLFxuICAgICAgc3RyZW5ndGhzLFxuICAgICAgcmFkaXVzZXM7XG5cbiAgaWYgKHR5cGVvZiByYWRpdXMgIT09IFwiZnVuY3Rpb25cIikgcmFkaXVzID0gY29uc3RhbnQkNygrcmFkaXVzKTtcbiAgaWYgKHggPT0gbnVsbCkgeCA9IDA7XG4gIGlmICh5ID09IG51bGwpIHkgPSAwO1xuXG4gIGZ1bmN0aW9uIGZvcmNlKGFscGhhKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBub2Rlcy5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhciBub2RlID0gbm9kZXNbaV0sXG4gICAgICAgICAgZHggPSBub2RlLnggLSB4IHx8IDFlLTYsXG4gICAgICAgICAgZHkgPSBub2RlLnkgLSB5IHx8IDFlLTYsXG4gICAgICAgICAgciA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSksXG4gICAgICAgICAgayA9IChyYWRpdXNlc1tpXSAtIHIpICogc3RyZW5ndGhzW2ldICogYWxwaGEgLyByO1xuICAgICAgbm9kZS52eCArPSBkeCAqIGs7XG4gICAgICBub2RlLnZ5ICs9IGR5ICogaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIGlmICghbm9kZXMpIHJldHVybjtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aDtcbiAgICBzdHJlbmd0aHMgPSBuZXcgQXJyYXkobik7XG4gICAgcmFkaXVzZXMgPSBuZXcgQXJyYXkobik7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgcmFkaXVzZXNbaV0gPSArcmFkaXVzKG5vZGVzW2ldLCBpLCBub2Rlcyk7XG4gICAgICBzdHJlbmd0aHNbaV0gPSBpc05hTihyYWRpdXNlc1tpXSkgPyAwIDogK3N0cmVuZ3RoKG5vZGVzW2ldLCBpLCBub2Rlcyk7XG4gICAgfVxuICB9XG5cbiAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBub2RlcyA9IF8sIGluaXRpYWxpemUoKTtcbiAgfTtcblxuICBmb3JjZS5zdHJlbmd0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNygrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogc3RyZW5ndGg7XG4gIH07XG5cbiAgZm9yY2UucmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNygrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogcmFkaXVzO1xuICB9O1xuXG4gIGZvcmNlLnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9ICtfLCBmb3JjZSkgOiB4O1xuICB9O1xuXG4gIGZvcmNlLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9ICtfLCBmb3JjZSkgOiB5O1xuICB9O1xuXG4gIHJldHVybiBmb3JjZTtcbn1cblxuZnVuY3Rpb24geCQyKHgpIHtcbiAgdmFyIHN0cmVuZ3RoID0gY29uc3RhbnQkNygwLjEpLFxuICAgICAgbm9kZXMsXG4gICAgICBzdHJlbmd0aHMsXG4gICAgICB4ejtcblxuICBpZiAodHlwZW9mIHggIT09IFwiZnVuY3Rpb25cIikgeCA9IGNvbnN0YW50JDcoeCA9PSBudWxsID8gMCA6ICt4KTtcblxuICBmdW5jdGlvbiBmb3JjZShhbHBoYSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUudnggKz0gKHh6W2ldIC0gbm9kZS54KSAqIHN0cmVuZ3Roc1tpXSAqIGFscGhhO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgaWYgKCFub2RlcykgcmV0dXJuO1xuICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoO1xuICAgIHN0cmVuZ3RocyA9IG5ldyBBcnJheShuKTtcbiAgICB4eiA9IG5ldyBBcnJheShuKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBzdHJlbmd0aHNbaV0gPSBpc05hTih4eltpXSA9ICt4KG5vZGVzW2ldLCBpLCBub2RlcykpID8gMCA6ICtzdHJlbmd0aChub2Rlc1tpXSwgaSwgbm9kZXMpO1xuICAgIH1cbiAgfVxuXG4gIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgbm9kZXMgPSBfO1xuICAgIGluaXRpYWxpemUoKTtcbiAgfTtcblxuICBmb3JjZS5zdHJlbmd0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNygrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogc3RyZW5ndGg7XG4gIH07XG5cbiAgZm9yY2UueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ3KCtfKSwgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiB4O1xuICB9O1xuXG4gIHJldHVybiBmb3JjZTtcbn1cblxuZnVuY3Rpb24geSQyKHkpIHtcbiAgdmFyIHN0cmVuZ3RoID0gY29uc3RhbnQkNygwLjEpLFxuICAgICAgbm9kZXMsXG4gICAgICBzdHJlbmd0aHMsXG4gICAgICB5ejtcblxuICBpZiAodHlwZW9mIHkgIT09IFwiZnVuY3Rpb25cIikgeSA9IGNvbnN0YW50JDcoeSA9PSBudWxsID8gMCA6ICt5KTtcblxuICBmdW5jdGlvbiBmb3JjZShhbHBoYSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUudnkgKz0gKHl6W2ldIC0gbm9kZS55KSAqIHN0cmVuZ3Roc1tpXSAqIGFscGhhO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgaWYgKCFub2RlcykgcmV0dXJuO1xuICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoO1xuICAgIHN0cmVuZ3RocyA9IG5ldyBBcnJheShuKTtcbiAgICB5eiA9IG5ldyBBcnJheShuKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBzdHJlbmd0aHNbaV0gPSBpc05hTih5eltpXSA9ICt5KG5vZGVzW2ldLCBpLCBub2RlcykpID8gMCA6ICtzdHJlbmd0aChub2Rlc1tpXSwgaSwgbm9kZXMpO1xuICAgIH1cbiAgfVxuXG4gIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgbm9kZXMgPSBfO1xuICAgIGluaXRpYWxpemUoKTtcbiAgfTtcblxuICBmb3JjZS5zdHJlbmd0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNygrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogc3RyZW5ndGg7XG4gIH07XG5cbiAgZm9yY2UueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ3KCtfKSwgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiB5O1xuICB9O1xuXG4gIHJldHVybiBmb3JjZTtcbn1cblxuLy8gQ29tcHV0ZXMgdGhlIGRlY2ltYWwgY29lZmZpY2llbnQgYW5kIGV4cG9uZW50IG9mIHRoZSBzcGVjaWZpZWQgbnVtYmVyIHggd2l0aFxuLy8gc2lnbmlmaWNhbnQgZGlnaXRzIHAsIHdoZXJlIHggaXMgcG9zaXRpdmUgYW5kIHAgaXMgaW4gWzEsIDIxXSBvciB1bmRlZmluZWQuXG4vLyBGb3IgZXhhbXBsZSwgZm9ybWF0RGVjaW1hbCgxLjIzKSByZXR1cm5zIFtcIjEyM1wiLCAwXS5cbmZ1bmN0aW9uIGZvcm1hdERlY2ltYWwoeCwgcCkge1xuICBpZiAoKGkgPSAoeCA9IHAgPyB4LnRvRXhwb25lbnRpYWwocCAtIDEpIDogeC50b0V4cG9uZW50aWFsKCkpLmluZGV4T2YoXCJlXCIpKSA8IDApIHJldHVybiBudWxsOyAvLyBOYU4sIMKxSW5maW5pdHlcbiAgdmFyIGksIGNvZWZmaWNpZW50ID0geC5zbGljZSgwLCBpKTtcblxuICAvLyBUaGUgc3RyaW5nIHJldHVybmVkIGJ5IHRvRXhwb25lbnRpYWwgZWl0aGVyIGhhcyB0aGUgZm9ybSBcXGRcXC5cXGQrZVstK11cXGQrXG4gIC8vIChlLmcuLCAxLjJlKzMpIG9yIHRoZSBmb3JtIFxcZGVbLStdXFxkKyAoZS5nLiwgMWUrMykuXG4gIHJldHVybiBbXG4gICAgY29lZmZpY2llbnQubGVuZ3RoID4gMSA/IGNvZWZmaWNpZW50WzBdICsgY29lZmZpY2llbnQuc2xpY2UoMikgOiBjb2VmZmljaWVudCxcbiAgICAreC5zbGljZShpICsgMSlcbiAgXTtcbn1cblxuZnVuY3Rpb24gZXhwb25lbnQkMSh4KSB7XG4gIHJldHVybiB4ID0gZm9ybWF0RGVjaW1hbChNYXRoLmFicyh4KSksIHggPyB4WzFdIDogTmFOO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRHcm91cChncm91cGluZywgdGhvdXNhbmRzKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgd2lkdGgpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmxlbmd0aCxcbiAgICAgICAgdCA9IFtdLFxuICAgICAgICBqID0gMCxcbiAgICAgICAgZyA9IGdyb3VwaW5nWzBdLFxuICAgICAgICBsZW5ndGggPSAwO1xuXG4gICAgd2hpbGUgKGkgPiAwICYmIGcgPiAwKSB7XG4gICAgICBpZiAobGVuZ3RoICsgZyArIDEgPiB3aWR0aCkgZyA9IE1hdGgubWF4KDEsIHdpZHRoIC0gbGVuZ3RoKTtcbiAgICAgIHQucHVzaCh2YWx1ZS5zdWJzdHJpbmcoaSAtPSBnLCBpICsgZykpO1xuICAgICAgaWYgKChsZW5ndGggKz0gZyArIDEpID4gd2lkdGgpIGJyZWFrO1xuICAgICAgZyA9IGdyb3VwaW5nW2ogPSAoaiArIDEpICUgZ3JvdXBpbmcubGVuZ3RoXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdC5yZXZlcnNlKCkuam9pbih0aG91c2FuZHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmb3JtYXROdW1lcmFscyhudW1lcmFscykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvWzAtOV0vZywgZnVuY3Rpb24oaSkge1xuICAgICAgcmV0dXJuIG51bWVyYWxzWytpXTtcbiAgICB9KTtcbiAgfTtcbn1cblxuLy8gW1tmaWxsXWFsaWduXVtzaWduXVtzeW1ib2xdWzBdW3dpZHRoXVssXVsucHJlY2lzaW9uXVt+XVt0eXBlXVxudmFyIHJlID0gL14oPzooLik/KFs8Pj1eXSkpPyhbK1xcLSggXSk/KFskI10pPygwKT8oXFxkKyk/KCwpPyhcXC5cXGQrKT8ofik/KFthLXolXSk/JC9pO1xuXG5mdW5jdGlvbiBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XG4gIHJldHVybiBuZXcgRm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcik7XG59XG5cbmZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUgPSBGb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlOyAvLyBpbnN0YW5jZW9mXG5cbmZ1bmN0aW9uIEZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpIHtcbiAgaWYgKCEobWF0Y2ggPSByZS5leGVjKHNwZWNpZmllcikpKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGZvcm1hdDogXCIgKyBzcGVjaWZpZXIpO1xuICB2YXIgbWF0Y2g7XG4gIHRoaXMuZmlsbCA9IG1hdGNoWzFdIHx8IFwiIFwiO1xuICB0aGlzLmFsaWduID0gbWF0Y2hbMl0gfHwgXCI+XCI7XG4gIHRoaXMuc2lnbiA9IG1hdGNoWzNdIHx8IFwiLVwiO1xuICB0aGlzLnN5bWJvbCA9IG1hdGNoWzRdIHx8IFwiXCI7XG4gIHRoaXMuemVybyA9ICEhbWF0Y2hbNV07XG4gIHRoaXMud2lkdGggPSBtYXRjaFs2XSAmJiArbWF0Y2hbNl07XG4gIHRoaXMuY29tbWEgPSAhIW1hdGNoWzddO1xuICB0aGlzLnByZWNpc2lvbiA9IG1hdGNoWzhdICYmICttYXRjaFs4XS5zbGljZSgxKTtcbiAgdGhpcy50cmltID0gISFtYXRjaFs5XTtcbiAgdGhpcy50eXBlID0gbWF0Y2hbMTBdIHx8IFwiXCI7XG59XG5cbkZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZmlsbFxuICAgICAgKyB0aGlzLmFsaWduXG4gICAgICArIHRoaXMuc2lnblxuICAgICAgKyB0aGlzLnN5bWJvbFxuICAgICAgKyAodGhpcy56ZXJvID8gXCIwXCIgOiBcIlwiKVxuICAgICAgKyAodGhpcy53aWR0aCA9PSBudWxsID8gXCJcIiA6IE1hdGgubWF4KDEsIHRoaXMud2lkdGggfCAwKSlcbiAgICAgICsgKHRoaXMuY29tbWEgPyBcIixcIiA6IFwiXCIpXG4gICAgICArICh0aGlzLnByZWNpc2lvbiA9PSBudWxsID8gXCJcIiA6IFwiLlwiICsgTWF0aC5tYXgoMCwgdGhpcy5wcmVjaXNpb24gfCAwKSlcbiAgICAgICsgKHRoaXMudHJpbSA/IFwiflwiIDogXCJcIilcbiAgICAgICsgdGhpcy50eXBlO1xufTtcblxuLy8gVHJpbXMgaW5zaWduaWZpY2FudCB6ZXJvcywgZS5nLiwgcmVwbGFjZXMgMS4yMDAwayB3aXRoIDEuMmsuXG5mdW5jdGlvbiBmb3JtYXRUcmltKHMpIHtcbiAgb3V0OiBmb3IgKHZhciBuID0gcy5sZW5ndGgsIGkgPSAxLCBpMCA9IC0xLCBpMTsgaSA8IG47ICsraSkge1xuICAgIHN3aXRjaCAoc1tpXSkge1xuICAgICAgY2FzZSBcIi5cIjogaTAgPSBpMSA9IGk7IGJyZWFrO1xuICAgICAgY2FzZSBcIjBcIjogaWYgKGkwID09PSAwKSBpMCA9IGk7IGkxID0gaTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiBpZiAoaTAgPiAwKSB7IGlmICghK3NbaV0pIGJyZWFrIG91dDsgaTAgPSAwOyB9IGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaTAgPiAwID8gcy5zbGljZSgwLCBpMCkgKyBzLnNsaWNlKGkxICsgMSkgOiBzO1xufVxuXG52YXIgcHJlZml4RXhwb25lbnQ7XG5cbmZ1bmN0aW9uIGZvcm1hdFByZWZpeEF1dG8oeCwgcCkge1xuICB2YXIgZCA9IGZvcm1hdERlY2ltYWwoeCwgcCk7XG4gIGlmICghZCkgcmV0dXJuIHggKyBcIlwiO1xuICB2YXIgY29lZmZpY2llbnQgPSBkWzBdLFxuICAgICAgZXhwb25lbnQgPSBkWzFdLFxuICAgICAgaSA9IGV4cG9uZW50IC0gKHByZWZpeEV4cG9uZW50ID0gTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQgLyAzKSkpICogMykgKyAxLFxuICAgICAgbiA9IGNvZWZmaWNpZW50Lmxlbmd0aDtcbiAgcmV0dXJuIGkgPT09IG4gPyBjb2VmZmljaWVudFxuICAgICAgOiBpID4gbiA/IGNvZWZmaWNpZW50ICsgbmV3IEFycmF5KGkgLSBuICsgMSkuam9pbihcIjBcIilcbiAgICAgIDogaSA+IDAgPyBjb2VmZmljaWVudC5zbGljZSgwLCBpKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoaSlcbiAgICAgIDogXCIwLlwiICsgbmV3IEFycmF5KDEgLSBpKS5qb2luKFwiMFwiKSArIGZvcm1hdERlY2ltYWwoeCwgTWF0aC5tYXgoMCwgcCArIGkgLSAxKSlbMF07IC8vIGxlc3MgdGhhbiAxeSFcbn1cblxuZnVuY3Rpb24gZm9ybWF0Um91bmRlZCh4LCBwKSB7XG4gIHZhciBkID0gZm9ybWF0RGVjaW1hbCh4LCBwKTtcbiAgaWYgKCFkKSByZXR1cm4geCArIFwiXCI7XG4gIHZhciBjb2VmZmljaWVudCA9IGRbMF0sXG4gICAgICBleHBvbmVudCA9IGRbMV07XG4gIHJldHVybiBleHBvbmVudCA8IDAgPyBcIjAuXCIgKyBuZXcgQXJyYXkoLWV4cG9uZW50KS5qb2luKFwiMFwiKSArIGNvZWZmaWNpZW50XG4gICAgICA6IGNvZWZmaWNpZW50Lmxlbmd0aCA+IGV4cG9uZW50ICsgMSA/IGNvZWZmaWNpZW50LnNsaWNlKDAsIGV4cG9uZW50ICsgMSkgKyBcIi5cIiArIGNvZWZmaWNpZW50LnNsaWNlKGV4cG9uZW50ICsgMSlcbiAgICAgIDogY29lZmZpY2llbnQgKyBuZXcgQXJyYXkoZXhwb25lbnQgLSBjb2VmZmljaWVudC5sZW5ndGggKyAyKS5qb2luKFwiMFwiKTtcbn1cblxudmFyIGZvcm1hdFR5cGVzID0ge1xuICBcIiVcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4gKHggKiAxMDApLnRvRml4ZWQocCk7IH0sXG4gIFwiYlwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDIpOyB9LFxuICBcImNcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4geCArIFwiXCI7IH0sXG4gIFwiZFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDEwKTsgfSxcbiAgXCJlXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9FeHBvbmVudGlhbChwKTsgfSxcbiAgXCJmXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9GaXhlZChwKTsgfSxcbiAgXCJnXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9QcmVjaXNpb24ocCk7IH0sXG4gIFwib1wiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDgpOyB9LFxuICBcInBcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4gZm9ybWF0Um91bmRlZCh4ICogMTAwLCBwKTsgfSxcbiAgXCJyXCI6IGZvcm1hdFJvdW5kZWQsXG4gIFwic1wiOiBmb3JtYXRQcmVmaXhBdXRvLFxuICBcIlhcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTsgfSxcbiAgXCJ4XCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTYpOyB9XG59O1xuXG5mdW5jdGlvbiBpZGVudGl0eSQzKHgpIHtcbiAgcmV0dXJuIHg7XG59XG5cbnZhciBwcmVmaXhlcyA9IFtcInlcIixcInpcIixcImFcIixcImZcIixcInBcIixcIm5cIixcIlxceEI1XCIsXCJtXCIsXCJcIixcImtcIixcIk1cIixcIkdcIixcIlRcIixcIlBcIixcIkVcIixcIlpcIixcIllcIl07XG5cbmZ1bmN0aW9uIGZvcm1hdExvY2FsZShsb2NhbGUpIHtcbiAgdmFyIGdyb3VwID0gbG9jYWxlLmdyb3VwaW5nICYmIGxvY2FsZS50aG91c2FuZHMgPyBmb3JtYXRHcm91cChsb2NhbGUuZ3JvdXBpbmcsIGxvY2FsZS50aG91c2FuZHMpIDogaWRlbnRpdHkkMyxcbiAgICAgIGN1cnJlbmN5ID0gbG9jYWxlLmN1cnJlbmN5LFxuICAgICAgZGVjaW1hbCA9IGxvY2FsZS5kZWNpbWFsLFxuICAgICAgbnVtZXJhbHMgPSBsb2NhbGUubnVtZXJhbHMgPyBmb3JtYXROdW1lcmFscyhsb2NhbGUubnVtZXJhbHMpIDogaWRlbnRpdHkkMyxcbiAgICAgIHBlcmNlbnQgPSBsb2NhbGUucGVyY2VudCB8fCBcIiVcIjtcblxuICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyKSB7XG4gICAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcik7XG5cbiAgICB2YXIgZmlsbCA9IHNwZWNpZmllci5maWxsLFxuICAgICAgICBhbGlnbiA9IHNwZWNpZmllci5hbGlnbixcbiAgICAgICAgc2lnbiA9IHNwZWNpZmllci5zaWduLFxuICAgICAgICBzeW1ib2wgPSBzcGVjaWZpZXIuc3ltYm9sLFxuICAgICAgICB6ZXJvID0gc3BlY2lmaWVyLnplcm8sXG4gICAgICAgIHdpZHRoID0gc3BlY2lmaWVyLndpZHRoLFxuICAgICAgICBjb21tYSA9IHNwZWNpZmllci5jb21tYSxcbiAgICAgICAgcHJlY2lzaW9uID0gc3BlY2lmaWVyLnByZWNpc2lvbixcbiAgICAgICAgdHJpbSA9IHNwZWNpZmllci50cmltLFxuICAgICAgICB0eXBlID0gc3BlY2lmaWVyLnR5cGU7XG5cbiAgICAvLyBUaGUgXCJuXCIgdHlwZSBpcyBhbiBhbGlhcyBmb3IgXCIsZ1wiLlxuICAgIGlmICh0eXBlID09PSBcIm5cIikgY29tbWEgPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBUaGUgXCJcIiB0eXBlLCBhbmQgYW55IGludmFsaWQgdHlwZSwgaXMgYW4gYWxpYXMgZm9yIFwiLjEyfmdcIi5cbiAgICBlbHNlIGlmICghZm9ybWF0VHlwZXNbdHlwZV0pIHByZWNpc2lvbiA9PSBudWxsICYmIChwcmVjaXNpb24gPSAxMiksIHRyaW0gPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBJZiB6ZXJvIGZpbGwgaXMgc3BlY2lmaWVkLCBwYWRkaW5nIGdvZXMgYWZ0ZXIgc2lnbiBhbmQgYmVmb3JlIGRpZ2l0cy5cbiAgICBpZiAoemVybyB8fCAoZmlsbCA9PT0gXCIwXCIgJiYgYWxpZ24gPT09IFwiPVwiKSkgemVybyA9IHRydWUsIGZpbGwgPSBcIjBcIiwgYWxpZ24gPSBcIj1cIjtcblxuICAgIC8vIENvbXB1dGUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICAgIC8vIEZvciBTSS1wcmVmaXgsIHRoZSBzdWZmaXggaXMgbGF6aWx5IGNvbXB1dGVkLlxuICAgIHZhciBwcmVmaXggPSBzeW1ib2wgPT09IFwiJFwiID8gY3VycmVuY3lbMF0gOiBzeW1ib2wgPT09IFwiI1wiICYmIC9bYm94WF0vLnRlc3QodHlwZSkgPyBcIjBcIiArIHR5cGUudG9Mb3dlckNhc2UoKSA6IFwiXCIsXG4gICAgICAgIHN1ZmZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVsxXSA6IC9bJXBdLy50ZXN0KHR5cGUpID8gcGVyY2VudCA6IFwiXCI7XG5cbiAgICAvLyBXaGF0IGZvcm1hdCBmdW5jdGlvbiBzaG91bGQgd2UgdXNlP1xuICAgIC8vIElzIHRoaXMgYW4gaW50ZWdlciB0eXBlP1xuICAgIC8vIENhbiB0aGlzIHR5cGUgZ2VuZXJhdGUgZXhwb25lbnRpYWwgbm90YXRpb24/XG4gICAgdmFyIGZvcm1hdFR5cGUgPSBmb3JtYXRUeXBlc1t0eXBlXSxcbiAgICAgICAgbWF5YmVTdWZmaXggPSAvW2RlZmdwcnMlXS8udGVzdCh0eXBlKTtcblxuICAgIC8vIFNldCB0aGUgZGVmYXVsdCBwcmVjaXNpb24gaWYgbm90IHNwZWNpZmllZCxcbiAgICAvLyBvciBjbGFtcCB0aGUgc3BlY2lmaWVkIHByZWNpc2lvbiB0byB0aGUgc3VwcG9ydGVkIHJhbmdlLlxuICAgIC8vIEZvciBzaWduaWZpY2FudCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzEsIDIxXS5cbiAgICAvLyBGb3IgZml4ZWQgcHJlY2lzaW9uLCBpdCBtdXN0IGJlIGluIFswLCAyMF0uXG4gICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09IG51bGwgPyA2XG4gICAgICAgIDogL1tncHJzXS8udGVzdCh0eXBlKSA/IE1hdGgubWF4KDEsIE1hdGgubWluKDIxLCBwcmVjaXNpb24pKVxuICAgICAgICA6IE1hdGgubWF4KDAsIE1hdGgubWluKDIwLCBwcmVjaXNpb24pKTtcblxuICAgIGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSkge1xuICAgICAgdmFyIHZhbHVlUHJlZml4ID0gcHJlZml4LFxuICAgICAgICAgIHZhbHVlU3VmZml4ID0gc3VmZml4LFxuICAgICAgICAgIGksIG4sIGM7XG5cbiAgICAgIGlmICh0eXBlID09PSBcImNcIikge1xuICAgICAgICB2YWx1ZVN1ZmZpeCA9IGZvcm1hdFR5cGUodmFsdWUpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgIHZhbHVlID0gXCJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gK3ZhbHVlO1xuXG4gICAgICAgIC8vIFBlcmZvcm0gdGhlIGluaXRpYWwgZm9ybWF0dGluZy5cbiAgICAgICAgdmFyIHZhbHVlTmVnYXRpdmUgPSB2YWx1ZSA8IDA7XG4gICAgICAgIHZhbHVlID0gZm9ybWF0VHlwZShNYXRoLmFicyh2YWx1ZSksIHByZWNpc2lvbik7XG5cbiAgICAgICAgLy8gVHJpbSBpbnNpZ25pZmljYW50IHplcm9zLlxuICAgICAgICBpZiAodHJpbSkgdmFsdWUgPSBmb3JtYXRUcmltKHZhbHVlKTtcblxuICAgICAgICAvLyBJZiBhIG5lZ2F0aXZlIHZhbHVlIHJvdW5kcyB0byB6ZXJvIGR1cmluZyBmb3JtYXR0aW5nLCB0cmVhdCBhcyBwb3NpdGl2ZS5cbiAgICAgICAgaWYgKHZhbHVlTmVnYXRpdmUgJiYgK3ZhbHVlID09PSAwKSB2YWx1ZU5lZ2F0aXZlID0gZmFsc2U7XG5cbiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgcHJlZml4IGFuZCBzdWZmaXguXG4gICAgICAgIHZhbHVlUHJlZml4ID0gKHZhbHVlTmVnYXRpdmUgPyAoc2lnbiA9PT0gXCIoXCIgPyBzaWduIDogXCItXCIpIDogc2lnbiA9PT0gXCItXCIgfHwgc2lnbiA9PT0gXCIoXCIgPyBcIlwiIDogc2lnbikgKyB2YWx1ZVByZWZpeDtcbiAgICAgICAgdmFsdWVTdWZmaXggPSAodHlwZSA9PT0gXCJzXCIgPyBwcmVmaXhlc1s4ICsgcHJlZml4RXhwb25lbnQgLyAzXSA6IFwiXCIpICsgdmFsdWVTdWZmaXggKyAodmFsdWVOZWdhdGl2ZSAmJiBzaWduID09PSBcIihcIiA/IFwiKVwiIDogXCJcIik7XG5cbiAgICAgICAgLy8gQnJlYWsgdGhlIGZvcm1hdHRlZCB2YWx1ZSBpbnRvIHRoZSBpbnRlZ2VyIOKAnHZhbHVl4oCdIHBhcnQgdGhhdCBjYW4gYmVcbiAgICAgICAgLy8gZ3JvdXBlZCwgYW5kIGZyYWN0aW9uYWwgb3IgZXhwb25lbnRpYWwg4oCcc3VmZml44oCdIHBhcnQgdGhhdCBpcyBub3QuXG4gICAgICAgIGlmIChtYXliZVN1ZmZpeCkge1xuICAgICAgICAgIGkgPSAtMSwgbiA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgICAgaWYgKGMgPSB2YWx1ZS5jaGFyQ29kZUF0KGkpLCA0OCA+IGMgfHwgYyA+IDU3KSB7XG4gICAgICAgICAgICAgIHZhbHVlU3VmZml4ID0gKGMgPT09IDQ2ID8gZGVjaW1hbCArIHZhbHVlLnNsaWNlKGkgKyAxKSA6IHZhbHVlLnNsaWNlKGkpKSArIHZhbHVlU3VmZml4O1xuICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIGkpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlIGZpbGwgY2hhcmFjdGVyIGlzIG5vdCBcIjBcIiwgZ3JvdXBpbmcgaXMgYXBwbGllZCBiZWZvcmUgcGFkZGluZy5cbiAgICAgIGlmIChjb21tYSAmJiAhemVybykgdmFsdWUgPSBncm91cCh2YWx1ZSwgSW5maW5pdHkpO1xuXG4gICAgICAvLyBDb21wdXRlIHRoZSBwYWRkaW5nLlxuICAgICAgdmFyIGxlbmd0aCA9IHZhbHVlUHJlZml4Lmxlbmd0aCArIHZhbHVlLmxlbmd0aCArIHZhbHVlU3VmZml4Lmxlbmd0aCxcbiAgICAgICAgICBwYWRkaW5nID0gbGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkod2lkdGggLSBsZW5ndGggKyAxKS5qb2luKGZpbGwpIDogXCJcIjtcblxuICAgICAgLy8gSWYgdGhlIGZpbGwgY2hhcmFjdGVyIGlzIFwiMFwiLCBncm91cGluZyBpcyBhcHBsaWVkIGFmdGVyIHBhZGRpbmcuXG4gICAgICBpZiAoY29tbWEgJiYgemVybykgdmFsdWUgPSBncm91cChwYWRkaW5nICsgdmFsdWUsIHBhZGRpbmcubGVuZ3RoID8gd2lkdGggLSB2YWx1ZVN1ZmZpeC5sZW5ndGggOiBJbmZpbml0eSksIHBhZGRpbmcgPSBcIlwiO1xuXG4gICAgICAvLyBSZWNvbnN0cnVjdCB0aGUgZmluYWwgb3V0cHV0IGJhc2VkIG9uIHRoZSBkZXNpcmVkIGFsaWdubWVudC5cbiAgICAgIHN3aXRjaCAoYWxpZ24pIHtcbiAgICAgICAgY2FzZSBcIjxcIjogdmFsdWUgPSB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXggKyBwYWRkaW5nOyBicmVhaztcbiAgICAgICAgY2FzZSBcIj1cIjogdmFsdWUgPSB2YWx1ZVByZWZpeCArIHBhZGRpbmcgKyB2YWx1ZSArIHZhbHVlU3VmZml4OyBicmVhaztcbiAgICAgICAgY2FzZSBcIl5cIjogdmFsdWUgPSBwYWRkaW5nLnNsaWNlKDAsIGxlbmd0aCA9IHBhZGRpbmcubGVuZ3RoID4+IDEpICsgdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4ICsgcGFkZGluZy5zbGljZShsZW5ndGgpOyBicmVhaztcbiAgICAgICAgZGVmYXVsdDogdmFsdWUgPSBwYWRkaW5nICsgdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4OyBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bWVyYWxzKHZhbHVlKTtcbiAgICB9XG5cbiAgICBmb3JtYXQudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzcGVjaWZpZXIgKyBcIlwiO1xuICAgIH07XG5cbiAgICByZXR1cm4gZm9ybWF0O1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UHJlZml4KHNwZWNpZmllciwgdmFsdWUpIHtcbiAgICB2YXIgZiA9IG5ld0Zvcm1hdCgoc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciksIHNwZWNpZmllci50eXBlID0gXCJmXCIsIHNwZWNpZmllcikpLFxuICAgICAgICBlID0gTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQkMSh2YWx1ZSkgLyAzKSkpICogMyxcbiAgICAgICAgayA9IE1hdGgucG93KDEwLCAtZSksXG4gICAgICAgIHByZWZpeCA9IHByZWZpeGVzWzggKyBlIC8gM107XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZihrICogdmFsdWUpICsgcHJlZml4O1xuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZvcm1hdDogbmV3Rm9ybWF0LFxuICAgIGZvcm1hdFByZWZpeDogZm9ybWF0UHJlZml4XG4gIH07XG59XG5cbnZhciBsb2NhbGU7XG5cbmRlZmF1bHRMb2NhbGUoe1xuICBkZWNpbWFsOiBcIi5cIixcbiAgdGhvdXNhbmRzOiBcIixcIixcbiAgZ3JvdXBpbmc6IFszXSxcbiAgY3VycmVuY3k6IFtcIiRcIiwgXCJcIl1cbn0pO1xuXG5mdW5jdGlvbiBkZWZhdWx0TG9jYWxlKGRlZmluaXRpb24pIHtcbiAgbG9jYWxlID0gZm9ybWF0TG9jYWxlKGRlZmluaXRpb24pO1xuICBleHBvcnRzLmZvcm1hdCA9IGxvY2FsZS5mb3JtYXQ7XG4gIGV4cG9ydHMuZm9ybWF0UHJlZml4ID0gbG9jYWxlLmZvcm1hdFByZWZpeDtcbiAgcmV0dXJuIGxvY2FsZTtcbn1cblxuZnVuY3Rpb24gcHJlY2lzaW9uRml4ZWQoc3RlcCkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgLWV4cG9uZW50JDEoTWF0aC5hYnMoc3RlcCkpKTtcbn1cblxuZnVuY3Rpb24gcHJlY2lzaW9uUHJlZml4KHN0ZXAsIHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLm1heCgwLCBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCQxKHZhbHVlKSAvIDMpKSkgKiAzIC0gZXhwb25lbnQkMShNYXRoLmFicyhzdGVwKSkpO1xufVxuXG5mdW5jdGlvbiBwcmVjaXNpb25Sb3VuZChzdGVwLCBtYXgpIHtcbiAgc3RlcCA9IE1hdGguYWJzKHN0ZXApLCBtYXggPSBNYXRoLmFicyhtYXgpIC0gc3RlcDtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIGV4cG9uZW50JDEobWF4KSAtIGV4cG9uZW50JDEoc3RlcCkpICsgMTtcbn1cblxuLy8gQWRkcyBmbG9hdGluZyBwb2ludCBudW1iZXJzIHdpdGggdHdpY2UgdGhlIG5vcm1hbCBwcmVjaXNpb24uXG4vLyBSZWZlcmVuY2U6IEouIFIuIFNoZXdjaHVrLCBBZGFwdGl2ZSBQcmVjaXNpb24gRmxvYXRpbmctUG9pbnQgQXJpdGhtZXRpYyBhbmRcbi8vIEZhc3QgUm9idXN0IEdlb21ldHJpYyBQcmVkaWNhdGVzLCBEaXNjcmV0ZSAmIENvbXB1dGF0aW9uYWwgR2VvbWV0cnkgMTgoMylcbi8vIDMwNeKAkzM2MyAoMTk5NykuXG4vLyBDb2RlIGFkYXB0ZWQgZnJvbSBHZW9ncmFwaGljTGliIGJ5IENoYXJsZXMgRi4gRi4gS2FybmV5LFxuLy8gaHR0cDovL2dlb2dyYXBoaWNsaWIuc291cmNlZm9yZ2UubmV0L1xuXG5mdW5jdGlvbiBhZGRlcigpIHtcbiAgcmV0dXJuIG5ldyBBZGRlcjtcbn1cblxuZnVuY3Rpb24gQWRkZXIoKSB7XG4gIHRoaXMucmVzZXQoKTtcbn1cblxuQWRkZXIucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogQWRkZXIsXG4gIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnMgPSAvLyByb3VuZGVkIHZhbHVlXG4gICAgdGhpcy50ID0gMDsgLy8gZXhhY3QgZXJyb3JcbiAgfSxcbiAgYWRkOiBmdW5jdGlvbih5KSB7XG4gICAgYWRkJDEodGVtcCwgeSwgdGhpcy50KTtcbiAgICBhZGQkMSh0aGlzLCB0ZW1wLnMsIHRoaXMucyk7XG4gICAgaWYgKHRoaXMucykgdGhpcy50ICs9IHRlbXAudDtcbiAgICBlbHNlIHRoaXMucyA9IHRlbXAudDtcbiAgfSxcbiAgdmFsdWVPZjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucztcbiAgfVxufTtcblxudmFyIHRlbXAgPSBuZXcgQWRkZXI7XG5cbmZ1bmN0aW9uIGFkZCQxKGFkZGVyLCBhLCBiKSB7XG4gIHZhciB4ID0gYWRkZXIucyA9IGEgKyBiLFxuICAgICAgYnYgPSB4IC0gYSxcbiAgICAgIGF2ID0geCAtIGJ2O1xuICBhZGRlci50ID0gKGEgLSBhdikgKyAoYiAtIGJ2KTtcbn1cblxudmFyIGVwc2lsb24kMiA9IDFlLTY7XG52YXIgZXBzaWxvbjIkMSA9IDFlLTEyO1xudmFyIHBpJDMgPSBNYXRoLlBJO1xudmFyIGhhbGZQaSQyID0gcGkkMyAvIDI7XG52YXIgcXVhcnRlclBpID0gcGkkMyAvIDQ7XG52YXIgdGF1JDMgPSBwaSQzICogMjtcblxudmFyIGRlZ3JlZXMkMSA9IDE4MCAvIHBpJDM7XG52YXIgcmFkaWFucyA9IHBpJDMgLyAxODA7XG5cbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBhdGFuID0gTWF0aC5hdGFuO1xudmFyIGF0YW4yID0gTWF0aC5hdGFuMjtcbnZhciBjb3MkMSA9IE1hdGguY29zO1xudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZXhwID0gTWF0aC5leHA7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgc2luJDEgPSBNYXRoLnNpbjtcbnZhciBzaWduID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHggPiAwID8gMSA6IHggPCAwID8gLTEgOiAwOyB9O1xudmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG52YXIgdGFuID0gTWF0aC50YW47XG5cbmZ1bmN0aW9uIGFjb3MoeCkge1xuICByZXR1cm4geCA+IDEgPyAwIDogeCA8IC0xID8gcGkkMyA6IE1hdGguYWNvcyh4KTtcbn1cblxuZnVuY3Rpb24gYXNpbih4KSB7XG4gIHJldHVybiB4ID4gMSA/IGhhbGZQaSQyIDogeCA8IC0xID8gLWhhbGZQaSQyIDogTWF0aC5hc2luKHgpO1xufVxuXG5mdW5jdGlvbiBoYXZlcnNpbih4KSB7XG4gIHJldHVybiAoeCA9IHNpbiQxKHggLyAyKSkgKiB4O1xufVxuXG5mdW5jdGlvbiBub29wJDIoKSB7fVxuXG5mdW5jdGlvbiBzdHJlYW1HZW9tZXRyeShnZW9tZXRyeSwgc3RyZWFtKSB7XG4gIGlmIChnZW9tZXRyeSAmJiBzdHJlYW1HZW9tZXRyeVR5cGUuaGFzT3duUHJvcGVydHkoZ2VvbWV0cnkudHlwZSkpIHtcbiAgICBzdHJlYW1HZW9tZXRyeVR5cGVbZ2VvbWV0cnkudHlwZV0oZ2VvbWV0cnksIHN0cmVhbSk7XG4gIH1cbn1cblxudmFyIHN0cmVhbU9iamVjdFR5cGUgPSB7XG4gIEZlYXR1cmU6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgc3RyZWFtR2VvbWV0cnkob2JqZWN0Lmdlb21ldHJ5LCBzdHJlYW0pO1xuICB9LFxuICBGZWF0dXJlQ29sbGVjdGlvbjogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICB2YXIgZmVhdHVyZXMgPSBvYmplY3QuZmVhdHVyZXMsIGkgPSAtMSwgbiA9IGZlYXR1cmVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgc3RyZWFtR2VvbWV0cnkoZmVhdHVyZXNbaV0uZ2VvbWV0cnksIHN0cmVhbSk7XG4gIH1cbn07XG5cbnZhciBzdHJlYW1HZW9tZXRyeVR5cGUgPSB7XG4gIFNwaGVyZTogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICBzdHJlYW0uc3BoZXJlKCk7XG4gIH0sXG4gIFBvaW50OiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIG9iamVjdCA9IG9iamVjdC5jb29yZGluYXRlcztcbiAgICBzdHJlYW0ucG9pbnQob2JqZWN0WzBdLCBvYmplY3RbMV0sIG9iamVjdFsyXSk7XG4gIH0sXG4gIE11bHRpUG9pbnQ6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIG9iamVjdCA9IGNvb3JkaW5hdGVzW2ldLCBzdHJlYW0ucG9pbnQob2JqZWN0WzBdLCBvYmplY3RbMV0sIG9iamVjdFsyXSk7XG4gIH0sXG4gIExpbmVTdHJpbmc6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgc3RyZWFtTGluZShvYmplY3QuY29vcmRpbmF0ZXMsIHN0cmVhbSwgMCk7XG4gIH0sXG4gIE11bHRpTGluZVN0cmluZzogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgc3RyZWFtTGluZShjb29yZGluYXRlc1tpXSwgc3RyZWFtLCAwKTtcbiAgfSxcbiAgUG9seWdvbjogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICBzdHJlYW1Qb2x5Z29uKG9iamVjdC5jb29yZGluYXRlcywgc3RyZWFtKTtcbiAgfSxcbiAgTXVsdGlQb2x5Z29uOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIHZhciBjb29yZGluYXRlcyA9IG9iamVjdC5jb29yZGluYXRlcywgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBzdHJlYW1Qb2x5Z29uKGNvb3JkaW5hdGVzW2ldLCBzdHJlYW0pO1xuICB9LFxuICBHZW9tZXRyeUNvbGxlY3Rpb246IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgdmFyIGdlb21ldHJpZXMgPSBvYmplY3QuZ2VvbWV0cmllcywgaSA9IC0xLCBuID0gZ2VvbWV0cmllcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIHN0cmVhbUdlb21ldHJ5KGdlb21ldHJpZXNbaV0sIHN0cmVhbSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0cmVhbUxpbmUoY29vcmRpbmF0ZXMsIHN0cmVhbSwgY2xvc2VkKSB7XG4gIHZhciBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGggLSBjbG9zZWQsIGNvb3JkaW5hdGU7XG4gIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgd2hpbGUgKCsraSA8IG4pIGNvb3JkaW5hdGUgPSBjb29yZGluYXRlc1tpXSwgc3RyZWFtLnBvaW50KGNvb3JkaW5hdGVbMF0sIGNvb3JkaW5hdGVbMV0sIGNvb3JkaW5hdGVbMl0pO1xuICBzdHJlYW0ubGluZUVuZCgpO1xufVxuXG5mdW5jdGlvbiBzdHJlYW1Qb2x5Z29uKGNvb3JkaW5hdGVzLCBzdHJlYW0pIHtcbiAgdmFyIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgc3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICB3aGlsZSAoKytpIDwgbikgc3RyZWFtTGluZShjb29yZGluYXRlc1tpXSwgc3RyZWFtLCAxKTtcbiAgc3RyZWFtLnBvbHlnb25FbmQoKTtcbn1cblxuZnVuY3Rpb24gZ2VvU3RyZWFtKG9iamVjdCwgc3RyZWFtKSB7XG4gIGlmIChvYmplY3QgJiYgc3RyZWFtT2JqZWN0VHlwZS5oYXNPd25Qcm9wZXJ0eShvYmplY3QudHlwZSkpIHtcbiAgICBzdHJlYW1PYmplY3RUeXBlW29iamVjdC50eXBlXShvYmplY3QsIHN0cmVhbSk7XG4gIH0gZWxzZSB7XG4gICAgc3RyZWFtR2VvbWV0cnkob2JqZWN0LCBzdHJlYW0pO1xuICB9XG59XG5cbnZhciBhcmVhUmluZ1N1bSA9IGFkZGVyKCk7XG5cbnZhciBhcmVhU3VtID0gYWRkZXIoKSxcbiAgICBsYW1iZGEwMCxcbiAgICBwaGkwMCxcbiAgICBsYW1iZGEwLFxuICAgIGNvc1BoaTAsXG4gICAgc2luUGhpMDtcblxudmFyIGFyZWFTdHJlYW0gPSB7XG4gIHBvaW50OiBub29wJDIsXG4gIGxpbmVTdGFydDogbm9vcCQyLFxuICBsaW5lRW5kOiBub29wJDIsXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgYXJlYVJpbmdTdW0ucmVzZXQoKTtcbiAgICBhcmVhU3RyZWFtLmxpbmVTdGFydCA9IGFyZWFSaW5nU3RhcnQ7XG4gICAgYXJlYVN0cmVhbS5saW5lRW5kID0gYXJlYVJpbmdFbmQ7XG4gIH0sXG4gIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmVhUmluZyA9ICthcmVhUmluZ1N1bTtcbiAgICBhcmVhU3VtLmFkZChhcmVhUmluZyA8IDAgPyB0YXUkMyArIGFyZWFSaW5nIDogYXJlYVJpbmcpO1xuICAgIHRoaXMubGluZVN0YXJ0ID0gdGhpcy5saW5lRW5kID0gdGhpcy5wb2ludCA9IG5vb3AkMjtcbiAgfSxcbiAgc3BoZXJlOiBmdW5jdGlvbigpIHtcbiAgICBhcmVhU3VtLmFkZCh0YXUkMyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGFyZWFSaW5nU3RhcnQoKSB7XG4gIGFyZWFTdHJlYW0ucG9pbnQgPSBhcmVhUG9pbnRGaXJzdDtcbn1cblxuZnVuY3Rpb24gYXJlYVJpbmdFbmQoKSB7XG4gIGFyZWFQb2ludChsYW1iZGEwMCwgcGhpMDApO1xufVxuXG5mdW5jdGlvbiBhcmVhUG9pbnRGaXJzdChsYW1iZGEsIHBoaSkge1xuICBhcmVhU3RyZWFtLnBvaW50ID0gYXJlYVBvaW50O1xuICBsYW1iZGEwMCA9IGxhbWJkYSwgcGhpMDAgPSBwaGk7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgbGFtYmRhMCA9IGxhbWJkYSwgY29zUGhpMCA9IGNvcyQxKHBoaSA9IHBoaSAvIDIgKyBxdWFydGVyUGkpLCBzaW5QaGkwID0gc2luJDEocGhpKTtcbn1cblxuZnVuY3Rpb24gYXJlYVBvaW50KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgcGhpID0gcGhpIC8gMiArIHF1YXJ0ZXJQaTsgLy8gaGFsZiB0aGUgYW5ndWxhciBkaXN0YW5jZSBmcm9tIHNvdXRoIHBvbGVcblxuICAvLyBTcGhlcmljYWwgZXhjZXNzIEUgZm9yIGEgc3BoZXJpY2FsIHRyaWFuZ2xlIHdpdGggdmVydGljZXM6IHNvdXRoIHBvbGUsXG4gIC8vIHByZXZpb3VzIHBvaW50LCBjdXJyZW50IHBvaW50LiAgVXNlcyBhIGZvcm11bGEgZGVyaXZlZCBmcm9tIENhZ25vbGnigJlzXG4gIC8vIHRoZW9yZW0uICBTZWUgVG9kaHVudGVyLCBTcGhlcmljYWwgVHJpZy4gKDE4NzEpLCBTZWMuIDEwMywgRXEuICgyKS5cbiAgdmFyIGRMYW1iZGEgPSBsYW1iZGEgLSBsYW1iZGEwLFxuICAgICAgc2RMYW1iZGEgPSBkTGFtYmRhID49IDAgPyAxIDogLTEsXG4gICAgICBhZExhbWJkYSA9IHNkTGFtYmRhICogZExhbWJkYSxcbiAgICAgIGNvc1BoaSA9IGNvcyQxKHBoaSksXG4gICAgICBzaW5QaGkgPSBzaW4kMShwaGkpLFxuICAgICAgayA9IHNpblBoaTAgKiBzaW5QaGksXG4gICAgICB1ID0gY29zUGhpMCAqIGNvc1BoaSArIGsgKiBjb3MkMShhZExhbWJkYSksXG4gICAgICB2ID0gayAqIHNkTGFtYmRhICogc2luJDEoYWRMYW1iZGEpO1xuICBhcmVhUmluZ1N1bS5hZGQoYXRhbjIodiwgdSkpO1xuXG4gIC8vIEFkdmFuY2UgdGhlIHByZXZpb3VzIHBvaW50cy5cbiAgbGFtYmRhMCA9IGxhbWJkYSwgY29zUGhpMCA9IGNvc1BoaSwgc2luUGhpMCA9IHNpblBoaTtcbn1cblxuZnVuY3Rpb24gYXJlYSQxKG9iamVjdCkge1xuICBhcmVhU3VtLnJlc2V0KCk7XG4gIGdlb1N0cmVhbShvYmplY3QsIGFyZWFTdHJlYW0pO1xuICByZXR1cm4gYXJlYVN1bSAqIDI7XG59XG5cbmZ1bmN0aW9uIHNwaGVyaWNhbChjYXJ0ZXNpYW4pIHtcbiAgcmV0dXJuIFthdGFuMihjYXJ0ZXNpYW5bMV0sIGNhcnRlc2lhblswXSksIGFzaW4oY2FydGVzaWFuWzJdKV07XG59XG5cbmZ1bmN0aW9uIGNhcnRlc2lhbihzcGhlcmljYWwpIHtcbiAgdmFyIGxhbWJkYSA9IHNwaGVyaWNhbFswXSwgcGhpID0gc3BoZXJpY2FsWzFdLCBjb3NQaGkgPSBjb3MkMShwaGkpO1xuICByZXR1cm4gW2Nvc1BoaSAqIGNvcyQxKGxhbWJkYSksIGNvc1BoaSAqIHNpbiQxKGxhbWJkYSksIHNpbiQxKHBoaSldO1xufVxuXG5mdW5jdGlvbiBjYXJ0ZXNpYW5Eb3QoYSwgYikge1xuICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXSArIGFbMl0gKiBiWzJdO1xufVxuXG5mdW5jdGlvbiBjYXJ0ZXNpYW5Dcm9zcyhhLCBiKSB7XG4gIHJldHVybiBbYVsxXSAqIGJbMl0gLSBhWzJdICogYlsxXSwgYVsyXSAqIGJbMF0gLSBhWzBdICogYlsyXSwgYVswXSAqIGJbMV0gLSBhWzFdICogYlswXV07XG59XG5cbi8vIFRPRE8gcmV0dXJuIGFcbmZ1bmN0aW9uIGNhcnRlc2lhbkFkZEluUGxhY2UoYSwgYikge1xuICBhWzBdICs9IGJbMF0sIGFbMV0gKz0gYlsxXSwgYVsyXSArPSBiWzJdO1xufVxuXG5mdW5jdGlvbiBjYXJ0ZXNpYW5TY2FsZSh2ZWN0b3IsIGspIHtcbiAgcmV0dXJuIFt2ZWN0b3JbMF0gKiBrLCB2ZWN0b3JbMV0gKiBrLCB2ZWN0b3JbMl0gKiBrXTtcbn1cblxuLy8gVE9ETyByZXR1cm4gZFxuZnVuY3Rpb24gY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShkKSB7XG4gIHZhciBsID0gc3FydChkWzBdICogZFswXSArIGRbMV0gKiBkWzFdICsgZFsyXSAqIGRbMl0pO1xuICBkWzBdIC89IGwsIGRbMV0gLz0gbCwgZFsyXSAvPSBsO1xufVxuXG52YXIgbGFtYmRhMCQxLCBwaGkwLCBsYW1iZGExLCBwaGkxLCAvLyBib3VuZHNcbiAgICBsYW1iZGEyLCAvLyBwcmV2aW91cyBsYW1iZGEtY29vcmRpbmF0ZVxuICAgIGxhbWJkYTAwJDEsIHBoaTAwJDEsIC8vIGZpcnN0IHBvaW50XG4gICAgcDAsIC8vIHByZXZpb3VzIDNEIHBvaW50XG4gICAgZGVsdGFTdW0gPSBhZGRlcigpLFxuICAgIHJhbmdlcyxcbiAgICByYW5nZTtcblxudmFyIGJvdW5kc1N0cmVhbSA9IHtcbiAgcG9pbnQ6IGJvdW5kc1BvaW50LFxuICBsaW5lU3RhcnQ6IGJvdW5kc0xpbmVTdGFydCxcbiAgbGluZUVuZDogYm91bmRzTGluZUVuZCxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBib3VuZHNTdHJlYW0ucG9pbnQgPSBib3VuZHNSaW5nUG9pbnQ7XG4gICAgYm91bmRzU3RyZWFtLmxpbmVTdGFydCA9IGJvdW5kc1JpbmdTdGFydDtcbiAgICBib3VuZHNTdHJlYW0ubGluZUVuZCA9IGJvdW5kc1JpbmdFbmQ7XG4gICAgZGVsdGFTdW0ucmVzZXQoKTtcbiAgICBhcmVhU3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICBhcmVhU3RyZWFtLnBvbHlnb25FbmQoKTtcbiAgICBib3VuZHNTdHJlYW0ucG9pbnQgPSBib3VuZHNQb2ludDtcbiAgICBib3VuZHNTdHJlYW0ubGluZVN0YXJ0ID0gYm91bmRzTGluZVN0YXJ0O1xuICAgIGJvdW5kc1N0cmVhbS5saW5lRW5kID0gYm91bmRzTGluZUVuZDtcbiAgICBpZiAoYXJlYVJpbmdTdW0gPCAwKSBsYW1iZGEwJDEgPSAtKGxhbWJkYTEgPSAxODApLCBwaGkwID0gLShwaGkxID0gOTApO1xuICAgIGVsc2UgaWYgKGRlbHRhU3VtID4gZXBzaWxvbiQyKSBwaGkxID0gOTA7XG4gICAgZWxzZSBpZiAoZGVsdGFTdW0gPCAtZXBzaWxvbiQyKSBwaGkwID0gLTkwO1xuICAgIHJhbmdlWzBdID0gbGFtYmRhMCQxLCByYW5nZVsxXSA9IGxhbWJkYTE7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGJvdW5kc1BvaW50KGxhbWJkYSwgcGhpKSB7XG4gIHJhbmdlcy5wdXNoKHJhbmdlID0gW2xhbWJkYTAkMSA9IGxhbWJkYSwgbGFtYmRhMSA9IGxhbWJkYV0pO1xuICBpZiAocGhpIDwgcGhpMCkgcGhpMCA9IHBoaTtcbiAgaWYgKHBoaSA+IHBoaTEpIHBoaTEgPSBwaGk7XG59XG5cbmZ1bmN0aW9uIGxpbmVQb2ludChsYW1iZGEsIHBoaSkge1xuICB2YXIgcCA9IGNhcnRlc2lhbihbbGFtYmRhICogcmFkaWFucywgcGhpICogcmFkaWFuc10pO1xuICBpZiAocDApIHtcbiAgICB2YXIgbm9ybWFsID0gY2FydGVzaWFuQ3Jvc3MocDAsIHApLFxuICAgICAgICBlcXVhdG9yaWFsID0gW25vcm1hbFsxXSwgLW5vcm1hbFswXSwgMF0sXG4gICAgICAgIGluZmxlY3Rpb24gPSBjYXJ0ZXNpYW5Dcm9zcyhlcXVhdG9yaWFsLCBub3JtYWwpO1xuICAgIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UoaW5mbGVjdGlvbik7XG4gICAgaW5mbGVjdGlvbiA9IHNwaGVyaWNhbChpbmZsZWN0aW9uKTtcbiAgICB2YXIgZGVsdGEgPSBsYW1iZGEgLSBsYW1iZGEyLFxuICAgICAgICBzaWduJCQxID0gZGVsdGEgPiAwID8gMSA6IC0xLFxuICAgICAgICBsYW1iZGFpID0gaW5mbGVjdGlvblswXSAqIGRlZ3JlZXMkMSAqIHNpZ24kJDEsXG4gICAgICAgIHBoaWksXG4gICAgICAgIGFudGltZXJpZGlhbiA9IGFicyhkZWx0YSkgPiAxODA7XG4gICAgaWYgKGFudGltZXJpZGlhbiBeIChzaWduJCQxICogbGFtYmRhMiA8IGxhbWJkYWkgJiYgbGFtYmRhaSA8IHNpZ24kJDEgKiBsYW1iZGEpKSB7XG4gICAgICBwaGlpID0gaW5mbGVjdGlvblsxXSAqIGRlZ3JlZXMkMTtcbiAgICAgIGlmIChwaGlpID4gcGhpMSkgcGhpMSA9IHBoaWk7XG4gICAgfSBlbHNlIGlmIChsYW1iZGFpID0gKGxhbWJkYWkgKyAzNjApICUgMzYwIC0gMTgwLCBhbnRpbWVyaWRpYW4gXiAoc2lnbiQkMSAqIGxhbWJkYTIgPCBsYW1iZGFpICYmIGxhbWJkYWkgPCBzaWduJCQxICogbGFtYmRhKSkge1xuICAgICAgcGhpaSA9IC1pbmZsZWN0aW9uWzFdICogZGVncmVlcyQxO1xuICAgICAgaWYgKHBoaWkgPCBwaGkwKSBwaGkwID0gcGhpaTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHBoaSA8IHBoaTApIHBoaTAgPSBwaGk7XG4gICAgICBpZiAocGhpID4gcGhpMSkgcGhpMSA9IHBoaTtcbiAgICB9XG4gICAgaWYgKGFudGltZXJpZGlhbikge1xuICAgICAgaWYgKGxhbWJkYSA8IGxhbWJkYTIpIHtcbiAgICAgICAgaWYgKGFuZ2xlKGxhbWJkYTAkMSwgbGFtYmRhKSA+IGFuZ2xlKGxhbWJkYTAkMSwgbGFtYmRhMSkpIGxhbWJkYTEgPSBsYW1iZGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoYW5nbGUobGFtYmRhLCBsYW1iZGExKSA+IGFuZ2xlKGxhbWJkYTAkMSwgbGFtYmRhMSkpIGxhbWJkYTAkMSA9IGxhbWJkYTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGxhbWJkYTEgPj0gbGFtYmRhMCQxKSB7XG4gICAgICAgIGlmIChsYW1iZGEgPCBsYW1iZGEwJDEpIGxhbWJkYTAkMSA9IGxhbWJkYTtcbiAgICAgICAgaWYgKGxhbWJkYSA+IGxhbWJkYTEpIGxhbWJkYTEgPSBsYW1iZGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobGFtYmRhID4gbGFtYmRhMikge1xuICAgICAgICAgIGlmIChhbmdsZShsYW1iZGEwJDEsIGxhbWJkYSkgPiBhbmdsZShsYW1iZGEwJDEsIGxhbWJkYTEpKSBsYW1iZGExID0gbGFtYmRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChhbmdsZShsYW1iZGEsIGxhbWJkYTEpID4gYW5nbGUobGFtYmRhMCQxLCBsYW1iZGExKSkgbGFtYmRhMCQxID0gbGFtYmRhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJhbmdlcy5wdXNoKHJhbmdlID0gW2xhbWJkYTAkMSA9IGxhbWJkYSwgbGFtYmRhMSA9IGxhbWJkYV0pO1xuICB9XG4gIGlmIChwaGkgPCBwaGkwKSBwaGkwID0gcGhpO1xuICBpZiAocGhpID4gcGhpMSkgcGhpMSA9IHBoaTtcbiAgcDAgPSBwLCBsYW1iZGEyID0gbGFtYmRhO1xufVxuXG5mdW5jdGlvbiBib3VuZHNMaW5lU3RhcnQoKSB7XG4gIGJvdW5kc1N0cmVhbS5wb2ludCA9IGxpbmVQb2ludDtcbn1cblxuZnVuY3Rpb24gYm91bmRzTGluZUVuZCgpIHtcbiAgcmFuZ2VbMF0gPSBsYW1iZGEwJDEsIHJhbmdlWzFdID0gbGFtYmRhMTtcbiAgYm91bmRzU3RyZWFtLnBvaW50ID0gYm91bmRzUG9pbnQ7XG4gIHAwID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gYm91bmRzUmluZ1BvaW50KGxhbWJkYSwgcGhpKSB7XG4gIGlmIChwMCkge1xuICAgIHZhciBkZWx0YSA9IGxhbWJkYSAtIGxhbWJkYTI7XG4gICAgZGVsdGFTdW0uYWRkKGFicyhkZWx0YSkgPiAxODAgPyBkZWx0YSArIChkZWx0YSA+IDAgPyAzNjAgOiAtMzYwKSA6IGRlbHRhKTtcbiAgfSBlbHNlIHtcbiAgICBsYW1iZGEwMCQxID0gbGFtYmRhLCBwaGkwMCQxID0gcGhpO1xuICB9XG4gIGFyZWFTdHJlYW0ucG9pbnQobGFtYmRhLCBwaGkpO1xuICBsaW5lUG9pbnQobGFtYmRhLCBwaGkpO1xufVxuXG5mdW5jdGlvbiBib3VuZHNSaW5nU3RhcnQoKSB7XG4gIGFyZWFTdHJlYW0ubGluZVN0YXJ0KCk7XG59XG5cbmZ1bmN0aW9uIGJvdW5kc1JpbmdFbmQoKSB7XG4gIGJvdW5kc1JpbmdQb2ludChsYW1iZGEwMCQxLCBwaGkwMCQxKTtcbiAgYXJlYVN0cmVhbS5saW5lRW5kKCk7XG4gIGlmIChhYnMoZGVsdGFTdW0pID4gZXBzaWxvbiQyKSBsYW1iZGEwJDEgPSAtKGxhbWJkYTEgPSAxODApO1xuICByYW5nZVswXSA9IGxhbWJkYTAkMSwgcmFuZ2VbMV0gPSBsYW1iZGExO1xuICBwMCA9IG51bGw7XG59XG5cbi8vIEZpbmRzIHRoZSBsZWZ0LXJpZ2h0IGRpc3RhbmNlIGJldHdlZW4gdHdvIGxvbmdpdHVkZXMuXG4vLyBUaGlzIGlzIGFsbW9zdCB0aGUgc2FtZSBhcyAobGFtYmRhMSAtIGxhbWJkYTAgKyAzNjDCsCkgJSAzNjDCsCwgZXhjZXB0IHRoYXQgd2Ugd2FudFxuLy8gdGhlIGRpc3RhbmNlIGJldHdlZW4gwrExODDCsCB0byBiZSAzNjDCsC5cbmZ1bmN0aW9uIGFuZ2xlKGxhbWJkYTAsIGxhbWJkYTEpIHtcbiAgcmV0dXJuIChsYW1iZGExIC09IGxhbWJkYTApIDwgMCA/IGxhbWJkYTEgKyAzNjAgOiBsYW1iZGExO1xufVxuXG5mdW5jdGlvbiByYW5nZUNvbXBhcmUoYSwgYikge1xuICByZXR1cm4gYVswXSAtIGJbMF07XG59XG5cbmZ1bmN0aW9uIHJhbmdlQ29udGFpbnMocmFuZ2UsIHgpIHtcbiAgcmV0dXJuIHJhbmdlWzBdIDw9IHJhbmdlWzFdID8gcmFuZ2VbMF0gPD0geCAmJiB4IDw9IHJhbmdlWzFdIDogeCA8IHJhbmdlWzBdIHx8IHJhbmdlWzFdIDwgeDtcbn1cblxuZnVuY3Rpb24gYm91bmRzKGZlYXR1cmUpIHtcbiAgdmFyIGksIG4sIGEsIGIsIG1lcmdlZCwgZGVsdGFNYXgsIGRlbHRhO1xuXG4gIHBoaTEgPSBsYW1iZGExID0gLShsYW1iZGEwJDEgPSBwaGkwID0gSW5maW5pdHkpO1xuICByYW5nZXMgPSBbXTtcbiAgZ2VvU3RyZWFtKGZlYXR1cmUsIGJvdW5kc1N0cmVhbSk7XG5cbiAgLy8gRmlyc3QsIHNvcnQgcmFuZ2VzIGJ5IHRoZWlyIG1pbmltdW0gbG9uZ2l0dWRlcy5cbiAgaWYgKG4gPSByYW5nZXMubGVuZ3RoKSB7XG4gICAgcmFuZ2VzLnNvcnQocmFuZ2VDb21wYXJlKTtcblxuICAgIC8vIFRoZW4sIG1lcmdlIGFueSByYW5nZXMgdGhhdCBvdmVybGFwLlxuICAgIGZvciAoaSA9IDEsIGEgPSByYW5nZXNbMF0sIG1lcmdlZCA9IFthXTsgaSA8IG47ICsraSkge1xuICAgICAgYiA9IHJhbmdlc1tpXTtcbiAgICAgIGlmIChyYW5nZUNvbnRhaW5zKGEsIGJbMF0pIHx8IHJhbmdlQ29udGFpbnMoYSwgYlsxXSkpIHtcbiAgICAgICAgaWYgKGFuZ2xlKGFbMF0sIGJbMV0pID4gYW5nbGUoYVswXSwgYVsxXSkpIGFbMV0gPSBiWzFdO1xuICAgICAgICBpZiAoYW5nbGUoYlswXSwgYVsxXSkgPiBhbmdsZShhWzBdLCBhWzFdKSkgYVswXSA9IGJbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZXJnZWQucHVzaChhID0gYik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRmluYWxseSwgZmluZCB0aGUgbGFyZ2VzdCBnYXAgYmV0d2VlbiB0aGUgbWVyZ2VkIHJhbmdlcy5cbiAgICAvLyBUaGUgZmluYWwgYm91bmRpbmcgYm94IHdpbGwgYmUgdGhlIGludmVyc2Ugb2YgdGhpcyBnYXAuXG4gICAgZm9yIChkZWx0YU1heCA9IC1JbmZpbml0eSwgbiA9IG1lcmdlZC5sZW5ndGggLSAxLCBpID0gMCwgYSA9IG1lcmdlZFtuXTsgaSA8PSBuOyBhID0gYiwgKytpKSB7XG4gICAgICBiID0gbWVyZ2VkW2ldO1xuICAgICAgaWYgKChkZWx0YSA9IGFuZ2xlKGFbMV0sIGJbMF0pKSA+IGRlbHRhTWF4KSBkZWx0YU1heCA9IGRlbHRhLCBsYW1iZGEwJDEgPSBiWzBdLCBsYW1iZGExID0gYVsxXTtcbiAgICB9XG4gIH1cblxuICByYW5nZXMgPSByYW5nZSA9IG51bGw7XG5cbiAgcmV0dXJuIGxhbWJkYTAkMSA9PT0gSW5maW5pdHkgfHwgcGhpMCA9PT0gSW5maW5pdHlcbiAgICAgID8gW1tOYU4sIE5hTl0sIFtOYU4sIE5hTl1dXG4gICAgICA6IFtbbGFtYmRhMCQxLCBwaGkwXSwgW2xhbWJkYTEsIHBoaTFdXTtcbn1cblxudmFyIFcwLCBXMSxcbiAgICBYMCwgWTAsIFowLFxuICAgIFgxLCBZMSwgWjEsXG4gICAgWDIsIFkyLCBaMixcbiAgICBsYW1iZGEwMCQyLCBwaGkwMCQyLCAvLyBmaXJzdCBwb2ludFxuICAgIHgwLCB5MCwgejA7IC8vIHByZXZpb3VzIHBvaW50XG5cbnZhciBjZW50cm9pZFN0cmVhbSA9IHtcbiAgc3BoZXJlOiBub29wJDIsXG4gIHBvaW50OiBjZW50cm9pZFBvaW50LFxuICBsaW5lU3RhcnQ6IGNlbnRyb2lkTGluZVN0YXJ0LFxuICBsaW5lRW5kOiBjZW50cm9pZExpbmVFbmQsXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgY2VudHJvaWRTdHJlYW0ubGluZVN0YXJ0ID0gY2VudHJvaWRSaW5nU3RhcnQ7XG4gICAgY2VudHJvaWRTdHJlYW0ubGluZUVuZCA9IGNlbnRyb2lkUmluZ0VuZDtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgY2VudHJvaWRTdHJlYW0ubGluZVN0YXJ0ID0gY2VudHJvaWRMaW5lU3RhcnQ7XG4gICAgY2VudHJvaWRTdHJlYW0ubGluZUVuZCA9IGNlbnRyb2lkTGluZUVuZDtcbiAgfVxufTtcblxuLy8gQXJpdGhtZXRpYyBtZWFuIG9mIENhcnRlc2lhbiB2ZWN0b3JzLlxuZnVuY3Rpb24gY2VudHJvaWRQb2ludChsYW1iZGEsIHBoaSkge1xuICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gIHZhciBjb3NQaGkgPSBjb3MkMShwaGkpO1xuICBjZW50cm9pZFBvaW50Q2FydGVzaWFuKGNvc1BoaSAqIGNvcyQxKGxhbWJkYSksIGNvc1BoaSAqIHNpbiQxKGxhbWJkYSksIHNpbiQxKHBoaSkpO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFBvaW50Q2FydGVzaWFuKHgsIHksIHopIHtcbiAgKytXMDtcbiAgWDAgKz0gKHggLSBYMCkgLyBXMDtcbiAgWTAgKz0gKHkgLSBZMCkgLyBXMDtcbiAgWjAgKz0gKHogLSBaMCkgLyBXMDtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRMaW5lU3RhcnQoKSB7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRMaW5lUG9pbnRGaXJzdDtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRMaW5lUG9pbnRGaXJzdChsYW1iZGEsIHBoaSkge1xuICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gIHZhciBjb3NQaGkgPSBjb3MkMShwaGkpO1xuICB4MCA9IGNvc1BoaSAqIGNvcyQxKGxhbWJkYSk7XG4gIHkwID0gY29zUGhpICogc2luJDEobGFtYmRhKTtcbiAgejAgPSBzaW4kMShwaGkpO1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkTGluZVBvaW50O1xuICBjZW50cm9pZFBvaW50Q2FydGVzaWFuKHgwLCB5MCwgejApO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZExpbmVQb2ludChsYW1iZGEsIHBoaSkge1xuICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gIHZhciBjb3NQaGkgPSBjb3MkMShwaGkpLFxuICAgICAgeCA9IGNvc1BoaSAqIGNvcyQxKGxhbWJkYSksXG4gICAgICB5ID0gY29zUGhpICogc2luJDEobGFtYmRhKSxcbiAgICAgIHogPSBzaW4kMShwaGkpLFxuICAgICAgdyA9IGF0YW4yKHNxcnQoKHcgPSB5MCAqIHogLSB6MCAqIHkpICogdyArICh3ID0gejAgKiB4IC0geDAgKiB6KSAqIHcgKyAodyA9IHgwICogeSAtIHkwICogeCkgKiB3KSwgeDAgKiB4ICsgeTAgKiB5ICsgejAgKiB6KTtcbiAgVzEgKz0gdztcbiAgWDEgKz0gdyAqICh4MCArICh4MCA9IHgpKTtcbiAgWTEgKz0gdyAqICh5MCArICh5MCA9IHkpKTtcbiAgWjEgKz0gdyAqICh6MCArICh6MCA9IHopKTtcbiAgY2VudHJvaWRQb2ludENhcnRlc2lhbih4MCwgeTAsIHowKTtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRMaW5lRW5kKCkge1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUG9pbnQ7XG59XG5cbi8vIFNlZSBKLiBFLiBCcm9jaywgVGhlIEluZXJ0aWEgVGVuc29yIGZvciBhIFNwaGVyaWNhbCBUcmlhbmdsZSxcbi8vIEouIEFwcGxpZWQgTWVjaGFuaWNzIDQyLCAyMzkgKDE5NzUpLlxuZnVuY3Rpb24gY2VudHJvaWRSaW5nU3RhcnQoKSB7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRSaW5nUG9pbnRGaXJzdDtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRSaW5nRW5kKCkge1xuICBjZW50cm9pZFJpbmdQb2ludChsYW1iZGEwMCQyLCBwaGkwMCQyKTtcbiAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFBvaW50O1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFJpbmdQb2ludEZpcnN0KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYTAwJDIgPSBsYW1iZGEsIHBoaTAwJDIgPSBwaGk7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFJpbmdQb2ludDtcbiAgdmFyIGNvc1BoaSA9IGNvcyQxKHBoaSk7XG4gIHgwID0gY29zUGhpICogY29zJDEobGFtYmRhKTtcbiAgeTAgPSBjb3NQaGkgKiBzaW4kMShsYW1iZGEpO1xuICB6MCA9IHNpbiQxKHBoaSk7XG4gIGNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4oeDAsIHkwLCB6MCk7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUmluZ1BvaW50KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgdmFyIGNvc1BoaSA9IGNvcyQxKHBoaSksXG4gICAgICB4ID0gY29zUGhpICogY29zJDEobGFtYmRhKSxcbiAgICAgIHkgPSBjb3NQaGkgKiBzaW4kMShsYW1iZGEpLFxuICAgICAgeiA9IHNpbiQxKHBoaSksXG4gICAgICBjeCA9IHkwICogeiAtIHowICogeSxcbiAgICAgIGN5ID0gejAgKiB4IC0geDAgKiB6LFxuICAgICAgY3ogPSB4MCAqIHkgLSB5MCAqIHgsXG4gICAgICBtID0gc3FydChjeCAqIGN4ICsgY3kgKiBjeSArIGN6ICogY3opLFxuICAgICAgdyA9IGFzaW4obSksIC8vIGxpbmUgd2VpZ2h0ID0gYW5nbGVcbiAgICAgIHYgPSBtICYmIC13IC8gbTsgLy8gYXJlYSB3ZWlnaHQgbXVsdGlwbGllclxuICBYMiArPSB2ICogY3g7XG4gIFkyICs9IHYgKiBjeTtcbiAgWjIgKz0gdiAqIGN6O1xuICBXMSArPSB3O1xuICBYMSArPSB3ICogKHgwICsgKHgwID0geCkpO1xuICBZMSArPSB3ICogKHkwICsgKHkwID0geSkpO1xuICBaMSArPSB3ICogKHowICsgKHowID0geikpO1xuICBjZW50cm9pZFBvaW50Q2FydGVzaWFuKHgwLCB5MCwgejApO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZChvYmplY3QpIHtcbiAgVzAgPSBXMSA9XG4gIFgwID0gWTAgPSBaMCA9XG4gIFgxID0gWTEgPSBaMSA9XG4gIFgyID0gWTIgPSBaMiA9IDA7XG4gIGdlb1N0cmVhbShvYmplY3QsIGNlbnRyb2lkU3RyZWFtKTtcblxuICB2YXIgeCA9IFgyLFxuICAgICAgeSA9IFkyLFxuICAgICAgeiA9IFoyLFxuICAgICAgbSA9IHggKiB4ICsgeSAqIHkgKyB6ICogejtcblxuICAvLyBJZiB0aGUgYXJlYS13ZWlnaHRlZCBjY2VudHJvaWQgaXMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbGVuZ3RoLXdlaWdodGVkIGNjZW50cm9pZC5cbiAgaWYgKG0gPCBlcHNpbG9uMiQxKSB7XG4gICAgeCA9IFgxLCB5ID0gWTEsIHogPSBaMTtcbiAgICAvLyBJZiB0aGUgZmVhdHVyZSBoYXMgemVybyBsZW5ndGgsIGZhbGwgYmFjayB0byBhcml0aG1ldGljIG1lYW4gb2YgcG9pbnQgdmVjdG9ycy5cbiAgICBpZiAoVzEgPCBlcHNpbG9uJDIpIHggPSBYMCwgeSA9IFkwLCB6ID0gWjA7XG4gICAgbSA9IHggKiB4ICsgeSAqIHkgKyB6ICogejtcbiAgICAvLyBJZiB0aGUgZmVhdHVyZSBzdGlsbCBoYXMgYW4gdW5kZWZpbmVkIGNjZW50cm9pZCwgdGhlbiByZXR1cm4uXG4gICAgaWYgKG0gPCBlcHNpbG9uMiQxKSByZXR1cm4gW05hTiwgTmFOXTtcbiAgfVxuXG4gIHJldHVybiBbYXRhbjIoeSwgeCkgKiBkZWdyZWVzJDEsIGFzaW4oeiAvIHNxcnQobSkpICogZGVncmVlcyQxXTtcbn1cblxuZnVuY3Rpb24gY29uc3RhbnQkOCh4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29tcG9zZShhLCBiKSB7XG5cbiAgZnVuY3Rpb24gY29tcG9zZSh4LCB5KSB7XG4gICAgcmV0dXJuIHggPSBhKHgsIHkpLCBiKHhbMF0sIHhbMV0pO1xuICB9XG5cbiAgaWYgKGEuaW52ZXJ0ICYmIGIuaW52ZXJ0KSBjb21wb3NlLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4geCA9IGIuaW52ZXJ0KHgsIHkpLCB4ICYmIGEuaW52ZXJ0KHhbMF0sIHhbMV0pO1xuICB9O1xuXG4gIHJldHVybiBjb21wb3NlO1xufVxuXG5mdW5jdGlvbiByb3RhdGlvbklkZW50aXR5KGxhbWJkYSwgcGhpKSB7XG4gIHJldHVybiBbYWJzKGxhbWJkYSkgPiBwaSQzID8gbGFtYmRhICsgTWF0aC5yb3VuZCgtbGFtYmRhIC8gdGF1JDMpICogdGF1JDMgOiBsYW1iZGEsIHBoaV07XG59XG5cbnJvdGF0aW9uSWRlbnRpdHkuaW52ZXJ0ID0gcm90YXRpb25JZGVudGl0eTtcblxuZnVuY3Rpb24gcm90YXRlUmFkaWFucyhkZWx0YUxhbWJkYSwgZGVsdGFQaGksIGRlbHRhR2FtbWEpIHtcbiAgcmV0dXJuIChkZWx0YUxhbWJkYSAlPSB0YXUkMykgPyAoZGVsdGFQaGkgfHwgZGVsdGFHYW1tYSA/IGNvbXBvc2Uocm90YXRpb25MYW1iZGEoZGVsdGFMYW1iZGEpLCByb3RhdGlvblBoaUdhbW1hKGRlbHRhUGhpLCBkZWx0YUdhbW1hKSlcbiAgICA6IHJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKSlcbiAgICA6IChkZWx0YVBoaSB8fCBkZWx0YUdhbW1hID8gcm90YXRpb25QaGlHYW1tYShkZWx0YVBoaSwgZGVsdGFHYW1tYSlcbiAgICA6IHJvdGF0aW9uSWRlbnRpdHkpO1xufVxuXG5mdW5jdGlvbiBmb3J3YXJkUm90YXRpb25MYW1iZGEoZGVsdGFMYW1iZGEpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGxhbWJkYSwgcGhpKSB7XG4gICAgcmV0dXJuIGxhbWJkYSArPSBkZWx0YUxhbWJkYSwgW2xhbWJkYSA+IHBpJDMgPyBsYW1iZGEgLSB0YXUkMyA6IGxhbWJkYSA8IC1waSQzID8gbGFtYmRhICsgdGF1JDMgOiBsYW1iZGEsIHBoaV07XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKSB7XG4gIHZhciByb3RhdGlvbiA9IGZvcndhcmRSb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSk7XG4gIHJvdGF0aW9uLmludmVydCA9IGZvcndhcmRSb3RhdGlvbkxhbWJkYSgtZGVsdGFMYW1iZGEpO1xuICByZXR1cm4gcm90YXRpb247XG59XG5cbmZ1bmN0aW9uIHJvdGF0aW9uUGhpR2FtbWEoZGVsdGFQaGksIGRlbHRhR2FtbWEpIHtcbiAgdmFyIGNvc0RlbHRhUGhpID0gY29zJDEoZGVsdGFQaGkpLFxuICAgICAgc2luRGVsdGFQaGkgPSBzaW4kMShkZWx0YVBoaSksXG4gICAgICBjb3NEZWx0YUdhbW1hID0gY29zJDEoZGVsdGFHYW1tYSksXG4gICAgICBzaW5EZWx0YUdhbW1hID0gc2luJDEoZGVsdGFHYW1tYSk7XG5cbiAgZnVuY3Rpb24gcm90YXRpb24obGFtYmRhLCBwaGkpIHtcbiAgICB2YXIgY29zUGhpID0gY29zJDEocGhpKSxcbiAgICAgICAgeCA9IGNvcyQxKGxhbWJkYSkgKiBjb3NQaGksXG4gICAgICAgIHkgPSBzaW4kMShsYW1iZGEpICogY29zUGhpLFxuICAgICAgICB6ID0gc2luJDEocGhpKSxcbiAgICAgICAgayA9IHogKiBjb3NEZWx0YVBoaSArIHggKiBzaW5EZWx0YVBoaTtcbiAgICByZXR1cm4gW1xuICAgICAgYXRhbjIoeSAqIGNvc0RlbHRhR2FtbWEgLSBrICogc2luRGVsdGFHYW1tYSwgeCAqIGNvc0RlbHRhUGhpIC0geiAqIHNpbkRlbHRhUGhpKSxcbiAgICAgIGFzaW4oayAqIGNvc0RlbHRhR2FtbWEgKyB5ICogc2luRGVsdGFHYW1tYSlcbiAgICBdO1xuICB9XG5cbiAgcm90YXRpb24uaW52ZXJ0ID0gZnVuY3Rpb24obGFtYmRhLCBwaGkpIHtcbiAgICB2YXIgY29zUGhpID0gY29zJDEocGhpKSxcbiAgICAgICAgeCA9IGNvcyQxKGxhbWJkYSkgKiBjb3NQaGksXG4gICAgICAgIHkgPSBzaW4kMShsYW1iZGEpICogY29zUGhpLFxuICAgICAgICB6ID0gc2luJDEocGhpKSxcbiAgICAgICAgayA9IHogKiBjb3NEZWx0YUdhbW1hIC0geSAqIHNpbkRlbHRhR2FtbWE7XG4gICAgcmV0dXJuIFtcbiAgICAgIGF0YW4yKHkgKiBjb3NEZWx0YUdhbW1hICsgeiAqIHNpbkRlbHRhR2FtbWEsIHggKiBjb3NEZWx0YVBoaSArIGsgKiBzaW5EZWx0YVBoaSksXG4gICAgICBhc2luKGsgKiBjb3NEZWx0YVBoaSAtIHggKiBzaW5EZWx0YVBoaSlcbiAgICBdO1xuICB9O1xuXG4gIHJldHVybiByb3RhdGlvbjtcbn1cblxuZnVuY3Rpb24gcm90YXRpb24ocm90YXRlKSB7XG4gIHJvdGF0ZSA9IHJvdGF0ZVJhZGlhbnMocm90YXRlWzBdICogcmFkaWFucywgcm90YXRlWzFdICogcmFkaWFucywgcm90YXRlLmxlbmd0aCA+IDIgPyByb3RhdGVbMl0gKiByYWRpYW5zIDogMCk7XG5cbiAgZnVuY3Rpb24gZm9yd2FyZChjb29yZGluYXRlcykge1xuICAgIGNvb3JkaW5hdGVzID0gcm90YXRlKGNvb3JkaW5hdGVzWzBdICogcmFkaWFucywgY29vcmRpbmF0ZXNbMV0gKiByYWRpYW5zKTtcbiAgICByZXR1cm4gY29vcmRpbmF0ZXNbMF0gKj0gZGVncmVlcyQxLCBjb29yZGluYXRlc1sxXSAqPSBkZWdyZWVzJDEsIGNvb3JkaW5hdGVzO1xuICB9XG5cbiAgZm9yd2FyZC5pbnZlcnQgPSBmdW5jdGlvbihjb29yZGluYXRlcykge1xuICAgIGNvb3JkaW5hdGVzID0gcm90YXRlLmludmVydChjb29yZGluYXRlc1swXSAqIHJhZGlhbnMsIGNvb3JkaW5hdGVzWzFdICogcmFkaWFucyk7XG4gICAgcmV0dXJuIGNvb3JkaW5hdGVzWzBdICo9IGRlZ3JlZXMkMSwgY29vcmRpbmF0ZXNbMV0gKj0gZGVncmVlcyQxLCBjb29yZGluYXRlcztcbiAgfTtcblxuICByZXR1cm4gZm9yd2FyZDtcbn1cblxuLy8gR2VuZXJhdGVzIGEgY2lyY2xlIGNlbnRlcmVkIGF0IFswwrAsIDDCsF0sIHdpdGggYSBnaXZlbiByYWRpdXMgYW5kIHByZWNpc2lvbi5cbmZ1bmN0aW9uIGNpcmNsZVN0cmVhbShzdHJlYW0sIHJhZGl1cywgZGVsdGEsIGRpcmVjdGlvbiwgdDAsIHQxKSB7XG4gIGlmICghZGVsdGEpIHJldHVybjtcbiAgdmFyIGNvc1JhZGl1cyA9IGNvcyQxKHJhZGl1cyksXG4gICAgICBzaW5SYWRpdXMgPSBzaW4kMShyYWRpdXMpLFxuICAgICAgc3RlcCA9IGRpcmVjdGlvbiAqIGRlbHRhO1xuICBpZiAodDAgPT0gbnVsbCkge1xuICAgIHQwID0gcmFkaXVzICsgZGlyZWN0aW9uICogdGF1JDM7XG4gICAgdDEgPSByYWRpdXMgLSBzdGVwIC8gMjtcbiAgfSBlbHNlIHtcbiAgICB0MCA9IGNpcmNsZVJhZGl1cyhjb3NSYWRpdXMsIHQwKTtcbiAgICB0MSA9IGNpcmNsZVJhZGl1cyhjb3NSYWRpdXMsIHQxKTtcbiAgICBpZiAoZGlyZWN0aW9uID4gMCA/IHQwIDwgdDEgOiB0MCA+IHQxKSB0MCArPSBkaXJlY3Rpb24gKiB0YXUkMztcbiAgfVxuICBmb3IgKHZhciBwb2ludCwgdCA9IHQwOyBkaXJlY3Rpb24gPiAwID8gdCA+IHQxIDogdCA8IHQxOyB0IC09IHN0ZXApIHtcbiAgICBwb2ludCA9IHNwaGVyaWNhbChbY29zUmFkaXVzLCAtc2luUmFkaXVzICogY29zJDEodCksIC1zaW5SYWRpdXMgKiBzaW4kMSh0KV0pO1xuICAgIHN0cmVhbS5wb2ludChwb2ludFswXSwgcG9pbnRbMV0pO1xuICB9XG59XG5cbi8vIFJldHVybnMgdGhlIHNpZ25lZCBhbmdsZSBvZiBhIGNhcnRlc2lhbiBwb2ludCByZWxhdGl2ZSB0byBbY29zUmFkaXVzLCAwLCAwXS5cbmZ1bmN0aW9uIGNpcmNsZVJhZGl1cyhjb3NSYWRpdXMsIHBvaW50KSB7XG4gIHBvaW50ID0gY2FydGVzaWFuKHBvaW50KSwgcG9pbnRbMF0gLT0gY29zUmFkaXVzO1xuICBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlKHBvaW50KTtcbiAgdmFyIHJhZGl1cyA9IGFjb3MoLXBvaW50WzFdKTtcbiAgcmV0dXJuICgoLXBvaW50WzJdIDwgMCA/IC1yYWRpdXMgOiByYWRpdXMpICsgdGF1JDMgLSBlcHNpbG9uJDIpICUgdGF1JDM7XG59XG5cbmZ1bmN0aW9uIGNpcmNsZSgpIHtcbiAgdmFyIGNlbnRlciA9IGNvbnN0YW50JDgoWzAsIDBdKSxcbiAgICAgIHJhZGl1cyA9IGNvbnN0YW50JDgoOTApLFxuICAgICAgcHJlY2lzaW9uID0gY29uc3RhbnQkOCg2KSxcbiAgICAgIHJpbmcsXG4gICAgICByb3RhdGUsXG4gICAgICBzdHJlYW0gPSB7cG9pbnQ6IHBvaW50fTtcblxuICBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG4gICAgcmluZy5wdXNoKHggPSByb3RhdGUoeCwgeSkpO1xuICAgIHhbMF0gKj0gZGVncmVlcyQxLCB4WzFdICo9IGRlZ3JlZXMkMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNpcmNsZSgpIHtcbiAgICB2YXIgYyA9IGNlbnRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICByID0gcmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgKiByYWRpYW5zLFxuICAgICAgICBwID0gcHJlY2lzaW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgKiByYWRpYW5zO1xuICAgIHJpbmcgPSBbXTtcbiAgICByb3RhdGUgPSByb3RhdGVSYWRpYW5zKC1jWzBdICogcmFkaWFucywgLWNbMV0gKiByYWRpYW5zLCAwKS5pbnZlcnQ7XG4gICAgY2lyY2xlU3RyZWFtKHN0cmVhbSwgciwgcCwgMSk7XG4gICAgYyA9IHt0eXBlOiBcIlBvbHlnb25cIiwgY29vcmRpbmF0ZXM6IFtyaW5nXX07XG4gICAgcmluZyA9IHJvdGF0ZSA9IG51bGw7XG4gICAgcmV0dXJuIGM7XG4gIH1cblxuICBjaXJjbGUuY2VudGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNlbnRlciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkOChbK19bMF0sICtfWzFdXSksIGNpcmNsZSkgOiBjZW50ZXI7XG4gIH07XG5cbiAgY2lyY2xlLnJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDgoK18pLCBjaXJjbGUpIDogcmFkaXVzO1xuICB9O1xuXG4gIGNpcmNsZS5wcmVjaXNpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocHJlY2lzaW9uID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ4KCtfKSwgY2lyY2xlKSA6IHByZWNpc2lvbjtcbiAgfTtcblxuICByZXR1cm4gY2lyY2xlO1xufVxuXG5mdW5jdGlvbiBjbGlwQnVmZmVyKCkge1xuICB2YXIgbGluZXMgPSBbXSxcbiAgICAgIGxpbmU7XG4gIHJldHVybiB7XG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIGxpbmUucHVzaChbeCwgeV0pO1xuICAgIH0sXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGxpbmVzLnB1c2gobGluZSA9IFtdKTtcbiAgICB9LFxuICAgIGxpbmVFbmQ6IG5vb3AkMixcbiAgICByZWpvaW46IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKGxpbmVzLmxlbmd0aCA+IDEpIGxpbmVzLnB1c2gobGluZXMucG9wKCkuY29uY2F0KGxpbmVzLnNoaWZ0KCkpKTtcbiAgICB9LFxuICAgIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbGluZXM7XG4gICAgICBsaW5lcyA9IFtdO1xuICAgICAgbGluZSA9IG51bGw7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcG9pbnRFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhYnMoYVswXSAtIGJbMF0pIDwgZXBzaWxvbiQyICYmIGFicyhhWzFdIC0gYlsxXSkgPCBlcHNpbG9uJDI7XG59XG5cbmZ1bmN0aW9uIEludGVyc2VjdGlvbihwb2ludCwgcG9pbnRzLCBvdGhlciwgZW50cnkpIHtcbiAgdGhpcy54ID0gcG9pbnQ7XG4gIHRoaXMueiA9IHBvaW50cztcbiAgdGhpcy5vID0gb3RoZXI7IC8vIGFub3RoZXIgaW50ZXJzZWN0aW9uXG4gIHRoaXMuZSA9IGVudHJ5OyAvLyBpcyBhbiBlbnRyeT9cbiAgdGhpcy52ID0gZmFsc2U7IC8vIHZpc2l0ZWRcbiAgdGhpcy5uID0gdGhpcy5wID0gbnVsbDsgLy8gbmV4dCAmIHByZXZpb3VzXG59XG5cbi8vIEEgZ2VuZXJhbGl6ZWQgcG9seWdvbiBjbGlwcGluZyBhbGdvcml0aG06IGdpdmVuIGEgcG9seWdvbiB0aGF0IGhhcyBiZWVuIGN1dFxuLy8gaW50byBpdHMgdmlzaWJsZSBsaW5lIHNlZ21lbnRzLCBhbmQgcmVqb2lucyB0aGUgc2VnbWVudHMgYnkgaW50ZXJwb2xhdGluZ1xuLy8gYWxvbmcgdGhlIGNsaXAgZWRnZS5cbmZ1bmN0aW9uIGNsaXBSZWpvaW4oc2VnbWVudHMsIGNvbXBhcmVJbnRlcnNlY3Rpb24sIHN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgc3RyZWFtKSB7XG4gIHZhciBzdWJqZWN0ID0gW10sXG4gICAgICBjbGlwID0gW10sXG4gICAgICBpLFxuICAgICAgbjtcblxuICBzZWdtZW50cy5mb3JFYWNoKGZ1bmN0aW9uKHNlZ21lbnQpIHtcbiAgICBpZiAoKG4gPSBzZWdtZW50Lmxlbmd0aCAtIDEpIDw9IDApIHJldHVybjtcbiAgICB2YXIgbiwgcDAgPSBzZWdtZW50WzBdLCBwMSA9IHNlZ21lbnRbbl0sIHg7XG5cbiAgICAvLyBJZiB0aGUgZmlyc3QgYW5kIGxhc3QgcG9pbnRzIG9mIGEgc2VnbWVudCBhcmUgY29pbmNpZGVudCwgdGhlbiB0cmVhdCBhcyBhXG4gICAgLy8gY2xvc2VkIHJpbmcuIFRPRE8gaWYgYWxsIHJpbmdzIGFyZSBjbG9zZWQsIHRoZW4gdGhlIHdpbmRpbmcgb3JkZXIgb2YgdGhlXG4gICAgLy8gZXh0ZXJpb3IgcmluZyBzaG91bGQgYmUgY2hlY2tlZC5cbiAgICBpZiAocG9pbnRFcXVhbChwMCwgcDEpKSB7XG4gICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBzdHJlYW0ucG9pbnQoKHAwID0gc2VnbWVudFtpXSlbMF0sIHAwWzFdKTtcbiAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3ViamVjdC5wdXNoKHggPSBuZXcgSW50ZXJzZWN0aW9uKHAwLCBzZWdtZW50LCBudWxsLCB0cnVlKSk7XG4gICAgY2xpcC5wdXNoKHgubyA9IG5ldyBJbnRlcnNlY3Rpb24ocDAsIG51bGwsIHgsIGZhbHNlKSk7XG4gICAgc3ViamVjdC5wdXNoKHggPSBuZXcgSW50ZXJzZWN0aW9uKHAxLCBzZWdtZW50LCBudWxsLCBmYWxzZSkpO1xuICAgIGNsaXAucHVzaCh4Lm8gPSBuZXcgSW50ZXJzZWN0aW9uKHAxLCBudWxsLCB4LCB0cnVlKSk7XG4gIH0pO1xuXG4gIGlmICghc3ViamVjdC5sZW5ndGgpIHJldHVybjtcblxuICBjbGlwLnNvcnQoY29tcGFyZUludGVyc2VjdGlvbik7XG4gIGxpbmskMShzdWJqZWN0KTtcbiAgbGluayQxKGNsaXApO1xuXG4gIGZvciAoaSA9IDAsIG4gPSBjbGlwLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIGNsaXBbaV0uZSA9IHN0YXJ0SW5zaWRlID0gIXN0YXJ0SW5zaWRlO1xuICB9XG5cbiAgdmFyIHN0YXJ0ID0gc3ViamVjdFswXSxcbiAgICAgIHBvaW50cyxcbiAgICAgIHBvaW50O1xuXG4gIHdoaWxlICgxKSB7XG4gICAgLy8gRmluZCBmaXJzdCB1bnZpc2l0ZWQgaW50ZXJzZWN0aW9uLlxuICAgIHZhciBjdXJyZW50ID0gc3RhcnQsXG4gICAgICAgIGlzU3ViamVjdCA9IHRydWU7XG4gICAgd2hpbGUgKGN1cnJlbnQudikgaWYgKChjdXJyZW50ID0gY3VycmVudC5uKSA9PT0gc3RhcnQpIHJldHVybjtcbiAgICBwb2ludHMgPSBjdXJyZW50Lno7XG4gICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgIGRvIHtcbiAgICAgIGN1cnJlbnQudiA9IGN1cnJlbnQuby52ID0gdHJ1ZTtcbiAgICAgIGlmIChjdXJyZW50LmUpIHtcbiAgICAgICAgaWYgKGlzU3ViamVjdCkge1xuICAgICAgICAgIGZvciAoaSA9IDAsIG4gPSBwb2ludHMubGVuZ3RoOyBpIDwgbjsgKytpKSBzdHJlYW0ucG9pbnQoKHBvaW50ID0gcG9pbnRzW2ldKVswXSwgcG9pbnRbMV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGludGVycG9sYXRlKGN1cnJlbnQueCwgY3VycmVudC5uLngsIDEsIHN0cmVhbSk7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1N1YmplY3QpIHtcbiAgICAgICAgICBwb2ludHMgPSBjdXJyZW50LnAuejtcbiAgICAgICAgICBmb3IgKGkgPSBwb2ludHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHN0cmVhbS5wb2ludCgocG9pbnQgPSBwb2ludHNbaV0pWzBdLCBwb2ludFsxXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW50ZXJwb2xhdGUoY3VycmVudC54LCBjdXJyZW50LnAueCwgLTEsIHN0cmVhbSk7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucDtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm87XG4gICAgICBwb2ludHMgPSBjdXJyZW50Lno7XG4gICAgICBpc1N1YmplY3QgPSAhaXNTdWJqZWN0O1xuICAgIH0gd2hpbGUgKCFjdXJyZW50LnYpO1xuICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbGluayQxKGFycmF5KSB7XG4gIGlmICghKG4gPSBhcnJheS5sZW5ndGgpKSByZXR1cm47XG4gIHZhciBuLFxuICAgICAgaSA9IDAsXG4gICAgICBhID0gYXJyYXlbMF0sXG4gICAgICBiO1xuICB3aGlsZSAoKytpIDwgbikge1xuICAgIGEubiA9IGIgPSBhcnJheVtpXTtcbiAgICBiLnAgPSBhO1xuICAgIGEgPSBiO1xuICB9XG4gIGEubiA9IGIgPSBhcnJheVswXTtcbiAgYi5wID0gYTtcbn1cblxudmFyIHN1bSQxID0gYWRkZXIoKTtcblxuZnVuY3Rpb24gcG9seWdvbkNvbnRhaW5zKHBvbHlnb24sIHBvaW50KSB7XG4gIHZhciBsYW1iZGEgPSBwb2ludFswXSxcbiAgICAgIHBoaSA9IHBvaW50WzFdLFxuICAgICAgc2luUGhpID0gc2luJDEocGhpKSxcbiAgICAgIG5vcm1hbCA9IFtzaW4kMShsYW1iZGEpLCAtY29zJDEobGFtYmRhKSwgMF0sXG4gICAgICBhbmdsZSA9IDAsXG4gICAgICB3aW5kaW5nID0gMDtcblxuICBzdW0kMS5yZXNldCgpO1xuXG4gIGlmIChzaW5QaGkgPT09IDEpIHBoaSA9IGhhbGZQaSQyICsgZXBzaWxvbiQyO1xuICBlbHNlIGlmIChzaW5QaGkgPT09IC0xKSBwaGkgPSAtaGFsZlBpJDIgLSBlcHNpbG9uJDI7XG5cbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2x5Z29uLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIGlmICghKG0gPSAocmluZyA9IHBvbHlnb25baV0pLmxlbmd0aCkpIGNvbnRpbnVlO1xuICAgIHZhciByaW5nLFxuICAgICAgICBtLFxuICAgICAgICBwb2ludDAgPSByaW5nW20gLSAxXSxcbiAgICAgICAgbGFtYmRhMCA9IHBvaW50MFswXSxcbiAgICAgICAgcGhpMCA9IHBvaW50MFsxXSAvIDIgKyBxdWFydGVyUGksXG4gICAgICAgIHNpblBoaTAgPSBzaW4kMShwaGkwKSxcbiAgICAgICAgY29zUGhpMCA9IGNvcyQxKHBoaTApO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBtOyArK2osIGxhbWJkYTAgPSBsYW1iZGExLCBzaW5QaGkwID0gc2luUGhpMSwgY29zUGhpMCA9IGNvc1BoaTEsIHBvaW50MCA9IHBvaW50MSkge1xuICAgICAgdmFyIHBvaW50MSA9IHJpbmdbal0sXG4gICAgICAgICAgbGFtYmRhMSA9IHBvaW50MVswXSxcbiAgICAgICAgICBwaGkxID0gcG9pbnQxWzFdIC8gMiArIHF1YXJ0ZXJQaSxcbiAgICAgICAgICBzaW5QaGkxID0gc2luJDEocGhpMSksXG4gICAgICAgICAgY29zUGhpMSA9IGNvcyQxKHBoaTEpLFxuICAgICAgICAgIGRlbHRhID0gbGFtYmRhMSAtIGxhbWJkYTAsXG4gICAgICAgICAgc2lnbiQkMSA9IGRlbHRhID49IDAgPyAxIDogLTEsXG4gICAgICAgICAgYWJzRGVsdGEgPSBzaWduJCQxICogZGVsdGEsXG4gICAgICAgICAgYW50aW1lcmlkaWFuID0gYWJzRGVsdGEgPiBwaSQzLFxuICAgICAgICAgIGsgPSBzaW5QaGkwICogc2luUGhpMTtcblxuICAgICAgc3VtJDEuYWRkKGF0YW4yKGsgKiBzaWduJCQxICogc2luJDEoYWJzRGVsdGEpLCBjb3NQaGkwICogY29zUGhpMSArIGsgKiBjb3MkMShhYnNEZWx0YSkpKTtcbiAgICAgIGFuZ2xlICs9IGFudGltZXJpZGlhbiA/IGRlbHRhICsgc2lnbiQkMSAqIHRhdSQzIDogZGVsdGE7XG5cbiAgICAgIC8vIEFyZSB0aGUgbG9uZ2l0dWRlcyBlaXRoZXIgc2lkZSBvZiB0aGUgcG9pbnTigJlzIG1lcmlkaWFuIChsYW1iZGEpLFxuICAgICAgLy8gYW5kIGFyZSB0aGUgbGF0aXR1ZGVzIHNtYWxsZXIgdGhhbiB0aGUgcGFyYWxsZWwgKHBoaSk/XG4gICAgICBpZiAoYW50aW1lcmlkaWFuIF4gbGFtYmRhMCA+PSBsYW1iZGEgXiBsYW1iZGExID49IGxhbWJkYSkge1xuICAgICAgICB2YXIgYXJjID0gY2FydGVzaWFuQ3Jvc3MoY2FydGVzaWFuKHBvaW50MCksIGNhcnRlc2lhbihwb2ludDEpKTtcbiAgICAgICAgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShhcmMpO1xuICAgICAgICB2YXIgaW50ZXJzZWN0aW9uID0gY2FydGVzaWFuQ3Jvc3Mobm9ybWFsLCBhcmMpO1xuICAgICAgICBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlKGludGVyc2VjdGlvbik7XG4gICAgICAgIHZhciBwaGlBcmMgPSAoYW50aW1lcmlkaWFuIF4gZGVsdGEgPj0gMCA/IC0xIDogMSkgKiBhc2luKGludGVyc2VjdGlvblsyXSk7XG4gICAgICAgIGlmIChwaGkgPiBwaGlBcmMgfHwgcGhpID09PSBwaGlBcmMgJiYgKGFyY1swXSB8fCBhcmNbMV0pKSB7XG4gICAgICAgICAgd2luZGluZyArPSBhbnRpbWVyaWRpYW4gXiBkZWx0YSA+PSAwID8gMSA6IC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gRmlyc3QsIGRldGVybWluZSB3aGV0aGVyIHRoZSBTb3V0aCBwb2xlIGlzIGluc2lkZSBvciBvdXRzaWRlOlxuICAvL1xuICAvLyBJdCBpcyBpbnNpZGUgaWY6XG4gIC8vICogdGhlIHBvbHlnb24gd2luZHMgYXJvdW5kIGl0IGluIGEgY2xvY2t3aXNlIGRpcmVjdGlvbi5cbiAgLy8gKiB0aGUgcG9seWdvbiBkb2VzIG5vdCAoY3VtdWxhdGl2ZWx5KSB3aW5kIGFyb3VuZCBpdCwgYnV0IGhhcyBhIG5lZ2F0aXZlXG4gIC8vICAgKGNvdW50ZXItY2xvY2t3aXNlKSBhcmVhLlxuICAvL1xuICAvLyBTZWNvbmQsIGNvdW50IHRoZSAoc2lnbmVkKSBudW1iZXIgb2YgdGltZXMgYSBzZWdtZW50IGNyb3NzZXMgYSBsYW1iZGFcbiAgLy8gZnJvbSB0aGUgcG9pbnQgdG8gdGhlIFNvdXRoIHBvbGUuICBJZiBpdCBpcyB6ZXJvLCB0aGVuIHRoZSBwb2ludCBpcyB0aGVcbiAgLy8gc2FtZSBzaWRlIGFzIHRoZSBTb3V0aCBwb2xlLlxuXG4gIHJldHVybiAoYW5nbGUgPCAtZXBzaWxvbiQyIHx8IGFuZ2xlIDwgZXBzaWxvbiQyICYmIHN1bSQxIDwgLWVwc2lsb24kMikgXiAod2luZGluZyAmIDEpO1xufVxuXG5mdW5jdGlvbiBjbGlwKHBvaW50VmlzaWJsZSwgY2xpcExpbmUsIGludGVycG9sYXRlLCBzdGFydCkge1xuICByZXR1cm4gZnVuY3Rpb24oc2luaykge1xuICAgIHZhciBsaW5lID0gY2xpcExpbmUoc2luayksXG4gICAgICAgIHJpbmdCdWZmZXIgPSBjbGlwQnVmZmVyKCksXG4gICAgICAgIHJpbmdTaW5rID0gY2xpcExpbmUocmluZ0J1ZmZlciksXG4gICAgICAgIHBvbHlnb25TdGFydGVkID0gZmFsc2UsXG4gICAgICAgIHBvbHlnb24sXG4gICAgICAgIHNlZ21lbnRzLFxuICAgICAgICByaW5nO1xuXG4gICAgdmFyIGNsaXAgPSB7XG4gICAgICBwb2ludDogcG9pbnQsXG4gICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnRSaW5nO1xuICAgICAgICBjbGlwLmxpbmVTdGFydCA9IHJpbmdTdGFydDtcbiAgICAgICAgY2xpcC5saW5lRW5kID0gcmluZ0VuZDtcbiAgICAgICAgc2VnbWVudHMgPSBbXTtcbiAgICAgICAgcG9seWdvbiA9IFtdO1xuICAgICAgfSxcbiAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnQ7XG4gICAgICAgIGNsaXAubGluZVN0YXJ0ID0gbGluZVN0YXJ0O1xuICAgICAgICBjbGlwLmxpbmVFbmQgPSBsaW5lRW5kO1xuICAgICAgICBzZWdtZW50cyA9IG1lcmdlKHNlZ21lbnRzKTtcbiAgICAgICAgdmFyIHN0YXJ0SW5zaWRlID0gcG9seWdvbkNvbnRhaW5zKHBvbHlnb24sIHN0YXJ0KTtcbiAgICAgICAgaWYgKHNlZ21lbnRzLmxlbmd0aCkge1xuICAgICAgICAgIGlmICghcG9seWdvblN0YXJ0ZWQpIHNpbmsucG9seWdvblN0YXJ0KCksIHBvbHlnb25TdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICBjbGlwUmVqb2luKHNlZ21lbnRzLCBjb21wYXJlSW50ZXJzZWN0aW9uLCBzdGFydEluc2lkZSwgaW50ZXJwb2xhdGUsIHNpbmspO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXJ0SW5zaWRlKSB7XG4gICAgICAgICAgaWYgKCFwb2x5Z29uU3RhcnRlZCkgc2luay5wb2x5Z29uU3RhcnQoKSwgcG9seWdvblN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgIHNpbmsubGluZVN0YXJ0KCk7XG4gICAgICAgICAgaW50ZXJwb2xhdGUobnVsbCwgbnVsbCwgMSwgc2luayk7XG4gICAgICAgICAgc2luay5saW5lRW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvbHlnb25TdGFydGVkKSBzaW5rLnBvbHlnb25FbmQoKSwgcG9seWdvblN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgc2VnbWVudHMgPSBwb2x5Z29uID0gbnVsbDtcbiAgICAgIH0sXG4gICAgICBzcGhlcmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzaW5rLnBvbHlnb25TdGFydCgpO1xuICAgICAgICBzaW5rLmxpbmVTdGFydCgpO1xuICAgICAgICBpbnRlcnBvbGF0ZShudWxsLCBudWxsLCAxLCBzaW5rKTtcbiAgICAgICAgc2luay5saW5lRW5kKCk7XG4gICAgICAgIHNpbmsucG9seWdvbkVuZCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwb2ludChsYW1iZGEsIHBoaSkge1xuICAgICAgaWYgKHBvaW50VmlzaWJsZShsYW1iZGEsIHBoaSkpIHNpbmsucG9pbnQobGFtYmRhLCBwaGkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvaW50TGluZShsYW1iZGEsIHBoaSkge1xuICAgICAgbGluZS5wb2ludChsYW1iZGEsIHBoaSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xuICAgICAgY2xpcC5wb2ludCA9IHBvaW50TGluZTtcbiAgICAgIGxpbmUubGluZVN0YXJ0KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIGNsaXAucG9pbnQgPSBwb2ludDtcbiAgICAgIGxpbmUubGluZUVuZCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvaW50UmluZyhsYW1iZGEsIHBoaSkge1xuICAgICAgcmluZy5wdXNoKFtsYW1iZGEsIHBoaV0pO1xuICAgICAgcmluZ1NpbmsucG9pbnQobGFtYmRhLCBwaGkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJpbmdTdGFydCgpIHtcbiAgICAgIHJpbmdTaW5rLmxpbmVTdGFydCgpO1xuICAgICAgcmluZyA9IFtdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJpbmdFbmQoKSB7XG4gICAgICBwb2ludFJpbmcocmluZ1swXVswXSwgcmluZ1swXVsxXSk7XG4gICAgICByaW5nU2luay5saW5lRW5kKCk7XG5cbiAgICAgIHZhciBjbGVhbiA9IHJpbmdTaW5rLmNsZWFuKCksXG4gICAgICAgICAgcmluZ1NlZ21lbnRzID0gcmluZ0J1ZmZlci5yZXN1bHQoKSxcbiAgICAgICAgICBpLCBuID0gcmluZ1NlZ21lbnRzLmxlbmd0aCwgbSxcbiAgICAgICAgICBzZWdtZW50LFxuICAgICAgICAgIHBvaW50O1xuXG4gICAgICByaW5nLnBvcCgpO1xuICAgICAgcG9seWdvbi5wdXNoKHJpbmcpO1xuICAgICAgcmluZyA9IG51bGw7XG5cbiAgICAgIGlmICghbikgcmV0dXJuO1xuXG4gICAgICAvLyBObyBpbnRlcnNlY3Rpb25zLlxuICAgICAgaWYgKGNsZWFuICYgMSkge1xuICAgICAgICBzZWdtZW50ID0gcmluZ1NlZ21lbnRzWzBdO1xuICAgICAgICBpZiAoKG0gPSBzZWdtZW50Lmxlbmd0aCAtIDEpID4gMCkge1xuICAgICAgICAgIGlmICghcG9seWdvblN0YXJ0ZWQpIHNpbmsucG9seWdvblN0YXJ0KCksIHBvbHlnb25TdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICBzaW5rLmxpbmVTdGFydCgpO1xuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBtOyArK2kpIHNpbmsucG9pbnQoKHBvaW50ID0gc2VnbWVudFtpXSlbMF0sIHBvaW50WzFdKTtcbiAgICAgICAgICBzaW5rLmxpbmVFbmQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFJlam9pbiBjb25uZWN0ZWQgc2VnbWVudHMuXG4gICAgICAvLyBUT0RPIHJldXNlIHJpbmdCdWZmZXIucmVqb2luKCk/XG4gICAgICBpZiAobiA+IDEgJiYgY2xlYW4gJiAyKSByaW5nU2VnbWVudHMucHVzaChyaW5nU2VnbWVudHMucG9wKCkuY29uY2F0KHJpbmdTZWdtZW50cy5zaGlmdCgpKSk7XG5cbiAgICAgIHNlZ21lbnRzLnB1c2gocmluZ1NlZ21lbnRzLmZpbHRlcih2YWxpZFNlZ21lbnQpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xpcDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdmFsaWRTZWdtZW50KHNlZ21lbnQpIHtcbiAgcmV0dXJuIHNlZ21lbnQubGVuZ3RoID4gMTtcbn1cblxuLy8gSW50ZXJzZWN0aW9ucyBhcmUgc29ydGVkIGFsb25nIHRoZSBjbGlwIGVkZ2UuIEZvciBib3RoIGFudGltZXJpZGlhbiBjdXR0aW5nXG4vLyBhbmQgY2lyY2xlIGNsaXBwaW5nLCB0aGUgc2FtZSBjb21wYXJpc29uIGlzIHVzZWQuXG5mdW5jdGlvbiBjb21wYXJlSW50ZXJzZWN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuICgoYSA9IGEueClbMF0gPCAwID8gYVsxXSAtIGhhbGZQaSQyIC0gZXBzaWxvbiQyIDogaGFsZlBpJDIgLSBhWzFdKVxuICAgICAgIC0gKChiID0gYi54KVswXSA8IDAgPyBiWzFdIC0gaGFsZlBpJDIgLSBlcHNpbG9uJDIgOiBoYWxmUGkkMiAtIGJbMV0pO1xufVxuXG52YXIgY2xpcEFudGltZXJpZGlhbiA9IGNsaXAoXG4gIGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgY2xpcEFudGltZXJpZGlhbkxpbmUsXG4gIGNsaXBBbnRpbWVyaWRpYW5JbnRlcnBvbGF0ZSxcbiAgWy1waSQzLCAtaGFsZlBpJDJdXG4pO1xuXG4vLyBUYWtlcyBhIGxpbmUgYW5kIGN1dHMgaW50byB2aXNpYmxlIHNlZ21lbnRzLiBSZXR1cm4gdmFsdWVzOiAwIC0gdGhlcmUgd2VyZVxuLy8gaW50ZXJzZWN0aW9ucyBvciB0aGUgbGluZSB3YXMgZW1wdHk7IDEgLSBubyBpbnRlcnNlY3Rpb25zOyAyIC0gdGhlcmUgd2VyZVxuLy8gaW50ZXJzZWN0aW9ucywgYW5kIHRoZSBmaXJzdCBhbmQgbGFzdCBzZWdtZW50cyBzaG91bGQgYmUgcmVqb2luZWQuXG5mdW5jdGlvbiBjbGlwQW50aW1lcmlkaWFuTGluZShzdHJlYW0pIHtcbiAgdmFyIGxhbWJkYTAgPSBOYU4sXG4gICAgICBwaGkwID0gTmFOLFxuICAgICAgc2lnbjAgPSBOYU4sXG4gICAgICBjbGVhbjsgLy8gbm8gaW50ZXJzZWN0aW9uc1xuXG4gIHJldHVybiB7XG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgIGNsZWFuID0gMTtcbiAgICB9LFxuICAgIHBvaW50OiBmdW5jdGlvbihsYW1iZGExLCBwaGkxKSB7XG4gICAgICB2YXIgc2lnbjEgPSBsYW1iZGExID4gMCA/IHBpJDMgOiAtcGkkMyxcbiAgICAgICAgICBkZWx0YSA9IGFicyhsYW1iZGExIC0gbGFtYmRhMCk7XG4gICAgICBpZiAoYWJzKGRlbHRhIC0gcGkkMykgPCBlcHNpbG9uJDIpIHsgLy8gbGluZSBjcm9zc2VzIGEgcG9sZVxuICAgICAgICBzdHJlYW0ucG9pbnQobGFtYmRhMCwgcGhpMCA9IChwaGkwICsgcGhpMSkgLyAyID4gMCA/IGhhbGZQaSQyIDogLWhhbGZQaSQyKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHNpZ24wLCBwaGkwKTtcbiAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICBzdHJlYW0ucG9pbnQoc2lnbjEsIHBoaTApO1xuICAgICAgICBzdHJlYW0ucG9pbnQobGFtYmRhMSwgcGhpMCk7XG4gICAgICAgIGNsZWFuID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoc2lnbjAgIT09IHNpZ24xICYmIGRlbHRhID49IHBpJDMpIHsgLy8gbGluZSBjcm9zc2VzIGFudGltZXJpZGlhblxuICAgICAgICBpZiAoYWJzKGxhbWJkYTAgLSBzaWduMCkgPCBlcHNpbG9uJDIpIGxhbWJkYTAgLT0gc2lnbjAgKiBlcHNpbG9uJDI7IC8vIGhhbmRsZSBkZWdlbmVyYWNpZXNcbiAgICAgICAgaWYgKGFicyhsYW1iZGExIC0gc2lnbjEpIDwgZXBzaWxvbiQyKSBsYW1iZGExIC09IHNpZ24xICogZXBzaWxvbiQyO1xuICAgICAgICBwaGkwID0gY2xpcEFudGltZXJpZGlhbkludGVyc2VjdChsYW1iZGEwLCBwaGkwLCBsYW1iZGExLCBwaGkxKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHNpZ24wLCBwaGkwKTtcbiAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICBzdHJlYW0ucG9pbnQoc2lnbjEsIHBoaTApO1xuICAgICAgICBjbGVhbiA9IDA7XG4gICAgICB9XG4gICAgICBzdHJlYW0ucG9pbnQobGFtYmRhMCA9IGxhbWJkYTEsIHBoaTAgPSBwaGkxKTtcbiAgICAgIHNpZ24wID0gc2lnbjE7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICBsYW1iZGEwID0gcGhpMCA9IE5hTjtcbiAgICB9LFxuICAgIGNsZWFuOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAyIC0gY2xlYW47IC8vIGlmIGludGVyc2VjdGlvbnMsIHJlam9pbiBmaXJzdCBhbmQgbGFzdCBzZWdtZW50c1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xpcEFudGltZXJpZGlhbkludGVyc2VjdChsYW1iZGEwLCBwaGkwLCBsYW1iZGExLCBwaGkxKSB7XG4gIHZhciBjb3NQaGkwLFxuICAgICAgY29zUGhpMSxcbiAgICAgIHNpbkxhbWJkYTBMYW1iZGExID0gc2luJDEobGFtYmRhMCAtIGxhbWJkYTEpO1xuICByZXR1cm4gYWJzKHNpbkxhbWJkYTBMYW1iZGExKSA+IGVwc2lsb24kMlxuICAgICAgPyBhdGFuKChzaW4kMShwaGkwKSAqIChjb3NQaGkxID0gY29zJDEocGhpMSkpICogc2luJDEobGFtYmRhMSlcbiAgICAgICAgICAtIHNpbiQxKHBoaTEpICogKGNvc1BoaTAgPSBjb3MkMShwaGkwKSkgKiBzaW4kMShsYW1iZGEwKSlcbiAgICAgICAgICAvIChjb3NQaGkwICogY29zUGhpMSAqIHNpbkxhbWJkYTBMYW1iZGExKSlcbiAgICAgIDogKHBoaTAgKyBwaGkxKSAvIDI7XG59XG5cbmZ1bmN0aW9uIGNsaXBBbnRpbWVyaWRpYW5JbnRlcnBvbGF0ZShmcm9tLCB0bywgZGlyZWN0aW9uLCBzdHJlYW0pIHtcbiAgdmFyIHBoaTtcbiAgaWYgKGZyb20gPT0gbnVsbCkge1xuICAgIHBoaSA9IGRpcmVjdGlvbiAqIGhhbGZQaSQyO1xuICAgIHN0cmVhbS5wb2ludCgtcGkkMywgcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQoMCwgcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQocGkkMywgcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQocGkkMywgMCk7XG4gICAgc3RyZWFtLnBvaW50KHBpJDMsIC1waGkpO1xuICAgIHN0cmVhbS5wb2ludCgwLCAtcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQoLXBpJDMsIC1waGkpO1xuICAgIHN0cmVhbS5wb2ludCgtcGkkMywgMCk7XG4gICAgc3RyZWFtLnBvaW50KC1waSQzLCBwaGkpO1xuICB9IGVsc2UgaWYgKGFicyhmcm9tWzBdIC0gdG9bMF0pID4gZXBzaWxvbiQyKSB7XG4gICAgdmFyIGxhbWJkYSA9IGZyb21bMF0gPCB0b1swXSA/IHBpJDMgOiAtcGkkMztcbiAgICBwaGkgPSBkaXJlY3Rpb24gKiBsYW1iZGEgLyAyO1xuICAgIHN0cmVhbS5wb2ludCgtbGFtYmRhLCBwaGkpO1xuICAgIHN0cmVhbS5wb2ludCgwLCBwaGkpO1xuICAgIHN0cmVhbS5wb2ludChsYW1iZGEsIHBoaSk7XG4gIH0gZWxzZSB7XG4gICAgc3RyZWFtLnBvaW50KHRvWzBdLCB0b1sxXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2xpcENpcmNsZShyYWRpdXMpIHtcbiAgdmFyIGNyID0gY29zJDEocmFkaXVzKSxcbiAgICAgIGRlbHRhID0gNiAqIHJhZGlhbnMsXG4gICAgICBzbWFsbFJhZGl1cyA9IGNyID4gMCxcbiAgICAgIG5vdEhlbWlzcGhlcmUgPSBhYnMoY3IpID4gZXBzaWxvbiQyOyAvLyBUT0RPIG9wdGltaXNlIGZvciB0aGlzIGNvbW1vbiBjYXNlXG5cbiAgZnVuY3Rpb24gaW50ZXJwb2xhdGUoZnJvbSwgdG8sIGRpcmVjdGlvbiwgc3RyZWFtKSB7XG4gICAgY2lyY2xlU3RyZWFtKHN0cmVhbSwgcmFkaXVzLCBkZWx0YSwgZGlyZWN0aW9uLCBmcm9tLCB0byk7XG4gIH1cblxuICBmdW5jdGlvbiB2aXNpYmxlKGxhbWJkYSwgcGhpKSB7XG4gICAgcmV0dXJuIGNvcyQxKGxhbWJkYSkgKiBjb3MkMShwaGkpID4gY3I7XG4gIH1cblxuICAvLyBUYWtlcyBhIGxpbmUgYW5kIGN1dHMgaW50byB2aXNpYmxlIHNlZ21lbnRzLiBSZXR1cm4gdmFsdWVzIHVzZWQgZm9yIHBvbHlnb25cbiAgLy8gY2xpcHBpbmc6IDAgLSB0aGVyZSB3ZXJlIGludGVyc2VjdGlvbnMgb3IgdGhlIGxpbmUgd2FzIGVtcHR5OyAxIC0gbm9cbiAgLy8gaW50ZXJzZWN0aW9ucyAyIC0gdGhlcmUgd2VyZSBpbnRlcnNlY3Rpb25zLCBhbmQgdGhlIGZpcnN0IGFuZCBsYXN0IHNlZ21lbnRzXG4gIC8vIHNob3VsZCBiZSByZWpvaW5lZC5cbiAgZnVuY3Rpb24gY2xpcExpbmUoc3RyZWFtKSB7XG4gICAgdmFyIHBvaW50MCwgLy8gcHJldmlvdXMgcG9pbnRcbiAgICAgICAgYzAsIC8vIGNvZGUgZm9yIHByZXZpb3VzIHBvaW50XG4gICAgICAgIHYwLCAvLyB2aXNpYmlsaXR5IG9mIHByZXZpb3VzIHBvaW50XG4gICAgICAgIHYwMCwgLy8gdmlzaWJpbGl0eSBvZiBmaXJzdCBwb2ludFxuICAgICAgICBjbGVhbjsgLy8gbm8gaW50ZXJzZWN0aW9uc1xuICAgIHJldHVybiB7XG4gICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2MDAgPSB2MCA9IGZhbHNlO1xuICAgICAgICBjbGVhbiA9IDE7XG4gICAgICB9LFxuICAgICAgcG9pbnQ6IGZ1bmN0aW9uKGxhbWJkYSwgcGhpKSB7XG4gICAgICAgIHZhciBwb2ludDEgPSBbbGFtYmRhLCBwaGldLFxuICAgICAgICAgICAgcG9pbnQyLFxuICAgICAgICAgICAgdiA9IHZpc2libGUobGFtYmRhLCBwaGkpLFxuICAgICAgICAgICAgYyA9IHNtYWxsUmFkaXVzXG4gICAgICAgICAgICAgID8gdiA/IDAgOiBjb2RlKGxhbWJkYSwgcGhpKVxuICAgICAgICAgICAgICA6IHYgPyBjb2RlKGxhbWJkYSArIChsYW1iZGEgPCAwID8gcGkkMyA6IC1waSQzKSwgcGhpKSA6IDA7XG4gICAgICAgIGlmICghcG9pbnQwICYmICh2MDAgPSB2MCA9IHYpKSBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgIC8vIEhhbmRsZSBkZWdlbmVyYWNpZXMuXG4gICAgICAgIC8vIFRPRE8gaWdub3JlIGlmIG5vdCBjbGlwcGluZyBwb2x5Z29ucy5cbiAgICAgICAgaWYgKHYgIT09IHYwKSB7XG4gICAgICAgICAgcG9pbnQyID0gaW50ZXJzZWN0KHBvaW50MCwgcG9pbnQxKTtcbiAgICAgICAgICBpZiAoIXBvaW50MiB8fCBwb2ludEVxdWFsKHBvaW50MCwgcG9pbnQyKSB8fCBwb2ludEVxdWFsKHBvaW50MSwgcG9pbnQyKSkge1xuICAgICAgICAgICAgcG9pbnQxWzBdICs9IGVwc2lsb24kMjtcbiAgICAgICAgICAgIHBvaW50MVsxXSArPSBlcHNpbG9uJDI7XG4gICAgICAgICAgICB2ID0gdmlzaWJsZShwb2ludDFbMF0sIHBvaW50MVsxXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh2ICE9PSB2MCkge1xuICAgICAgICAgIGNsZWFuID0gMDtcbiAgICAgICAgICBpZiAodikge1xuICAgICAgICAgICAgLy8gb3V0c2lkZSBnb2luZyBpblxuICAgICAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgcG9pbnQyID0gaW50ZXJzZWN0KHBvaW50MSwgcG9pbnQwKTtcbiAgICAgICAgICAgIHN0cmVhbS5wb2ludChwb2ludDJbMF0sIHBvaW50MlsxXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGluc2lkZSBnb2luZyBvdXRcbiAgICAgICAgICAgIHBvaW50MiA9IGludGVyc2VjdChwb2ludDAsIHBvaW50MSk7XG4gICAgICAgICAgICBzdHJlYW0ucG9pbnQocG9pbnQyWzBdLCBwb2ludDJbMV0pO1xuICAgICAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcG9pbnQwID0gcG9pbnQyO1xuICAgICAgICB9IGVsc2UgaWYgKG5vdEhlbWlzcGhlcmUgJiYgcG9pbnQwICYmIHNtYWxsUmFkaXVzIF4gdikge1xuICAgICAgICAgIHZhciB0O1xuICAgICAgICAgIC8vIElmIHRoZSBjb2RlcyBmb3IgdHdvIHBvaW50cyBhcmUgZGlmZmVyZW50LCBvciBhcmUgYm90aCB6ZXJvLFxuICAgICAgICAgIC8vIGFuZCB0aGVyZSB0aGlzIHNlZ21lbnQgaW50ZXJzZWN0cyB3aXRoIHRoZSBzbWFsbCBjaXJjbGUuXG4gICAgICAgICAgaWYgKCEoYyAmIGMwKSAmJiAodCA9IGludGVyc2VjdChwb2ludDEsIHBvaW50MCwgdHJ1ZSkpKSB7XG4gICAgICAgICAgICBjbGVhbiA9IDA7XG4gICAgICAgICAgICBpZiAoc21hbGxSYWRpdXMpIHtcbiAgICAgICAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgICBzdHJlYW0ucG9pbnQodFswXVswXSwgdFswXVsxXSk7XG4gICAgICAgICAgICAgIHN0cmVhbS5wb2ludCh0WzFdWzBdLCB0WzFdWzFdKTtcbiAgICAgICAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN0cmVhbS5wb2ludCh0WzFdWzBdLCB0WzFdWzFdKTtcbiAgICAgICAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgICBzdHJlYW0ucG9pbnQodFswXVswXSwgdFswXVsxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh2ICYmICghcG9pbnQwIHx8ICFwb2ludEVxdWFsKHBvaW50MCwgcG9pbnQxKSkpIHtcbiAgICAgICAgICBzdHJlYW0ucG9pbnQocG9pbnQxWzBdLCBwb2ludDFbMV0pO1xuICAgICAgICB9XG4gICAgICAgIHBvaW50MCA9IHBvaW50MSwgdjAgPSB2LCBjMCA9IGM7XG4gICAgICB9LFxuICAgICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh2MCkgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgcG9pbnQwID0gbnVsbDtcbiAgICAgIH0sXG4gICAgICAvLyBSZWpvaW4gZmlyc3QgYW5kIGxhc3Qgc2VnbWVudHMgaWYgdGhlcmUgd2VyZSBpbnRlcnNlY3Rpb25zIGFuZCB0aGUgZmlyc3RcbiAgICAgIC8vIGFuZCBsYXN0IHBvaW50cyB3ZXJlIHZpc2libGUuXG4gICAgICBjbGVhbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBjbGVhbiB8ICgodjAwICYmIHYwKSA8PCAxKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gSW50ZXJzZWN0cyB0aGUgZ3JlYXQgY2lyY2xlIGJldHdlZW4gYSBhbmQgYiB3aXRoIHRoZSBjbGlwIGNpcmNsZS5cbiAgZnVuY3Rpb24gaW50ZXJzZWN0KGEsIGIsIHR3bykge1xuICAgIHZhciBwYSA9IGNhcnRlc2lhbihhKSxcbiAgICAgICAgcGIgPSBjYXJ0ZXNpYW4oYik7XG5cbiAgICAvLyBXZSBoYXZlIHR3byBwbGFuZXMsIG4xLnAgPSBkMSBhbmQgbjIucCA9IGQyLlxuICAgIC8vIEZpbmQgaW50ZXJzZWN0aW9uIGxpbmUgcCh0KSA9IGMxIG4xICsgYzIgbjIgKyB0IChuMSDiqK8gbjIpLlxuICAgIHZhciBuMSA9IFsxLCAwLCAwXSwgLy8gbm9ybWFsXG4gICAgICAgIG4yID0gY2FydGVzaWFuQ3Jvc3MocGEsIHBiKSxcbiAgICAgICAgbjJuMiA9IGNhcnRlc2lhbkRvdChuMiwgbjIpLFxuICAgICAgICBuMW4yID0gbjJbMF0sIC8vIGNhcnRlc2lhbkRvdChuMSwgbjIpLFxuICAgICAgICBkZXRlcm1pbmFudCA9IG4ybjIgLSBuMW4yICogbjFuMjtcblxuICAgIC8vIFR3byBwb2xhciBwb2ludHMuXG4gICAgaWYgKCFkZXRlcm1pbmFudCkgcmV0dXJuICF0d28gJiYgYTtcblxuICAgIHZhciBjMSA9ICBjciAqIG4ybjIgLyBkZXRlcm1pbmFudCxcbiAgICAgICAgYzIgPSAtY3IgKiBuMW4yIC8gZGV0ZXJtaW5hbnQsXG4gICAgICAgIG4xeG4yID0gY2FydGVzaWFuQ3Jvc3MobjEsIG4yKSxcbiAgICAgICAgQSA9IGNhcnRlc2lhblNjYWxlKG4xLCBjMSksXG4gICAgICAgIEIgPSBjYXJ0ZXNpYW5TY2FsZShuMiwgYzIpO1xuICAgIGNhcnRlc2lhbkFkZEluUGxhY2UoQSwgQik7XG5cbiAgICAvLyBTb2x2ZSB8cCh0KXxeMiA9IDEuXG4gICAgdmFyIHUgPSBuMXhuMixcbiAgICAgICAgdyA9IGNhcnRlc2lhbkRvdChBLCB1KSxcbiAgICAgICAgdXUgPSBjYXJ0ZXNpYW5Eb3QodSwgdSksXG4gICAgICAgIHQyID0gdyAqIHcgLSB1dSAqIChjYXJ0ZXNpYW5Eb3QoQSwgQSkgLSAxKTtcblxuICAgIGlmICh0MiA8IDApIHJldHVybjtcblxuICAgIHZhciB0ID0gc3FydCh0MiksXG4gICAgICAgIHEgPSBjYXJ0ZXNpYW5TY2FsZSh1LCAoLXcgLSB0KSAvIHV1KTtcbiAgICBjYXJ0ZXNpYW5BZGRJblBsYWNlKHEsIEEpO1xuICAgIHEgPSBzcGhlcmljYWwocSk7XG5cbiAgICBpZiAoIXR3bykgcmV0dXJuIHE7XG5cbiAgICAvLyBUd28gaW50ZXJzZWN0aW9uIHBvaW50cy5cbiAgICB2YXIgbGFtYmRhMCA9IGFbMF0sXG4gICAgICAgIGxhbWJkYTEgPSBiWzBdLFxuICAgICAgICBwaGkwID0gYVsxXSxcbiAgICAgICAgcGhpMSA9IGJbMV0sXG4gICAgICAgIHo7XG5cbiAgICBpZiAobGFtYmRhMSA8IGxhbWJkYTApIHogPSBsYW1iZGEwLCBsYW1iZGEwID0gbGFtYmRhMSwgbGFtYmRhMSA9IHo7XG5cbiAgICB2YXIgZGVsdGEgPSBsYW1iZGExIC0gbGFtYmRhMCxcbiAgICAgICAgcG9sYXIgPSBhYnMoZGVsdGEgLSBwaSQzKSA8IGVwc2lsb24kMixcbiAgICAgICAgbWVyaWRpYW4gPSBwb2xhciB8fCBkZWx0YSA8IGVwc2lsb24kMjtcblxuICAgIGlmICghcG9sYXIgJiYgcGhpMSA8IHBoaTApIHogPSBwaGkwLCBwaGkwID0gcGhpMSwgcGhpMSA9IHo7XG5cbiAgICAvLyBDaGVjayB0aGF0IHRoZSBmaXJzdCBwb2ludCBpcyBiZXR3ZWVuIGEgYW5kIGIuXG4gICAgaWYgKG1lcmlkaWFuXG4gICAgICAgID8gcG9sYXJcbiAgICAgICAgICA/IHBoaTAgKyBwaGkxID4gMCBeIHFbMV0gPCAoYWJzKHFbMF0gLSBsYW1iZGEwKSA8IGVwc2lsb24kMiA/IHBoaTAgOiBwaGkxKVxuICAgICAgICAgIDogcGhpMCA8PSBxWzFdICYmIHFbMV0gPD0gcGhpMVxuICAgICAgICA6IGRlbHRhID4gcGkkMyBeIChsYW1iZGEwIDw9IHFbMF0gJiYgcVswXSA8PSBsYW1iZGExKSkge1xuICAgICAgdmFyIHExID0gY2FydGVzaWFuU2NhbGUodSwgKC13ICsgdCkgLyB1dSk7XG4gICAgICBjYXJ0ZXNpYW5BZGRJblBsYWNlKHExLCBBKTtcbiAgICAgIHJldHVybiBbcSwgc3BoZXJpY2FsKHExKV07XG4gICAgfVxuICB9XG5cbiAgLy8gR2VuZXJhdGVzIGEgNC1iaXQgdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgbG9jYXRpb24gb2YgYSBwb2ludCByZWxhdGl2ZSB0b1xuICAvLyB0aGUgc21hbGwgY2lyY2xlJ3MgYm91bmRpbmcgYm94LlxuICBmdW5jdGlvbiBjb2RlKGxhbWJkYSwgcGhpKSB7XG4gICAgdmFyIHIgPSBzbWFsbFJhZGl1cyA/IHJhZGl1cyA6IHBpJDMgLSByYWRpdXMsXG4gICAgICAgIGNvZGUgPSAwO1xuICAgIGlmIChsYW1iZGEgPCAtcikgY29kZSB8PSAxOyAvLyBsZWZ0XG4gICAgZWxzZSBpZiAobGFtYmRhID4gcikgY29kZSB8PSAyOyAvLyByaWdodFxuICAgIGlmIChwaGkgPCAtcikgY29kZSB8PSA0OyAvLyBiZWxvd1xuICAgIGVsc2UgaWYgKHBoaSA+IHIpIGNvZGUgfD0gODsgLy8gYWJvdmVcbiAgICByZXR1cm4gY29kZTtcbiAgfVxuXG4gIHJldHVybiBjbGlwKHZpc2libGUsIGNsaXBMaW5lLCBpbnRlcnBvbGF0ZSwgc21hbGxSYWRpdXMgPyBbMCwgLXJhZGl1c10gOiBbLXBpJDMsIHJhZGl1cyAtIHBpJDNdKTtcbn1cblxuZnVuY3Rpb24gY2xpcExpbmUoYSwgYiwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgdmFyIGF4ID0gYVswXSxcbiAgICAgIGF5ID0gYVsxXSxcbiAgICAgIGJ4ID0gYlswXSxcbiAgICAgIGJ5ID0gYlsxXSxcbiAgICAgIHQwID0gMCxcbiAgICAgIHQxID0gMSxcbiAgICAgIGR4ID0gYnggLSBheCxcbiAgICAgIGR5ID0gYnkgLSBheSxcbiAgICAgIHI7XG5cbiAgciA9IHgwIC0gYXg7XG4gIGlmICghZHggJiYgciA+IDApIHJldHVybjtcbiAgciAvPSBkeDtcbiAgaWYgKGR4IDwgMCkge1xuICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gIH0gZWxzZSBpZiAoZHggPiAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfVxuXG4gIHIgPSB4MSAtIGF4O1xuICBpZiAoIWR4ICYmIHIgPCAwKSByZXR1cm47XG4gIHIgLz0gZHg7XG4gIGlmIChkeCA8IDApIHtcbiAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICB9IGVsc2UgaWYgKGR4ID4gMCkge1xuICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gIH1cblxuICByID0geTAgLSBheTtcbiAgaWYgKCFkeSAmJiByID4gMCkgcmV0dXJuO1xuICByIC89IGR5O1xuICBpZiAoZHkgPCAwKSB7XG4gICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICB9XG5cbiAgciA9IHkxIC0gYXk7XG4gIGlmICghZHkgJiYgciA8IDApIHJldHVybjtcbiAgciAvPSBkeTtcbiAgaWYgKGR5IDwgMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH0gZWxzZSBpZiAoZHkgPiAwKSB7XG4gICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgfVxuXG4gIGlmICh0MCA+IDApIGFbMF0gPSBheCArIHQwICogZHgsIGFbMV0gPSBheSArIHQwICogZHk7XG4gIGlmICh0MSA8IDEpIGJbMF0gPSBheCArIHQxICogZHgsIGJbMV0gPSBheSArIHQxICogZHk7XG4gIHJldHVybiB0cnVlO1xufVxuXG52YXIgY2xpcE1heCA9IDFlOSwgY2xpcE1pbiA9IC1jbGlwTWF4O1xuXG4vLyBUT0RPIFVzZSBkMy1wb2x5Z29u4oCZcyBwb2x5Z29uQ29udGFpbnMgaGVyZSBmb3IgdGhlIHJpbmcgY2hlY2s/XG4vLyBUT0RPIEVsaW1pbmF0ZSBkdXBsaWNhdGUgYnVmZmVyaW5nIGluIGNsaXBCdWZmZXIgYW5kIHBvbHlnb24ucHVzaD9cblxuZnVuY3Rpb24gY2xpcFJlY3RhbmdsZSh4MCwgeTAsIHgxLCB5MSkge1xuXG4gIGZ1bmN0aW9uIHZpc2libGUoeCwgeSkge1xuICAgIHJldHVybiB4MCA8PSB4ICYmIHggPD0geDEgJiYgeTAgPD0geSAmJiB5IDw9IHkxO1xuICB9XG5cbiAgZnVuY3Rpb24gaW50ZXJwb2xhdGUoZnJvbSwgdG8sIGRpcmVjdGlvbiwgc3RyZWFtKSB7XG4gICAgdmFyIGEgPSAwLCBhMSA9IDA7XG4gICAgaWYgKGZyb20gPT0gbnVsbFxuICAgICAgICB8fCAoYSA9IGNvcm5lcihmcm9tLCBkaXJlY3Rpb24pKSAhPT0gKGExID0gY29ybmVyKHRvLCBkaXJlY3Rpb24pKVxuICAgICAgICB8fCBjb21wYXJlUG9pbnQoZnJvbSwgdG8pIDwgMCBeIGRpcmVjdGlvbiA+IDApIHtcbiAgICAgIGRvIHN0cmVhbS5wb2ludChhID09PSAwIHx8IGEgPT09IDMgPyB4MCA6IHgxLCBhID4gMSA/IHkxIDogeTApO1xuICAgICAgd2hpbGUgKChhID0gKGEgKyBkaXJlY3Rpb24gKyA0KSAlIDQpICE9PSBhMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0cmVhbS5wb2ludCh0b1swXSwgdG9bMV0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvcm5lcihwLCBkaXJlY3Rpb24pIHtcbiAgICByZXR1cm4gYWJzKHBbMF0gLSB4MCkgPCBlcHNpbG9uJDIgPyBkaXJlY3Rpb24gPiAwID8gMCA6IDNcbiAgICAgICAgOiBhYnMocFswXSAtIHgxKSA8IGVwc2lsb24kMiA/IGRpcmVjdGlvbiA+IDAgPyAyIDogMVxuICAgICAgICA6IGFicyhwWzFdIC0geTApIDwgZXBzaWxvbiQyID8gZGlyZWN0aW9uID4gMCA/IDEgOiAwXG4gICAgICAgIDogZGlyZWN0aW9uID4gMCA/IDMgOiAyOyAvLyBhYnMocFsxXSAtIHkxKSA8IGVwc2lsb25cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXBhcmVJbnRlcnNlY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBjb21wYXJlUG9pbnQoYS54LCBiLngpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29tcGFyZVBvaW50KGEsIGIpIHtcbiAgICB2YXIgY2EgPSBjb3JuZXIoYSwgMSksXG4gICAgICAgIGNiID0gY29ybmVyKGIsIDEpO1xuICAgIHJldHVybiBjYSAhPT0gY2IgPyBjYSAtIGNiXG4gICAgICAgIDogY2EgPT09IDAgPyBiWzFdIC0gYVsxXVxuICAgICAgICA6IGNhID09PSAxID8gYVswXSAtIGJbMF1cbiAgICAgICAgOiBjYSA9PT0gMiA/IGFbMV0gLSBiWzFdXG4gICAgICAgIDogYlswXSAtIGFbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgdmFyIGFjdGl2ZVN0cmVhbSA9IHN0cmVhbSxcbiAgICAgICAgYnVmZmVyU3RyZWFtID0gY2xpcEJ1ZmZlcigpLFxuICAgICAgICBzZWdtZW50cyxcbiAgICAgICAgcG9seWdvbixcbiAgICAgICAgcmluZyxcbiAgICAgICAgeF9fLCB5X18sIHZfXywgLy8gZmlyc3QgcG9pbnRcbiAgICAgICAgeF8sIHlfLCB2XywgLy8gcHJldmlvdXMgcG9pbnRcbiAgICAgICAgZmlyc3QsXG4gICAgICAgIGNsZWFuO1xuXG4gICAgdmFyIGNsaXBTdHJlYW0gPSB7XG4gICAgICBwb2ludDogcG9pbnQsXG4gICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICBwb2x5Z29uU3RhcnQ6IHBvbHlnb25TdGFydCxcbiAgICAgIHBvbHlnb25FbmQ6IHBvbHlnb25FbmRcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgICAgaWYgKHZpc2libGUoeCwgeSkpIGFjdGl2ZVN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb2x5Z29uSW5zaWRlKCkge1xuICAgICAgdmFyIHdpbmRpbmcgPSAwO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IHBvbHlnb24ubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGZvciAodmFyIHJpbmcgPSBwb2x5Z29uW2ldLCBqID0gMSwgbSA9IHJpbmcubGVuZ3RoLCBwb2ludCA9IHJpbmdbMF0sIGEwLCBhMSwgYjAgPSBwb2ludFswXSwgYjEgPSBwb2ludFsxXTsgaiA8IG07ICsraikge1xuICAgICAgICAgIGEwID0gYjAsIGExID0gYjEsIHBvaW50ID0gcmluZ1tqXSwgYjAgPSBwb2ludFswXSwgYjEgPSBwb2ludFsxXTtcbiAgICAgICAgICBpZiAoYTEgPD0geTEpIHsgaWYgKGIxID4geTEgJiYgKGIwIC0gYTApICogKHkxIC0gYTEpID4gKGIxIC0gYTEpICogKHgwIC0gYTApKSArK3dpbmRpbmc7IH1cbiAgICAgICAgICBlbHNlIHsgaWYgKGIxIDw9IHkxICYmIChiMCAtIGEwKSAqICh5MSAtIGExKSA8IChiMSAtIGExKSAqICh4MCAtIGEwKSkgLS13aW5kaW5nOyB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHdpbmRpbmc7XG4gICAgfVxuXG4gICAgLy8gQnVmZmVyIGdlb21ldHJ5IHdpdGhpbiBhIHBvbHlnb24gYW5kIHRoZW4gY2xpcCBpdCBlbiBtYXNzZS5cbiAgICBmdW5jdGlvbiBwb2x5Z29uU3RhcnQoKSB7XG4gICAgICBhY3RpdmVTdHJlYW0gPSBidWZmZXJTdHJlYW0sIHNlZ21lbnRzID0gW10sIHBvbHlnb24gPSBbXSwgY2xlYW4gPSB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvbHlnb25FbmQoKSB7XG4gICAgICB2YXIgc3RhcnRJbnNpZGUgPSBwb2x5Z29uSW5zaWRlKCksXG4gICAgICAgICAgY2xlYW5JbnNpZGUgPSBjbGVhbiAmJiBzdGFydEluc2lkZSxcbiAgICAgICAgICB2aXNpYmxlID0gKHNlZ21lbnRzID0gbWVyZ2Uoc2VnbWVudHMpKS5sZW5ndGg7XG4gICAgICBpZiAoY2xlYW5JbnNpZGUgfHwgdmlzaWJsZSkge1xuICAgICAgICBzdHJlYW0ucG9seWdvblN0YXJ0KCk7XG4gICAgICAgIGlmIChjbGVhbkluc2lkZSkge1xuICAgICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICBpbnRlcnBvbGF0ZShudWxsLCBudWxsLCAxLCBzdHJlYW0pO1xuICAgICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZpc2libGUpIHtcbiAgICAgICAgICBjbGlwUmVqb2luKHNlZ21lbnRzLCBjb21wYXJlSW50ZXJzZWN0aW9uLCBzdGFydEluc2lkZSwgaW50ZXJwb2xhdGUsIHN0cmVhbSk7XG4gICAgICAgIH1cbiAgICAgICAgc3RyZWFtLnBvbHlnb25FbmQoKTtcbiAgICAgIH1cbiAgICAgIGFjdGl2ZVN0cmVhbSA9IHN0cmVhbSwgc2VnbWVudHMgPSBwb2x5Z29uID0gcmluZyA9IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xuICAgICAgY2xpcFN0cmVhbS5wb2ludCA9IGxpbmVQb2ludDtcbiAgICAgIGlmIChwb2x5Z29uKSBwb2x5Z29uLnB1c2gocmluZyA9IFtdKTtcbiAgICAgIGZpcnN0ID0gdHJ1ZTtcbiAgICAgIHZfID0gZmFsc2U7XG4gICAgICB4XyA9IHlfID0gTmFOO1xuICAgIH1cblxuICAgIC8vIFRPRE8gcmF0aGVyIHRoYW4gc3BlY2lhbC1jYXNlIHBvbHlnb25zLCBzaW1wbHkgaGFuZGxlIHRoZW0gc2VwYXJhdGVseS5cbiAgICAvLyBJZGVhbGx5LCBjb2luY2lkZW50IGludGVyc2VjdGlvbiBwb2ludHMgc2hvdWxkIGJlIGppdHRlcmVkIHRvIGF2b2lkXG4gICAgLy8gY2xpcHBpbmcgaXNzdWVzLlxuICAgIGZ1bmN0aW9uIGxpbmVFbmQoKSB7XG4gICAgICBpZiAoc2VnbWVudHMpIHtcbiAgICAgICAgbGluZVBvaW50KHhfXywgeV9fKTtcbiAgICAgICAgaWYgKHZfXyAmJiB2XykgYnVmZmVyU3RyZWFtLnJlam9pbigpO1xuICAgICAgICBzZWdtZW50cy5wdXNoKGJ1ZmZlclN0cmVhbS5yZXN1bHQoKSk7XG4gICAgICB9XG4gICAgICBjbGlwU3RyZWFtLnBvaW50ID0gcG9pbnQ7XG4gICAgICBpZiAodl8pIGFjdGl2ZVN0cmVhbS5saW5lRW5kKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZVBvaW50KHgsIHkpIHtcbiAgICAgIHZhciB2ID0gdmlzaWJsZSh4LCB5KTtcbiAgICAgIGlmIChwb2x5Z29uKSByaW5nLnB1c2goW3gsIHldKTtcbiAgICAgIGlmIChmaXJzdCkge1xuICAgICAgICB4X18gPSB4LCB5X18gPSB5LCB2X18gPSB2O1xuICAgICAgICBmaXJzdCA9IGZhbHNlO1xuICAgICAgICBpZiAodikge1xuICAgICAgICAgIGFjdGl2ZVN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICBhY3RpdmVTdHJlYW0ucG9pbnQoeCwgeSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh2ICYmIHZfKSBhY3RpdmVTdHJlYW0ucG9pbnQoeCwgeSk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBhID0gW3hfID0gTWF0aC5tYXgoY2xpcE1pbiwgTWF0aC5taW4oY2xpcE1heCwgeF8pKSwgeV8gPSBNYXRoLm1heChjbGlwTWluLCBNYXRoLm1pbihjbGlwTWF4LCB5XykpXSxcbiAgICAgICAgICAgICAgYiA9IFt4ID0gTWF0aC5tYXgoY2xpcE1pbiwgTWF0aC5taW4oY2xpcE1heCwgeCkpLCB5ID0gTWF0aC5tYXgoY2xpcE1pbiwgTWF0aC5taW4oY2xpcE1heCwgeSkpXTtcbiAgICAgICAgICBpZiAoY2xpcExpbmUoYSwgYiwgeDAsIHkwLCB4MSwgeTEpKSB7XG4gICAgICAgICAgICBpZiAoIXZfKSB7XG4gICAgICAgICAgICAgIGFjdGl2ZVN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgICAgYWN0aXZlU3RyZWFtLnBvaW50KGFbMF0sIGFbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWN0aXZlU3RyZWFtLnBvaW50KGJbMF0sIGJbMV0pO1xuICAgICAgICAgICAgaWYgKCF2KSBhY3RpdmVTdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICAgICAgY2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHYpIHtcbiAgICAgICAgICAgIGFjdGl2ZVN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgIGFjdGl2ZVN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICAgICAgICAgIGNsZWFuID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB4XyA9IHgsIHlfID0geSwgdl8gPSB2O1xuICAgIH1cblxuICAgIHJldHVybiBjbGlwU3RyZWFtO1xuICB9O1xufVxuXG5mdW5jdGlvbiBleHRlbnQkMSgpIHtcbiAgdmFyIHgwID0gMCxcbiAgICAgIHkwID0gMCxcbiAgICAgIHgxID0gOTYwLFxuICAgICAgeTEgPSA1MDAsXG4gICAgICBjYWNoZSxcbiAgICAgIGNhY2hlU3RyZWFtLFxuICAgICAgY2xpcDtcblxuICByZXR1cm4gY2xpcCA9IHtcbiAgICBzdHJlYW06IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgICAgcmV0dXJuIGNhY2hlICYmIGNhY2hlU3RyZWFtID09PSBzdHJlYW0gPyBjYWNoZSA6IGNhY2hlID0gY2xpcFJlY3RhbmdsZSh4MCwgeTAsIHgxLCB5MSkoY2FjaGVTdHJlYW0gPSBzdHJlYW0pO1xuICAgIH0sXG4gICAgZXh0ZW50OiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9ICtfWzBdWzBdLCB5MCA9ICtfWzBdWzFdLCB4MSA9ICtfWzFdWzBdLCB5MSA9ICtfWzFdWzFdLCBjYWNoZSA9IGNhY2hlU3RyZWFtID0gbnVsbCwgY2xpcCkgOiBbW3gwLCB5MF0sIFt4MSwgeTFdXTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBsZW5ndGhTdW0gPSBhZGRlcigpLFxuICAgIGxhbWJkYTAkMixcbiAgICBzaW5QaGkwJDEsXG4gICAgY29zUGhpMCQxO1xuXG52YXIgbGVuZ3RoU3RyZWFtID0ge1xuICBzcGhlcmU6IG5vb3AkMixcbiAgcG9pbnQ6IG5vb3AkMixcbiAgbGluZVN0YXJ0OiBsZW5ndGhMaW5lU3RhcnQsXG4gIGxpbmVFbmQ6IG5vb3AkMixcbiAgcG9seWdvblN0YXJ0OiBub29wJDIsXG4gIHBvbHlnb25FbmQ6IG5vb3AkMlxufTtcblxuZnVuY3Rpb24gbGVuZ3RoTGluZVN0YXJ0KCkge1xuICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBsZW5ndGhQb2ludEZpcnN0O1xuICBsZW5ndGhTdHJlYW0ubGluZUVuZCA9IGxlbmd0aExpbmVFbmQ7XG59XG5cbmZ1bmN0aW9uIGxlbmd0aExpbmVFbmQoKSB7XG4gIGxlbmd0aFN0cmVhbS5wb2ludCA9IGxlbmd0aFN0cmVhbS5saW5lRW5kID0gbm9vcCQyO1xufVxuXG5mdW5jdGlvbiBsZW5ndGhQb2ludEZpcnN0KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgbGFtYmRhMCQyID0gbGFtYmRhLCBzaW5QaGkwJDEgPSBzaW4kMShwaGkpLCBjb3NQaGkwJDEgPSBjb3MkMShwaGkpO1xuICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBsZW5ndGhQb2ludDtcbn1cblxuZnVuY3Rpb24gbGVuZ3RoUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICB2YXIgc2luUGhpID0gc2luJDEocGhpKSxcbiAgICAgIGNvc1BoaSA9IGNvcyQxKHBoaSksXG4gICAgICBkZWx0YSA9IGFicyhsYW1iZGEgLSBsYW1iZGEwJDIpLFxuICAgICAgY29zRGVsdGEgPSBjb3MkMShkZWx0YSksXG4gICAgICBzaW5EZWx0YSA9IHNpbiQxKGRlbHRhKSxcbiAgICAgIHggPSBjb3NQaGkgKiBzaW5EZWx0YSxcbiAgICAgIHkgPSBjb3NQaGkwJDEgKiBzaW5QaGkgLSBzaW5QaGkwJDEgKiBjb3NQaGkgKiBjb3NEZWx0YSxcbiAgICAgIHogPSBzaW5QaGkwJDEgKiBzaW5QaGkgKyBjb3NQaGkwJDEgKiBjb3NQaGkgKiBjb3NEZWx0YTtcbiAgbGVuZ3RoU3VtLmFkZChhdGFuMihzcXJ0KHggKiB4ICsgeSAqIHkpLCB6KSk7XG4gIGxhbWJkYTAkMiA9IGxhbWJkYSwgc2luUGhpMCQxID0gc2luUGhpLCBjb3NQaGkwJDEgPSBjb3NQaGk7XG59XG5cbmZ1bmN0aW9uIGxlbmd0aCQxKG9iamVjdCkge1xuICBsZW5ndGhTdW0ucmVzZXQoKTtcbiAgZ2VvU3RyZWFtKG9iamVjdCwgbGVuZ3RoU3RyZWFtKTtcbiAgcmV0dXJuICtsZW5ndGhTdW07XG59XG5cbnZhciBjb29yZGluYXRlcyA9IFtudWxsLCBudWxsXSxcbiAgICBvYmplY3QkMSA9IHt0eXBlOiBcIkxpbmVTdHJpbmdcIiwgY29vcmRpbmF0ZXM6IGNvb3JkaW5hdGVzfTtcblxuZnVuY3Rpb24gZGlzdGFuY2UoYSwgYikge1xuICBjb29yZGluYXRlc1swXSA9IGE7XG4gIGNvb3JkaW5hdGVzWzFdID0gYjtcbiAgcmV0dXJuIGxlbmd0aCQxKG9iamVjdCQxKTtcbn1cblxudmFyIGNvbnRhaW5zT2JqZWN0VHlwZSA9IHtcbiAgRmVhdHVyZTogZnVuY3Rpb24ob2JqZWN0LCBwb2ludCkge1xuICAgIHJldHVybiBjb250YWluc0dlb21ldHJ5KG9iamVjdC5nZW9tZXRyeSwgcG9pbnQpO1xuICB9LFxuICBGZWF0dXJlQ29sbGVjdGlvbjogZnVuY3Rpb24ob2JqZWN0LCBwb2ludCkge1xuICAgIHZhciBmZWF0dXJlcyA9IG9iamVjdC5mZWF0dXJlcywgaSA9IC0xLCBuID0gZmVhdHVyZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoY29udGFpbnNHZW9tZXRyeShmZWF0dXJlc1tpXS5nZW9tZXRyeSwgcG9pbnQpKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbnZhciBjb250YWluc0dlb21ldHJ5VHlwZSA9IHtcbiAgU3BoZXJlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgUG9pbnQ6IGZ1bmN0aW9uKG9iamVjdCwgcG9pbnQpIHtcbiAgICByZXR1cm4gY29udGFpbnNQb2ludChvYmplY3QuY29vcmRpbmF0ZXMsIHBvaW50KTtcbiAgfSxcbiAgTXVsdGlQb2ludDogZnVuY3Rpb24ob2JqZWN0LCBwb2ludCkge1xuICAgIHZhciBjb29yZGluYXRlcyA9IG9iamVjdC5jb29yZGluYXRlcywgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoY29udGFpbnNQb2ludChjb29yZGluYXRlc1tpXSwgcG9pbnQpKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIExpbmVTdHJpbmc6IGZ1bmN0aW9uKG9iamVjdCwgcG9pbnQpIHtcbiAgICByZXR1cm4gY29udGFpbnNMaW5lKG9iamVjdC5jb29yZGluYXRlcywgcG9pbnQpO1xuICB9LFxuICBNdWx0aUxpbmVTdHJpbmc6IGZ1bmN0aW9uKG9iamVjdCwgcG9pbnQpIHtcbiAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKGNvbnRhaW5zTGluZShjb29yZGluYXRlc1tpXSwgcG9pbnQpKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIFBvbHlnb246IGZ1bmN0aW9uKG9iamVjdCwgcG9pbnQpIHtcbiAgICByZXR1cm4gY29udGFpbnNQb2x5Z29uKG9iamVjdC5jb29yZGluYXRlcywgcG9pbnQpO1xuICB9LFxuICBNdWx0aVBvbHlnb246IGZ1bmN0aW9uKG9iamVjdCwgcG9pbnQpIHtcbiAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKGNvbnRhaW5zUG9seWdvbihjb29yZGluYXRlc1tpXSwgcG9pbnQpKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIEdlb21ldHJ5Q29sbGVjdGlvbjogZnVuY3Rpb24ob2JqZWN0LCBwb2ludCkge1xuICAgIHZhciBnZW9tZXRyaWVzID0gb2JqZWN0Lmdlb21ldHJpZXMsIGkgPSAtMSwgbiA9IGdlb21ldHJpZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoY29udGFpbnNHZW9tZXRyeShnZW9tZXRyaWVzW2ldLCBwb2ludCkpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gY29udGFpbnNHZW9tZXRyeShnZW9tZXRyeSwgcG9pbnQpIHtcbiAgcmV0dXJuIGdlb21ldHJ5ICYmIGNvbnRhaW5zR2VvbWV0cnlUeXBlLmhhc093blByb3BlcnR5KGdlb21ldHJ5LnR5cGUpXG4gICAgICA/IGNvbnRhaW5zR2VvbWV0cnlUeXBlW2dlb21ldHJ5LnR5cGVdKGdlb21ldHJ5LCBwb2ludClcbiAgICAgIDogZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zUG9pbnQoY29vcmRpbmF0ZXMsIHBvaW50KSB7XG4gIHJldHVybiBkaXN0YW5jZShjb29yZGluYXRlcywgcG9pbnQpID09PSAwO1xufVxuXG5mdW5jdGlvbiBjb250YWluc0xpbmUoY29vcmRpbmF0ZXMsIHBvaW50KSB7XG4gIHZhciBhYiA9IGRpc3RhbmNlKGNvb3JkaW5hdGVzWzBdLCBjb29yZGluYXRlc1sxXSksXG4gICAgICBhbyA9IGRpc3RhbmNlKGNvb3JkaW5hdGVzWzBdLCBwb2ludCksXG4gICAgICBvYiA9IGRpc3RhbmNlKHBvaW50LCBjb29yZGluYXRlc1sxXSk7XG4gIHJldHVybiBhbyArIG9iIDw9IGFiICsgZXBzaWxvbiQyO1xufVxuXG5mdW5jdGlvbiBjb250YWluc1BvbHlnb24oY29vcmRpbmF0ZXMsIHBvaW50KSB7XG4gIHJldHVybiAhIXBvbHlnb25Db250YWlucyhjb29yZGluYXRlcy5tYXAocmluZ1JhZGlhbnMpLCBwb2ludFJhZGlhbnMocG9pbnQpKTtcbn1cblxuZnVuY3Rpb24gcmluZ1JhZGlhbnMocmluZykge1xuICByZXR1cm4gcmluZyA9IHJpbmcubWFwKHBvaW50UmFkaWFucyksIHJpbmcucG9wKCksIHJpbmc7XG59XG5cbmZ1bmN0aW9uIHBvaW50UmFkaWFucyhwb2ludCkge1xuICByZXR1cm4gW3BvaW50WzBdICogcmFkaWFucywgcG9pbnRbMV0gKiByYWRpYW5zXTtcbn1cblxuZnVuY3Rpb24gY29udGFpbnMkMShvYmplY3QsIHBvaW50KSB7XG4gIHJldHVybiAob2JqZWN0ICYmIGNvbnRhaW5zT2JqZWN0VHlwZS5oYXNPd25Qcm9wZXJ0eShvYmplY3QudHlwZSlcbiAgICAgID8gY29udGFpbnNPYmplY3RUeXBlW29iamVjdC50eXBlXVxuICAgICAgOiBjb250YWluc0dlb21ldHJ5KShvYmplY3QsIHBvaW50KTtcbn1cblxuZnVuY3Rpb24gZ3JhdGljdWxlWCh5MCwgeTEsIGR5KSB7XG4gIHZhciB5ID0gc2VxdWVuY2UoeTAsIHkxIC0gZXBzaWxvbiQyLCBkeSkuY29uY2F0KHkxKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHkubWFwKGZ1bmN0aW9uKHkpIHsgcmV0dXJuIFt4LCB5XTsgfSk7IH07XG59XG5cbmZ1bmN0aW9uIGdyYXRpY3VsZVkoeDAsIHgxLCBkeCkge1xuICB2YXIgeCA9IHNlcXVlbmNlKHgwLCB4MSAtIGVwc2lsb24kMiwgZHgpLmNvbmNhdCh4MSk7XG4gIHJldHVybiBmdW5jdGlvbih5KSB7IHJldHVybiB4Lm1hcChmdW5jdGlvbih4KSB7IHJldHVybiBbeCwgeV07IH0pOyB9O1xufVxuXG5mdW5jdGlvbiBncmF0aWN1bGUoKSB7XG4gIHZhciB4MSwgeDAsIFgxLCBYMCxcbiAgICAgIHkxLCB5MCwgWTEsIFkwLFxuICAgICAgZHggPSAxMCwgZHkgPSBkeCwgRFggPSA5MCwgRFkgPSAzNjAsXG4gICAgICB4LCB5LCBYLCBZLFxuICAgICAgcHJlY2lzaW9uID0gMi41O1xuXG4gIGZ1bmN0aW9uIGdyYXRpY3VsZSgpIHtcbiAgICByZXR1cm4ge3R5cGU6IFwiTXVsdGlMaW5lU3RyaW5nXCIsIGNvb3JkaW5hdGVzOiBsaW5lcygpfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpbmVzKCkge1xuICAgIHJldHVybiBzZXF1ZW5jZShjZWlsKFgwIC8gRFgpICogRFgsIFgxLCBEWCkubWFwKFgpXG4gICAgICAgIC5jb25jYXQoc2VxdWVuY2UoY2VpbChZMCAvIERZKSAqIERZLCBZMSwgRFkpLm1hcChZKSlcbiAgICAgICAgLmNvbmNhdChzZXF1ZW5jZShjZWlsKHgwIC8gZHgpICogZHgsIHgxLCBkeCkuZmlsdGVyKGZ1bmN0aW9uKHgpIHsgcmV0dXJuIGFicyh4ICUgRFgpID4gZXBzaWxvbiQyOyB9KS5tYXAoeCkpXG4gICAgICAgIC5jb25jYXQoc2VxdWVuY2UoY2VpbCh5MCAvIGR5KSAqIGR5LCB5MSwgZHkpLmZpbHRlcihmdW5jdGlvbih5KSB7IHJldHVybiBhYnMoeSAlIERZKSA+IGVwc2lsb24kMjsgfSkubWFwKHkpKTtcbiAgfVxuXG4gIGdyYXRpY3VsZS5saW5lcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBsaW5lcygpLm1hcChmdW5jdGlvbihjb29yZGluYXRlcykgeyByZXR1cm4ge3R5cGU6IFwiTGluZVN0cmluZ1wiLCBjb29yZGluYXRlczogY29vcmRpbmF0ZXN9OyB9KTtcbiAgfTtcblxuICBncmF0aWN1bGUub3V0bGluZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIlBvbHlnb25cIixcbiAgICAgIGNvb3JkaW5hdGVzOiBbXG4gICAgICAgIFgoWDApLmNvbmNhdChcbiAgICAgICAgWShZMSkuc2xpY2UoMSksXG4gICAgICAgIFgoWDEpLnJldmVyc2UoKS5zbGljZSgxKSxcbiAgICAgICAgWShZMCkucmV2ZXJzZSgpLnNsaWNlKDEpKVxuICAgICAgXVxuICAgIH07XG4gIH07XG5cbiAgZ3JhdGljdWxlLmV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBncmF0aWN1bGUuZXh0ZW50TWlub3IoKTtcbiAgICByZXR1cm4gZ3JhdGljdWxlLmV4dGVudE1ham9yKF8pLmV4dGVudE1pbm9yKF8pO1xuICB9O1xuXG4gIGdyYXRpY3VsZS5leHRlbnRNYWpvciA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbW1gwLCBZMF0sIFtYMSwgWTFdXTtcbiAgICBYMCA9ICtfWzBdWzBdLCBYMSA9ICtfWzFdWzBdO1xuICAgIFkwID0gK19bMF1bMV0sIFkxID0gK19bMV1bMV07XG4gICAgaWYgKFgwID4gWDEpIF8gPSBYMCwgWDAgPSBYMSwgWDEgPSBfO1xuICAgIGlmIChZMCA+IFkxKSBfID0gWTAsIFkwID0gWTEsIFkxID0gXztcbiAgICByZXR1cm4gZ3JhdGljdWxlLnByZWNpc2lvbihwcmVjaXNpb24pO1xuICB9O1xuXG4gIGdyYXRpY3VsZS5leHRlbnRNaW5vciA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbW3gwLCB5MF0sIFt4MSwgeTFdXTtcbiAgICB4MCA9ICtfWzBdWzBdLCB4MSA9ICtfWzFdWzBdO1xuICAgIHkwID0gK19bMF1bMV0sIHkxID0gK19bMV1bMV07XG4gICAgaWYgKHgwID4geDEpIF8gPSB4MCwgeDAgPSB4MSwgeDEgPSBfO1xuICAgIGlmICh5MCA+IHkxKSBfID0geTAsIHkwID0geTEsIHkxID0gXztcbiAgICByZXR1cm4gZ3JhdGljdWxlLnByZWNpc2lvbihwcmVjaXNpb24pO1xuICB9O1xuXG4gIGdyYXRpY3VsZS5zdGVwID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGdyYXRpY3VsZS5zdGVwTWlub3IoKTtcbiAgICByZXR1cm4gZ3JhdGljdWxlLnN0ZXBNYWpvcihfKS5zdGVwTWlub3IoXyk7XG4gIH07XG5cbiAgZ3JhdGljdWxlLnN0ZXBNYWpvciA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbRFgsIERZXTtcbiAgICBEWCA9ICtfWzBdLCBEWSA9ICtfWzFdO1xuICAgIHJldHVybiBncmF0aWN1bGU7XG4gIH07XG5cbiAgZ3JhdGljdWxlLnN0ZXBNaW5vciA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbZHgsIGR5XTtcbiAgICBkeCA9ICtfWzBdLCBkeSA9ICtfWzFdO1xuICAgIHJldHVybiBncmF0aWN1bGU7XG4gIH07XG5cbiAgZ3JhdGljdWxlLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwcmVjaXNpb247XG4gICAgcHJlY2lzaW9uID0gK187XG4gICAgeCA9IGdyYXRpY3VsZVgoeTAsIHkxLCA5MCk7XG4gICAgeSA9IGdyYXRpY3VsZVkoeDAsIHgxLCBwcmVjaXNpb24pO1xuICAgIFggPSBncmF0aWN1bGVYKFkwLCBZMSwgOTApO1xuICAgIFkgPSBncmF0aWN1bGVZKFgwLCBYMSwgcHJlY2lzaW9uKTtcbiAgICByZXR1cm4gZ3JhdGljdWxlO1xuICB9O1xuXG4gIHJldHVybiBncmF0aWN1bGVcbiAgICAgIC5leHRlbnRNYWpvcihbWy0xODAsIC05MCArIGVwc2lsb24kMl0sIFsxODAsIDkwIC0gZXBzaWxvbiQyXV0pXG4gICAgICAuZXh0ZW50TWlub3IoW1stMTgwLCAtODAgLSBlcHNpbG9uJDJdLCBbMTgwLCA4MCArIGVwc2lsb24kMl1dKTtcbn1cblxuZnVuY3Rpb24gZ3JhdGljdWxlMTAoKSB7XG4gIHJldHVybiBncmF0aWN1bGUoKSgpO1xufVxuXG5mdW5jdGlvbiBpbnRlcnBvbGF0ZSQxKGEsIGIpIHtcbiAgdmFyIHgwID0gYVswXSAqIHJhZGlhbnMsXG4gICAgICB5MCA9IGFbMV0gKiByYWRpYW5zLFxuICAgICAgeDEgPSBiWzBdICogcmFkaWFucyxcbiAgICAgIHkxID0gYlsxXSAqIHJhZGlhbnMsXG4gICAgICBjeTAgPSBjb3MkMSh5MCksXG4gICAgICBzeTAgPSBzaW4kMSh5MCksXG4gICAgICBjeTEgPSBjb3MkMSh5MSksXG4gICAgICBzeTEgPSBzaW4kMSh5MSksXG4gICAgICBreDAgPSBjeTAgKiBjb3MkMSh4MCksXG4gICAgICBreTAgPSBjeTAgKiBzaW4kMSh4MCksXG4gICAgICBreDEgPSBjeTEgKiBjb3MkMSh4MSksXG4gICAgICBreTEgPSBjeTEgKiBzaW4kMSh4MSksXG4gICAgICBkID0gMiAqIGFzaW4oc3FydChoYXZlcnNpbih5MSAtIHkwKSArIGN5MCAqIGN5MSAqIGhhdmVyc2luKHgxIC0geDApKSksXG4gICAgICBrID0gc2luJDEoZCk7XG5cbiAgdmFyIGludGVycG9sYXRlID0gZCA/IGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgQiA9IHNpbiQxKHQgKj0gZCkgLyBrLFxuICAgICAgICBBID0gc2luJDEoZCAtIHQpIC8gayxcbiAgICAgICAgeCA9IEEgKiBreDAgKyBCICoga3gxLFxuICAgICAgICB5ID0gQSAqIGt5MCArIEIgKiBreTEsXG4gICAgICAgIHogPSBBICogc3kwICsgQiAqIHN5MTtcbiAgICByZXR1cm4gW1xuICAgICAgYXRhbjIoeSwgeCkgKiBkZWdyZWVzJDEsXG4gICAgICBhdGFuMih6LCBzcXJ0KHggKiB4ICsgeSAqIHkpKSAqIGRlZ3JlZXMkMVxuICAgIF07XG4gIH0gOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gW3gwICogZGVncmVlcyQxLCB5MCAqIGRlZ3JlZXMkMV07XG4gIH07XG5cbiAgaW50ZXJwb2xhdGUuZGlzdGFuY2UgPSBkO1xuXG4gIHJldHVybiBpbnRlcnBvbGF0ZTtcbn1cblxuZnVuY3Rpb24gaWRlbnRpdHkkNCh4KSB7XG4gIHJldHVybiB4O1xufVxuXG52YXIgYXJlYVN1bSQxID0gYWRkZXIoKSxcbiAgICBhcmVhUmluZ1N1bSQxID0gYWRkZXIoKSxcbiAgICB4MDAsXG4gICAgeTAwLFxuICAgIHgwJDEsXG4gICAgeTAkMTtcblxudmFyIGFyZWFTdHJlYW0kMSA9IHtcbiAgcG9pbnQ6IG5vb3AkMixcbiAgbGluZVN0YXJ0OiBub29wJDIsXG4gIGxpbmVFbmQ6IG5vb3AkMixcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBhcmVhU3RyZWFtJDEubGluZVN0YXJ0ID0gYXJlYVJpbmdTdGFydCQxO1xuICAgIGFyZWFTdHJlYW0kMS5saW5lRW5kID0gYXJlYVJpbmdFbmQkMTtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgYXJlYVN0cmVhbSQxLmxpbmVTdGFydCA9IGFyZWFTdHJlYW0kMS5saW5lRW5kID0gYXJlYVN0cmVhbSQxLnBvaW50ID0gbm9vcCQyO1xuICAgIGFyZWFTdW0kMS5hZGQoYWJzKGFyZWFSaW5nU3VtJDEpKTtcbiAgICBhcmVhUmluZ1N1bSQxLnJlc2V0KCk7XG4gIH0sXG4gIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZWEgPSBhcmVhU3VtJDEgLyAyO1xuICAgIGFyZWFTdW0kMS5yZXNldCgpO1xuICAgIHJldHVybiBhcmVhO1xuICB9XG59O1xuXG5mdW5jdGlvbiBhcmVhUmluZ1N0YXJ0JDEoKSB7XG4gIGFyZWFTdHJlYW0kMS5wb2ludCA9IGFyZWFQb2ludEZpcnN0JDE7XG59XG5cbmZ1bmN0aW9uIGFyZWFQb2ludEZpcnN0JDEoeCwgeSkge1xuICBhcmVhU3RyZWFtJDEucG9pbnQgPSBhcmVhUG9pbnQkMTtcbiAgeDAwID0geDAkMSA9IHgsIHkwMCA9IHkwJDEgPSB5O1xufVxuXG5mdW5jdGlvbiBhcmVhUG9pbnQkMSh4LCB5KSB7XG4gIGFyZWFSaW5nU3VtJDEuYWRkKHkwJDEgKiB4IC0geDAkMSAqIHkpO1xuICB4MCQxID0geCwgeTAkMSA9IHk7XG59XG5cbmZ1bmN0aW9uIGFyZWFSaW5nRW5kJDEoKSB7XG4gIGFyZWFQb2ludCQxKHgwMCwgeTAwKTtcbn1cblxudmFyIHgwJDIgPSBJbmZpbml0eSxcbiAgICB5MCQyID0geDAkMixcbiAgICB4MSA9IC14MCQyLFxuICAgIHkxID0geDE7XG5cbnZhciBib3VuZHNTdHJlYW0kMSA9IHtcbiAgcG9pbnQ6IGJvdW5kc1BvaW50JDEsXG4gIGxpbmVTdGFydDogbm9vcCQyLFxuICBsaW5lRW5kOiBub29wJDIsXG4gIHBvbHlnb25TdGFydDogbm9vcCQyLFxuICBwb2x5Z29uRW5kOiBub29wJDIsXG4gIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGJvdW5kcyA9IFtbeDAkMiwgeTAkMl0sIFt4MSwgeTFdXTtcbiAgICB4MSA9IHkxID0gLSh5MCQyID0geDAkMiA9IEluZmluaXR5KTtcbiAgICByZXR1cm4gYm91bmRzO1xuICB9XG59O1xuXG5mdW5jdGlvbiBib3VuZHNQb2ludCQxKHgsIHkpIHtcbiAgaWYgKHggPCB4MCQyKSB4MCQyID0geDtcbiAgaWYgKHggPiB4MSkgeDEgPSB4O1xuICBpZiAoeSA8IHkwJDIpIHkwJDIgPSB5O1xuICBpZiAoeSA+IHkxKSB5MSA9IHk7XG59XG5cbi8vIFRPRE8gRW5mb3JjZSBwb3NpdGl2ZSBhcmVhIGZvciBleHRlcmlvciwgbmVnYXRpdmUgYXJlYSBmb3IgaW50ZXJpb3I/XG5cbnZhciBYMCQxID0gMCxcbiAgICBZMCQxID0gMCxcbiAgICBaMCQxID0gMCxcbiAgICBYMSQxID0gMCxcbiAgICBZMSQxID0gMCxcbiAgICBaMSQxID0gMCxcbiAgICBYMiQxID0gMCxcbiAgICBZMiQxID0gMCxcbiAgICBaMiQxID0gMCxcbiAgICB4MDAkMSxcbiAgICB5MDAkMSxcbiAgICB4MCQzLFxuICAgIHkwJDM7XG5cbnZhciBjZW50cm9pZFN0cmVhbSQxID0ge1xuICBwb2ludDogY2VudHJvaWRQb2ludCQxLFxuICBsaW5lU3RhcnQ6IGNlbnRyb2lkTGluZVN0YXJ0JDEsXG4gIGxpbmVFbmQ6IGNlbnRyb2lkTGluZUVuZCQxLFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIGNlbnRyb2lkU3RyZWFtJDEubGluZVN0YXJ0ID0gY2VudHJvaWRSaW5nU3RhcnQkMTtcbiAgICBjZW50cm9pZFN0cmVhbSQxLmxpbmVFbmQgPSBjZW50cm9pZFJpbmdFbmQkMTtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgY2VudHJvaWRTdHJlYW0kMS5wb2ludCA9IGNlbnRyb2lkUG9pbnQkMTtcbiAgICBjZW50cm9pZFN0cmVhbSQxLmxpbmVTdGFydCA9IGNlbnRyb2lkTGluZVN0YXJ0JDE7XG4gICAgY2VudHJvaWRTdHJlYW0kMS5saW5lRW5kID0gY2VudHJvaWRMaW5lRW5kJDE7XG4gIH0sXG4gIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNlbnRyb2lkID0gWjIkMSA/IFtYMiQxIC8gWjIkMSwgWTIkMSAvIFoyJDFdXG4gICAgICAgIDogWjEkMSA/IFtYMSQxIC8gWjEkMSwgWTEkMSAvIFoxJDFdXG4gICAgICAgIDogWjAkMSA/IFtYMCQxIC8gWjAkMSwgWTAkMSAvIFowJDFdXG4gICAgICAgIDogW05hTiwgTmFOXTtcbiAgICBYMCQxID0gWTAkMSA9IFowJDEgPVxuICAgIFgxJDEgPSBZMSQxID0gWjEkMSA9XG4gICAgWDIkMSA9IFkyJDEgPSBaMiQxID0gMDtcbiAgICByZXR1cm4gY2VudHJvaWQ7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUG9pbnQkMSh4LCB5KSB7XG4gIFgwJDEgKz0geDtcbiAgWTAkMSArPSB5O1xuICArK1owJDE7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkTGluZVN0YXJ0JDEoKSB7XG4gIGNlbnRyb2lkU3RyZWFtJDEucG9pbnQgPSBjZW50cm9pZFBvaW50Rmlyc3RMaW5lO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFBvaW50Rmlyc3RMaW5lKHgsIHkpIHtcbiAgY2VudHJvaWRTdHJlYW0kMS5wb2ludCA9IGNlbnRyb2lkUG9pbnRMaW5lO1xuICBjZW50cm9pZFBvaW50JDEoeDAkMyA9IHgsIHkwJDMgPSB5KTtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRQb2ludExpbmUoeCwgeSkge1xuICB2YXIgZHggPSB4IC0geDAkMywgZHkgPSB5IC0geTAkMywgeiA9IHNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuICBYMSQxICs9IHogKiAoeDAkMyArIHgpIC8gMjtcbiAgWTEkMSArPSB6ICogKHkwJDMgKyB5KSAvIDI7XG4gIFoxJDEgKz0gejtcbiAgY2VudHJvaWRQb2ludCQxKHgwJDMgPSB4LCB5MCQzID0geSk7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkTGluZUVuZCQxKCkge1xuICBjZW50cm9pZFN0cmVhbSQxLnBvaW50ID0gY2VudHJvaWRQb2ludCQxO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFJpbmdTdGFydCQxKCkge1xuICBjZW50cm9pZFN0cmVhbSQxLnBvaW50ID0gY2VudHJvaWRQb2ludEZpcnN0UmluZztcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRSaW5nRW5kJDEoKSB7XG4gIGNlbnRyb2lkUG9pbnRSaW5nKHgwMCQxLCB5MDAkMSk7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUG9pbnRGaXJzdFJpbmcoeCwgeSkge1xuICBjZW50cm9pZFN0cmVhbSQxLnBvaW50ID0gY2VudHJvaWRQb2ludFJpbmc7XG4gIGNlbnRyb2lkUG9pbnQkMSh4MDAkMSA9IHgwJDMgPSB4LCB5MDAkMSA9IHkwJDMgPSB5KTtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRQb2ludFJpbmcoeCwgeSkge1xuICB2YXIgZHggPSB4IC0geDAkMyxcbiAgICAgIGR5ID0geSAtIHkwJDMsXG4gICAgICB6ID0gc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG5cbiAgWDEkMSArPSB6ICogKHgwJDMgKyB4KSAvIDI7XG4gIFkxJDEgKz0geiAqICh5MCQzICsgeSkgLyAyO1xuICBaMSQxICs9IHo7XG5cbiAgeiA9IHkwJDMgKiB4IC0geDAkMyAqIHk7XG4gIFgyJDEgKz0geiAqICh4MCQzICsgeCk7XG4gIFkyJDEgKz0geiAqICh5MCQzICsgeSk7XG4gIFoyJDEgKz0geiAqIDM7XG4gIGNlbnRyb2lkUG9pbnQkMSh4MCQzID0geCwgeTAkMyA9IHkpO1xufVxuXG5mdW5jdGlvbiBQYXRoQ29udGV4dChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5QYXRoQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gIF9yYWRpdXM6IDQuNSxcbiAgcG9pbnRSYWRpdXM6IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gdGhpcy5fcmFkaXVzID0gXywgdGhpcztcbiAgfSxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lID09PSAwKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX3BvaW50ID0gTmFOO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDoge1xuICAgICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTtcbiAgICAgICAgdGhpcy5fcG9pbnQgPSAxO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMToge1xuICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHggKyB0aGlzLl9yYWRpdXMsIHkpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmFyYyh4LCB5LCB0aGlzLl9yYWRpdXMsIDAsIHRhdSQzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICByZXN1bHQ6IG5vb3AkMlxufTtcblxudmFyIGxlbmd0aFN1bSQxID0gYWRkZXIoKSxcbiAgICBsZW5ndGhSaW5nLFxuICAgIHgwMCQyLFxuICAgIHkwMCQyLFxuICAgIHgwJDQsXG4gICAgeTAkNDtcblxudmFyIGxlbmd0aFN0cmVhbSQxID0ge1xuICBwb2ludDogbm9vcCQyLFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIGxlbmd0aFN0cmVhbSQxLnBvaW50ID0gbGVuZ3RoUG9pbnRGaXJzdCQxO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAobGVuZ3RoUmluZykgbGVuZ3RoUG9pbnQkMSh4MDAkMiwgeTAwJDIpO1xuICAgIGxlbmd0aFN0cmVhbSQxLnBvaW50ID0gbm9vcCQyO1xuICB9LFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIGxlbmd0aFJpbmcgPSB0cnVlO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICBsZW5ndGhSaW5nID0gbnVsbDtcbiAgfSxcbiAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVuZ3RoID0gK2xlbmd0aFN1bSQxO1xuICAgIGxlbmd0aFN1bSQxLnJlc2V0KCk7XG4gICAgcmV0dXJuIGxlbmd0aDtcbiAgfVxufTtcblxuZnVuY3Rpb24gbGVuZ3RoUG9pbnRGaXJzdCQxKHgsIHkpIHtcbiAgbGVuZ3RoU3RyZWFtJDEucG9pbnQgPSBsZW5ndGhQb2ludCQxO1xuICB4MDAkMiA9IHgwJDQgPSB4LCB5MDAkMiA9IHkwJDQgPSB5O1xufVxuXG5mdW5jdGlvbiBsZW5ndGhQb2ludCQxKHgsIHkpIHtcbiAgeDAkNCAtPSB4LCB5MCQ0IC09IHk7XG4gIGxlbmd0aFN1bSQxLmFkZChzcXJ0KHgwJDQgKiB4MCQ0ICsgeTAkNCAqIHkwJDQpKTtcbiAgeDAkNCA9IHgsIHkwJDQgPSB5O1xufVxuXG5mdW5jdGlvbiBQYXRoU3RyaW5nKCkge1xuICB0aGlzLl9zdHJpbmcgPSBbXTtcbn1cblxuUGF0aFN0cmluZy5wcm90b3R5cGUgPSB7XG4gIF9yYWRpdXM6IDQuNSxcbiAgX2NpcmNsZTogY2lyY2xlJDEoNC41KSxcbiAgcG9pbnRSYWRpdXM6IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoKF8gPSArXykgIT09IHRoaXMuX3JhZGl1cykgdGhpcy5fcmFkaXVzID0gXywgdGhpcy5fY2lyY2xlID0gbnVsbDtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lID09PSAwKSB0aGlzLl9zdHJpbmcucHVzaChcIlpcIik7XG4gICAgdGhpcy5fcG9pbnQgPSBOYU47XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB7XG4gICAgICAgIHRoaXMuX3N0cmluZy5wdXNoKFwiTVwiLCB4LCBcIixcIiwgeSk7XG4gICAgICAgIHRoaXMuX3BvaW50ID0gMTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDE6IHtcbiAgICAgICAgdGhpcy5fc3RyaW5nLnB1c2goXCJMXCIsIHgsIFwiLFwiLCB5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGlmICh0aGlzLl9jaXJjbGUgPT0gbnVsbCkgdGhpcy5fY2lyY2xlID0gY2lyY2xlJDEodGhpcy5fcmFkaXVzKTtcbiAgICAgICAgdGhpcy5fc3RyaW5nLnB1c2goXCJNXCIsIHgsIFwiLFwiLCB5LCB0aGlzLl9jaXJjbGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX3N0cmluZy5sZW5ndGgpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9zdHJpbmcuam9pbihcIlwiKTtcbiAgICAgIHRoaXMuX3N0cmluZyA9IFtdO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBjaXJjbGUkMShyYWRpdXMpIHtcbiAgcmV0dXJuIFwibTAsXCIgKyByYWRpdXNcbiAgICAgICsgXCJhXCIgKyByYWRpdXMgKyBcIixcIiArIHJhZGl1cyArIFwiIDAgMSwxIDAsXCIgKyAtMiAqIHJhZGl1c1xuICAgICAgKyBcImFcIiArIHJhZGl1cyArIFwiLFwiICsgcmFkaXVzICsgXCIgMCAxLDEgMCxcIiArIDIgKiByYWRpdXNcbiAgICAgICsgXCJ6XCI7XG59XG5cbmZ1bmN0aW9uIGluZGV4JDEocHJvamVjdGlvbiwgY29udGV4dCkge1xuICB2YXIgcG9pbnRSYWRpdXMgPSA0LjUsXG4gICAgICBwcm9qZWN0aW9uU3RyZWFtLFxuICAgICAgY29udGV4dFN0cmVhbTtcblxuICBmdW5jdGlvbiBwYXRoKG9iamVjdCkge1xuICAgIGlmIChvYmplY3QpIHtcbiAgICAgIGlmICh0eXBlb2YgcG9pbnRSYWRpdXMgPT09IFwiZnVuY3Rpb25cIikgY29udGV4dFN0cmVhbS5wb2ludFJhZGl1cygrcG9pbnRSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgICBnZW9TdHJlYW0ob2JqZWN0LCBwcm9qZWN0aW9uU3RyZWFtKGNvbnRleHRTdHJlYW0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRleHRTdHJlYW0ucmVzdWx0KCk7XG4gIH1cblxuICBwYXRoLmFyZWEgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICBnZW9TdHJlYW0ob2JqZWN0LCBwcm9qZWN0aW9uU3RyZWFtKGFyZWFTdHJlYW0kMSkpO1xuICAgIHJldHVybiBhcmVhU3RyZWFtJDEucmVzdWx0KCk7XG4gIH07XG5cbiAgcGF0aC5tZWFzdXJlID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgZ2VvU3RyZWFtKG9iamVjdCwgcHJvamVjdGlvblN0cmVhbShsZW5ndGhTdHJlYW0kMSkpO1xuICAgIHJldHVybiBsZW5ndGhTdHJlYW0kMS5yZXN1bHQoKTtcbiAgfTtcblxuICBwYXRoLmJvdW5kcyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIGdlb1N0cmVhbShvYmplY3QsIHByb2plY3Rpb25TdHJlYW0oYm91bmRzU3RyZWFtJDEpKTtcbiAgICByZXR1cm4gYm91bmRzU3RyZWFtJDEucmVzdWx0KCk7XG4gIH07XG5cbiAgcGF0aC5jZW50cm9pZCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIGdlb1N0cmVhbShvYmplY3QsIHByb2plY3Rpb25TdHJlYW0oY2VudHJvaWRTdHJlYW0kMSkpO1xuICAgIHJldHVybiBjZW50cm9pZFN0cmVhbSQxLnJlc3VsdCgpO1xuICB9O1xuXG4gIHBhdGgucHJvamVjdGlvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwcm9qZWN0aW9uU3RyZWFtID0gXyA9PSBudWxsID8gKHByb2plY3Rpb24gPSBudWxsLCBpZGVudGl0eSQ0KSA6IChwcm9qZWN0aW9uID0gXykuc3RyZWFtLCBwYXRoKSA6IHByb2plY3Rpb247XG4gIH07XG5cbiAgcGF0aC5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNvbnRleHQ7XG4gICAgY29udGV4dFN0cmVhbSA9IF8gPT0gbnVsbCA/IChjb250ZXh0ID0gbnVsbCwgbmV3IFBhdGhTdHJpbmcpIDogbmV3IFBhdGhDb250ZXh0KGNvbnRleHQgPSBfKTtcbiAgICBpZiAodHlwZW9mIHBvaW50UmFkaXVzICE9PSBcImZ1bmN0aW9uXCIpIGNvbnRleHRTdHJlYW0ucG9pbnRSYWRpdXMocG9pbnRSYWRpdXMpO1xuICAgIHJldHVybiBwYXRoO1xuICB9O1xuXG4gIHBhdGgucG9pbnRSYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcG9pbnRSYWRpdXM7XG4gICAgcG9pbnRSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IChjb250ZXh0U3RyZWFtLnBvaW50UmFkaXVzKCtfKSwgK18pO1xuICAgIHJldHVybiBwYXRoO1xuICB9O1xuXG4gIHJldHVybiBwYXRoLnByb2plY3Rpb24ocHJvamVjdGlvbikuY29udGV4dChjb250ZXh0KTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtKG1ldGhvZHMpIHtcbiAgcmV0dXJuIHtcbiAgICBzdHJlYW06IHRyYW5zZm9ybWVyKG1ldGhvZHMpXG4gIH07XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybWVyKG1ldGhvZHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIHZhciBzID0gbmV3IFRyYW5zZm9ybVN0cmVhbTtcbiAgICBmb3IgKHZhciBrZXkgaW4gbWV0aG9kcykgc1trZXldID0gbWV0aG9kc1trZXldO1xuICAgIHMuc3RyZWFtID0gc3RyZWFtO1xuICAgIHJldHVybiBzO1xuICB9O1xufVxuXG5mdW5jdGlvbiBUcmFuc2Zvcm1TdHJlYW0oKSB7fVxuXG5UcmFuc2Zvcm1TdHJlYW0ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVHJhbnNmb3JtU3RyZWFtLFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkgeyB0aGlzLnN0cmVhbS5wb2ludCh4LCB5KTsgfSxcbiAgc3BoZXJlOiBmdW5jdGlvbigpIHsgdGhpcy5zdHJlYW0uc3BoZXJlKCk7IH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7IHRoaXMuc3RyZWFtLmxpbmVTdGFydCgpOyB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHsgdGhpcy5zdHJlYW0ubGluZUVuZCgpOyB9LFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkgeyB0aGlzLnN0cmVhbS5wb2x5Z29uU3RhcnQoKTsgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7IHRoaXMuc3RyZWFtLnBvbHlnb25FbmQoKTsgfVxufTtcblxuZnVuY3Rpb24gZml0KHByb2plY3Rpb24sIGZpdEJvdW5kcywgb2JqZWN0KSB7XG4gIHZhciBjbGlwID0gcHJvamVjdGlvbi5jbGlwRXh0ZW50ICYmIHByb2plY3Rpb24uY2xpcEV4dGVudCgpO1xuICBwcm9qZWN0aW9uLnNjYWxlKDE1MCkudHJhbnNsYXRlKFswLCAwXSk7XG4gIGlmIChjbGlwICE9IG51bGwpIHByb2plY3Rpb24uY2xpcEV4dGVudChudWxsKTtcbiAgZ2VvU3RyZWFtKG9iamVjdCwgcHJvamVjdGlvbi5zdHJlYW0oYm91bmRzU3RyZWFtJDEpKTtcbiAgZml0Qm91bmRzKGJvdW5kc1N0cmVhbSQxLnJlc3VsdCgpKTtcbiAgaWYgKGNsaXAgIT0gbnVsbCkgcHJvamVjdGlvbi5jbGlwRXh0ZW50KGNsaXApO1xuICByZXR1cm4gcHJvamVjdGlvbjtcbn1cblxuZnVuY3Rpb24gZml0RXh0ZW50KHByb2plY3Rpb24sIGV4dGVudCwgb2JqZWN0KSB7XG4gIHJldHVybiBmaXQocHJvamVjdGlvbiwgZnVuY3Rpb24oYikge1xuICAgIHZhciB3ID0gZXh0ZW50WzFdWzBdIC0gZXh0ZW50WzBdWzBdLFxuICAgICAgICBoID0gZXh0ZW50WzFdWzFdIC0gZXh0ZW50WzBdWzFdLFxuICAgICAgICBrID0gTWF0aC5taW4odyAvIChiWzFdWzBdIC0gYlswXVswXSksIGggLyAoYlsxXVsxXSAtIGJbMF1bMV0pKSxcbiAgICAgICAgeCA9ICtleHRlbnRbMF1bMF0gKyAodyAtIGsgKiAoYlsxXVswXSArIGJbMF1bMF0pKSAvIDIsXG4gICAgICAgIHkgPSArZXh0ZW50WzBdWzFdICsgKGggLSBrICogKGJbMV1bMV0gKyBiWzBdWzFdKSkgLyAyO1xuICAgIHByb2plY3Rpb24uc2NhbGUoMTUwICogaykudHJhbnNsYXRlKFt4LCB5XSk7XG4gIH0sIG9iamVjdCk7XG59XG5cbmZ1bmN0aW9uIGZpdFNpemUocHJvamVjdGlvbiwgc2l6ZSwgb2JqZWN0KSB7XG4gIHJldHVybiBmaXRFeHRlbnQocHJvamVjdGlvbiwgW1swLCAwXSwgc2l6ZV0sIG9iamVjdCk7XG59XG5cbmZ1bmN0aW9uIGZpdFdpZHRoKHByb2plY3Rpb24sIHdpZHRoLCBvYmplY3QpIHtcbiAgcmV0dXJuIGZpdChwcm9qZWN0aW9uLCBmdW5jdGlvbihiKSB7XG4gICAgdmFyIHcgPSArd2lkdGgsXG4gICAgICAgIGsgPSB3IC8gKGJbMV1bMF0gLSBiWzBdWzBdKSxcbiAgICAgICAgeCA9ICh3IC0gayAqIChiWzFdWzBdICsgYlswXVswXSkpIC8gMixcbiAgICAgICAgeSA9IC1rICogYlswXVsxXTtcbiAgICBwcm9qZWN0aW9uLnNjYWxlKDE1MCAqIGspLnRyYW5zbGF0ZShbeCwgeV0pO1xuICB9LCBvYmplY3QpO1xufVxuXG5mdW5jdGlvbiBmaXRIZWlnaHQocHJvamVjdGlvbiwgaGVpZ2h0LCBvYmplY3QpIHtcbiAgcmV0dXJuIGZpdChwcm9qZWN0aW9uLCBmdW5jdGlvbihiKSB7XG4gICAgdmFyIGggPSAraGVpZ2h0LFxuICAgICAgICBrID0gaCAvIChiWzFdWzFdIC0gYlswXVsxXSksXG4gICAgICAgIHggPSAtayAqIGJbMF1bMF0sXG4gICAgICAgIHkgPSAoaCAtIGsgKiAoYlsxXVsxXSArIGJbMF1bMV0pKSAvIDI7XG4gICAgcHJvamVjdGlvbi5zY2FsZSgxNTAgKiBrKS50cmFuc2xhdGUoW3gsIHldKTtcbiAgfSwgb2JqZWN0KTtcbn1cblxudmFyIG1heERlcHRoID0gMTYsIC8vIG1heGltdW0gZGVwdGggb2Ygc3ViZGl2aXNpb25cbiAgICBjb3NNaW5EaXN0YW5jZSA9IGNvcyQxKDMwICogcmFkaWFucyk7IC8vIGNvcyhtaW5pbXVtIGFuZ3VsYXIgZGlzdGFuY2UpXG5cbmZ1bmN0aW9uIHJlc2FtcGxlKHByb2plY3QsIGRlbHRhMikge1xuICByZXR1cm4gK2RlbHRhMiA/IHJlc2FtcGxlJDEocHJvamVjdCwgZGVsdGEyKSA6IHJlc2FtcGxlTm9uZShwcm9qZWN0KTtcbn1cblxuZnVuY3Rpb24gcmVzYW1wbGVOb25lKHByb2plY3QpIHtcbiAgcmV0dXJuIHRyYW5zZm9ybWVyKHtcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgeCA9IHByb2plY3QoeCwgeSk7XG4gICAgICB0aGlzLnN0cmVhbS5wb2ludCh4WzBdLCB4WzFdKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZXNhbXBsZSQxKHByb2plY3QsIGRlbHRhMikge1xuXG4gIGZ1bmN0aW9uIHJlc2FtcGxlTGluZVRvKHgwLCB5MCwgbGFtYmRhMCwgYTAsIGIwLCBjMCwgeDEsIHkxLCBsYW1iZGExLCBhMSwgYjEsIGMxLCBkZXB0aCwgc3RyZWFtKSB7XG4gICAgdmFyIGR4ID0geDEgLSB4MCxcbiAgICAgICAgZHkgPSB5MSAtIHkwLFxuICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgIGlmIChkMiA+IDQgKiBkZWx0YTIgJiYgZGVwdGgtLSkge1xuICAgICAgdmFyIGEgPSBhMCArIGExLFxuICAgICAgICAgIGIgPSBiMCArIGIxLFxuICAgICAgICAgIGMgPSBjMCArIGMxLFxuICAgICAgICAgIG0gPSBzcXJ0KGEgKiBhICsgYiAqIGIgKyBjICogYyksXG4gICAgICAgICAgcGhpMiA9IGFzaW4oYyAvPSBtKSxcbiAgICAgICAgICBsYW1iZGEyID0gYWJzKGFicyhjKSAtIDEpIDwgZXBzaWxvbiQyIHx8IGFicyhsYW1iZGEwIC0gbGFtYmRhMSkgPCBlcHNpbG9uJDIgPyAobGFtYmRhMCArIGxhbWJkYTEpIC8gMiA6IGF0YW4yKGIsIGEpLFxuICAgICAgICAgIHAgPSBwcm9qZWN0KGxhbWJkYTIsIHBoaTIpLFxuICAgICAgICAgIHgyID0gcFswXSxcbiAgICAgICAgICB5MiA9IHBbMV0sXG4gICAgICAgICAgZHgyID0geDIgLSB4MCxcbiAgICAgICAgICBkeTIgPSB5MiAtIHkwLFxuICAgICAgICAgIGR6ID0gZHkgKiBkeDIgLSBkeCAqIGR5MjtcbiAgICAgIGlmIChkeiAqIGR6IC8gZDIgPiBkZWx0YTIgLy8gcGVycGVuZGljdWxhciBwcm9qZWN0ZWQgZGlzdGFuY2VcbiAgICAgICAgICB8fCBhYnMoKGR4ICogZHgyICsgZHkgKiBkeTIpIC8gZDIgLSAwLjUpID4gMC4zIC8vIG1pZHBvaW50IGNsb3NlIHRvIGFuIGVuZFxuICAgICAgICAgIHx8IGEwICogYTEgKyBiMCAqIGIxICsgYzAgKiBjMSA8IGNvc01pbkRpc3RhbmNlKSB7IC8vIGFuZ3VsYXIgZGlzdGFuY2VcbiAgICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCBsYW1iZGEwLCBhMCwgYjAsIGMwLCB4MiwgeTIsIGxhbWJkYTIsIGEgLz0gbSwgYiAvPSBtLCBjLCBkZXB0aCwgc3RyZWFtKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHgyLCB5Mik7XG4gICAgICAgIHJlc2FtcGxlTGluZVRvKHgyLCB5MiwgbGFtYmRhMiwgYSwgYiwgYywgeDEsIHkxLCBsYW1iZGExLCBhMSwgYjEsIGMxLCBkZXB0aCwgc3RyZWFtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIHZhciBsYW1iZGEwMCwgeDAwLCB5MDAsIGEwMCwgYjAwLCBjMDAsIC8vIGZpcnN0IHBvaW50XG4gICAgICAgIGxhbWJkYTAsIHgwLCB5MCwgYTAsIGIwLCBjMDsgLy8gcHJldmlvdXMgcG9pbnRcblxuICAgIHZhciByZXNhbXBsZVN0cmVhbSA9IHtcbiAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgbGluZUVuZDogbGluZUVuZCxcbiAgICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7IHN0cmVhbS5wb2x5Z29uU3RhcnQoKTsgcmVzYW1wbGVTdHJlYW0ubGluZVN0YXJ0ID0gcmluZ1N0YXJ0OyB9LFxuICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7IHN0cmVhbS5wb2x5Z29uRW5kKCk7IHJlc2FtcGxlU3RyZWFtLmxpbmVTdGFydCA9IGxpbmVTdGFydDsgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG4gICAgICB4ID0gcHJvamVjdCh4LCB5KTtcbiAgICAgIHN0cmVhbS5wb2ludCh4WzBdLCB4WzFdKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICB4MCA9IE5hTjtcbiAgICAgIHJlc2FtcGxlU3RyZWFtLnBvaW50ID0gbGluZVBvaW50O1xuICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVQb2ludChsYW1iZGEsIHBoaSkge1xuICAgICAgdmFyIGMgPSBjYXJ0ZXNpYW4oW2xhbWJkYSwgcGhpXSksIHAgPSBwcm9qZWN0KGxhbWJkYSwgcGhpKTtcbiAgICAgIHJlc2FtcGxlTGluZVRvKHgwLCB5MCwgbGFtYmRhMCwgYTAsIGIwLCBjMCwgeDAgPSBwWzBdLCB5MCA9IHBbMV0sIGxhbWJkYTAgPSBsYW1iZGEsIGEwID0gY1swXSwgYjAgPSBjWzFdLCBjMCA9IGNbMl0sIG1heERlcHRoLCBzdHJlYW0pO1xuICAgICAgc3RyZWFtLnBvaW50KHgwLCB5MCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIHJlc2FtcGxlU3RyZWFtLnBvaW50ID0gcG9pbnQ7XG4gICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJpbmdTdGFydCgpIHtcbiAgICAgIGxpbmVTdGFydCgpO1xuICAgICAgcmVzYW1wbGVTdHJlYW0ucG9pbnQgPSByaW5nUG9pbnQ7XG4gICAgICByZXNhbXBsZVN0cmVhbS5saW5lRW5kID0gcmluZ0VuZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByaW5nUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgICAgIGxpbmVQb2ludChsYW1iZGEwMCA9IGxhbWJkYSwgcGhpKSwgeDAwID0geDAsIHkwMCA9IHkwLCBhMDAgPSBhMCwgYjAwID0gYjAsIGMwMCA9IGMwO1xuICAgICAgcmVzYW1wbGVTdHJlYW0ucG9pbnQgPSBsaW5lUG9pbnQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmluZ0VuZCgpIHtcbiAgICAgIHJlc2FtcGxlTGluZVRvKHgwLCB5MCwgbGFtYmRhMCwgYTAsIGIwLCBjMCwgeDAwLCB5MDAsIGxhbWJkYTAwLCBhMDAsIGIwMCwgYzAwLCBtYXhEZXB0aCwgc3RyZWFtKTtcbiAgICAgIHJlc2FtcGxlU3RyZWFtLmxpbmVFbmQgPSBsaW5lRW5kO1xuICAgICAgbGluZUVuZCgpO1xuICAgIH1cblxuICAgIHJldHVybiByZXNhbXBsZVN0cmVhbTtcbiAgfTtcbn1cblxudmFyIHRyYW5zZm9ybVJhZGlhbnMgPSB0cmFuc2Zvcm1lcih7XG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5zdHJlYW0ucG9pbnQoeCAqIHJhZGlhbnMsIHkgKiByYWRpYW5zKTtcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybVJvdGF0ZShyb3RhdGUpIHtcbiAgcmV0dXJuIHRyYW5zZm9ybWVyKHtcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgdmFyIHIgPSByb3RhdGUoeCwgeSk7XG4gICAgICByZXR1cm4gdGhpcy5zdHJlYW0ucG9pbnQoclswXSwgclsxXSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc2NhbGVUcmFuc2xhdGUoaywgZHgsIGR5KSB7XG4gIGZ1bmN0aW9uIHRyYW5zZm9ybSQkMSh4LCB5KSB7XG4gICAgcmV0dXJuIFtkeCArIGsgKiB4LCBkeSAtIGsgKiB5XTtcbiAgfVxuICB0cmFuc2Zvcm0kJDEuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHJldHVybiBbKHggLSBkeCkgLyBrLCAoZHkgLSB5KSAvIGtdO1xuICB9O1xuICByZXR1cm4gdHJhbnNmb3JtJCQxO1xufVxuXG5mdW5jdGlvbiBzY2FsZVRyYW5zbGF0ZVJvdGF0ZShrLCBkeCwgZHksIGFscGhhKSB7XG4gIHZhciBjb3NBbHBoYSA9IGNvcyQxKGFscGhhKSxcbiAgICAgIHNpbkFscGhhID0gc2luJDEoYWxwaGEpLFxuICAgICAgYSA9IGNvc0FscGhhICogayxcbiAgICAgIGIgPSBzaW5BbHBoYSAqIGssXG4gICAgICBhaSA9IGNvc0FscGhhIC8gayxcbiAgICAgIGJpID0gc2luQWxwaGEgLyBrLFxuICAgICAgY2kgPSAoc2luQWxwaGEgKiBkeSAtIGNvc0FscGhhICogZHgpIC8gayxcbiAgICAgIGZpID0gKHNpbkFscGhhICogZHggKyBjb3NBbHBoYSAqIGR5KSAvIGs7XG4gIGZ1bmN0aW9uIHRyYW5zZm9ybSQkMSh4LCB5KSB7XG4gICAgcmV0dXJuIFthICogeCAtIGIgKiB5ICsgZHgsIGR5IC0gYiAqIHggLSBhICogeV07XG4gIH1cbiAgdHJhbnNmb3JtJCQxLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4gW2FpICogeCAtIGJpICogeSArIGNpLCBmaSAtIGJpICogeCAtIGFpICogeV07XG4gIH07XG4gIHJldHVybiB0cmFuc2Zvcm0kJDE7XG59XG5cbmZ1bmN0aW9uIHByb2plY3Rpb24ocHJvamVjdCkge1xuICByZXR1cm4gcHJvamVjdGlvbk11dGF0b3IoZnVuY3Rpb24oKSB7IHJldHVybiBwcm9qZWN0OyB9KSgpO1xufVxuXG5mdW5jdGlvbiBwcm9qZWN0aW9uTXV0YXRvcihwcm9qZWN0QXQpIHtcbiAgdmFyIHByb2plY3QsXG4gICAgICBrID0gMTUwLCAvLyBzY2FsZVxuICAgICAgeCA9IDQ4MCwgeSA9IDI1MCwgLy8gdHJhbnNsYXRlXG4gICAgICBsYW1iZGEgPSAwLCBwaGkgPSAwLCAvLyBjZW50ZXJcbiAgICAgIGRlbHRhTGFtYmRhID0gMCwgZGVsdGFQaGkgPSAwLCBkZWx0YUdhbW1hID0gMCwgcm90YXRlLCAvLyBwcmUtcm90YXRlXG4gICAgICBhbHBoYSA9IDAsIC8vIHBvc3Qtcm90YXRlXG4gICAgICB0aGV0YSA9IG51bGwsIHByZWNsaXAgPSBjbGlwQW50aW1lcmlkaWFuLCAvLyBwcmUtY2xpcCBhbmdsZVxuICAgICAgeDAgPSBudWxsLCB5MCwgeDEsIHkxLCBwb3N0Y2xpcCA9IGlkZW50aXR5JDQsIC8vIHBvc3QtY2xpcCBleHRlbnRcbiAgICAgIGRlbHRhMiA9IDAuNSwgLy8gcHJlY2lzaW9uXG4gICAgICBwcm9qZWN0UmVzYW1wbGUsXG4gICAgICBwcm9qZWN0VHJhbnNmb3JtLFxuICAgICAgcHJvamVjdFJvdGF0ZVRyYW5zZm9ybSxcbiAgICAgIGNhY2hlLFxuICAgICAgY2FjaGVTdHJlYW07XG5cbiAgZnVuY3Rpb24gcHJvamVjdGlvbihwb2ludCkge1xuICAgIHJldHVybiBwcm9qZWN0Um90YXRlVHJhbnNmb3JtKHBvaW50WzBdICogcmFkaWFucywgcG9pbnRbMV0gKiByYWRpYW5zKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludmVydChwb2ludCkge1xuICAgIHBvaW50ID0gcHJvamVjdFJvdGF0ZVRyYW5zZm9ybS5pbnZlcnQocG9pbnRbMF0sIHBvaW50WzFdKTtcbiAgICByZXR1cm4gcG9pbnQgJiYgW3BvaW50WzBdICogZGVncmVlcyQxLCBwb2ludFsxXSAqIGRlZ3JlZXMkMV07XG4gIH1cblxuICBwcm9qZWN0aW9uLnN0cmVhbSA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIHJldHVybiBjYWNoZSAmJiBjYWNoZVN0cmVhbSA9PT0gc3RyZWFtID8gY2FjaGUgOiBjYWNoZSA9IHRyYW5zZm9ybVJhZGlhbnModHJhbnNmb3JtUm90YXRlKHJvdGF0ZSkocHJlY2xpcChwcm9qZWN0UmVzYW1wbGUocG9zdGNsaXAoY2FjaGVTdHJlYW0gPSBzdHJlYW0pKSkpKTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLnByZWNsaXAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocHJlY2xpcCA9IF8sIHRoZXRhID0gdW5kZWZpbmVkLCByZXNldCgpKSA6IHByZWNsaXA7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5wb3N0Y2xpcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwb3N0Y2xpcCA9IF8sIHgwID0geTAgPSB4MSA9IHkxID0gbnVsbCwgcmVzZXQoKSkgOiBwb3N0Y2xpcDtcbiAgfTtcblxuICBwcm9qZWN0aW9uLmNsaXBBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwcmVjbGlwID0gK18gPyBjbGlwQ2lyY2xlKHRoZXRhID0gXyAqIHJhZGlhbnMpIDogKHRoZXRhID0gbnVsbCwgY2xpcEFudGltZXJpZGlhbiksIHJlc2V0KCkpIDogdGhldGEgKiBkZWdyZWVzJDE7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5jbGlwRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBvc3RjbGlwID0gXyA9PSBudWxsID8gKHgwID0geTAgPSB4MSA9IHkxID0gbnVsbCwgaWRlbnRpdHkkNCkgOiBjbGlwUmVjdGFuZ2xlKHgwID0gK19bMF1bMF0sIHkwID0gK19bMF1bMV0sIHgxID0gK19bMV1bMF0sIHkxID0gK19bMV1bMV0pLCByZXNldCgpKSA6IHgwID09IG51bGwgPyBudWxsIDogW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gIH07XG5cbiAgcHJvamVjdGlvbi5zY2FsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChrID0gK18sIHJlY2VudGVyKCkpIDogaztcbiAgfTtcblxuICBwcm9qZWN0aW9uLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gK19bMF0sIHkgPSArX1sxXSwgcmVjZW50ZXIoKSkgOiBbeCwgeV07XG4gIH07XG5cbiAgcHJvamVjdGlvbi5jZW50ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobGFtYmRhID0gX1swXSAlIDM2MCAqIHJhZGlhbnMsIHBoaSA9IF9bMV0gJSAzNjAgKiByYWRpYW5zLCByZWNlbnRlcigpKSA6IFtsYW1iZGEgKiBkZWdyZWVzJDEsIHBoaSAqIGRlZ3JlZXMkMV07XG4gIH07XG5cbiAgcHJvamVjdGlvbi5yb3RhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGVsdGFMYW1iZGEgPSBfWzBdICUgMzYwICogcmFkaWFucywgZGVsdGFQaGkgPSBfWzFdICUgMzYwICogcmFkaWFucywgZGVsdGFHYW1tYSA9IF8ubGVuZ3RoID4gMiA/IF9bMl0gJSAzNjAgKiByYWRpYW5zIDogMCwgcmVjZW50ZXIoKSkgOiBbZGVsdGFMYW1iZGEgKiBkZWdyZWVzJDEsIGRlbHRhUGhpICogZGVncmVlcyQxLCBkZWx0YUdhbW1hICogZGVncmVlcyQxXTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLmFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFscGhhID0gXyAlIDM2MCAqIHJhZGlhbnMsIHJlY2VudGVyKCkpIDogYWxwaGEgKiBkZWdyZWVzJDE7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5wcmVjaXNpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocHJvamVjdFJlc2FtcGxlID0gcmVzYW1wbGUocHJvamVjdFRyYW5zZm9ybSwgZGVsdGEyID0gXyAqIF8pLCByZXNldCgpKSA6IHNxcnQoZGVsdGEyKTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLmZpdEV4dGVudCA9IGZ1bmN0aW9uKGV4dGVudCwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZpdEV4dGVudChwcm9qZWN0aW9uLCBleHRlbnQsIG9iamVjdCk7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5maXRTaXplID0gZnVuY3Rpb24oc2l6ZSwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZpdFNpemUocHJvamVjdGlvbiwgc2l6ZSwgb2JqZWN0KTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLmZpdFdpZHRoID0gZnVuY3Rpb24od2lkdGgsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRXaWR0aChwcm9qZWN0aW9uLCB3aWR0aCwgb2JqZWN0KTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLmZpdEhlaWdodCA9IGZ1bmN0aW9uKGhlaWdodCwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZpdEhlaWdodChwcm9qZWN0aW9uLCBoZWlnaHQsIG9iamVjdCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVjZW50ZXIoKSB7XG4gICAgdmFyIGNlbnRlciA9IHNjYWxlVHJhbnNsYXRlUm90YXRlKGssIDAsIDAsIGFscGhhKS5hcHBseShudWxsLCBwcm9qZWN0KGxhbWJkYSwgcGhpKSksXG4gICAgICAgIHRyYW5zZm9ybSQkMSA9IChhbHBoYSA/IHNjYWxlVHJhbnNsYXRlUm90YXRlIDogc2NhbGVUcmFuc2xhdGUpKGssIHggLSBjZW50ZXJbMF0sIHkgLSBjZW50ZXJbMV0sIGFscGhhKTtcbiAgICByb3RhdGUgPSByb3RhdGVSYWRpYW5zKGRlbHRhTGFtYmRhLCBkZWx0YVBoaSwgZGVsdGFHYW1tYSk7XG4gICAgcHJvamVjdFRyYW5zZm9ybSA9IGNvbXBvc2UocHJvamVjdCwgdHJhbnNmb3JtJCQxKTtcbiAgICBwcm9qZWN0Um90YXRlVHJhbnNmb3JtID0gY29tcG9zZShyb3RhdGUsIHByb2plY3RUcmFuc2Zvcm0pO1xuICAgIHByb2plY3RSZXNhbXBsZSA9IHJlc2FtcGxlKHByb2plY3RUcmFuc2Zvcm0sIGRlbHRhMik7XG4gICAgcmV0dXJuIHJlc2V0KCk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBjYWNoZSA9IGNhY2hlU3RyZWFtID0gbnVsbDtcbiAgICByZXR1cm4gcHJvamVjdGlvbjtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBwcm9qZWN0ID0gcHJvamVjdEF0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgcHJvamVjdGlvbi5pbnZlcnQgPSBwcm9qZWN0LmludmVydCAmJiBpbnZlcnQ7XG4gICAgcmV0dXJuIHJlY2VudGVyKCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbmljUHJvamVjdGlvbihwcm9qZWN0QXQpIHtcbiAgdmFyIHBoaTAgPSAwLFxuICAgICAgcGhpMSA9IHBpJDMgLyAzLFxuICAgICAgbSA9IHByb2plY3Rpb25NdXRhdG9yKHByb2plY3RBdCksXG4gICAgICBwID0gbShwaGkwLCBwaGkxKTtcblxuICBwLnBhcmFsbGVscyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IG0ocGhpMCA9IF9bMF0gKiByYWRpYW5zLCBwaGkxID0gX1sxXSAqIHJhZGlhbnMpIDogW3BoaTAgKiBkZWdyZWVzJDEsIHBoaTEgKiBkZWdyZWVzJDFdO1xuICB9O1xuXG4gIHJldHVybiBwO1xufVxuXG5mdW5jdGlvbiBjeWxpbmRyaWNhbEVxdWFsQXJlYVJhdyhwaGkwKSB7XG4gIHZhciBjb3NQaGkwID0gY29zJDEocGhpMCk7XG5cbiAgZnVuY3Rpb24gZm9yd2FyZChsYW1iZGEsIHBoaSkge1xuICAgIHJldHVybiBbbGFtYmRhICogY29zUGhpMCwgc2luJDEocGhpKSAvIGNvc1BoaTBdO1xuICB9XG5cbiAgZm9yd2FyZC5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIFt4IC8gY29zUGhpMCwgYXNpbih5ICogY29zUGhpMCldO1xuICB9O1xuXG4gIHJldHVybiBmb3J3YXJkO1xufVxuXG5mdW5jdGlvbiBjb25pY0VxdWFsQXJlYVJhdyh5MCwgeTEpIHtcbiAgdmFyIHN5MCA9IHNpbiQxKHkwKSwgbiA9IChzeTAgKyBzaW4kMSh5MSkpIC8gMjtcblxuICAvLyBBcmUgdGhlIHBhcmFsbGVscyBzeW1tZXRyaWNhbCBhcm91bmQgdGhlIEVxdWF0b3I/XG4gIGlmIChhYnMobikgPCBlcHNpbG9uJDIpIHJldHVybiBjeWxpbmRyaWNhbEVxdWFsQXJlYVJhdyh5MCk7XG5cbiAgdmFyIGMgPSAxICsgc3kwICogKDIgKiBuIC0gc3kwKSwgcjAgPSBzcXJ0KGMpIC8gbjtcblxuICBmdW5jdGlvbiBwcm9qZWN0KHgsIHkpIHtcbiAgICB2YXIgciA9IHNxcnQoYyAtIDIgKiBuICogc2luJDEoeSkpIC8gbjtcbiAgICByZXR1cm4gW3IgKiBzaW4kMSh4ICo9IG4pLCByMCAtIHIgKiBjb3MkMSh4KV07XG4gIH1cblxuICBwcm9qZWN0LmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB2YXIgcjB5ID0gcjAgLSB5O1xuICAgIHJldHVybiBbYXRhbjIoeCwgYWJzKHIweSkpIC8gbiAqIHNpZ24ocjB5KSwgYXNpbigoYyAtICh4ICogeCArIHIweSAqIHIweSkgKiBuICogbikgLyAoMiAqIG4pKV07XG4gIH07XG5cbiAgcmV0dXJuIHByb2plY3Q7XG59XG5cbmZ1bmN0aW9uIGNvbmljRXF1YWxBcmVhKCkge1xuICByZXR1cm4gY29uaWNQcm9qZWN0aW9uKGNvbmljRXF1YWxBcmVhUmF3KVxuICAgICAgLnNjYWxlKDE1NS40MjQpXG4gICAgICAuY2VudGVyKFswLCAzMy42NDQyXSk7XG59XG5cbmZ1bmN0aW9uIGFsYmVycygpIHtcbiAgcmV0dXJuIGNvbmljRXF1YWxBcmVhKClcbiAgICAgIC5wYXJhbGxlbHMoWzI5LjUsIDQ1LjVdKVxuICAgICAgLnNjYWxlKDEwNzApXG4gICAgICAudHJhbnNsYXRlKFs0ODAsIDI1MF0pXG4gICAgICAucm90YXRlKFs5NiwgMF0pXG4gICAgICAuY2VudGVyKFstMC42LCAzOC43XSk7XG59XG5cbi8vIFRoZSBwcm9qZWN0aW9ucyBtdXN0IGhhdmUgbXV0dWFsbHkgZXhjbHVzaXZlIGNsaXAgcmVnaW9ucyBvbiB0aGUgc3BoZXJlLFxuLy8gYXMgdGhpcyB3aWxsIGF2b2lkIGVtaXR0aW5nIGludGVybGVhdmluZyBsaW5lcyBhbmQgcG9seWdvbnMuXG5mdW5jdGlvbiBtdWx0aXBsZXgoc3RyZWFtcykge1xuICB2YXIgbiA9IHN0cmVhbXMubGVuZ3RoO1xuICByZXR1cm4ge1xuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7IHZhciBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSBzdHJlYW1zW2ldLnBvaW50KHgsIHkpOyB9LFxuICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7IHZhciBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSBzdHJlYW1zW2ldLnNwaGVyZSgpOyB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7IHZhciBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSBzdHJlYW1zW2ldLmxpbmVTdGFydCgpOyB9LFxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkgeyB2YXIgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikgc3RyZWFtc1tpXS5saW5lRW5kKCk7IH0sXG4gICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHsgdmFyIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHN0cmVhbXNbaV0ucG9seWdvblN0YXJ0KCk7IH0sXG4gICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7IHZhciBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSBzdHJlYW1zW2ldLnBvbHlnb25FbmQoKTsgfVxuICB9O1xufVxuXG4vLyBBIGNvbXBvc2l0ZSBwcm9qZWN0aW9uIGZvciB0aGUgVW5pdGVkIFN0YXRlcywgY29uZmlndXJlZCBieSBkZWZhdWx0IGZvclxuLy8gOTYww5c1MDAuIFRoZSBwcm9qZWN0aW9uIGFsc28gd29ya3MgcXVpdGUgd2VsbCBhdCA5NjDDlzYwMCBpZiB5b3UgY2hhbmdlIHRoZVxuLy8gc2NhbGUgdG8gMTI4NSBhbmQgYWRqdXN0IHRoZSB0cmFuc2xhdGUgYWNjb3JkaW5nbHkuIFRoZSBzZXQgb2Ygc3RhbmRhcmRcbi8vIHBhcmFsbGVscyBmb3IgZWFjaCByZWdpb24gY29tZXMgZnJvbSBVU0dTLCB3aGljaCBpcyBwdWJsaXNoZWQgaGVyZTpcbi8vIGh0dHA6Ly9lZ3NjLnVzZ3MuZ292L2lzYi9wdWJzL01hcFByb2plY3Rpb25zL3Byb2plY3Rpb25zLmh0bWwjYWxiZXJzXG5mdW5jdGlvbiBhbGJlcnNVc2EoKSB7XG4gIHZhciBjYWNoZSxcbiAgICAgIGNhY2hlU3RyZWFtLFxuICAgICAgbG93ZXI0OCA9IGFsYmVycygpLCBsb3dlcjQ4UG9pbnQsXG4gICAgICBhbGFza2EgPSBjb25pY0VxdWFsQXJlYSgpLnJvdGF0ZShbMTU0LCAwXSkuY2VudGVyKFstMiwgNTguNV0pLnBhcmFsbGVscyhbNTUsIDY1XSksIGFsYXNrYVBvaW50LCAvLyBFUFNHOjMzMzhcbiAgICAgIGhhd2FpaSA9IGNvbmljRXF1YWxBcmVhKCkucm90YXRlKFsxNTcsIDBdKS5jZW50ZXIoWy0zLCAxOS45XSkucGFyYWxsZWxzKFs4LCAxOF0pLCBoYXdhaWlQb2ludCwgLy8gRVNSSToxMDIwMDdcbiAgICAgIHBvaW50LCBwb2ludFN0cmVhbSA9IHtwb2ludDogZnVuY3Rpb24oeCwgeSkgeyBwb2ludCA9IFt4LCB5XTsgfX07XG5cbiAgZnVuY3Rpb24gYWxiZXJzVXNhKGNvb3JkaW5hdGVzKSB7XG4gICAgdmFyIHggPSBjb29yZGluYXRlc1swXSwgeSA9IGNvb3JkaW5hdGVzWzFdO1xuICAgIHJldHVybiBwb2ludCA9IG51bGwsXG4gICAgICAgIChsb3dlcjQ4UG9pbnQucG9pbnQoeCwgeSksIHBvaW50KVxuICAgICAgICB8fCAoYWxhc2thUG9pbnQucG9pbnQoeCwgeSksIHBvaW50KVxuICAgICAgICB8fCAoaGF3YWlpUG9pbnQucG9pbnQoeCwgeSksIHBvaW50KTtcbiAgfVxuXG4gIGFsYmVyc1VzYS5pbnZlcnQgPSBmdW5jdGlvbihjb29yZGluYXRlcykge1xuICAgIHZhciBrID0gbG93ZXI0OC5zY2FsZSgpLFxuICAgICAgICB0ID0gbG93ZXI0OC50cmFuc2xhdGUoKSxcbiAgICAgICAgeCA9IChjb29yZGluYXRlc1swXSAtIHRbMF0pIC8gayxcbiAgICAgICAgeSA9IChjb29yZGluYXRlc1sxXSAtIHRbMV0pIC8gaztcbiAgICByZXR1cm4gKHkgPj0gMC4xMjAgJiYgeSA8IDAuMjM0ICYmIHggPj0gLTAuNDI1ICYmIHggPCAtMC4yMTQgPyBhbGFza2FcbiAgICAgICAgOiB5ID49IDAuMTY2ICYmIHkgPCAwLjIzNCAmJiB4ID49IC0wLjIxNCAmJiB4IDwgLTAuMTE1ID8gaGF3YWlpXG4gICAgICAgIDogbG93ZXI0OCkuaW52ZXJ0KGNvb3JkaW5hdGVzKTtcbiAgfTtcblxuICBhbGJlcnNVc2Euc3RyZWFtID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgcmV0dXJuIGNhY2hlICYmIGNhY2hlU3RyZWFtID09PSBzdHJlYW0gPyBjYWNoZSA6IGNhY2hlID0gbXVsdGlwbGV4KFtsb3dlcjQ4LnN0cmVhbShjYWNoZVN0cmVhbSA9IHN0cmVhbSksIGFsYXNrYS5zdHJlYW0oc3RyZWFtKSwgaGF3YWlpLnN0cmVhbShzdHJlYW0pXSk7XG4gIH07XG5cbiAgYWxiZXJzVXNhLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsb3dlcjQ4LnByZWNpc2lvbigpO1xuICAgIGxvd2VyNDgucHJlY2lzaW9uKF8pLCBhbGFza2EucHJlY2lzaW9uKF8pLCBoYXdhaWkucHJlY2lzaW9uKF8pO1xuICAgIHJldHVybiByZXNldCgpO1xuICB9O1xuXG4gIGFsYmVyc1VzYS5zY2FsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsb3dlcjQ4LnNjYWxlKCk7XG4gICAgbG93ZXI0OC5zY2FsZShfKSwgYWxhc2thLnNjYWxlKF8gKiAwLjM1KSwgaGF3YWlpLnNjYWxlKF8pO1xuICAgIHJldHVybiBhbGJlcnNVc2EudHJhbnNsYXRlKGxvd2VyNDgudHJhbnNsYXRlKCkpO1xuICB9O1xuXG4gIGFsYmVyc1VzYS50cmFuc2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbG93ZXI0OC50cmFuc2xhdGUoKTtcbiAgICB2YXIgayA9IGxvd2VyNDguc2NhbGUoKSwgeCA9ICtfWzBdLCB5ID0gK19bMV07XG5cbiAgICBsb3dlcjQ4UG9pbnQgPSBsb3dlcjQ4XG4gICAgICAgIC50cmFuc2xhdGUoXylcbiAgICAgICAgLmNsaXBFeHRlbnQoW1t4IC0gMC40NTUgKiBrLCB5IC0gMC4yMzggKiBrXSwgW3ggKyAwLjQ1NSAqIGssIHkgKyAwLjIzOCAqIGtdXSlcbiAgICAgICAgLnN0cmVhbShwb2ludFN0cmVhbSk7XG5cbiAgICBhbGFza2FQb2ludCA9IGFsYXNrYVxuICAgICAgICAudHJhbnNsYXRlKFt4IC0gMC4zMDcgKiBrLCB5ICsgMC4yMDEgKiBrXSlcbiAgICAgICAgLmNsaXBFeHRlbnQoW1t4IC0gMC40MjUgKiBrICsgZXBzaWxvbiQyLCB5ICsgMC4xMjAgKiBrICsgZXBzaWxvbiQyXSwgW3ggLSAwLjIxNCAqIGsgLSBlcHNpbG9uJDIsIHkgKyAwLjIzNCAqIGsgLSBlcHNpbG9uJDJdXSlcbiAgICAgICAgLnN0cmVhbShwb2ludFN0cmVhbSk7XG5cbiAgICBoYXdhaWlQb2ludCA9IGhhd2FpaVxuICAgICAgICAudHJhbnNsYXRlKFt4IC0gMC4yMDUgKiBrLCB5ICsgMC4yMTIgKiBrXSlcbiAgICAgICAgLmNsaXBFeHRlbnQoW1t4IC0gMC4yMTQgKiBrICsgZXBzaWxvbiQyLCB5ICsgMC4xNjYgKiBrICsgZXBzaWxvbiQyXSwgW3ggLSAwLjExNSAqIGsgLSBlcHNpbG9uJDIsIHkgKyAwLjIzNCAqIGsgLSBlcHNpbG9uJDJdXSlcbiAgICAgICAgLnN0cmVhbShwb2ludFN0cmVhbSk7XG5cbiAgICByZXR1cm4gcmVzZXQoKTtcbiAgfTtcblxuICBhbGJlcnNVc2EuZml0RXh0ZW50ID0gZnVuY3Rpb24oZXh0ZW50LCBvYmplY3QpIHtcbiAgICByZXR1cm4gZml0RXh0ZW50KGFsYmVyc1VzYSwgZXh0ZW50LCBvYmplY3QpO1xuICB9O1xuXG4gIGFsYmVyc1VzYS5maXRTaXplID0gZnVuY3Rpb24oc2l6ZSwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZpdFNpemUoYWxiZXJzVXNhLCBzaXplLCBvYmplY3QpO1xuICB9O1xuXG4gIGFsYmVyc1VzYS5maXRXaWR0aCA9IGZ1bmN0aW9uKHdpZHRoLCBvYmplY3QpIHtcbiAgICByZXR1cm4gZml0V2lkdGgoYWxiZXJzVXNhLCB3aWR0aCwgb2JqZWN0KTtcbiAgfTtcblxuICBhbGJlcnNVc2EuZml0SGVpZ2h0ID0gZnVuY3Rpb24oaGVpZ2h0LCBvYmplY3QpIHtcbiAgICByZXR1cm4gZml0SGVpZ2h0KGFsYmVyc1VzYSwgaGVpZ2h0LCBvYmplY3QpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIGNhY2hlID0gY2FjaGVTdHJlYW0gPSBudWxsO1xuICAgIHJldHVybiBhbGJlcnNVc2E7XG4gIH1cblxuICByZXR1cm4gYWxiZXJzVXNhLnNjYWxlKDEwNzApO1xufVxuXG5mdW5jdGlvbiBhemltdXRoYWxSYXcoc2NhbGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB2YXIgY3ggPSBjb3MkMSh4KSxcbiAgICAgICAgY3kgPSBjb3MkMSh5KSxcbiAgICAgICAgayA9IHNjYWxlKGN4ICogY3kpO1xuICAgIHJldHVybiBbXG4gICAgICBrICogY3kgKiBzaW4kMSh4KSxcbiAgICAgIGsgKiBzaW4kMSh5KVxuICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gYXppbXV0aGFsSW52ZXJ0KGFuZ2xlKSB7XG4gIHJldHVybiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdmFyIHogPSBzcXJ0KHggKiB4ICsgeSAqIHkpLFxuICAgICAgICBjID0gYW5nbGUoeiksXG4gICAgICAgIHNjID0gc2luJDEoYyksXG4gICAgICAgIGNjID0gY29zJDEoYyk7XG4gICAgcmV0dXJuIFtcbiAgICAgIGF0YW4yKHggKiBzYywgeiAqIGNjKSxcbiAgICAgIGFzaW4oeiAmJiB5ICogc2MgLyB6KVxuICAgIF07XG4gIH1cbn1cblxudmFyIGF6aW11dGhhbEVxdWFsQXJlYVJhdyA9IGF6aW11dGhhbFJhdyhmdW5jdGlvbihjeGN5KSB7XG4gIHJldHVybiBzcXJ0KDIgLyAoMSArIGN4Y3kpKTtcbn0pO1xuXG5hemltdXRoYWxFcXVhbEFyZWFSYXcuaW52ZXJ0ID0gYXppbXV0aGFsSW52ZXJ0KGZ1bmN0aW9uKHopIHtcbiAgcmV0dXJuIDIgKiBhc2luKHogLyAyKTtcbn0pO1xuXG5mdW5jdGlvbiBhemltdXRoYWxFcXVhbEFyZWEoKSB7XG4gIHJldHVybiBwcm9qZWN0aW9uKGF6aW11dGhhbEVxdWFsQXJlYVJhdylcbiAgICAgIC5zY2FsZSgxMjQuNzUpXG4gICAgICAuY2xpcEFuZ2xlKDE4MCAtIDFlLTMpO1xufVxuXG52YXIgYXppbXV0aGFsRXF1aWRpc3RhbnRSYXcgPSBhemltdXRoYWxSYXcoZnVuY3Rpb24oYykge1xuICByZXR1cm4gKGMgPSBhY29zKGMpKSAmJiBjIC8gc2luJDEoYyk7XG59KTtcblxuYXppbXV0aGFsRXF1aWRpc3RhbnRSYXcuaW52ZXJ0ID0gYXppbXV0aGFsSW52ZXJ0KGZ1bmN0aW9uKHopIHtcbiAgcmV0dXJuIHo7XG59KTtcblxuZnVuY3Rpb24gYXppbXV0aGFsRXF1aWRpc3RhbnQoKSB7XG4gIHJldHVybiBwcm9qZWN0aW9uKGF6aW11dGhhbEVxdWlkaXN0YW50UmF3KVxuICAgICAgLnNjYWxlKDc5LjQxODgpXG4gICAgICAuY2xpcEFuZ2xlKDE4MCAtIDFlLTMpO1xufVxuXG5mdW5jdGlvbiBtZXJjYXRvclJhdyhsYW1iZGEsIHBoaSkge1xuICByZXR1cm4gW2xhbWJkYSwgbG9nKHRhbigoaGFsZlBpJDIgKyBwaGkpIC8gMikpXTtcbn1cblxubWVyY2F0b3JSYXcuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICByZXR1cm4gW3gsIDIgKiBhdGFuKGV4cCh5KSkgLSBoYWxmUGkkMl07XG59O1xuXG5mdW5jdGlvbiBtZXJjYXRvcigpIHtcbiAgcmV0dXJuIG1lcmNhdG9yUHJvamVjdGlvbihtZXJjYXRvclJhdylcbiAgICAgIC5zY2FsZSg5NjEgLyB0YXUkMyk7XG59XG5cbmZ1bmN0aW9uIG1lcmNhdG9yUHJvamVjdGlvbihwcm9qZWN0KSB7XG4gIHZhciBtID0gcHJvamVjdGlvbihwcm9qZWN0KSxcbiAgICAgIGNlbnRlciA9IG0uY2VudGVyLFxuICAgICAgc2NhbGUgPSBtLnNjYWxlLFxuICAgICAgdHJhbnNsYXRlID0gbS50cmFuc2xhdGUsXG4gICAgICBjbGlwRXh0ZW50ID0gbS5jbGlwRXh0ZW50LFxuICAgICAgeDAgPSBudWxsLCB5MCwgeDEsIHkxOyAvLyBjbGlwIGV4dGVudFxuXG4gIG0uc2NhbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2NhbGUoXyksIHJlY2xpcCgpKSA6IHNjYWxlKCk7XG4gIH07XG5cbiAgbS50cmFuc2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodHJhbnNsYXRlKF8pLCByZWNsaXAoKSkgOiB0cmFuc2xhdGUoKTtcbiAgfTtcblxuICBtLmNlbnRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjZW50ZXIoXyksIHJlY2xpcCgpKSA6IGNlbnRlcigpO1xuICB9O1xuXG4gIG0uY2xpcEV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICgoXyA9PSBudWxsID8geDAgPSB5MCA9IHgxID0geTEgPSBudWxsIDogKHgwID0gK19bMF1bMF0sIHkwID0gK19bMF1bMV0sIHgxID0gK19bMV1bMF0sIHkxID0gK19bMV1bMV0pKSwgcmVjbGlwKCkpIDogeDAgPT0gbnVsbCA/IG51bGwgOiBbW3gwLCB5MF0sIFt4MSwgeTFdXTtcbiAgfTtcblxuICBmdW5jdGlvbiByZWNsaXAoKSB7XG4gICAgdmFyIGsgPSBwaSQzICogc2NhbGUoKSxcbiAgICAgICAgdCA9IG0ocm90YXRpb24obS5yb3RhdGUoKSkuaW52ZXJ0KFswLCAwXSkpO1xuICAgIHJldHVybiBjbGlwRXh0ZW50KHgwID09IG51bGxcbiAgICAgICAgPyBbW3RbMF0gLSBrLCB0WzFdIC0ga10sIFt0WzBdICsgaywgdFsxXSArIGtdXSA6IHByb2plY3QgPT09IG1lcmNhdG9yUmF3XG4gICAgICAgID8gW1tNYXRoLm1heCh0WzBdIC0gaywgeDApLCB5MF0sIFtNYXRoLm1pbih0WzBdICsgaywgeDEpLCB5MV1dXG4gICAgICAgIDogW1t4MCwgTWF0aC5tYXgodFsxXSAtIGssIHkwKV0sIFt4MSwgTWF0aC5taW4odFsxXSArIGssIHkxKV1dKTtcbiAgfVxuXG4gIHJldHVybiByZWNsaXAoKTtcbn1cblxuZnVuY3Rpb24gdGFueSh5KSB7XG4gIHJldHVybiB0YW4oKGhhbGZQaSQyICsgeSkgLyAyKTtcbn1cblxuZnVuY3Rpb24gY29uaWNDb25mb3JtYWxSYXcoeTAsIHkxKSB7XG4gIHZhciBjeTAgPSBjb3MkMSh5MCksXG4gICAgICBuID0geTAgPT09IHkxID8gc2luJDEoeTApIDogbG9nKGN5MCAvIGNvcyQxKHkxKSkgLyBsb2codGFueSh5MSkgLyB0YW55KHkwKSksXG4gICAgICBmID0gY3kwICogcG93KHRhbnkoeTApLCBuKSAvIG47XG5cbiAgaWYgKCFuKSByZXR1cm4gbWVyY2F0b3JSYXc7XG5cbiAgZnVuY3Rpb24gcHJvamVjdCh4LCB5KSB7XG4gICAgaWYgKGYgPiAwKSB7IGlmICh5IDwgLWhhbGZQaSQyICsgZXBzaWxvbiQyKSB5ID0gLWhhbGZQaSQyICsgZXBzaWxvbiQyOyB9XG4gICAgZWxzZSB7IGlmICh5ID4gaGFsZlBpJDIgLSBlcHNpbG9uJDIpIHkgPSBoYWxmUGkkMiAtIGVwc2lsb24kMjsgfVxuICAgIHZhciByID0gZiAvIHBvdyh0YW55KHkpLCBuKTtcbiAgICByZXR1cm4gW3IgKiBzaW4kMShuICogeCksIGYgLSByICogY29zJDEobiAqIHgpXTtcbiAgfVxuXG4gIHByb2plY3QuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciBmeSA9IGYgLSB5LCByID0gc2lnbihuKSAqIHNxcnQoeCAqIHggKyBmeSAqIGZ5KTtcbiAgICByZXR1cm4gW2F0YW4yKHgsIGFicyhmeSkpIC8gbiAqIHNpZ24oZnkpLCAyICogYXRhbihwb3coZiAvIHIsIDEgLyBuKSkgLSBoYWxmUGkkMl07XG4gIH07XG5cbiAgcmV0dXJuIHByb2plY3Q7XG59XG5cbmZ1bmN0aW9uIGNvbmljQ29uZm9ybWFsKCkge1xuICByZXR1cm4gY29uaWNQcm9qZWN0aW9uKGNvbmljQ29uZm9ybWFsUmF3KVxuICAgICAgLnNjYWxlKDEwOS41KVxuICAgICAgLnBhcmFsbGVscyhbMzAsIDMwXSk7XG59XG5cbmZ1bmN0aW9uIGVxdWlyZWN0YW5ndWxhclJhdyhsYW1iZGEsIHBoaSkge1xuICByZXR1cm4gW2xhbWJkYSwgcGhpXTtcbn1cblxuZXF1aXJlY3Rhbmd1bGFyUmF3LmludmVydCA9IGVxdWlyZWN0YW5ndWxhclJhdztcblxuZnVuY3Rpb24gZXF1aXJlY3Rhbmd1bGFyKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihlcXVpcmVjdGFuZ3VsYXJSYXcpXG4gICAgICAuc2NhbGUoMTUyLjYzKTtcbn1cblxuZnVuY3Rpb24gY29uaWNFcXVpZGlzdGFudFJhdyh5MCwgeTEpIHtcbiAgdmFyIGN5MCA9IGNvcyQxKHkwKSxcbiAgICAgIG4gPSB5MCA9PT0geTEgPyBzaW4kMSh5MCkgOiAoY3kwIC0gY29zJDEoeTEpKSAvICh5MSAtIHkwKSxcbiAgICAgIGcgPSBjeTAgLyBuICsgeTA7XG5cbiAgaWYgKGFicyhuKSA8IGVwc2lsb24kMikgcmV0dXJuIGVxdWlyZWN0YW5ndWxhclJhdztcblxuICBmdW5jdGlvbiBwcm9qZWN0KHgsIHkpIHtcbiAgICB2YXIgZ3kgPSBnIC0geSwgbnggPSBuICogeDtcbiAgICByZXR1cm4gW2d5ICogc2luJDEobngpLCBnIC0gZ3kgKiBjb3MkMShueCldO1xuICB9XG5cbiAgcHJvamVjdC5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgdmFyIGd5ID0gZyAtIHk7XG4gICAgcmV0dXJuIFthdGFuMih4LCBhYnMoZ3kpKSAvIG4gKiBzaWduKGd5KSwgZyAtIHNpZ24obikgKiBzcXJ0KHggKiB4ICsgZ3kgKiBneSldO1xuICB9O1xuXG4gIHJldHVybiBwcm9qZWN0O1xufVxuXG5mdW5jdGlvbiBjb25pY0VxdWlkaXN0YW50KCkge1xuICByZXR1cm4gY29uaWNQcm9qZWN0aW9uKGNvbmljRXF1aWRpc3RhbnRSYXcpXG4gICAgICAuc2NhbGUoMTMxLjE1NClcbiAgICAgIC5jZW50ZXIoWzAsIDEzLjkzODldKTtcbn1cblxudmFyIEExID0gMS4zNDAyNjQsXG4gICAgQTIgPSAtMC4wODExMDYsXG4gICAgQTMgPSAwLjAwMDg5MyxcbiAgICBBNCA9IDAuMDAzNzk2LFxuICAgIE0gPSBzcXJ0KDMpIC8gMixcbiAgICBpdGVyYXRpb25zID0gMTI7XG5cbmZ1bmN0aW9uIGVxdWFsRWFydGhSYXcobGFtYmRhLCBwaGkpIHtcbiAgdmFyIGwgPSBhc2luKE0gKiBzaW4kMShwaGkpKSwgbDIgPSBsICogbCwgbDYgPSBsMiAqIGwyICogbDI7XG4gIHJldHVybiBbXG4gICAgbGFtYmRhICogY29zJDEobCkgLyAoTSAqIChBMSArIDMgKiBBMiAqIGwyICsgbDYgKiAoNyAqIEEzICsgOSAqIEE0ICogbDIpKSksXG4gICAgbCAqIChBMSArIEEyICogbDIgKyBsNiAqIChBMyArIEE0ICogbDIpKVxuICBdO1xufVxuXG5lcXVhbEVhcnRoUmF3LmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgdmFyIGwgPSB5LCBsMiA9IGwgKiBsLCBsNiA9IGwyICogbDIgKiBsMjtcbiAgZm9yICh2YXIgaSA9IDAsIGRlbHRhLCBmeSwgZnB5OyBpIDwgaXRlcmF0aW9uczsgKytpKSB7XG4gICAgZnkgPSBsICogKEExICsgQTIgKiBsMiArIGw2ICogKEEzICsgQTQgKiBsMikpIC0geTtcbiAgICBmcHkgPSBBMSArIDMgKiBBMiAqIGwyICsgbDYgKiAoNyAqIEEzICsgOSAqIEE0ICogbDIpO1xuICAgIGwgLT0gZGVsdGEgPSBmeSAvIGZweSwgbDIgPSBsICogbCwgbDYgPSBsMiAqIGwyICogbDI7XG4gICAgaWYgKGFicyhkZWx0YSkgPCBlcHNpbG9uMiQxKSBicmVhaztcbiAgfVxuICByZXR1cm4gW1xuICAgIE0gKiB4ICogKEExICsgMyAqIEEyICogbDIgKyBsNiAqICg3ICogQTMgKyA5ICogQTQgKiBsMikpIC8gY29zJDEobCksXG4gICAgYXNpbihzaW4kMShsKSAvIE0pXG4gIF07XG59O1xuXG5mdW5jdGlvbiBlcXVhbEVhcnRoKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihlcXVhbEVhcnRoUmF3KVxuICAgICAgLnNjYWxlKDE3Ny4xNTgpO1xufVxuXG5mdW5jdGlvbiBnbm9tb25pY1Jhdyh4LCB5KSB7XG4gIHZhciBjeSA9IGNvcyQxKHkpLCBrID0gY29zJDEoeCkgKiBjeTtcbiAgcmV0dXJuIFtjeSAqIHNpbiQxKHgpIC8gaywgc2luJDEoeSkgLyBrXTtcbn1cblxuZ25vbW9uaWNSYXcuaW52ZXJ0ID0gYXppbXV0aGFsSW52ZXJ0KGF0YW4pO1xuXG5mdW5jdGlvbiBnbm9tb25pYygpIHtcbiAgcmV0dXJuIHByb2plY3Rpb24oZ25vbW9uaWNSYXcpXG4gICAgICAuc2NhbGUoMTQ0LjA0OSlcbiAgICAgIC5jbGlwQW5nbGUoNjApO1xufVxuXG5mdW5jdGlvbiBzY2FsZVRyYW5zbGF0ZSQxKGt4LCBreSwgdHgsIHR5KSB7XG4gIHJldHVybiBreCA9PT0gMSAmJiBreSA9PT0gMSAmJiB0eCA9PT0gMCAmJiB0eSA9PT0gMCA/IGlkZW50aXR5JDQgOiB0cmFuc2Zvcm1lcih7XG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHRoaXMuc3RyZWFtLnBvaW50KHggKiBreCArIHR4LCB5ICoga3kgKyB0eSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gaWRlbnRpdHkkNSgpIHtcbiAgdmFyIGsgPSAxLCB0eCA9IDAsIHR5ID0gMCwgc3ggPSAxLCBzeSA9IDEsIHRyYW5zZm9ybSQkMSA9IGlkZW50aXR5JDQsIC8vIHNjYWxlLCB0cmFuc2xhdGUgYW5kIHJlZmxlY3RcbiAgICAgIHgwID0gbnVsbCwgeTAsIHgxLCB5MSwgLy8gY2xpcCBleHRlbnRcbiAgICAgIHBvc3RjbGlwID0gaWRlbnRpdHkkNCxcbiAgICAgIGNhY2hlLFxuICAgICAgY2FjaGVTdHJlYW0sXG4gICAgICBwcm9qZWN0aW9uO1xuXG4gIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIGNhY2hlID0gY2FjaGVTdHJlYW0gPSBudWxsO1xuICAgIHJldHVybiBwcm9qZWN0aW9uO1xuICB9XG5cbiAgcmV0dXJuIHByb2plY3Rpb24gPSB7XG4gICAgc3RyZWFtOiBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICAgIHJldHVybiBjYWNoZSAmJiBjYWNoZVN0cmVhbSA9PT0gc3RyZWFtID8gY2FjaGUgOiBjYWNoZSA9IHRyYW5zZm9ybSQkMShwb3N0Y2xpcChjYWNoZVN0cmVhbSA9IHN0cmVhbSkpO1xuICAgIH0sXG4gICAgcG9zdGNsaXA6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBvc3RjbGlwID0gXywgeDAgPSB5MCA9IHgxID0geTEgPSBudWxsLCByZXNldCgpKSA6IHBvc3RjbGlwO1xuICAgIH0sXG4gICAgY2xpcEV4dGVudDogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocG9zdGNsaXAgPSBfID09IG51bGwgPyAoeDAgPSB5MCA9IHgxID0geTEgPSBudWxsLCBpZGVudGl0eSQ0KSA6IGNsaXBSZWN0YW5nbGUoeDAgPSArX1swXVswXSwgeTAgPSArX1swXVsxXSwgeDEgPSArX1sxXVswXSwgeTEgPSArX1sxXVsxXSksIHJlc2V0KCkpIDogeDAgPT0gbnVsbCA/IG51bGwgOiBbW3gwLCB5MF0sIFt4MSwgeTFdXTtcbiAgICB9LFxuICAgIHNjYWxlOiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0cmFuc2Zvcm0kJDEgPSBzY2FsZVRyYW5zbGF0ZSQxKChrID0gK18pICogc3gsIGsgKiBzeSwgdHgsIHR5KSwgcmVzZXQoKSkgOiBrO1xuICAgIH0sXG4gICAgdHJhbnNsYXRlOiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0cmFuc2Zvcm0kJDEgPSBzY2FsZVRyYW5zbGF0ZSQxKGsgKiBzeCwgayAqIHN5LCB0eCA9ICtfWzBdLCB0eSA9ICtfWzFdKSwgcmVzZXQoKSkgOiBbdHgsIHR5XTtcbiAgICB9LFxuICAgIHJlZmxlY3RYOiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0cmFuc2Zvcm0kJDEgPSBzY2FsZVRyYW5zbGF0ZSQxKGsgKiAoc3ggPSBfID8gLTEgOiAxKSwgayAqIHN5LCB0eCwgdHkpLCByZXNldCgpKSA6IHN4IDwgMDtcbiAgICB9LFxuICAgIHJlZmxlY3RZOiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0cmFuc2Zvcm0kJDEgPSBzY2FsZVRyYW5zbGF0ZSQxKGsgKiBzeCwgayAqIChzeSA9IF8gPyAtMSA6IDEpLCB0eCwgdHkpLCByZXNldCgpKSA6IHN5IDwgMDtcbiAgICB9LFxuICAgIGZpdEV4dGVudDogZnVuY3Rpb24oZXh0ZW50LCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBmaXRFeHRlbnQocHJvamVjdGlvbiwgZXh0ZW50LCBvYmplY3QpO1xuICAgIH0sXG4gICAgZml0U2l6ZTogZnVuY3Rpb24oc2l6ZSwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gZml0U2l6ZShwcm9qZWN0aW9uLCBzaXplLCBvYmplY3QpO1xuICAgIH0sXG4gICAgZml0V2lkdGg6IGZ1bmN0aW9uKHdpZHRoLCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBmaXRXaWR0aChwcm9qZWN0aW9uLCB3aWR0aCwgb2JqZWN0KTtcbiAgICB9LFxuICAgIGZpdEhlaWdodDogZnVuY3Rpb24oaGVpZ2h0LCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBmaXRIZWlnaHQocHJvamVjdGlvbiwgaGVpZ2h0LCBvYmplY3QpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gbmF0dXJhbEVhcnRoMVJhdyhsYW1iZGEsIHBoaSkge1xuICB2YXIgcGhpMiA9IHBoaSAqIHBoaSwgcGhpNCA9IHBoaTIgKiBwaGkyO1xuICByZXR1cm4gW1xuICAgIGxhbWJkYSAqICgwLjg3MDcgLSAwLjEzMTk3OSAqIHBoaTIgKyBwaGk0ICogKC0wLjAxMzc5MSArIHBoaTQgKiAoMC4wMDM5NzEgKiBwaGkyIC0gMC4wMDE1MjkgKiBwaGk0KSkpLFxuICAgIHBoaSAqICgxLjAwNzIyNiArIHBoaTIgKiAoMC4wMTUwODUgKyBwaGk0ICogKC0wLjA0NDQ3NSArIDAuMDI4ODc0ICogcGhpMiAtIDAuMDA1OTE2ICogcGhpNCkpKVxuICBdO1xufVxuXG5uYXR1cmFsRWFydGgxUmF3LmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgdmFyIHBoaSA9IHksIGkgPSAyNSwgZGVsdGE7XG4gIGRvIHtcbiAgICB2YXIgcGhpMiA9IHBoaSAqIHBoaSwgcGhpNCA9IHBoaTIgKiBwaGkyO1xuICAgIHBoaSAtPSBkZWx0YSA9IChwaGkgKiAoMS4wMDcyMjYgKyBwaGkyICogKDAuMDE1MDg1ICsgcGhpNCAqICgtMC4wNDQ0NzUgKyAwLjAyODg3NCAqIHBoaTIgLSAwLjAwNTkxNiAqIHBoaTQpKSkgLSB5KSAvXG4gICAgICAgICgxLjAwNzIyNiArIHBoaTIgKiAoMC4wMTUwODUgKiAzICsgcGhpNCAqICgtMC4wNDQ0NzUgKiA3ICsgMC4wMjg4NzQgKiA5ICogcGhpMiAtIDAuMDA1OTE2ICogMTEgKiBwaGk0KSkpO1xuICB9IHdoaWxlIChhYnMoZGVsdGEpID4gZXBzaWxvbiQyICYmIC0taSA+IDApO1xuICByZXR1cm4gW1xuICAgIHggLyAoMC44NzA3ICsgKHBoaTIgPSBwaGkgKiBwaGkpICogKC0wLjEzMTk3OSArIHBoaTIgKiAoLTAuMDEzNzkxICsgcGhpMiAqIHBoaTIgKiBwaGkyICogKDAuMDAzOTcxIC0gMC4wMDE1MjkgKiBwaGkyKSkpKSxcbiAgICBwaGlcbiAgXTtcbn07XG5cbmZ1bmN0aW9uIG5hdHVyYWxFYXJ0aDEoKSB7XG4gIHJldHVybiBwcm9qZWN0aW9uKG5hdHVyYWxFYXJ0aDFSYXcpXG4gICAgICAuc2NhbGUoMTc1LjI5NSk7XG59XG5cbmZ1bmN0aW9uIG9ydGhvZ3JhcGhpY1Jhdyh4LCB5KSB7XG4gIHJldHVybiBbY29zJDEoeSkgKiBzaW4kMSh4KSwgc2luJDEoeSldO1xufVxuXG5vcnRob2dyYXBoaWNSYXcuaW52ZXJ0ID0gYXppbXV0aGFsSW52ZXJ0KGFzaW4pO1xuXG5mdW5jdGlvbiBvcnRob2dyYXBoaWMoKSB7XG4gIHJldHVybiBwcm9qZWN0aW9uKG9ydGhvZ3JhcGhpY1JhdylcbiAgICAgIC5zY2FsZSgyNDkuNSlcbiAgICAgIC5jbGlwQW5nbGUoOTAgKyBlcHNpbG9uJDIpO1xufVxuXG5mdW5jdGlvbiBzdGVyZW9ncmFwaGljUmF3KHgsIHkpIHtcbiAgdmFyIGN5ID0gY29zJDEoeSksIGsgPSAxICsgY29zJDEoeCkgKiBjeTtcbiAgcmV0dXJuIFtjeSAqIHNpbiQxKHgpIC8gaywgc2luJDEoeSkgLyBrXTtcbn1cblxuc3RlcmVvZ3JhcGhpY1Jhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoZnVuY3Rpb24oeikge1xuICByZXR1cm4gMiAqIGF0YW4oeik7XG59KTtcblxuZnVuY3Rpb24gc3RlcmVvZ3JhcGhpYygpIHtcbiAgcmV0dXJuIHByb2plY3Rpb24oc3RlcmVvZ3JhcGhpY1JhdylcbiAgICAgIC5zY2FsZSgyNTApXG4gICAgICAuY2xpcEFuZ2xlKDE0Mik7XG59XG5cbmZ1bmN0aW9uIHRyYW5zdmVyc2VNZXJjYXRvclJhdyhsYW1iZGEsIHBoaSkge1xuICByZXR1cm4gW2xvZyh0YW4oKGhhbGZQaSQyICsgcGhpKSAvIDIpKSwgLWxhbWJkYV07XG59XG5cbnRyYW5zdmVyc2VNZXJjYXRvclJhdy5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gIHJldHVybiBbLXksIDIgKiBhdGFuKGV4cCh4KSkgLSBoYWxmUGkkMl07XG59O1xuXG5mdW5jdGlvbiB0cmFuc3ZlcnNlTWVyY2F0b3IoKSB7XG4gIHZhciBtID0gbWVyY2F0b3JQcm9qZWN0aW9uKHRyYW5zdmVyc2VNZXJjYXRvclJhdyksXG4gICAgICBjZW50ZXIgPSBtLmNlbnRlcixcbiAgICAgIHJvdGF0ZSA9IG0ucm90YXRlO1xuXG4gIG0uY2VudGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gY2VudGVyKFstX1sxXSwgX1swXV0pIDogKF8gPSBjZW50ZXIoKSwgW19bMV0sIC1fWzBdXSk7XG4gIH07XG5cbiAgbS5yb3RhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyByb3RhdGUoW19bMF0sIF9bMV0sIF8ubGVuZ3RoID4gMiA/IF9bMl0gKyA5MCA6IDkwXSkgOiAoXyA9IHJvdGF0ZSgpLCBbX1swXSwgX1sxXSwgX1syXSAtIDkwXSk7XG4gIH07XG5cbiAgcmV0dXJuIHJvdGF0ZShbMCwgMCwgOTBdKVxuICAgICAgLnNjYWxlKDE1OS4xNTUpO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0U2VwYXJhdGlvbihhLCBiKSB7XG4gIHJldHVybiBhLnBhcmVudCA9PT0gYi5wYXJlbnQgPyAxIDogMjtcbn1cblxuZnVuY3Rpb24gbWVhblgoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIGNoaWxkcmVuLnJlZHVjZShtZWFuWFJlZHVjZSwgMCkgLyBjaGlsZHJlbi5sZW5ndGg7XG59XG5cbmZ1bmN0aW9uIG1lYW5YUmVkdWNlKHgsIGMpIHtcbiAgcmV0dXJuIHggKyBjLng7XG59XG5cbmZ1bmN0aW9uIG1heFkoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIDEgKyBjaGlsZHJlbi5yZWR1Y2UobWF4WVJlZHVjZSwgMCk7XG59XG5cbmZ1bmN0aW9uIG1heFlSZWR1Y2UoeSwgYykge1xuICByZXR1cm4gTWF0aC5tYXgoeSwgYy55KTtcbn1cblxuZnVuY3Rpb24gbGVhZkxlZnQobm9kZSkge1xuICB2YXIgY2hpbGRyZW47XG4gIHdoaWxlIChjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4pIG5vZGUgPSBjaGlsZHJlblswXTtcbiAgcmV0dXJuIG5vZGU7XG59XG5cbmZ1bmN0aW9uIGxlYWZSaWdodChub2RlKSB7XG4gIHZhciBjaGlsZHJlbjtcbiAgd2hpbGUgKGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbikgbm9kZSA9IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdO1xuICByZXR1cm4gbm9kZTtcbn1cblxuZnVuY3Rpb24gY2x1c3RlcigpIHtcbiAgdmFyIHNlcGFyYXRpb24gPSBkZWZhdWx0U2VwYXJhdGlvbixcbiAgICAgIGR4ID0gMSxcbiAgICAgIGR5ID0gMSxcbiAgICAgIG5vZGVTaXplID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gY2x1c3Rlcihyb290KSB7XG4gICAgdmFyIHByZXZpb3VzTm9kZSxcbiAgICAgICAgeCA9IDA7XG5cbiAgICAvLyBGaXJzdCB3YWxrLCBjb21wdXRpbmcgdGhlIGluaXRpYWwgeCAmIHkgdmFsdWVzLlxuICAgIHJvb3QuZWFjaEFmdGVyKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgICAgbm9kZS54ID0gbWVhblgoY2hpbGRyZW4pO1xuICAgICAgICBub2RlLnkgPSBtYXhZKGNoaWxkcmVuKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUueCA9IHByZXZpb3VzTm9kZSA/IHggKz0gc2VwYXJhdGlvbihub2RlLCBwcmV2aW91c05vZGUpIDogMDtcbiAgICAgICAgbm9kZS55ID0gMDtcbiAgICAgICAgcHJldmlvdXNOb2RlID0gbm9kZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciBsZWZ0ID0gbGVhZkxlZnQocm9vdCksXG4gICAgICAgIHJpZ2h0ID0gbGVhZlJpZ2h0KHJvb3QpLFxuICAgICAgICB4MCA9IGxlZnQueCAtIHNlcGFyYXRpb24obGVmdCwgcmlnaHQpIC8gMixcbiAgICAgICAgeDEgPSByaWdodC54ICsgc2VwYXJhdGlvbihyaWdodCwgbGVmdCkgLyAyO1xuXG4gICAgLy8gU2Vjb25kIHdhbGssIG5vcm1hbGl6aW5nIHggJiB5IHRvIHRoZSBkZXNpcmVkIHNpemUuXG4gICAgcmV0dXJuIHJvb3QuZWFjaEFmdGVyKG5vZGVTaXplID8gZnVuY3Rpb24obm9kZSkge1xuICAgICAgbm9kZS54ID0gKG5vZGUueCAtIHJvb3QueCkgKiBkeDtcbiAgICAgIG5vZGUueSA9IChyb290LnkgLSBub2RlLnkpICogZHk7XG4gICAgfSA6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIG5vZGUueCA9IChub2RlLnggLSB4MCkgLyAoeDEgLSB4MCkgKiBkeDtcbiAgICAgIG5vZGUueSA9ICgxIC0gKHJvb3QueSA/IG5vZGUueSAvIHJvb3QueSA6IDEpKSAqIGR5O1xuICAgIH0pO1xuICB9XG5cbiAgY2x1c3Rlci5zZXBhcmF0aW9uID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNlcGFyYXRpb24gPSB4LCBjbHVzdGVyKSA6IHNlcGFyYXRpb247XG4gIH07XG5cbiAgY2x1c3Rlci5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG5vZGVTaXplID0gZmFsc2UsIGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIGNsdXN0ZXIpIDogKG5vZGVTaXplID8gbnVsbCA6IFtkeCwgZHldKTtcbiAgfTtcblxuICBjbHVzdGVyLm5vZGVTaXplID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG5vZGVTaXplID0gdHJ1ZSwgZHggPSAreFswXSwgZHkgPSAreFsxXSwgY2x1c3RlcikgOiAobm9kZVNpemUgPyBbZHgsIGR5XSA6IG51bGwpO1xuICB9O1xuXG4gIHJldHVybiBjbHVzdGVyO1xufVxuXG5mdW5jdGlvbiBjb3VudChub2RlKSB7XG4gIHZhciBzdW0gPSAwLFxuICAgICAgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuLFxuICAgICAgaSA9IGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aDtcbiAgaWYgKCFpKSBzdW0gPSAxO1xuICBlbHNlIHdoaWxlICgtLWkgPj0gMCkgc3VtICs9IGNoaWxkcmVuW2ldLnZhbHVlO1xuICBub2RlLnZhbHVlID0gc3VtO1xufVxuXG5mdW5jdGlvbiBub2RlX2NvdW50KCkge1xuICByZXR1cm4gdGhpcy5lYWNoQWZ0ZXIoY291bnQpO1xufVxuXG5mdW5jdGlvbiBub2RlX2VhY2goY2FsbGJhY2spIHtcbiAgdmFyIG5vZGUgPSB0aGlzLCBjdXJyZW50LCBuZXh0ID0gW25vZGVdLCBjaGlsZHJlbiwgaSwgbjtcbiAgZG8ge1xuICAgIGN1cnJlbnQgPSBuZXh0LnJldmVyc2UoKSwgbmV4dCA9IFtdO1xuICAgIHdoaWxlIChub2RlID0gY3VycmVudC5wb3AoKSkge1xuICAgICAgY2FsbGJhY2sobm9kZSksIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgIGlmIChjaGlsZHJlbikgZm9yIChpID0gMCwgbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBuZXh0LnB1c2goY2hpbGRyZW5baV0pO1xuICAgICAgfVxuICAgIH1cbiAgfSB3aGlsZSAobmV4dC5sZW5ndGgpO1xuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gbm9kZV9lYWNoQmVmb3JlKGNhbGxiYWNrKSB7XG4gIHZhciBub2RlID0gdGhpcywgbm9kZXMgPSBbbm9kZV0sIGNoaWxkcmVuLCBpO1xuICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgY2FsbGJhY2sobm9kZSksIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICBpZiAoY2hpbGRyZW4pIGZvciAoaSA9IGNoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICBub2Rlcy5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIG5vZGVfZWFjaEFmdGVyKGNhbGxiYWNrKSB7XG4gIHZhciBub2RlID0gdGhpcywgbm9kZXMgPSBbbm9kZV0sIG5leHQgPSBbXSwgY2hpbGRyZW4sIGksIG47XG4gIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICBuZXh0LnB1c2gobm9kZSksIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICBpZiAoY2hpbGRyZW4pIGZvciAoaSA9IDAsIG4gPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIG5vZGVzLnB1c2goY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgfVxuICB3aGlsZSAobm9kZSA9IG5leHQucG9wKCkpIHtcbiAgICBjYWxsYmFjayhub2RlKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gbm9kZV9zdW0odmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaEFmdGVyKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICB2YXIgc3VtID0gK3ZhbHVlKG5vZGUuZGF0YSkgfHwgMCxcbiAgICAgICAgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuLFxuICAgICAgICBpID0gY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoO1xuICAgIHdoaWxlICgtLWkgPj0gMCkgc3VtICs9IGNoaWxkcmVuW2ldLnZhbHVlO1xuICAgIG5vZGUudmFsdWUgPSBzdW07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBub2RlX3NvcnQoY29tcGFyZSkge1xuICByZXR1cm4gdGhpcy5lYWNoQmVmb3JlKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgbm9kZS5jaGlsZHJlbi5zb3J0KGNvbXBhcmUpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG5vZGVfcGF0aChlbmQpIHtcbiAgdmFyIHN0YXJ0ID0gdGhpcyxcbiAgICAgIGFuY2VzdG9yID0gbGVhc3RDb21tb25BbmNlc3RvcihzdGFydCwgZW5kKSxcbiAgICAgIG5vZGVzID0gW3N0YXJ0XTtcbiAgd2hpbGUgKHN0YXJ0ICE9PSBhbmNlc3Rvcikge1xuICAgIHN0YXJ0ID0gc3RhcnQucGFyZW50O1xuICAgIG5vZGVzLnB1c2goc3RhcnQpO1xuICB9XG4gIHZhciBrID0gbm9kZXMubGVuZ3RoO1xuICB3aGlsZSAoZW5kICE9PSBhbmNlc3Rvcikge1xuICAgIG5vZGVzLnNwbGljZShrLCAwLCBlbmQpO1xuICAgIGVuZCA9IGVuZC5wYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIG5vZGVzO1xufVxuXG5mdW5jdGlvbiBsZWFzdENvbW1vbkFuY2VzdG9yKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHJldHVybiBhO1xuICB2YXIgYU5vZGVzID0gYS5hbmNlc3RvcnMoKSxcbiAgICAgIGJOb2RlcyA9IGIuYW5jZXN0b3JzKCksXG4gICAgICBjID0gbnVsbDtcbiAgYSA9IGFOb2Rlcy5wb3AoKTtcbiAgYiA9IGJOb2Rlcy5wb3AoKTtcbiAgd2hpbGUgKGEgPT09IGIpIHtcbiAgICBjID0gYTtcbiAgICBhID0gYU5vZGVzLnBvcCgpO1xuICAgIGIgPSBiTm9kZXMucG9wKCk7XG4gIH1cbiAgcmV0dXJuIGM7XG59XG5cbmZ1bmN0aW9uIG5vZGVfYW5jZXN0b3JzKCkge1xuICB2YXIgbm9kZSA9IHRoaXMsIG5vZGVzID0gW25vZGVdO1xuICB3aGlsZSAobm9kZSA9IG5vZGUucGFyZW50KSB7XG4gICAgbm9kZXMucHVzaChub2RlKTtcbiAgfVxuICByZXR1cm4gbm9kZXM7XG59XG5cbmZ1bmN0aW9uIG5vZGVfZGVzY2VuZGFudHMoKSB7XG4gIHZhciBub2RlcyA9IFtdO1xuICB0aGlzLmVhY2goZnVuY3Rpb24obm9kZSkge1xuICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gIH0pO1xuICByZXR1cm4gbm9kZXM7XG59XG5cbmZ1bmN0aW9uIG5vZGVfbGVhdmVzKCkge1xuICB2YXIgbGVhdmVzID0gW107XG4gIHRoaXMuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKCFub2RlLmNoaWxkcmVuKSB7XG4gICAgICBsZWF2ZXMucHVzaChub2RlKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbGVhdmVzO1xufVxuXG5mdW5jdGlvbiBub2RlX2xpbmtzKCkge1xuICB2YXIgcm9vdCA9IHRoaXMsIGxpbmtzID0gW107XG4gIHJvb3QuZWFjaChmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUgIT09IHJvb3QpIHsgLy8gRG9u4oCZdCBpbmNsdWRlIHRoZSByb2904oCZcyBwYXJlbnQsIGlmIGFueS5cbiAgICAgIGxpbmtzLnB1c2goe3NvdXJjZTogbm9kZS5wYXJlbnQsIHRhcmdldDogbm9kZX0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBsaW5rcztcbn1cblxuZnVuY3Rpb24gaGllcmFyY2h5KGRhdGEsIGNoaWxkcmVuKSB7XG4gIHZhciByb290ID0gbmV3IE5vZGUoZGF0YSksXG4gICAgICB2YWx1ZWQgPSArZGF0YS52YWx1ZSAmJiAocm9vdC52YWx1ZSA9IGRhdGEudmFsdWUpLFxuICAgICAgbm9kZSxcbiAgICAgIG5vZGVzID0gW3Jvb3RdLFxuICAgICAgY2hpbGQsXG4gICAgICBjaGlsZHMsXG4gICAgICBpLFxuICAgICAgbjtcblxuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkgY2hpbGRyZW4gPSBkZWZhdWx0Q2hpbGRyZW47XG5cbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIGlmICh2YWx1ZWQpIG5vZGUudmFsdWUgPSArbm9kZS5kYXRhLnZhbHVlO1xuICAgIGlmICgoY2hpbGRzID0gY2hpbGRyZW4obm9kZS5kYXRhKSkgJiYgKG4gPSBjaGlsZHMubGVuZ3RoKSkge1xuICAgICAgbm9kZS5jaGlsZHJlbiA9IG5ldyBBcnJheShuKTtcbiAgICAgIGZvciAoaSA9IG4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICBub2Rlcy5wdXNoKGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXSA9IG5ldyBOb2RlKGNoaWxkc1tpXSkpO1xuICAgICAgICBjaGlsZC5wYXJlbnQgPSBub2RlO1xuICAgICAgICBjaGlsZC5kZXB0aCA9IG5vZGUuZGVwdGggKyAxO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByb290LmVhY2hCZWZvcmUoY29tcHV0ZUhlaWdodCk7XG59XG5cbmZ1bmN0aW9uIG5vZGVfY29weSgpIHtcbiAgcmV0dXJuIGhpZXJhcmNoeSh0aGlzKS5lYWNoQmVmb3JlKGNvcHlEYXRhKTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdENoaWxkcmVuKGQpIHtcbiAgcmV0dXJuIGQuY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNvcHlEYXRhKG5vZGUpIHtcbiAgbm9kZS5kYXRhID0gbm9kZS5kYXRhLmRhdGE7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVIZWlnaHQobm9kZSkge1xuICB2YXIgaGVpZ2h0ID0gMDtcbiAgZG8gbm9kZS5oZWlnaHQgPSBoZWlnaHQ7XG4gIHdoaWxlICgobm9kZSA9IG5vZGUucGFyZW50KSAmJiAobm9kZS5oZWlnaHQgPCArK2hlaWdodCkpO1xufVxuXG5mdW5jdGlvbiBOb2RlKGRhdGEpIHtcbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5kZXB0aCA9XG4gIHRoaXMuaGVpZ2h0ID0gMDtcbiAgdGhpcy5wYXJlbnQgPSBudWxsO1xufVxuXG5Ob2RlLnByb3RvdHlwZSA9IGhpZXJhcmNoeS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBOb2RlLFxuICBjb3VudDogbm9kZV9jb3VudCxcbiAgZWFjaDogbm9kZV9lYWNoLFxuICBlYWNoQWZ0ZXI6IG5vZGVfZWFjaEFmdGVyLFxuICBlYWNoQmVmb3JlOiBub2RlX2VhY2hCZWZvcmUsXG4gIHN1bTogbm9kZV9zdW0sXG4gIHNvcnQ6IG5vZGVfc29ydCxcbiAgcGF0aDogbm9kZV9wYXRoLFxuICBhbmNlc3RvcnM6IG5vZGVfYW5jZXN0b3JzLFxuICBkZXNjZW5kYW50czogbm9kZV9kZXNjZW5kYW50cyxcbiAgbGVhdmVzOiBub2RlX2xlYXZlcyxcbiAgbGlua3M6IG5vZGVfbGlua3MsXG4gIGNvcHk6IG5vZGVfY29weVxufTtcblxudmFyIHNsaWNlJDQgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbmZ1bmN0aW9uIHNodWZmbGUkMShhcnJheSkge1xuICB2YXIgbSA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIHQsXG4gICAgICBpO1xuXG4gIHdoaWxlIChtKSB7XG4gICAgaSA9IE1hdGgucmFuZG9tKCkgKiBtLS0gfCAwO1xuICAgIHQgPSBhcnJheVttXTtcbiAgICBhcnJheVttXSA9IGFycmF5W2ldO1xuICAgIGFycmF5W2ldID0gdDtcbiAgfVxuXG4gIHJldHVybiBhcnJheTtcbn1cblxuZnVuY3Rpb24gZW5jbG9zZShjaXJjbGVzKSB7XG4gIHZhciBpID0gMCwgbiA9IChjaXJjbGVzID0gc2h1ZmZsZSQxKHNsaWNlJDQuY2FsbChjaXJjbGVzKSkpLmxlbmd0aCwgQiA9IFtdLCBwLCBlO1xuXG4gIHdoaWxlIChpIDwgbikge1xuICAgIHAgPSBjaXJjbGVzW2ldO1xuICAgIGlmIChlICYmIGVuY2xvc2VzV2VhayhlLCBwKSkgKytpO1xuICAgIGVsc2UgZSA9IGVuY2xvc2VCYXNpcyhCID0gZXh0ZW5kQmFzaXMoQiwgcCkpLCBpID0gMDtcbiAgfVxuXG4gIHJldHVybiBlO1xufVxuXG5mdW5jdGlvbiBleHRlbmRCYXNpcyhCLCBwKSB7XG4gIHZhciBpLCBqO1xuXG4gIGlmIChlbmNsb3Nlc1dlYWtBbGwocCwgQikpIHJldHVybiBbcF07XG5cbiAgLy8gSWYgd2UgZ2V0IGhlcmUgdGhlbiBCIG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgZWxlbWVudC5cbiAgZm9yIChpID0gMDsgaSA8IEIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoZW5jbG9zZXNOb3QocCwgQltpXSlcbiAgICAgICAgJiYgZW5jbG9zZXNXZWFrQWxsKGVuY2xvc2VCYXNpczIoQltpXSwgcCksIEIpKSB7XG4gICAgICByZXR1cm4gW0JbaV0sIHBdO1xuICAgIH1cbiAgfVxuXG4gIC8vIElmIHdlIGdldCBoZXJlIHRoZW4gQiBtdXN0IGhhdmUgYXQgbGVhc3QgdHdvIGVsZW1lbnRzLlxuICBmb3IgKGkgPSAwOyBpIDwgQi5sZW5ndGggLSAxOyArK2kpIHtcbiAgICBmb3IgKGogPSBpICsgMTsgaiA8IEIubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmIChlbmNsb3Nlc05vdChlbmNsb3NlQmFzaXMyKEJbaV0sIEJbal0pLCBwKVxuICAgICAgICAgICYmIGVuY2xvc2VzTm90KGVuY2xvc2VCYXNpczIoQltpXSwgcCksIEJbal0pXG4gICAgICAgICAgJiYgZW5jbG9zZXNOb3QoZW5jbG9zZUJhc2lzMihCW2pdLCBwKSwgQltpXSlcbiAgICAgICAgICAmJiBlbmNsb3Nlc1dlYWtBbGwoZW5jbG9zZUJhc2lzMyhCW2ldLCBCW2pdLCBwKSwgQikpIHtcbiAgICAgICAgcmV0dXJuIFtCW2ldLCBCW2pdLCBwXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBJZiB3ZSBnZXQgaGVyZSB0aGVuIHNvbWV0aGluZyBpcyB2ZXJ5IHdyb25nLlxuICB0aHJvdyBuZXcgRXJyb3I7XG59XG5cbmZ1bmN0aW9uIGVuY2xvc2VzTm90KGEsIGIpIHtcbiAgdmFyIGRyID0gYS5yIC0gYi5yLCBkeCA9IGIueCAtIGEueCwgZHkgPSBiLnkgLSBhLnk7XG4gIHJldHVybiBkciA8IDAgfHwgZHIgKiBkciA8IGR4ICogZHggKyBkeSAqIGR5O1xufVxuXG5mdW5jdGlvbiBlbmNsb3Nlc1dlYWsoYSwgYikge1xuICB2YXIgZHIgPSBhLnIgLSBiLnIgKyAxZS02LCBkeCA9IGIueCAtIGEueCwgZHkgPSBiLnkgLSBhLnk7XG4gIHJldHVybiBkciA+IDAgJiYgZHIgKiBkciA+IGR4ICogZHggKyBkeSAqIGR5O1xufVxuXG5mdW5jdGlvbiBlbmNsb3Nlc1dlYWtBbGwoYSwgQikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IEIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoIWVuY2xvc2VzV2VhayhhLCBCW2ldKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZW5jbG9zZUJhc2lzKEIpIHtcbiAgc3dpdGNoIChCLmxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGVuY2xvc2VCYXNpczEoQlswXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gZW5jbG9zZUJhc2lzMihCWzBdLCBCWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiBlbmNsb3NlQmFzaXMzKEJbMF0sIEJbMV0sIEJbMl0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVuY2xvc2VCYXNpczEoYSkge1xuICByZXR1cm4ge1xuICAgIHg6IGEueCxcbiAgICB5OiBhLnksXG4gICAgcjogYS5yXG4gIH07XG59XG5cbmZ1bmN0aW9uIGVuY2xvc2VCYXNpczIoYSwgYikge1xuICB2YXIgeDEgPSBhLngsIHkxID0gYS55LCByMSA9IGEucixcbiAgICAgIHgyID0gYi54LCB5MiA9IGIueSwgcjIgPSBiLnIsXG4gICAgICB4MjEgPSB4MiAtIHgxLCB5MjEgPSB5MiAtIHkxLCByMjEgPSByMiAtIHIxLFxuICAgICAgbCA9IE1hdGguc3FydCh4MjEgKiB4MjEgKyB5MjEgKiB5MjEpO1xuICByZXR1cm4ge1xuICAgIHg6ICh4MSArIHgyICsgeDIxIC8gbCAqIHIyMSkgLyAyLFxuICAgIHk6ICh5MSArIHkyICsgeTIxIC8gbCAqIHIyMSkgLyAyLFxuICAgIHI6IChsICsgcjEgKyByMikgLyAyXG4gIH07XG59XG5cbmZ1bmN0aW9uIGVuY2xvc2VCYXNpczMoYSwgYiwgYykge1xuICB2YXIgeDEgPSBhLngsIHkxID0gYS55LCByMSA9IGEucixcbiAgICAgIHgyID0gYi54LCB5MiA9IGIueSwgcjIgPSBiLnIsXG4gICAgICB4MyA9IGMueCwgeTMgPSBjLnksIHIzID0gYy5yLFxuICAgICAgYTIgPSB4MSAtIHgyLFxuICAgICAgYTMgPSB4MSAtIHgzLFxuICAgICAgYjIgPSB5MSAtIHkyLFxuICAgICAgYjMgPSB5MSAtIHkzLFxuICAgICAgYzIgPSByMiAtIHIxLFxuICAgICAgYzMgPSByMyAtIHIxLFxuICAgICAgZDEgPSB4MSAqIHgxICsgeTEgKiB5MSAtIHIxICogcjEsXG4gICAgICBkMiA9IGQxIC0geDIgKiB4MiAtIHkyICogeTIgKyByMiAqIHIyLFxuICAgICAgZDMgPSBkMSAtIHgzICogeDMgLSB5MyAqIHkzICsgcjMgKiByMyxcbiAgICAgIGFiID0gYTMgKiBiMiAtIGEyICogYjMsXG4gICAgICB4YSA9IChiMiAqIGQzIC0gYjMgKiBkMikgLyAoYWIgKiAyKSAtIHgxLFxuICAgICAgeGIgPSAoYjMgKiBjMiAtIGIyICogYzMpIC8gYWIsXG4gICAgICB5YSA9IChhMyAqIGQyIC0gYTIgKiBkMykgLyAoYWIgKiAyKSAtIHkxLFxuICAgICAgeWIgPSAoYTIgKiBjMyAtIGEzICogYzIpIC8gYWIsXG4gICAgICBBID0geGIgKiB4YiArIHliICogeWIgLSAxLFxuICAgICAgQiA9IDIgKiAocjEgKyB4YSAqIHhiICsgeWEgKiB5YiksXG4gICAgICBDID0geGEgKiB4YSArIHlhICogeWEgLSByMSAqIHIxLFxuICAgICAgciA9IC0oQSA/IChCICsgTWF0aC5zcXJ0KEIgKiBCIC0gNCAqIEEgKiBDKSkgLyAoMiAqIEEpIDogQyAvIEIpO1xuICByZXR1cm4ge1xuICAgIHg6IHgxICsgeGEgKyB4YiAqIHIsXG4gICAgeTogeTEgKyB5YSArIHliICogcixcbiAgICByOiByXG4gIH07XG59XG5cbmZ1bmN0aW9uIHBsYWNlKGIsIGEsIGMpIHtcbiAgdmFyIGR4ID0gYi54IC0gYS54LCB4LCBhMixcbiAgICAgIGR5ID0gYi55IC0gYS55LCB5LCBiMixcbiAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gIGlmIChkMikge1xuICAgIGEyID0gYS5yICsgYy5yLCBhMiAqPSBhMjtcbiAgICBiMiA9IGIuciArIGMuciwgYjIgKj0gYjI7XG4gICAgaWYgKGEyID4gYjIpIHtcbiAgICAgIHggPSAoZDIgKyBiMiAtIGEyKSAvICgyICogZDIpO1xuICAgICAgeSA9IE1hdGguc3FydChNYXRoLm1heCgwLCBiMiAvIGQyIC0geCAqIHgpKTtcbiAgICAgIGMueCA9IGIueCAtIHggKiBkeCAtIHkgKiBkeTtcbiAgICAgIGMueSA9IGIueSAtIHggKiBkeSArIHkgKiBkeDtcbiAgICB9IGVsc2Uge1xuICAgICAgeCA9IChkMiArIGEyIC0gYjIpIC8gKDIgKiBkMik7XG4gICAgICB5ID0gTWF0aC5zcXJ0KE1hdGgubWF4KDAsIGEyIC8gZDIgLSB4ICogeCkpO1xuICAgICAgYy54ID0gYS54ICsgeCAqIGR4IC0geSAqIGR5O1xuICAgICAgYy55ID0gYS55ICsgeCAqIGR5ICsgeSAqIGR4O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjLnggPSBhLnggKyBjLnI7XG4gICAgYy55ID0gYS55O1xuICB9XG59XG5cbmZ1bmN0aW9uIGludGVyc2VjdHMoYSwgYikge1xuICB2YXIgZHIgPSBhLnIgKyBiLnIgLSAxZS02LCBkeCA9IGIueCAtIGEueCwgZHkgPSBiLnkgLSBhLnk7XG4gIHJldHVybiBkciA+IDAgJiYgZHIgKiBkciA+IGR4ICogZHggKyBkeSAqIGR5O1xufVxuXG5mdW5jdGlvbiBzY29yZShub2RlKSB7XG4gIHZhciBhID0gbm9kZS5fLFxuICAgICAgYiA9IG5vZGUubmV4dC5fLFxuICAgICAgYWIgPSBhLnIgKyBiLnIsXG4gICAgICBkeCA9IChhLnggKiBiLnIgKyBiLnggKiBhLnIpIC8gYWIsXG4gICAgICBkeSA9IChhLnkgKiBiLnIgKyBiLnkgKiBhLnIpIC8gYWI7XG4gIHJldHVybiBkeCAqIGR4ICsgZHkgKiBkeTtcbn1cblxuZnVuY3Rpb24gTm9kZSQxKGNpcmNsZSkge1xuICB0aGlzLl8gPSBjaXJjbGU7XG4gIHRoaXMubmV4dCA9IG51bGw7XG4gIHRoaXMucHJldmlvdXMgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBwYWNrRW5jbG9zZShjaXJjbGVzKSB7XG4gIGlmICghKG4gPSBjaXJjbGVzLmxlbmd0aCkpIHJldHVybiAwO1xuXG4gIHZhciBhLCBiLCBjLCBuLCBhYSwgY2EsIGksIGosIGssIHNqLCBzaztcblxuICAvLyBQbGFjZSB0aGUgZmlyc3QgY2lyY2xlLlxuICBhID0gY2lyY2xlc1swXSwgYS54ID0gMCwgYS55ID0gMDtcbiAgaWYgKCEobiA+IDEpKSByZXR1cm4gYS5yO1xuXG4gIC8vIFBsYWNlIHRoZSBzZWNvbmQgY2lyY2xlLlxuICBiID0gY2lyY2xlc1sxXSwgYS54ID0gLWIuciwgYi54ID0gYS5yLCBiLnkgPSAwO1xuICBpZiAoIShuID4gMikpIHJldHVybiBhLnIgKyBiLnI7XG5cbiAgLy8gUGxhY2UgdGhlIHRoaXJkIGNpcmNsZS5cbiAgcGxhY2UoYiwgYSwgYyA9IGNpcmNsZXNbMl0pO1xuXG4gIC8vIEluaXRpYWxpemUgdGhlIGZyb250LWNoYWluIHVzaW5nIHRoZSBmaXJzdCB0aHJlZSBjaXJjbGVzIGEsIGIgYW5kIGMuXG4gIGEgPSBuZXcgTm9kZSQxKGEpLCBiID0gbmV3IE5vZGUkMShiKSwgYyA9IG5ldyBOb2RlJDEoYyk7XG4gIGEubmV4dCA9IGMucHJldmlvdXMgPSBiO1xuICBiLm5leHQgPSBhLnByZXZpb3VzID0gYztcbiAgYy5uZXh0ID0gYi5wcmV2aW91cyA9IGE7XG5cbiAgLy8gQXR0ZW1wdCB0byBwbGFjZSBlYWNoIHJlbWFpbmluZyBjaXJjbGXigKZcbiAgcGFjazogZm9yIChpID0gMzsgaSA8IG47ICsraSkge1xuICAgIHBsYWNlKGEuXywgYi5fLCBjID0gY2lyY2xlc1tpXSksIGMgPSBuZXcgTm9kZSQxKGMpO1xuXG4gICAgLy8gRmluZCB0aGUgY2xvc2VzdCBpbnRlcnNlY3RpbmcgY2lyY2xlIG9uIHRoZSBmcm9udC1jaGFpbiwgaWYgYW55LlxuICAgIC8vIOKAnENsb3NlbmVzc+KAnSBpcyBkZXRlcm1pbmVkIGJ5IGxpbmVhciBkaXN0YW5jZSBhbG9uZyB0aGUgZnJvbnQtY2hhaW4uXG4gICAgLy8g4oCcQWhlYWTigJ0gb3Ig4oCcYmVoaW5k4oCdIGlzIGxpa2V3aXNlIGRldGVybWluZWQgYnkgbGluZWFyIGRpc3RhbmNlLlxuICAgIGogPSBiLm5leHQsIGsgPSBhLnByZXZpb3VzLCBzaiA9IGIuXy5yLCBzayA9IGEuXy5yO1xuICAgIGRvIHtcbiAgICAgIGlmIChzaiA8PSBzaykge1xuICAgICAgICBpZiAoaW50ZXJzZWN0cyhqLl8sIGMuXykpIHtcbiAgICAgICAgICBiID0gaiwgYS5uZXh0ID0gYiwgYi5wcmV2aW91cyA9IGEsIC0taTtcbiAgICAgICAgICBjb250aW51ZSBwYWNrO1xuICAgICAgICB9XG4gICAgICAgIHNqICs9IGouXy5yLCBqID0gai5uZXh0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGludGVyc2VjdHMoay5fLCBjLl8pKSB7XG4gICAgICAgICAgYSA9IGssIGEubmV4dCA9IGIsIGIucHJldmlvdXMgPSBhLCAtLWk7XG4gICAgICAgICAgY29udGludWUgcGFjaztcbiAgICAgICAgfVxuICAgICAgICBzayArPSBrLl8uciwgayA9IGsucHJldmlvdXM7XG4gICAgICB9XG4gICAgfSB3aGlsZSAoaiAhPT0gay5uZXh0KTtcblxuICAgIC8vIFN1Y2Nlc3MhIEluc2VydCB0aGUgbmV3IGNpcmNsZSBjIGJldHdlZW4gYSBhbmQgYi5cbiAgICBjLnByZXZpb3VzID0gYSwgYy5uZXh0ID0gYiwgYS5uZXh0ID0gYi5wcmV2aW91cyA9IGIgPSBjO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgbmV3IGNsb3Nlc3QgY2lyY2xlIHBhaXIgdG8gdGhlIGNlbnRyb2lkLlxuICAgIGFhID0gc2NvcmUoYSk7XG4gICAgd2hpbGUgKChjID0gYy5uZXh0KSAhPT0gYikge1xuICAgICAgaWYgKChjYSA9IHNjb3JlKGMpKSA8IGFhKSB7XG4gICAgICAgIGEgPSBjLCBhYSA9IGNhO1xuICAgICAgfVxuICAgIH1cbiAgICBiID0gYS5uZXh0O1xuICB9XG5cbiAgLy8gQ29tcHV0ZSB0aGUgZW5jbG9zaW5nIGNpcmNsZSBvZiB0aGUgZnJvbnQgY2hhaW4uXG4gIGEgPSBbYi5fXSwgYyA9IGI7IHdoaWxlICgoYyA9IGMubmV4dCkgIT09IGIpIGEucHVzaChjLl8pOyBjID0gZW5jbG9zZShhKTtcblxuICAvLyBUcmFuc2xhdGUgdGhlIGNpcmNsZXMgdG8gcHV0IHRoZSBlbmNsb3NpbmcgY2lyY2xlIGFyb3VuZCB0aGUgb3JpZ2luLlxuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBhID0gY2lyY2xlc1tpXSwgYS54IC09IGMueCwgYS55IC09IGMueTtcblxuICByZXR1cm4gYy5yO1xufVxuXG5mdW5jdGlvbiBzaWJsaW5ncyhjaXJjbGVzKSB7XG4gIHBhY2tFbmNsb3NlKGNpcmNsZXMpO1xuICByZXR1cm4gY2lyY2xlcztcbn1cblxuZnVuY3Rpb24gb3B0aW9uYWwoZikge1xuICByZXR1cm4gZiA9PSBudWxsID8gbnVsbCA6IHJlcXVpcmVkKGYpO1xufVxuXG5mdW5jdGlvbiByZXF1aXJlZChmKSB7XG4gIGlmICh0eXBlb2YgZiAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiBmO1xufVxuXG5mdW5jdGlvbiBjb25zdGFudFplcm8oKSB7XG4gIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBjb25zdGFudCQ5KHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0UmFkaXVzJDEoZCkge1xuICByZXR1cm4gTWF0aC5zcXJ0KGQudmFsdWUpO1xufVxuXG5mdW5jdGlvbiBpbmRleCQyKCkge1xuICB2YXIgcmFkaXVzID0gbnVsbCxcbiAgICAgIGR4ID0gMSxcbiAgICAgIGR5ID0gMSxcbiAgICAgIHBhZGRpbmcgPSBjb25zdGFudFplcm87XG5cbiAgZnVuY3Rpb24gcGFjayhyb290KSB7XG4gICAgcm9vdC54ID0gZHggLyAyLCByb290LnkgPSBkeSAvIDI7XG4gICAgaWYgKHJhZGl1cykge1xuICAgICAgcm9vdC5lYWNoQmVmb3JlKHJhZGl1c0xlYWYocmFkaXVzKSlcbiAgICAgICAgICAuZWFjaEFmdGVyKHBhY2tDaGlsZHJlbihwYWRkaW5nLCAwLjUpKVxuICAgICAgICAgIC5lYWNoQmVmb3JlKHRyYW5zbGF0ZUNoaWxkKDEpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm9vdC5lYWNoQmVmb3JlKHJhZGl1c0xlYWYoZGVmYXVsdFJhZGl1cyQxKSlcbiAgICAgICAgICAuZWFjaEFmdGVyKHBhY2tDaGlsZHJlbihjb25zdGFudFplcm8sIDEpKVxuICAgICAgICAgIC5lYWNoQWZ0ZXIocGFja0NoaWxkcmVuKHBhZGRpbmcsIHJvb3QuciAvIE1hdGgubWluKGR4LCBkeSkpKVxuICAgICAgICAgIC5lYWNoQmVmb3JlKHRyYW5zbGF0ZUNoaWxkKE1hdGgubWluKGR4LCBkeSkgLyAoMiAqIHJvb3QucikpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJvb3Q7XG4gIH1cblxuICBwYWNrLnJhZGl1cyA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYWRpdXMgPSBvcHRpb25hbCh4KSwgcGFjaykgOiByYWRpdXM7XG4gIH07XG5cbiAgcGFjay5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIHBhY2spIDogW2R4LCBkeV07XG4gIH07XG5cbiAgcGFjay5wYWRkaW5nID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmcgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGNvbnN0YW50JDkoK3gpLCBwYWNrKSA6IHBhZGRpbmc7XG4gIH07XG5cbiAgcmV0dXJuIHBhY2s7XG59XG5cbmZ1bmN0aW9uIHJhZGl1c0xlYWYocmFkaXVzKSB7XG4gIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKCFub2RlLmNoaWxkcmVuKSB7XG4gICAgICBub2RlLnIgPSBNYXRoLm1heCgwLCArcmFkaXVzKG5vZGUpIHx8IDApO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFja0NoaWxkcmVuKHBhZGRpbmcsIGspIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAoY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuKSB7XG4gICAgICB2YXIgY2hpbGRyZW4sXG4gICAgICAgICAgaSxcbiAgICAgICAgICBuID0gY2hpbGRyZW4ubGVuZ3RoLFxuICAgICAgICAgIHIgPSBwYWRkaW5nKG5vZGUpICogayB8fCAwLFxuICAgICAgICAgIGU7XG5cbiAgICAgIGlmIChyKSBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBjaGlsZHJlbltpXS5yICs9IHI7XG4gICAgICBlID0gcGFja0VuY2xvc2UoY2hpbGRyZW4pO1xuICAgICAgaWYgKHIpIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIGNoaWxkcmVuW2ldLnIgLT0gcjtcbiAgICAgIG5vZGUuciA9IGUgKyByO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlQ2hpbGQoaykge1xuICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudDtcbiAgICBub2RlLnIgKj0gaztcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBub2RlLnggPSBwYXJlbnQueCArIGsgKiBub2RlLng7XG4gICAgICBub2RlLnkgPSBwYXJlbnQueSArIGsgKiBub2RlLnk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiByb3VuZE5vZGUobm9kZSkge1xuICBub2RlLngwID0gTWF0aC5yb3VuZChub2RlLngwKTtcbiAgbm9kZS55MCA9IE1hdGgucm91bmQobm9kZS55MCk7XG4gIG5vZGUueDEgPSBNYXRoLnJvdW5kKG5vZGUueDEpO1xuICBub2RlLnkxID0gTWF0aC5yb3VuZChub2RlLnkxKTtcbn1cblxuZnVuY3Rpb24gdHJlZW1hcERpY2UocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgbm9kZXMgPSBwYXJlbnQuY2hpbGRyZW4sXG4gICAgICBub2RlLFxuICAgICAgaSA9IC0xLFxuICAgICAgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgIGsgPSBwYXJlbnQudmFsdWUgJiYgKHgxIC0geDApIC8gcGFyZW50LnZhbHVlO1xuXG4gIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLnkwID0geTAsIG5vZGUueTEgPSB5MTtcbiAgICBub2RlLngwID0geDAsIG5vZGUueDEgPSB4MCArPSBub2RlLnZhbHVlICogaztcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJ0aXRpb24oKSB7XG4gIHZhciBkeCA9IDEsXG4gICAgICBkeSA9IDEsXG4gICAgICBwYWRkaW5nID0gMCxcbiAgICAgIHJvdW5kID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gcGFydGl0aW9uKHJvb3QpIHtcbiAgICB2YXIgbiA9IHJvb3QuaGVpZ2h0ICsgMTtcbiAgICByb290LngwID1cbiAgICByb290LnkwID0gcGFkZGluZztcbiAgICByb290LngxID0gZHg7XG4gICAgcm9vdC55MSA9IGR5IC8gbjtcbiAgICByb290LmVhY2hCZWZvcmUocG9zaXRpb25Ob2RlKGR5LCBuKSk7XG4gICAgaWYgKHJvdW5kKSByb290LmVhY2hCZWZvcmUocm91bmROb2RlKTtcbiAgICByZXR1cm4gcm9vdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvc2l0aW9uTm9kZShkeSwgbikge1xuICAgIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgICB0cmVlbWFwRGljZShub2RlLCBub2RlLngwLCBkeSAqIChub2RlLmRlcHRoICsgMSkgLyBuLCBub2RlLngxLCBkeSAqIChub2RlLmRlcHRoICsgMikgLyBuKTtcbiAgICAgIH1cbiAgICAgIHZhciB4MCA9IG5vZGUueDAsXG4gICAgICAgICAgeTAgPSBub2RlLnkwLFxuICAgICAgICAgIHgxID0gbm9kZS54MSAtIHBhZGRpbmcsXG4gICAgICAgICAgeTEgPSBub2RlLnkxIC0gcGFkZGluZztcbiAgICAgIGlmICh4MSA8IHgwKSB4MCA9IHgxID0gKHgwICsgeDEpIC8gMjtcbiAgICAgIGlmICh5MSA8IHkwKSB5MCA9IHkxID0gKHkwICsgeTEpIC8gMjtcbiAgICAgIG5vZGUueDAgPSB4MDtcbiAgICAgIG5vZGUueTAgPSB5MDtcbiAgICAgIG5vZGUueDEgPSB4MTtcbiAgICAgIG5vZGUueTEgPSB5MTtcbiAgICB9O1xuICB9XG5cbiAgcGFydGl0aW9uLnJvdW5kID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJvdW5kID0gISF4LCBwYXJ0aXRpb24pIDogcm91bmQ7XG4gIH07XG5cbiAgcGFydGl0aW9uLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZHggPSAreFswXSwgZHkgPSAreFsxXSwgcGFydGl0aW9uKSA6IFtkeCwgZHldO1xuICB9O1xuXG4gIHBhcnRpdGlvbi5wYWRkaW5nID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmcgPSAreCwgcGFydGl0aW9uKSA6IHBhZGRpbmc7XG4gIH07XG5cbiAgcmV0dXJuIHBhcnRpdGlvbjtcbn1cblxudmFyIGtleVByZWZpeCQxID0gXCIkXCIsIC8vIFByb3RlY3QgYWdhaW5zdCBrZXlzIGxpa2Ug4oCcX19wcm90b19f4oCdLlxuICAgIHByZXJvb3QgPSB7ZGVwdGg6IC0xfSxcbiAgICBhbWJpZ3VvdXMgPSB7fTtcblxuZnVuY3Rpb24gZGVmYXVsdElkKGQpIHtcbiAgcmV0dXJuIGQuaWQ7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQYXJlbnRJZChkKSB7XG4gIHJldHVybiBkLnBhcmVudElkO1xufVxuXG5mdW5jdGlvbiBzdHJhdGlmeSgpIHtcbiAgdmFyIGlkID0gZGVmYXVsdElkLFxuICAgICAgcGFyZW50SWQgPSBkZWZhdWx0UGFyZW50SWQ7XG5cbiAgZnVuY3Rpb24gc3RyYXRpZnkoZGF0YSkge1xuICAgIHZhciBkLFxuICAgICAgICBpLFxuICAgICAgICBuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIHJvb3QsXG4gICAgICAgIHBhcmVudCxcbiAgICAgICAgbm9kZSxcbiAgICAgICAgbm9kZXMgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIG5vZGVJZCxcbiAgICAgICAgbm9kZUtleSxcbiAgICAgICAgbm9kZUJ5S2V5ID0ge307XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBkID0gZGF0YVtpXSwgbm9kZSA9IG5vZGVzW2ldID0gbmV3IE5vZGUoZCk7XG4gICAgICBpZiAoKG5vZGVJZCA9IGlkKGQsIGksIGRhdGEpKSAhPSBudWxsICYmIChub2RlSWQgKz0gXCJcIikpIHtcbiAgICAgICAgbm9kZUtleSA9IGtleVByZWZpeCQxICsgKG5vZGUuaWQgPSBub2RlSWQpO1xuICAgICAgICBub2RlQnlLZXlbbm9kZUtleV0gPSBub2RlS2V5IGluIG5vZGVCeUtleSA/IGFtYmlndW91cyA6IG5vZGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlSWQgPSBwYXJlbnRJZChkYXRhW2ldLCBpLCBkYXRhKTtcbiAgICAgIGlmIChub2RlSWQgPT0gbnVsbCB8fCAhKG5vZGVJZCArPSBcIlwiKSkge1xuICAgICAgICBpZiAocm9vdCkgdGhyb3cgbmV3IEVycm9yKFwibXVsdGlwbGUgcm9vdHNcIik7XG4gICAgICAgIHJvb3QgPSBub2RlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50ID0gbm9kZUJ5S2V5W2tleVByZWZpeCQxICsgbm9kZUlkXTtcbiAgICAgICAgaWYgKCFwYXJlbnQpIHRocm93IG5ldyBFcnJvcihcIm1pc3Npbmc6IFwiICsgbm9kZUlkKTtcbiAgICAgICAgaWYgKHBhcmVudCA9PT0gYW1iaWd1b3VzKSB0aHJvdyBuZXcgRXJyb3IoXCJhbWJpZ3VvdXM6IFwiICsgbm9kZUlkKTtcbiAgICAgICAgaWYgKHBhcmVudC5jaGlsZHJlbikgcGFyZW50LmNoaWxkcmVuLnB1c2gobm9kZSk7XG4gICAgICAgIGVsc2UgcGFyZW50LmNoaWxkcmVuID0gW25vZGVdO1xuICAgICAgICBub2RlLnBhcmVudCA9IHBhcmVudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXJvb3QpIHRocm93IG5ldyBFcnJvcihcIm5vIHJvb3RcIik7XG4gICAgcm9vdC5wYXJlbnQgPSBwcmVyb290O1xuICAgIHJvb3QuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7IG5vZGUuZGVwdGggPSBub2RlLnBhcmVudC5kZXB0aCArIDE7IC0tbjsgfSkuZWFjaEJlZm9yZShjb21wdXRlSGVpZ2h0KTtcbiAgICByb290LnBhcmVudCA9IG51bGw7XG4gICAgaWYgKG4gPiAwKSB0aHJvdyBuZXcgRXJyb3IoXCJjeWNsZVwiKTtcblxuICAgIHJldHVybiByb290O1xuICB9XG5cbiAgc3RyYXRpZnkuaWQgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaWQgPSByZXF1aXJlZCh4KSwgc3RyYXRpZnkpIDogaWQ7XG4gIH07XG5cbiAgc3RyYXRpZnkucGFyZW50SWQgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFyZW50SWQgPSByZXF1aXJlZCh4KSwgc3RyYXRpZnkpIDogcGFyZW50SWQ7XG4gIH07XG5cbiAgcmV0dXJuIHN0cmF0aWZ5O1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0U2VwYXJhdGlvbiQxKGEsIGIpIHtcbiAgcmV0dXJuIGEucGFyZW50ID09PSBiLnBhcmVudCA/IDEgOiAyO1xufVxuXG4vLyBmdW5jdGlvbiByYWRpYWxTZXBhcmF0aW9uKGEsIGIpIHtcbi8vICAgcmV0dXJuIChhLnBhcmVudCA9PT0gYi5wYXJlbnQgPyAxIDogMikgLyBhLmRlcHRoO1xuLy8gfVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gdHJhdmVyc2UgdGhlIGxlZnQgY29udG91ciBvZiBhIHN1YnRyZWUgKG9yXG4vLyBzdWJmb3Jlc3QpLiBJdCByZXR1cm5zIHRoZSBzdWNjZXNzb3Igb2YgdiBvbiB0aGlzIGNvbnRvdXIuIFRoaXMgc3VjY2Vzc29yIGlzXG4vLyBlaXRoZXIgZ2l2ZW4gYnkgdGhlIGxlZnRtb3N0IGNoaWxkIG9mIHYgb3IgYnkgdGhlIHRocmVhZCBvZiB2LiBUaGUgZnVuY3Rpb25cbi8vIHJldHVybnMgbnVsbCBpZiBhbmQgb25seSBpZiB2IGlzIG9uIHRoZSBoaWdoZXN0IGxldmVsIG9mIGl0cyBzdWJ0cmVlLlxuZnVuY3Rpb24gbmV4dExlZnQodikge1xuICB2YXIgY2hpbGRyZW4gPSB2LmNoaWxkcmVuO1xuICByZXR1cm4gY2hpbGRyZW4gPyBjaGlsZHJlblswXSA6IHYudDtcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiB3b3JrcyBhbmFsb2dvdXNseSB0byBuZXh0TGVmdC5cbmZ1bmN0aW9uIG5leHRSaWdodCh2KSB7XG4gIHZhciBjaGlsZHJlbiA9IHYuY2hpbGRyZW47XG4gIHJldHVybiBjaGlsZHJlbiA/IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdIDogdi50O1xufVxuXG4vLyBTaGlmdHMgdGhlIGN1cnJlbnQgc3VidHJlZSByb290ZWQgYXQgdysuIFRoaXMgaXMgZG9uZSBieSBpbmNyZWFzaW5nXG4vLyBwcmVsaW0odyspIGFuZCBtb2QodyspIGJ5IHNoaWZ0LlxuZnVuY3Rpb24gbW92ZVN1YnRyZWUod20sIHdwLCBzaGlmdCkge1xuICB2YXIgY2hhbmdlID0gc2hpZnQgLyAod3AuaSAtIHdtLmkpO1xuICB3cC5jIC09IGNoYW5nZTtcbiAgd3AucyArPSBzaGlmdDtcbiAgd20uYyArPSBjaGFuZ2U7XG4gIHdwLnogKz0gc2hpZnQ7XG4gIHdwLm0gKz0gc2hpZnQ7XG59XG5cbi8vIEFsbCBvdGhlciBzaGlmdHMsIGFwcGxpZWQgdG8gdGhlIHNtYWxsZXIgc3VidHJlZXMgYmV0d2VlbiB3LSBhbmQgdyssIGFyZVxuLy8gcGVyZm9ybWVkIGJ5IHRoaXMgZnVuY3Rpb24uIFRvIHByZXBhcmUgdGhlIHNoaWZ0cywgd2UgaGF2ZSB0byBhZGp1c3Rcbi8vIGNoYW5nZSh3KyksIHNoaWZ0KHcrKSwgYW5kIGNoYW5nZSh3LSkuXG5mdW5jdGlvbiBleGVjdXRlU2hpZnRzKHYpIHtcbiAgdmFyIHNoaWZ0ID0gMCxcbiAgICAgIGNoYW5nZSA9IDAsXG4gICAgICBjaGlsZHJlbiA9IHYuY2hpbGRyZW4sXG4gICAgICBpID0gY2hpbGRyZW4ubGVuZ3RoLFxuICAgICAgdztcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgdyA9IGNoaWxkcmVuW2ldO1xuICAgIHcueiArPSBzaGlmdDtcbiAgICB3Lm0gKz0gc2hpZnQ7XG4gICAgc2hpZnQgKz0gdy5zICsgKGNoYW5nZSArPSB3LmMpO1xuICB9XG59XG5cbi8vIElmIHZpLeKAmXMgYW5jZXN0b3IgaXMgYSBzaWJsaW5nIG9mIHYsIHJldHVybnMgdmkt4oCZcyBhbmNlc3Rvci4gT3RoZXJ3aXNlLFxuLy8gcmV0dXJucyB0aGUgc3BlY2lmaWVkIChkZWZhdWx0KSBhbmNlc3Rvci5cbmZ1bmN0aW9uIG5leHRBbmNlc3Rvcih2aW0sIHYsIGFuY2VzdG9yKSB7XG4gIHJldHVybiB2aW0uYS5wYXJlbnQgPT09IHYucGFyZW50ID8gdmltLmEgOiBhbmNlc3Rvcjtcbn1cblxuZnVuY3Rpb24gVHJlZU5vZGUobm9kZSwgaSkge1xuICB0aGlzLl8gPSBub2RlO1xuICB0aGlzLnBhcmVudCA9IG51bGw7XG4gIHRoaXMuY2hpbGRyZW4gPSBudWxsO1xuICB0aGlzLkEgPSBudWxsOyAvLyBkZWZhdWx0IGFuY2VzdG9yXG4gIHRoaXMuYSA9IHRoaXM7IC8vIGFuY2VzdG9yXG4gIHRoaXMueiA9IDA7IC8vIHByZWxpbVxuICB0aGlzLm0gPSAwOyAvLyBtb2RcbiAgdGhpcy5jID0gMDsgLy8gY2hhbmdlXG4gIHRoaXMucyA9IDA7IC8vIHNoaWZ0XG4gIHRoaXMudCA9IG51bGw7IC8vIHRocmVhZFxuICB0aGlzLmkgPSBpOyAvLyBudW1iZXJcbn1cblxuVHJlZU5vZGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShOb2RlLnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIHRyZWVSb290KHJvb3QpIHtcbiAgdmFyIHRyZWUgPSBuZXcgVHJlZU5vZGUocm9vdCwgMCksXG4gICAgICBub2RlLFxuICAgICAgbm9kZXMgPSBbdHJlZV0sXG4gICAgICBjaGlsZCxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgaSxcbiAgICAgIG47XG5cbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIGlmIChjaGlsZHJlbiA9IG5vZGUuXy5jaGlsZHJlbikge1xuICAgICAgbm9kZS5jaGlsZHJlbiA9IG5ldyBBcnJheShuID0gY2hpbGRyZW4ubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IG4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICBub2Rlcy5wdXNoKGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXSA9IG5ldyBUcmVlTm9kZShjaGlsZHJlbltpXSwgaSkpO1xuICAgICAgICBjaGlsZC5wYXJlbnQgPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gICh0cmVlLnBhcmVudCA9IG5ldyBUcmVlTm9kZShudWxsLCAwKSkuY2hpbGRyZW4gPSBbdHJlZV07XG4gIHJldHVybiB0cmVlO1xufVxuXG4vLyBOb2RlLWxpbmsgdHJlZSBkaWFncmFtIHVzaW5nIHRoZSBSZWluZ29sZC1UaWxmb3JkIFwidGlkeVwiIGFsZ29yaXRobVxuZnVuY3Rpb24gdHJlZSgpIHtcbiAgdmFyIHNlcGFyYXRpb24gPSBkZWZhdWx0U2VwYXJhdGlvbiQxLFxuICAgICAgZHggPSAxLFxuICAgICAgZHkgPSAxLFxuICAgICAgbm9kZVNpemUgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHRyZWUocm9vdCkge1xuICAgIHZhciB0ID0gdHJlZVJvb3Qocm9vdCk7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBsYXlvdXQgdXNpbmcgQnVjaGhlaW0gZXQgYWwu4oCZcyBhbGdvcml0aG0uXG4gICAgdC5lYWNoQWZ0ZXIoZmlyc3RXYWxrKSwgdC5wYXJlbnQubSA9IC10Lno7XG4gICAgdC5lYWNoQmVmb3JlKHNlY29uZFdhbGspO1xuXG4gICAgLy8gSWYgYSBmaXhlZCBub2RlIHNpemUgaXMgc3BlY2lmaWVkLCBzY2FsZSB4IGFuZCB5LlxuICAgIGlmIChub2RlU2l6ZSkgcm9vdC5lYWNoQmVmb3JlKHNpemVOb2RlKTtcblxuICAgIC8vIElmIGEgZml4ZWQgdHJlZSBzaXplIGlzIHNwZWNpZmllZCwgc2NhbGUgeCBhbmQgeSBiYXNlZCBvbiB0aGUgZXh0ZW50LlxuICAgIC8vIENvbXB1dGUgdGhlIGxlZnQtbW9zdCwgcmlnaHQtbW9zdCwgYW5kIGRlcHRoLW1vc3Qgbm9kZXMgZm9yIGV4dGVudHMuXG4gICAgZWxzZSB7XG4gICAgICB2YXIgbGVmdCA9IHJvb3QsXG4gICAgICAgICAgcmlnaHQgPSByb290LFxuICAgICAgICAgIGJvdHRvbSA9IHJvb3Q7XG4gICAgICByb290LmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkge1xuICAgICAgICBpZiAobm9kZS54IDwgbGVmdC54KSBsZWZ0ID0gbm9kZTtcbiAgICAgICAgaWYgKG5vZGUueCA+IHJpZ2h0LngpIHJpZ2h0ID0gbm9kZTtcbiAgICAgICAgaWYgKG5vZGUuZGVwdGggPiBib3R0b20uZGVwdGgpIGJvdHRvbSA9IG5vZGU7XG4gICAgICB9KTtcbiAgICAgIHZhciBzID0gbGVmdCA9PT0gcmlnaHQgPyAxIDogc2VwYXJhdGlvbihsZWZ0LCByaWdodCkgLyAyLFxuICAgICAgICAgIHR4ID0gcyAtIGxlZnQueCxcbiAgICAgICAgICBreCA9IGR4IC8gKHJpZ2h0LnggKyBzICsgdHgpLFxuICAgICAgICAgIGt5ID0gZHkgLyAoYm90dG9tLmRlcHRoIHx8IDEpO1xuICAgICAgcm9vdC5lYWNoQmVmb3JlKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgbm9kZS54ID0gKG5vZGUueCArIHR4KSAqIGt4O1xuICAgICAgICBub2RlLnkgPSBub2RlLmRlcHRoICoga3k7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm9vdDtcbiAgfVxuXG4gIC8vIENvbXB1dGVzIGEgcHJlbGltaW5hcnkgeC1jb29yZGluYXRlIGZvciB2LiBCZWZvcmUgdGhhdCwgRklSU1QgV0FMSyBpc1xuICAvLyBhcHBsaWVkIHJlY3Vyc2l2ZWx5IHRvIHRoZSBjaGlsZHJlbiBvZiB2LCBhcyB3ZWxsIGFzIHRoZSBmdW5jdGlvblxuICAvLyBBUFBPUlRJT04uIEFmdGVyIHNwYWNpbmcgb3V0IHRoZSBjaGlsZHJlbiBieSBjYWxsaW5nIEVYRUNVVEUgU0hJRlRTLCB0aGVcbiAgLy8gbm9kZSB2IGlzIHBsYWNlZCB0byB0aGUgbWlkcG9pbnQgb2YgaXRzIG91dGVybW9zdCBjaGlsZHJlbi5cbiAgZnVuY3Rpb24gZmlyc3RXYWxrKHYpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB2LmNoaWxkcmVuLFxuICAgICAgICBzaWJsaW5ncyA9IHYucGFyZW50LmNoaWxkcmVuLFxuICAgICAgICB3ID0gdi5pID8gc2libGluZ3Nbdi5pIC0gMV0gOiBudWxsO1xuICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgZXhlY3V0ZVNoaWZ0cyh2KTtcbiAgICAgIHZhciBtaWRwb2ludCA9IChjaGlsZHJlblswXS56ICsgY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0ueikgLyAyO1xuICAgICAgaWYgKHcpIHtcbiAgICAgICAgdi56ID0gdy56ICsgc2VwYXJhdGlvbih2Ll8sIHcuXyk7XG4gICAgICAgIHYubSA9IHYueiAtIG1pZHBvaW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdi56ID0gbWlkcG9pbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh3KSB7XG4gICAgICB2LnogPSB3LnogKyBzZXBhcmF0aW9uKHYuXywgdy5fKTtcbiAgICB9XG4gICAgdi5wYXJlbnQuQSA9IGFwcG9ydGlvbih2LCB3LCB2LnBhcmVudC5BIHx8IHNpYmxpbmdzWzBdKTtcbiAgfVxuXG4gIC8vIENvbXB1dGVzIGFsbCByZWFsIHgtY29vcmRpbmF0ZXMgYnkgc3VtbWluZyB1cCB0aGUgbW9kaWZpZXJzIHJlY3Vyc2l2ZWx5LlxuICBmdW5jdGlvbiBzZWNvbmRXYWxrKHYpIHtcbiAgICB2Ll8ueCA9IHYueiArIHYucGFyZW50Lm07XG4gICAgdi5tICs9IHYucGFyZW50Lm07XG4gIH1cblxuICAvLyBUaGUgY29yZSBvZiB0aGUgYWxnb3JpdGhtLiBIZXJlLCBhIG5ldyBzdWJ0cmVlIGlzIGNvbWJpbmVkIHdpdGggdGhlXG4gIC8vIHByZXZpb3VzIHN1YnRyZWVzLiBUaHJlYWRzIGFyZSB1c2VkIHRvIHRyYXZlcnNlIHRoZSBpbnNpZGUgYW5kIG91dHNpZGVcbiAgLy8gY29udG91cnMgb2YgdGhlIGxlZnQgYW5kIHJpZ2h0IHN1YnRyZWUgdXAgdG8gdGhlIGhpZ2hlc3QgY29tbW9uIGxldmVsLiBUaGVcbiAgLy8gdmVydGljZXMgdXNlZCBmb3IgdGhlIHRyYXZlcnNhbHMgYXJlIHZpKywgdmktLCB2by0sIGFuZCB2byssIHdoZXJlIHRoZVxuICAvLyBzdXBlcnNjcmlwdCBvIG1lYW5zIG91dHNpZGUgYW5kIGkgbWVhbnMgaW5zaWRlLCB0aGUgc3Vic2NyaXB0IC0gbWVhbnMgbGVmdFxuICAvLyBzdWJ0cmVlIGFuZCArIG1lYW5zIHJpZ2h0IHN1YnRyZWUuIEZvciBzdW1taW5nIHVwIHRoZSBtb2RpZmllcnMgYWxvbmcgdGhlXG4gIC8vIGNvbnRvdXIsIHdlIHVzZSByZXNwZWN0aXZlIHZhcmlhYmxlcyBzaSssIHNpLSwgc28tLCBhbmQgc28rLiBXaGVuZXZlciB0d29cbiAgLy8gbm9kZXMgb2YgdGhlIGluc2lkZSBjb250b3VycyBjb25mbGljdCwgd2UgY29tcHV0ZSB0aGUgbGVmdCBvbmUgb2YgdGhlXG4gIC8vIGdyZWF0ZXN0IHVuY29tbW9uIGFuY2VzdG9ycyB1c2luZyB0aGUgZnVuY3Rpb24gQU5DRVNUT1IgYW5kIGNhbGwgTU9WRVxuICAvLyBTVUJUUkVFIHRvIHNoaWZ0IHRoZSBzdWJ0cmVlIGFuZCBwcmVwYXJlIHRoZSBzaGlmdHMgb2Ygc21hbGxlciBzdWJ0cmVlcy5cbiAgLy8gRmluYWxseSwgd2UgYWRkIGEgbmV3IHRocmVhZCAoaWYgbmVjZXNzYXJ5KS5cbiAgZnVuY3Rpb24gYXBwb3J0aW9uKHYsIHcsIGFuY2VzdG9yKSB7XG4gICAgaWYgKHcpIHtcbiAgICAgIHZhciB2aXAgPSB2LFxuICAgICAgICAgIHZvcCA9IHYsXG4gICAgICAgICAgdmltID0gdyxcbiAgICAgICAgICB2b20gPSB2aXAucGFyZW50LmNoaWxkcmVuWzBdLFxuICAgICAgICAgIHNpcCA9IHZpcC5tLFxuICAgICAgICAgIHNvcCA9IHZvcC5tLFxuICAgICAgICAgIHNpbSA9IHZpbS5tLFxuICAgICAgICAgIHNvbSA9IHZvbS5tLFxuICAgICAgICAgIHNoaWZ0O1xuICAgICAgd2hpbGUgKHZpbSA9IG5leHRSaWdodCh2aW0pLCB2aXAgPSBuZXh0TGVmdCh2aXApLCB2aW0gJiYgdmlwKSB7XG4gICAgICAgIHZvbSA9IG5leHRMZWZ0KHZvbSk7XG4gICAgICAgIHZvcCA9IG5leHRSaWdodCh2b3ApO1xuICAgICAgICB2b3AuYSA9IHY7XG4gICAgICAgIHNoaWZ0ID0gdmltLnogKyBzaW0gLSB2aXAueiAtIHNpcCArIHNlcGFyYXRpb24odmltLl8sIHZpcC5fKTtcbiAgICAgICAgaWYgKHNoaWZ0ID4gMCkge1xuICAgICAgICAgIG1vdmVTdWJ0cmVlKG5leHRBbmNlc3Rvcih2aW0sIHYsIGFuY2VzdG9yKSwgdiwgc2hpZnQpO1xuICAgICAgICAgIHNpcCArPSBzaGlmdDtcbiAgICAgICAgICBzb3AgKz0gc2hpZnQ7XG4gICAgICAgIH1cbiAgICAgICAgc2ltICs9IHZpbS5tO1xuICAgICAgICBzaXAgKz0gdmlwLm07XG4gICAgICAgIHNvbSArPSB2b20ubTtcbiAgICAgICAgc29wICs9IHZvcC5tO1xuICAgICAgfVxuICAgICAgaWYgKHZpbSAmJiAhbmV4dFJpZ2h0KHZvcCkpIHtcbiAgICAgICAgdm9wLnQgPSB2aW07XG4gICAgICAgIHZvcC5tICs9IHNpbSAtIHNvcDtcbiAgICAgIH1cbiAgICAgIGlmICh2aXAgJiYgIW5leHRMZWZ0KHZvbSkpIHtcbiAgICAgICAgdm9tLnQgPSB2aXA7XG4gICAgICAgIHZvbS5tICs9IHNpcCAtIHNvbTtcbiAgICAgICAgYW5jZXN0b3IgPSB2O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYW5jZXN0b3I7XG4gIH1cblxuICBmdW5jdGlvbiBzaXplTm9kZShub2RlKSB7XG4gICAgbm9kZS54ICo9IGR4O1xuICAgIG5vZGUueSA9IG5vZGUuZGVwdGggKiBkeTtcbiAgfVxuXG4gIHRyZWUuc2VwYXJhdGlvbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzZXBhcmF0aW9uID0geCwgdHJlZSkgOiBzZXBhcmF0aW9uO1xuICB9O1xuXG4gIHRyZWUuc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChub2RlU2l6ZSA9IGZhbHNlLCBkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCB0cmVlKSA6IChub2RlU2l6ZSA/IG51bGwgOiBbZHgsIGR5XSk7XG4gIH07XG5cbiAgdHJlZS5ub2RlU2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChub2RlU2l6ZSA9IHRydWUsIGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIHRyZWUpIDogKG5vZGVTaXplID8gW2R4LCBkeV0gOiBudWxsKTtcbiAgfTtcblxuICByZXR1cm4gdHJlZTtcbn1cblxuZnVuY3Rpb24gdHJlZW1hcFNsaWNlKHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgdmFyIG5vZGVzID0gcGFyZW50LmNoaWxkcmVuLFxuICAgICAgbm9kZSxcbiAgICAgIGkgPSAtMSxcbiAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICBrID0gcGFyZW50LnZhbHVlICYmICh5MSAtIHkwKSAvIHBhcmVudC52YWx1ZTtcblxuICB3aGlsZSAoKytpIDwgbikge1xuICAgIG5vZGUgPSBub2Rlc1tpXSwgbm9kZS54MCA9IHgwLCBub2RlLngxID0geDE7XG4gICAgbm9kZS55MCA9IHkwLCBub2RlLnkxID0geTAgKz0gbm9kZS52YWx1ZSAqIGs7XG4gIH1cbn1cblxudmFyIHBoaSA9ICgxICsgTWF0aC5zcXJ0KDUpKSAvIDI7XG5cbmZ1bmN0aW9uIHNxdWFyaWZ5UmF0aW8ocmF0aW8sIHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgdmFyIHJvd3MgPSBbXSxcbiAgICAgIG5vZGVzID0gcGFyZW50LmNoaWxkcmVuLFxuICAgICAgcm93LFxuICAgICAgbm9kZVZhbHVlLFxuICAgICAgaTAgPSAwLFxuICAgICAgaTEgPSAwLFxuICAgICAgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgIGR4LCBkeSxcbiAgICAgIHZhbHVlID0gcGFyZW50LnZhbHVlLFxuICAgICAgc3VtVmFsdWUsXG4gICAgICBtaW5WYWx1ZSxcbiAgICAgIG1heFZhbHVlLFxuICAgICAgbmV3UmF0aW8sXG4gICAgICBtaW5SYXRpbyxcbiAgICAgIGFscGhhLFxuICAgICAgYmV0YTtcblxuICB3aGlsZSAoaTAgPCBuKSB7XG4gICAgZHggPSB4MSAtIHgwLCBkeSA9IHkxIC0geTA7XG5cbiAgICAvLyBGaW5kIHRoZSBuZXh0IG5vbi1lbXB0eSBub2RlLlxuICAgIGRvIHN1bVZhbHVlID0gbm9kZXNbaTErK10udmFsdWU7IHdoaWxlICghc3VtVmFsdWUgJiYgaTEgPCBuKTtcbiAgICBtaW5WYWx1ZSA9IG1heFZhbHVlID0gc3VtVmFsdWU7XG4gICAgYWxwaGEgPSBNYXRoLm1heChkeSAvIGR4LCBkeCAvIGR5KSAvICh2YWx1ZSAqIHJhdGlvKTtcbiAgICBiZXRhID0gc3VtVmFsdWUgKiBzdW1WYWx1ZSAqIGFscGhhO1xuICAgIG1pblJhdGlvID0gTWF0aC5tYXgobWF4VmFsdWUgLyBiZXRhLCBiZXRhIC8gbWluVmFsdWUpO1xuXG4gICAgLy8gS2VlcCBhZGRpbmcgbm9kZXMgd2hpbGUgdGhlIGFzcGVjdCByYXRpbyBtYWludGFpbnMgb3IgaW1wcm92ZXMuXG4gICAgZm9yICg7IGkxIDwgbjsgKytpMSkge1xuICAgICAgc3VtVmFsdWUgKz0gbm9kZVZhbHVlID0gbm9kZXNbaTFdLnZhbHVlO1xuICAgICAgaWYgKG5vZGVWYWx1ZSA8IG1pblZhbHVlKSBtaW5WYWx1ZSA9IG5vZGVWYWx1ZTtcbiAgICAgIGlmIChub2RlVmFsdWUgPiBtYXhWYWx1ZSkgbWF4VmFsdWUgPSBub2RlVmFsdWU7XG4gICAgICBiZXRhID0gc3VtVmFsdWUgKiBzdW1WYWx1ZSAqIGFscGhhO1xuICAgICAgbmV3UmF0aW8gPSBNYXRoLm1heChtYXhWYWx1ZSAvIGJldGEsIGJldGEgLyBtaW5WYWx1ZSk7XG4gICAgICBpZiAobmV3UmF0aW8gPiBtaW5SYXRpbykgeyBzdW1WYWx1ZSAtPSBub2RlVmFsdWU7IGJyZWFrOyB9XG4gICAgICBtaW5SYXRpbyA9IG5ld1JhdGlvO1xuICAgIH1cblxuICAgIC8vIFBvc2l0aW9uIGFuZCByZWNvcmQgdGhlIHJvdyBvcmllbnRhdGlvbi5cbiAgICByb3dzLnB1c2gocm93ID0ge3ZhbHVlOiBzdW1WYWx1ZSwgZGljZTogZHggPCBkeSwgY2hpbGRyZW46IG5vZGVzLnNsaWNlKGkwLCBpMSl9KTtcbiAgICBpZiAocm93LmRpY2UpIHRyZWVtYXBEaWNlKHJvdywgeDAsIHkwLCB4MSwgdmFsdWUgPyB5MCArPSBkeSAqIHN1bVZhbHVlIC8gdmFsdWUgOiB5MSk7XG4gICAgZWxzZSB0cmVlbWFwU2xpY2Uocm93LCB4MCwgeTAsIHZhbHVlID8geDAgKz0gZHggKiBzdW1WYWx1ZSAvIHZhbHVlIDogeDEsIHkxKTtcbiAgICB2YWx1ZSAtPSBzdW1WYWx1ZSwgaTAgPSBpMTtcbiAgfVxuXG4gIHJldHVybiByb3dzO1xufVxuXG52YXIgc3F1YXJpZnkgPSAoZnVuY3Rpb24gY3VzdG9tKHJhdGlvKSB7XG5cbiAgZnVuY3Rpb24gc3F1YXJpZnkocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICAgIHNxdWFyaWZ5UmF0aW8ocmF0aW8sIHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpO1xuICB9XG5cbiAgc3F1YXJpZnkucmF0aW8gPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGN1c3RvbSgoeCA9ICt4KSA+IDEgPyB4IDogMSk7XG4gIH07XG5cbiAgcmV0dXJuIHNxdWFyaWZ5O1xufSkocGhpKTtcblxuZnVuY3Rpb24gaW5kZXgkMygpIHtcbiAgdmFyIHRpbGUgPSBzcXVhcmlmeSxcbiAgICAgIHJvdW5kID0gZmFsc2UsXG4gICAgICBkeCA9IDEsXG4gICAgICBkeSA9IDEsXG4gICAgICBwYWRkaW5nU3RhY2sgPSBbMF0sXG4gICAgICBwYWRkaW5nSW5uZXIgPSBjb25zdGFudFplcm8sXG4gICAgICBwYWRkaW5nVG9wID0gY29uc3RhbnRaZXJvLFxuICAgICAgcGFkZGluZ1JpZ2h0ID0gY29uc3RhbnRaZXJvLFxuICAgICAgcGFkZGluZ0JvdHRvbSA9IGNvbnN0YW50WmVybyxcbiAgICAgIHBhZGRpbmdMZWZ0ID0gY29uc3RhbnRaZXJvO1xuXG4gIGZ1bmN0aW9uIHRyZWVtYXAocm9vdCkge1xuICAgIHJvb3QueDAgPVxuICAgIHJvb3QueTAgPSAwO1xuICAgIHJvb3QueDEgPSBkeDtcbiAgICByb290LnkxID0gZHk7XG4gICAgcm9vdC5lYWNoQmVmb3JlKHBvc2l0aW9uTm9kZSk7XG4gICAgcGFkZGluZ1N0YWNrID0gWzBdO1xuICAgIGlmIChyb3VuZCkgcm9vdC5lYWNoQmVmb3JlKHJvdW5kTm9kZSk7XG4gICAgcmV0dXJuIHJvb3Q7XG4gIH1cblxuICBmdW5jdGlvbiBwb3NpdGlvbk5vZGUobm9kZSkge1xuICAgIHZhciBwID0gcGFkZGluZ1N0YWNrW25vZGUuZGVwdGhdLFxuICAgICAgICB4MCA9IG5vZGUueDAgKyBwLFxuICAgICAgICB5MCA9IG5vZGUueTAgKyBwLFxuICAgICAgICB4MSA9IG5vZGUueDEgLSBwLFxuICAgICAgICB5MSA9IG5vZGUueTEgLSBwO1xuICAgIGlmICh4MSA8IHgwKSB4MCA9IHgxID0gKHgwICsgeDEpIC8gMjtcbiAgICBpZiAoeTEgPCB5MCkgeTAgPSB5MSA9ICh5MCArIHkxKSAvIDI7XG4gICAgbm9kZS54MCA9IHgwO1xuICAgIG5vZGUueTAgPSB5MDtcbiAgICBub2RlLngxID0geDE7XG4gICAgbm9kZS55MSA9IHkxO1xuICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICBwID0gcGFkZGluZ1N0YWNrW25vZGUuZGVwdGggKyAxXSA9IHBhZGRpbmdJbm5lcihub2RlKSAvIDI7XG4gICAgICB4MCArPSBwYWRkaW5nTGVmdChub2RlKSAtIHA7XG4gICAgICB5MCArPSBwYWRkaW5nVG9wKG5vZGUpIC0gcDtcbiAgICAgIHgxIC09IHBhZGRpbmdSaWdodChub2RlKSAtIHA7XG4gICAgICB5MSAtPSBwYWRkaW5nQm90dG9tKG5vZGUpIC0gcDtcbiAgICAgIGlmICh4MSA8IHgwKSB4MCA9IHgxID0gKHgwICsgeDEpIC8gMjtcbiAgICAgIGlmICh5MSA8IHkwKSB5MCA9IHkxID0gKHkwICsgeTEpIC8gMjtcbiAgICAgIHRpbGUobm9kZSwgeDAsIHkwLCB4MSwgeTEpO1xuICAgIH1cbiAgfVxuXG4gIHRyZWVtYXAucm91bmQgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocm91bmQgPSAhIXgsIHRyZWVtYXApIDogcm91bmQ7XG4gIH07XG5cbiAgdHJlZW1hcC5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIHRyZWVtYXApIDogW2R4LCBkeV07XG4gIH07XG5cbiAgdHJlZW1hcC50aWxlID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpbGUgPSByZXF1aXJlZCh4KSwgdHJlZW1hcCkgOiB0aWxlO1xuICB9O1xuXG4gIHRyZWVtYXAucGFkZGluZyA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRyZWVtYXAucGFkZGluZ0lubmVyKHgpLnBhZGRpbmdPdXRlcih4KSA6IHRyZWVtYXAucGFkZGluZ0lubmVyKCk7XG4gIH07XG5cbiAgdHJlZW1hcC5wYWRkaW5nSW5uZXIgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0lubmVyID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCQ5KCt4KSwgdHJlZW1hcCkgOiBwYWRkaW5nSW5uZXI7XG4gIH07XG5cbiAgdHJlZW1hcC5wYWRkaW5nT3V0ZXIgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0cmVlbWFwLnBhZGRpbmdUb3AoeCkucGFkZGluZ1JpZ2h0KHgpLnBhZGRpbmdCb3R0b20oeCkucGFkZGluZ0xlZnQoeCkgOiB0cmVlbWFwLnBhZGRpbmdUb3AoKTtcbiAgfTtcblxuICB0cmVlbWFwLnBhZGRpbmdUb3AgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ1RvcCA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogY29uc3RhbnQkOSgreCksIHRyZWVtYXApIDogcGFkZGluZ1RvcDtcbiAgfTtcblxuICB0cmVlbWFwLnBhZGRpbmdSaWdodCA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nUmlnaHQgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGNvbnN0YW50JDkoK3gpLCB0cmVlbWFwKSA6IHBhZGRpbmdSaWdodDtcbiAgfTtcblxuICB0cmVlbWFwLnBhZGRpbmdCb3R0b20gPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0JvdHRvbSA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogY29uc3RhbnQkOSgreCksIHRyZWVtYXApIDogcGFkZGluZ0JvdHRvbTtcbiAgfTtcblxuICB0cmVlbWFwLnBhZGRpbmdMZWZ0ID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdMZWZ0ID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCQ5KCt4KSwgdHJlZW1hcCkgOiBwYWRkaW5nTGVmdDtcbiAgfTtcblxuICByZXR1cm4gdHJlZW1hcDtcbn1cblxuZnVuY3Rpb24gYmluYXJ5KHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgdmFyIG5vZGVzID0gcGFyZW50LmNoaWxkcmVuLFxuICAgICAgaSwgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgIHN1bSwgc3VtcyA9IG5ldyBBcnJheShuICsgMSk7XG5cbiAgZm9yIChzdW1zWzBdID0gc3VtID0gaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICBzdW1zW2kgKyAxXSA9IHN1bSArPSBub2Rlc1tpXS52YWx1ZTtcbiAgfVxuXG4gIHBhcnRpdGlvbigwLCBuLCBwYXJlbnQudmFsdWUsIHgwLCB5MCwgeDEsIHkxKTtcblxuICBmdW5jdGlvbiBwYXJ0aXRpb24oaSwgaiwgdmFsdWUsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgaWYgKGkgPj0gaiAtIDEpIHtcbiAgICAgIHZhciBub2RlID0gbm9kZXNbaV07XG4gICAgICBub2RlLngwID0geDAsIG5vZGUueTAgPSB5MDtcbiAgICAgIG5vZGUueDEgPSB4MSwgbm9kZS55MSA9IHkxO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZU9mZnNldCA9IHN1bXNbaV0sXG4gICAgICAgIHZhbHVlVGFyZ2V0ID0gKHZhbHVlIC8gMikgKyB2YWx1ZU9mZnNldCxcbiAgICAgICAgayA9IGkgKyAxLFxuICAgICAgICBoaSA9IGogLSAxO1xuXG4gICAgd2hpbGUgKGsgPCBoaSkge1xuICAgICAgdmFyIG1pZCA9IGsgKyBoaSA+Pj4gMTtcbiAgICAgIGlmIChzdW1zW21pZF0gPCB2YWx1ZVRhcmdldCkgayA9IG1pZCArIDE7XG4gICAgICBlbHNlIGhpID0gbWlkO1xuICAgIH1cblxuICAgIGlmICgodmFsdWVUYXJnZXQgLSBzdW1zW2sgLSAxXSkgPCAoc3Vtc1trXSAtIHZhbHVlVGFyZ2V0KSAmJiBpICsgMSA8IGspIC0taztcblxuICAgIHZhciB2YWx1ZUxlZnQgPSBzdW1zW2tdIC0gdmFsdWVPZmZzZXQsXG4gICAgICAgIHZhbHVlUmlnaHQgPSB2YWx1ZSAtIHZhbHVlTGVmdDtcblxuICAgIGlmICgoeDEgLSB4MCkgPiAoeTEgLSB5MCkpIHtcbiAgICAgIHZhciB4ayA9ICh4MCAqIHZhbHVlUmlnaHQgKyB4MSAqIHZhbHVlTGVmdCkgLyB2YWx1ZTtcbiAgICAgIHBhcnRpdGlvbihpLCBrLCB2YWx1ZUxlZnQsIHgwLCB5MCwgeGssIHkxKTtcbiAgICAgIHBhcnRpdGlvbihrLCBqLCB2YWx1ZVJpZ2h0LCB4aywgeTAsIHgxLCB5MSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB5ayA9ICh5MCAqIHZhbHVlUmlnaHQgKyB5MSAqIHZhbHVlTGVmdCkgLyB2YWx1ZTtcbiAgICAgIHBhcnRpdGlvbihpLCBrLCB2YWx1ZUxlZnQsIHgwLCB5MCwgeDEsIHlrKTtcbiAgICAgIHBhcnRpdGlvbihrLCBqLCB2YWx1ZVJpZ2h0LCB4MCwgeWssIHgxLCB5MSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNsaWNlRGljZShwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIChwYXJlbnQuZGVwdGggJiAxID8gdHJlZW1hcFNsaWNlIDogdHJlZW1hcERpY2UpKHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpO1xufVxuXG52YXIgcmVzcXVhcmlmeSA9IChmdW5jdGlvbiBjdXN0b20ocmF0aW8pIHtcblxuICBmdW5jdGlvbiByZXNxdWFyaWZ5KHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICBpZiAoKHJvd3MgPSBwYXJlbnQuX3NxdWFyaWZ5KSAmJiAocm93cy5yYXRpbyA9PT0gcmF0aW8pKSB7XG4gICAgICB2YXIgcm93cyxcbiAgICAgICAgICByb3csXG4gICAgICAgICAgbm9kZXMsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBqID0gLTEsXG4gICAgICAgICAgbixcbiAgICAgICAgICBtID0gcm93cy5sZW5ndGgsXG4gICAgICAgICAgdmFsdWUgPSBwYXJlbnQudmFsdWU7XG5cbiAgICAgIHdoaWxlICgrK2ogPCBtKSB7XG4gICAgICAgIHJvdyA9IHJvd3Nbal0sIG5vZGVzID0gcm93LmNoaWxkcmVuO1xuICAgICAgICBmb3IgKGkgPSByb3cudmFsdWUgPSAwLCBuID0gbm9kZXMubGVuZ3RoOyBpIDwgbjsgKytpKSByb3cudmFsdWUgKz0gbm9kZXNbaV0udmFsdWU7XG4gICAgICAgIGlmIChyb3cuZGljZSkgdHJlZW1hcERpY2Uocm93LCB4MCwgeTAsIHgxLCB5MCArPSAoeTEgLSB5MCkgKiByb3cudmFsdWUgLyB2YWx1ZSk7XG4gICAgICAgIGVsc2UgdHJlZW1hcFNsaWNlKHJvdywgeDAsIHkwLCB4MCArPSAoeDEgLSB4MCkgKiByb3cudmFsdWUgLyB2YWx1ZSwgeTEpO1xuICAgICAgICB2YWx1ZSAtPSByb3cudmFsdWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmVudC5fc3F1YXJpZnkgPSByb3dzID0gc3F1YXJpZnlSYXRpbyhyYXRpbywgcGFyZW50LCB4MCwgeTAsIHgxLCB5MSk7XG4gICAgICByb3dzLnJhdGlvID0gcmF0aW87XG4gICAgfVxuICB9XG5cbiAgcmVzcXVhcmlmeS5yYXRpbyA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gY3VzdG9tKCh4ID0gK3gpID4gMSA/IHggOiAxKTtcbiAgfTtcblxuICByZXR1cm4gcmVzcXVhcmlmeTtcbn0pKHBoaSk7XG5cbmZ1bmN0aW9uIGFyZWEkMihwb2x5Z29uKSB7XG4gIHZhciBpID0gLTEsXG4gICAgICBuID0gcG9seWdvbi5sZW5ndGgsXG4gICAgICBhLFxuICAgICAgYiA9IHBvbHlnb25bbiAtIDFdLFxuICAgICAgYXJlYSA9IDA7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICBhID0gYjtcbiAgICBiID0gcG9seWdvbltpXTtcbiAgICBhcmVhICs9IGFbMV0gKiBiWzBdIC0gYVswXSAqIGJbMV07XG4gIH1cblxuICByZXR1cm4gYXJlYSAvIDI7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkJDEocG9seWdvbikge1xuICB2YXIgaSA9IC0xLFxuICAgICAgbiA9IHBvbHlnb24ubGVuZ3RoLFxuICAgICAgeCA9IDAsXG4gICAgICB5ID0gMCxcbiAgICAgIGEsXG4gICAgICBiID0gcG9seWdvbltuIC0gMV0sXG4gICAgICBjLFxuICAgICAgayA9IDA7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICBhID0gYjtcbiAgICBiID0gcG9seWdvbltpXTtcbiAgICBrICs9IGMgPSBhWzBdICogYlsxXSAtIGJbMF0gKiBhWzFdO1xuICAgIHggKz0gKGFbMF0gKyBiWzBdKSAqIGM7XG4gICAgeSArPSAoYVsxXSArIGJbMV0pICogYztcbiAgfVxuXG4gIHJldHVybiBrICo9IDMsIFt4IC8gaywgeSAvIGtdO1xufVxuXG4vLyBSZXR1cm5zIHRoZSAyRCBjcm9zcyBwcm9kdWN0IG9mIEFCIGFuZCBBQyB2ZWN0b3JzLCBpLmUuLCB0aGUgei1jb21wb25lbnQgb2Zcbi8vIHRoZSAzRCBjcm9zcyBwcm9kdWN0IGluIGEgcXVhZHJhbnQgSSBDYXJ0ZXNpYW4gY29vcmRpbmF0ZSBzeXN0ZW0gKCt4IGlzXG4vLyByaWdodCwgK3kgaXMgdXApLiBSZXR1cm5zIGEgcG9zaXRpdmUgdmFsdWUgaWYgQUJDIGlzIGNvdW50ZXItY2xvY2t3aXNlLFxuLy8gbmVnYXRpdmUgaWYgY2xvY2t3aXNlLCBhbmQgemVybyBpZiB0aGUgcG9pbnRzIGFyZSBjb2xsaW5lYXIuXG5mdW5jdGlvbiBjcm9zcyQxKGEsIGIsIGMpIHtcbiAgcmV0dXJuIChiWzBdIC0gYVswXSkgKiAoY1sxXSAtIGFbMV0pIC0gKGJbMV0gLSBhWzFdKSAqIChjWzBdIC0gYVswXSk7XG59XG5cbmZ1bmN0aW9uIGxleGljb2dyYXBoaWNPcmRlcihhLCBiKSB7XG4gIHJldHVybiBhWzBdIC0gYlswXSB8fCBhWzFdIC0gYlsxXTtcbn1cblxuLy8gQ29tcHV0ZXMgdGhlIHVwcGVyIGNvbnZleCBodWxsIHBlciB0aGUgbW9ub3RvbmUgY2hhaW4gYWxnb3JpdGhtLlxuLy8gQXNzdW1lcyBwb2ludHMubGVuZ3RoID49IDMsIGlzIHNvcnRlZCBieSB4LCB1bmlxdWUgaW4geS5cbi8vIFJldHVybnMgYW4gYXJyYXkgb2YgaW5kaWNlcyBpbnRvIHBvaW50cyBpbiBsZWZ0LXRvLXJpZ2h0IG9yZGVyLlxuZnVuY3Rpb24gY29tcHV0ZVVwcGVySHVsbEluZGV4ZXMocG9pbnRzKSB7XG4gIHZhciBuID0gcG9pbnRzLmxlbmd0aCxcbiAgICAgIGluZGV4ZXMgPSBbMCwgMV0sXG4gICAgICBzaXplID0gMjtcblxuICBmb3IgKHZhciBpID0gMjsgaSA8IG47ICsraSkge1xuICAgIHdoaWxlIChzaXplID4gMSAmJiBjcm9zcyQxKHBvaW50c1tpbmRleGVzW3NpemUgLSAyXV0sIHBvaW50c1tpbmRleGVzW3NpemUgLSAxXV0sIHBvaW50c1tpXSkgPD0gMCkgLS1zaXplO1xuICAgIGluZGV4ZXNbc2l6ZSsrXSA9IGk7XG4gIH1cblxuICByZXR1cm4gaW5kZXhlcy5zbGljZSgwLCBzaXplKTsgLy8gcmVtb3ZlIHBvcHBlZCBwb2ludHNcbn1cblxuZnVuY3Rpb24gaHVsbChwb2ludHMpIHtcbiAgaWYgKChuID0gcG9pbnRzLmxlbmd0aCkgPCAzKSByZXR1cm4gbnVsbDtcblxuICB2YXIgaSxcbiAgICAgIG4sXG4gICAgICBzb3J0ZWRQb2ludHMgPSBuZXcgQXJyYXkobiksXG4gICAgICBmbGlwcGVkUG9pbnRzID0gbmV3IEFycmF5KG4pO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHNvcnRlZFBvaW50c1tpXSA9IFsrcG9pbnRzW2ldWzBdLCArcG9pbnRzW2ldWzFdLCBpXTtcbiAgc29ydGVkUG9pbnRzLnNvcnQobGV4aWNvZ3JhcGhpY09yZGVyKTtcbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgZmxpcHBlZFBvaW50c1tpXSA9IFtzb3J0ZWRQb2ludHNbaV1bMF0sIC1zb3J0ZWRQb2ludHNbaV1bMV1dO1xuXG4gIHZhciB1cHBlckluZGV4ZXMgPSBjb21wdXRlVXBwZXJIdWxsSW5kZXhlcyhzb3J0ZWRQb2ludHMpLFxuICAgICAgbG93ZXJJbmRleGVzID0gY29tcHV0ZVVwcGVySHVsbEluZGV4ZXMoZmxpcHBlZFBvaW50cyk7XG5cbiAgLy8gQ29uc3RydWN0IHRoZSBodWxsIHBvbHlnb24sIHJlbW92aW5nIHBvc3NpYmxlIGR1cGxpY2F0ZSBlbmRwb2ludHMuXG4gIHZhciBza2lwTGVmdCA9IGxvd2VySW5kZXhlc1swXSA9PT0gdXBwZXJJbmRleGVzWzBdLFxuICAgICAgc2tpcFJpZ2h0ID0gbG93ZXJJbmRleGVzW2xvd2VySW5kZXhlcy5sZW5ndGggLSAxXSA9PT0gdXBwZXJJbmRleGVzW3VwcGVySW5kZXhlcy5sZW5ndGggLSAxXSxcbiAgICAgIGh1bGwgPSBbXTtcblxuICAvLyBBZGQgdXBwZXIgaHVsbCBpbiByaWdodC10by1sIG9yZGVyLlxuICAvLyBUaGVuIGFkZCBsb3dlciBodWxsIGluIGxlZnQtdG8tcmlnaHQgb3JkZXIuXG4gIGZvciAoaSA9IHVwcGVySW5kZXhlcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkgaHVsbC5wdXNoKHBvaW50c1tzb3J0ZWRQb2ludHNbdXBwZXJJbmRleGVzW2ldXVsyXV0pO1xuICBmb3IgKGkgPSArc2tpcExlZnQ7IGkgPCBsb3dlckluZGV4ZXMubGVuZ3RoIC0gc2tpcFJpZ2h0OyArK2kpIGh1bGwucHVzaChwb2ludHNbc29ydGVkUG9pbnRzW2xvd2VySW5kZXhlc1tpXV1bMl1dKTtcblxuICByZXR1cm4gaHVsbDtcbn1cblxuZnVuY3Rpb24gY29udGFpbnMkMihwb2x5Z29uLCBwb2ludCkge1xuICB2YXIgbiA9IHBvbHlnb24ubGVuZ3RoLFxuICAgICAgcCA9IHBvbHlnb25bbiAtIDFdLFxuICAgICAgeCA9IHBvaW50WzBdLCB5ID0gcG9pbnRbMV0sXG4gICAgICB4MCA9IHBbMF0sIHkwID0gcFsxXSxcbiAgICAgIHgxLCB5MSxcbiAgICAgIGluc2lkZSA9IGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgcCA9IHBvbHlnb25baV0sIHgxID0gcFswXSwgeTEgPSBwWzFdO1xuICAgIGlmICgoKHkxID4geSkgIT09ICh5MCA+IHkpKSAmJiAoeCA8ICh4MCAtIHgxKSAqICh5IC0geTEpIC8gKHkwIC0geTEpICsgeDEpKSBpbnNpZGUgPSAhaW5zaWRlO1xuICAgIHgwID0geDEsIHkwID0geTE7XG4gIH1cblxuICByZXR1cm4gaW5zaWRlO1xufVxuXG5mdW5jdGlvbiBsZW5ndGgkMihwb2x5Z29uKSB7XG4gIHZhciBpID0gLTEsXG4gICAgICBuID0gcG9seWdvbi5sZW5ndGgsXG4gICAgICBiID0gcG9seWdvbltuIC0gMV0sXG4gICAgICB4YSxcbiAgICAgIHlhLFxuICAgICAgeGIgPSBiWzBdLFxuICAgICAgeWIgPSBiWzFdLFxuICAgICAgcGVyaW1ldGVyID0gMDtcblxuICB3aGlsZSAoKytpIDwgbikge1xuICAgIHhhID0geGI7XG4gICAgeWEgPSB5YjtcbiAgICBiID0gcG9seWdvbltpXTtcbiAgICB4YiA9IGJbMF07XG4gICAgeWIgPSBiWzFdO1xuICAgIHhhIC09IHhiO1xuICAgIHlhIC09IHliO1xuICAgIHBlcmltZXRlciArPSBNYXRoLnNxcnQoeGEgKiB4YSArIHlhICogeWEpO1xuICB9XG5cbiAgcmV0dXJuIHBlcmltZXRlcjtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFNvdXJjZSQxKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKTtcbn1cblxudmFyIHVuaWZvcm0gPSAoZnVuY3Rpb24gc291cmNlUmFuZG9tVW5pZm9ybShzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tVW5pZm9ybShtaW4sIG1heCkge1xuICAgIG1pbiA9IG1pbiA9PSBudWxsID8gMCA6ICttaW47XG4gICAgbWF4ID0gbWF4ID09IG51bGwgPyAxIDogK21heDtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkgbWF4ID0gbWluLCBtaW4gPSAwO1xuICAgIGVsc2UgbWF4IC09IG1pbjtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc291cmNlKCkgKiBtYXggKyBtaW47XG4gICAgfTtcbiAgfVxuXG4gIHJhbmRvbVVuaWZvcm0uc291cmNlID0gc291cmNlUmFuZG9tVW5pZm9ybTtcblxuICByZXR1cm4gcmFuZG9tVW5pZm9ybTtcbn0pKGRlZmF1bHRTb3VyY2UkMSk7XG5cbnZhciBub3JtYWwgPSAoZnVuY3Rpb24gc291cmNlUmFuZG9tTm9ybWFsKHNvdXJjZSkge1xuICBmdW5jdGlvbiByYW5kb21Ob3JtYWwobXUsIHNpZ21hKSB7XG4gICAgdmFyIHgsIHI7XG4gICAgbXUgPSBtdSA9PSBudWxsID8gMCA6ICttdTtcbiAgICBzaWdtYSA9IHNpZ21hID09IG51bGwgPyAxIDogK3NpZ21hO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB5O1xuXG4gICAgICAvLyBJZiBhdmFpbGFibGUsIHVzZSB0aGUgc2Vjb25kIHByZXZpb3VzbHktZ2VuZXJhdGVkIHVuaWZvcm0gcmFuZG9tLlxuICAgICAgaWYgKHggIT0gbnVsbCkgeSA9IHgsIHggPSBudWxsO1xuXG4gICAgICAvLyBPdGhlcndpc2UsIGdlbmVyYXRlIGEgbmV3IHggYW5kIHkuXG4gICAgICBlbHNlIGRvIHtcbiAgICAgICAgeCA9IHNvdXJjZSgpICogMiAtIDE7XG4gICAgICAgIHkgPSBzb3VyY2UoKSAqIDIgLSAxO1xuICAgICAgICByID0geCAqIHggKyB5ICogeTtcbiAgICAgIH0gd2hpbGUgKCFyIHx8IHIgPiAxKTtcblxuICAgICAgcmV0dXJuIG11ICsgc2lnbWEgKiB5ICogTWF0aC5zcXJ0KC0yICogTWF0aC5sb2cocikgLyByKTtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tTm9ybWFsLnNvdXJjZSA9IHNvdXJjZVJhbmRvbU5vcm1hbDtcblxuICByZXR1cm4gcmFuZG9tTm9ybWFsO1xufSkoZGVmYXVsdFNvdXJjZSQxKTtcblxudmFyIGxvZ05vcm1hbCA9IChmdW5jdGlvbiBzb3VyY2VSYW5kb21Mb2dOb3JtYWwoc291cmNlKSB7XG4gIGZ1bmN0aW9uIHJhbmRvbUxvZ05vcm1hbCgpIHtcbiAgICB2YXIgcmFuZG9tTm9ybWFsID0gbm9ybWFsLnNvdXJjZShzb3VyY2UpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE1hdGguZXhwKHJhbmRvbU5vcm1hbCgpKTtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tTG9nTm9ybWFsLnNvdXJjZSA9IHNvdXJjZVJhbmRvbUxvZ05vcm1hbDtcblxuICByZXR1cm4gcmFuZG9tTG9nTm9ybWFsO1xufSkoZGVmYXVsdFNvdXJjZSQxKTtcblxudmFyIGlyd2luSGFsbCA9IChmdW5jdGlvbiBzb3VyY2VSYW5kb21JcndpbkhhbGwoc291cmNlKSB7XG4gIGZ1bmN0aW9uIHJhbmRvbUlyd2luSGFsbChuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgZm9yICh2YXIgc3VtID0gMCwgaSA9IDA7IGkgPCBuOyArK2kpIHN1bSArPSBzb3VyY2UoKTtcbiAgICAgIHJldHVybiBzdW07XG4gICAgfTtcbiAgfVxuXG4gIHJhbmRvbUlyd2luSGFsbC5zb3VyY2UgPSBzb3VyY2VSYW5kb21JcndpbkhhbGw7XG5cbiAgcmV0dXJuIHJhbmRvbUlyd2luSGFsbDtcbn0pKGRlZmF1bHRTb3VyY2UkMSk7XG5cbnZhciBiYXRlcyA9IChmdW5jdGlvbiBzb3VyY2VSYW5kb21CYXRlcyhzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tQmF0ZXMobikge1xuICAgIHZhciByYW5kb21JcndpbkhhbGwgPSBpcndpbkhhbGwuc291cmNlKHNvdXJjZSkobik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJhbmRvbUlyd2luSGFsbCgpIC8gbjtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tQmF0ZXMuc291cmNlID0gc291cmNlUmFuZG9tQmF0ZXM7XG5cbiAgcmV0dXJuIHJhbmRvbUJhdGVzO1xufSkoZGVmYXVsdFNvdXJjZSQxKTtcblxudmFyIGV4cG9uZW50aWFsJDEgPSAoZnVuY3Rpb24gc291cmNlUmFuZG9tRXhwb25lbnRpYWwoc291cmNlKSB7XG4gIGZ1bmN0aW9uIHJhbmRvbUV4cG9uZW50aWFsKGxhbWJkYSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAtTWF0aC5sb2coMSAtIHNvdXJjZSgpKSAvIGxhbWJkYTtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tRXhwb25lbnRpYWwuc291cmNlID0gc291cmNlUmFuZG9tRXhwb25lbnRpYWw7XG5cbiAgcmV0dXJuIHJhbmRvbUV4cG9uZW50aWFsO1xufSkoZGVmYXVsdFNvdXJjZSQxKTtcblxuZnVuY3Rpb24gaW5pdFJhbmdlKGRvbWFpbiwgcmFuZ2UpIHtcbiAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiBicmVhaztcbiAgICBjYXNlIDE6IHRoaXMucmFuZ2UoZG9tYWluKTsgYnJlYWs7XG4gICAgZGVmYXVsdDogdGhpcy5yYW5nZShyYW5nZSkuZG9tYWluKGRvbWFpbik7IGJyZWFrO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBpbml0SW50ZXJwb2xhdG9yKGRvbWFpbiwgaW50ZXJwb2xhdG9yKSB7XG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogYnJlYWs7XG4gICAgY2FzZSAxOiB0aGlzLmludGVycG9sYXRvcihkb21haW4pOyBicmVhaztcbiAgICBkZWZhdWx0OiB0aGlzLmludGVycG9sYXRvcihpbnRlcnBvbGF0b3IpLmRvbWFpbihkb21haW4pOyBicmVhaztcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxudmFyIGFycmF5JDMgPSBBcnJheS5wcm90b3R5cGU7XG5cbnZhciBtYXAkMiA9IGFycmF5JDMubWFwO1xudmFyIHNsaWNlJDUgPSBhcnJheSQzLnNsaWNlO1xuXG52YXIgaW1wbGljaXQgPSB7bmFtZTogXCJpbXBsaWNpdFwifTtcblxuZnVuY3Rpb24gb3JkaW5hbCgpIHtcbiAgdmFyIGluZGV4ID0gbWFwJDEoKSxcbiAgICAgIGRvbWFpbiA9IFtdLFxuICAgICAgcmFuZ2UgPSBbXSxcbiAgICAgIHVua25vd24gPSBpbXBsaWNpdDtcblxuICBmdW5jdGlvbiBzY2FsZShkKSB7XG4gICAgdmFyIGtleSA9IGQgKyBcIlwiLCBpID0gaW5kZXguZ2V0KGtleSk7XG4gICAgaWYgKCFpKSB7XG4gICAgICBpZiAodW5rbm93biAhPT0gaW1wbGljaXQpIHJldHVybiB1bmtub3duO1xuICAgICAgaW5kZXguc2V0KGtleSwgaSA9IGRvbWFpbi5wdXNoKGQpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJhbmdlWyhpIC0gMSkgJSByYW5nZS5sZW5ndGhdO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRvbWFpbi5zbGljZSgpO1xuICAgIGRvbWFpbiA9IFtdLCBpbmRleCA9IG1hcCQxKCk7XG4gICAgdmFyIGkgPSAtMSwgbiA9IF8ubGVuZ3RoLCBkLCBrZXk7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmICghaW5kZXguaGFzKGtleSA9IChkID0gX1tpXSkgKyBcIlwiKSkgaW5kZXguc2V0KGtleSwgZG9tYWluLnB1c2goZCkpO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlJDUuY2FsbChfKSwgc2NhbGUpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gb3JkaW5hbChkb21haW4sIHJhbmdlKS51bmtub3duKHVua25vd24pO1xuICB9O1xuXG4gIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmZ1bmN0aW9uIGJhbmQoKSB7XG4gIHZhciBzY2FsZSA9IG9yZGluYWwoKS51bmtub3duKHVuZGVmaW5lZCksXG4gICAgICBkb21haW4gPSBzY2FsZS5kb21haW4sXG4gICAgICBvcmRpbmFsUmFuZ2UgPSBzY2FsZS5yYW5nZSxcbiAgICAgIHJhbmdlJCQxID0gWzAsIDFdLFxuICAgICAgc3RlcCxcbiAgICAgIGJhbmR3aWR0aCxcbiAgICAgIHJvdW5kID0gZmFsc2UsXG4gICAgICBwYWRkaW5nSW5uZXIgPSAwLFxuICAgICAgcGFkZGluZ091dGVyID0gMCxcbiAgICAgIGFsaWduID0gMC41O1xuXG4gIGRlbGV0ZSBzY2FsZS51bmtub3duO1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgdmFyIG4gPSBkb21haW4oKS5sZW5ndGgsXG4gICAgICAgIHJldmVyc2UgPSByYW5nZSQkMVsxXSA8IHJhbmdlJCQxWzBdLFxuICAgICAgICBzdGFydCA9IHJhbmdlJCQxW3JldmVyc2UgLSAwXSxcbiAgICAgICAgc3RvcCA9IHJhbmdlJCQxWzEgLSByZXZlcnNlXTtcbiAgICBzdGVwID0gKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgxLCBuIC0gcGFkZGluZ0lubmVyICsgcGFkZGluZ091dGVyICogMik7XG4gICAgaWYgKHJvdW5kKSBzdGVwID0gTWF0aC5mbG9vcihzdGVwKTtcbiAgICBzdGFydCArPSAoc3RvcCAtIHN0YXJ0IC0gc3RlcCAqIChuIC0gcGFkZGluZ0lubmVyKSkgKiBhbGlnbjtcbiAgICBiYW5kd2lkdGggPSBzdGVwICogKDEgLSBwYWRkaW5nSW5uZXIpO1xuICAgIGlmIChyb3VuZCkgc3RhcnQgPSBNYXRoLnJvdW5kKHN0YXJ0KSwgYmFuZHdpZHRoID0gTWF0aC5yb3VuZChiYW5kd2lkdGgpO1xuICAgIHZhciB2YWx1ZXMgPSBzZXF1ZW5jZShuKS5tYXAoZnVuY3Rpb24oaSkgeyByZXR1cm4gc3RhcnQgKyBzdGVwICogaTsgfSk7XG4gICAgcmV0dXJuIG9yZGluYWxSYW5nZShyZXZlcnNlID8gdmFsdWVzLnJldmVyc2UoKSA6IHZhbHVlcyk7XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluKF8pLCByZXNjYWxlKCkpIDogZG9tYWluKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UkJDEgPSBbK19bMF0sICtfWzFdXSwgcmVzY2FsZSgpKSA6IHJhbmdlJCQxLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2VSb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gcmFuZ2UkJDEgPSBbK19bMF0sICtfWzFdXSwgcm91bmQgPSB0cnVlLCByZXNjYWxlKCk7XG4gIH07XG5cbiAgc2NhbGUuYmFuZHdpZHRoID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGJhbmR3aWR0aDtcbiAgfTtcblxuICBzY2FsZS5zdGVwID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHN0ZXA7XG4gIH07XG5cbiAgc2NhbGUucm91bmQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocm91bmQgPSAhIV8sIHJlc2NhbGUoKSkgOiByb3VuZDtcbiAgfTtcblxuICBzY2FsZS5wYWRkaW5nID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdJbm5lciA9IE1hdGgubWluKDEsIHBhZGRpbmdPdXRlciA9ICtfKSwgcmVzY2FsZSgpKSA6IHBhZGRpbmdJbm5lcjtcbiAgfTtcblxuICBzY2FsZS5wYWRkaW5nSW5uZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0lubmVyID0gTWF0aC5taW4oMSwgXyksIHJlc2NhbGUoKSkgOiBwYWRkaW5nSW5uZXI7XG4gIH07XG5cbiAgc2NhbGUucGFkZGluZ091dGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdPdXRlciA9ICtfLCByZXNjYWxlKCkpIDogcGFkZGluZ091dGVyO1xuICB9O1xuXG4gIHNjYWxlLmFsaWduID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFsaWduID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgXykpLCByZXNjYWxlKCkpIDogYWxpZ247XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBiYW5kKGRvbWFpbigpLCByYW5nZSQkMSlcbiAgICAgICAgLnJvdW5kKHJvdW5kKVxuICAgICAgICAucGFkZGluZ0lubmVyKHBhZGRpbmdJbm5lcilcbiAgICAgICAgLnBhZGRpbmdPdXRlcihwYWRkaW5nT3V0ZXIpXG4gICAgICAgIC5hbGlnbihhbGlnbik7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRSYW5nZS5hcHBseShyZXNjYWxlKCksIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHBvaW50aXNoKHNjYWxlKSB7XG4gIHZhciBjb3B5ID0gc2NhbGUuY29weTtcblxuICBzY2FsZS5wYWRkaW5nID0gc2NhbGUucGFkZGluZ091dGVyO1xuICBkZWxldGUgc2NhbGUucGFkZGluZ0lubmVyO1xuICBkZWxldGUgc2NhbGUucGFkZGluZ091dGVyO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcG9pbnRpc2goY29weSgpKTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmZ1bmN0aW9uIHBvaW50JDEoKSB7XG4gIHJldHVybiBwb2ludGlzaChiYW5kLmFwcGx5KG51bGwsIGFyZ3VtZW50cykucGFkZGluZ0lubmVyKDEpKTtcbn1cblxuZnVuY3Rpb24gY29uc3RhbnQkYSh4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbnVtYmVyJDIoeCkge1xuICByZXR1cm4gK3g7XG59XG5cbnZhciB1bml0ID0gWzAsIDFdO1xuXG5mdW5jdGlvbiBpZGVudGl0eSQ2KHgpIHtcbiAgcmV0dXJuIHg7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZShhLCBiKSB7XG4gIHJldHVybiAoYiAtPSAoYSA9ICthKSlcbiAgICAgID8gZnVuY3Rpb24oeCkgeyByZXR1cm4gKHggLSBhKSAvIGI7IH1cbiAgICAgIDogY29uc3RhbnQkYShpc05hTihiKSA/IE5hTiA6IDAuNSk7XG59XG5cbmZ1bmN0aW9uIGNsYW1wZXIoZG9tYWluKSB7XG4gIHZhciBhID0gZG9tYWluWzBdLCBiID0gZG9tYWluW2RvbWFpbi5sZW5ndGggLSAxXSwgdDtcbiAgaWYgKGEgPiBiKSB0ID0gYSwgYSA9IGIsIGIgPSB0O1xuICByZXR1cm4gZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5tYXgoYSwgTWF0aC5taW4oYiwgeCkpOyB9O1xufVxuXG4vLyBub3JtYWxpemUoYSwgYikoeCkgdGFrZXMgYSBkb21haW4gdmFsdWUgeCBpbiBbYSxiXSBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyBwYXJhbWV0ZXIgdCBpbiBbMCwxXS5cbi8vIGludGVycG9sYXRlKGEsIGIpKHQpIHRha2VzIGEgcGFyYW1ldGVyIHQgaW4gWzAsMV0gYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmFuZ2UgdmFsdWUgeCBpbiBbYSxiXS5cbmZ1bmN0aW9uIGJpbWFwKGRvbWFpbiwgcmFuZ2UsIGludGVycG9sYXRlJCQxKSB7XG4gIHZhciBkMCA9IGRvbWFpblswXSwgZDEgPSBkb21haW5bMV0sIHIwID0gcmFuZ2VbMF0sIHIxID0gcmFuZ2VbMV07XG4gIGlmIChkMSA8IGQwKSBkMCA9IG5vcm1hbGl6ZShkMSwgZDApLCByMCA9IGludGVycG9sYXRlJCQxKHIxLCByMCk7XG4gIGVsc2UgZDAgPSBub3JtYWxpemUoZDAsIGQxKSwgcjAgPSBpbnRlcnBvbGF0ZSQkMShyMCwgcjEpO1xuICByZXR1cm4gZnVuY3Rpb24oeCkgeyByZXR1cm4gcjAoZDAoeCkpOyB9O1xufVxuXG5mdW5jdGlvbiBwb2x5bWFwKGRvbWFpbiwgcmFuZ2UsIGludGVycG9sYXRlJCQxKSB7XG4gIHZhciBqID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoKSAtIDEsXG4gICAgICBkID0gbmV3IEFycmF5KGopLFxuICAgICAgciA9IG5ldyBBcnJheShqKSxcbiAgICAgIGkgPSAtMTtcblxuICAvLyBSZXZlcnNlIGRlc2NlbmRpbmcgZG9tYWlucy5cbiAgaWYgKGRvbWFpbltqXSA8IGRvbWFpblswXSkge1xuICAgIGRvbWFpbiA9IGRvbWFpbi5zbGljZSgpLnJldmVyc2UoKTtcbiAgICByYW5nZSA9IHJhbmdlLnNsaWNlKCkucmV2ZXJzZSgpO1xuICB9XG5cbiAgd2hpbGUgKCsraSA8IGopIHtcbiAgICBkW2ldID0gbm9ybWFsaXplKGRvbWFpbltpXSwgZG9tYWluW2kgKyAxXSk7XG4gICAgcltpXSA9IGludGVycG9sYXRlJCQxKHJhbmdlW2ldLCByYW5nZVtpICsgMV0pO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICB2YXIgaSA9IGJpc2VjdFJpZ2h0KGRvbWFpbiwgeCwgMSwgaikgLSAxO1xuICAgIHJldHVybiByW2ldKGRbaV0oeCkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjb3B5KHNvdXJjZSwgdGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXRcbiAgICAgIC5kb21haW4oc291cmNlLmRvbWFpbigpKVxuICAgICAgLnJhbmdlKHNvdXJjZS5yYW5nZSgpKVxuICAgICAgLmludGVycG9sYXRlKHNvdXJjZS5pbnRlcnBvbGF0ZSgpKVxuICAgICAgLmNsYW1wKHNvdXJjZS5jbGFtcCgpKVxuICAgICAgLnVua25vd24oc291cmNlLnVua25vd24oKSk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybWVyJDEoKSB7XG4gIHZhciBkb21haW4gPSB1bml0LFxuICAgICAgcmFuZ2UgPSB1bml0LFxuICAgICAgaW50ZXJwb2xhdGUkJDEgPSBpbnRlcnBvbGF0ZVZhbHVlLFxuICAgICAgdHJhbnNmb3JtLFxuICAgICAgdW50cmFuc2Zvcm0sXG4gICAgICB1bmtub3duLFxuICAgICAgY2xhbXAgPSBpZGVudGl0eSQ2LFxuICAgICAgcGllY2V3aXNlJCQxLFxuICAgICAgb3V0cHV0LFxuICAgICAgaW5wdXQ7XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICBwaWVjZXdpc2UkJDEgPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpID4gMiA/IHBvbHltYXAgOiBiaW1hcDtcbiAgICBvdXRwdXQgPSBpbnB1dCA9IG51bGw7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHJldHVybiBpc05hTih4ID0gK3gpID8gdW5rbm93biA6IChvdXRwdXQgfHwgKG91dHB1dCA9IHBpZWNld2lzZSQkMShkb21haW4ubWFwKHRyYW5zZm9ybSksIHJhbmdlLCBpbnRlcnBvbGF0ZSQkMSkpKSh0cmFuc2Zvcm0oY2xhbXAoeCkpKTtcbiAgfVxuXG4gIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4gY2xhbXAodW50cmFuc2Zvcm0oKGlucHV0IHx8IChpbnB1dCA9IHBpZWNld2lzZSQkMShyYW5nZSwgZG9tYWluLm1hcCh0cmFuc2Zvcm0pLCBpbnRlcnBvbGF0ZU51bWJlcikpKSh5KSkpO1xuICB9O1xuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSBtYXAkMi5jYWxsKF8sIG51bWJlciQyKSwgY2xhbXAgPT09IGlkZW50aXR5JDYgfHwgKGNsYW1wID0gY2xhbXBlcihkb21haW4pKSwgcmVzY2FsZSgpKSA6IGRvbWFpbi5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gc2xpY2UkNS5jYWxsKF8pLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZVJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiByYW5nZSA9IHNsaWNlJDUuY2FsbChfKSwgaW50ZXJwb2xhdGUkJDEgPSBpbnRlcnBvbGF0ZVJvdW5kLCByZXNjYWxlKCk7XG4gIH07XG5cbiAgc2NhbGUuY2xhbXAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xhbXAgPSBfID8gY2xhbXBlcihkb21haW4pIDogaWRlbnRpdHkkNiwgc2NhbGUpIDogY2xhbXAgIT09IGlkZW50aXR5JDY7XG4gIH07XG5cbiAgc2NhbGUuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdGUkJDEgPSBfLCByZXNjYWxlKCkpIDogaW50ZXJwb2xhdGUkJDE7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24odCwgdSkge1xuICAgIHRyYW5zZm9ybSA9IHQsIHVudHJhbnNmb3JtID0gdTtcbiAgICByZXR1cm4gcmVzY2FsZSgpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjb250aW51b3VzKHRyYW5zZm9ybSwgdW50cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIHRyYW5zZm9ybWVyJDEoKSh0cmFuc2Zvcm0sIHVudHJhbnNmb3JtKTtcbn1cblxuZnVuY3Rpb24gdGlja0Zvcm1hdChzdGFydCwgc3RvcCwgY291bnQsIHNwZWNpZmllcikge1xuICB2YXIgc3RlcCA9IHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCksXG4gICAgICBwcmVjaXNpb247XG4gIHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIgPT0gbnVsbCA/IFwiLGZcIiA6IHNwZWNpZmllcik7XG4gIHN3aXRjaCAoc3BlY2lmaWVyLnR5cGUpIHtcbiAgICBjYXNlIFwic1wiOiB7XG4gICAgICB2YXIgdmFsdWUgPSBNYXRoLm1heChNYXRoLmFicyhzdGFydCksIE1hdGguYWJzKHN0b3ApKTtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblByZWZpeChzdGVwLCB2YWx1ZSkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uO1xuICAgICAgcmV0dXJuIGV4cG9ydHMuZm9ybWF0UHJlZml4KHNwZWNpZmllciwgdmFsdWUpO1xuICAgIH1cbiAgICBjYXNlIFwiXCI6XG4gICAgY2FzZSBcImVcIjpcbiAgICBjYXNlIFwiZ1wiOlxuICAgIGNhc2UgXCJwXCI6XG4gICAgY2FzZSBcInJcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUm91bmQoc3RlcCwgTWF0aC5tYXgoTWF0aC5hYnMoc3RhcnQpLCBNYXRoLmFicyhzdG9wKSkpKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCJlXCIpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJmXCI6XG4gICAgY2FzZSBcIiVcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uRml4ZWQoc3RlcCkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uIC0gKHNwZWNpZmllci50eXBlID09PSBcIiVcIikgKiAyO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBleHBvcnRzLmZvcm1hdChzcGVjaWZpZXIpO1xufVxuXG5mdW5jdGlvbiBsaW5lYXJpc2goc2NhbGUpIHtcbiAgdmFyIGRvbWFpbiA9IHNjYWxlLmRvbWFpbjtcblxuICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gdGlja3MoZFswXSwgZFtkLmxlbmd0aCAtIDFdLCBjb3VudCA9PSBudWxsID8gMTAgOiBjb3VudCk7XG4gIH07XG5cbiAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgICB2YXIgZCA9IGRvbWFpbigpO1xuICAgIHJldHVybiB0aWNrRm9ybWF0KGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQsIHNwZWNpZmllcik7XG4gIH07XG5cbiAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgaWYgKGNvdW50ID09IG51bGwpIGNvdW50ID0gMTA7XG5cbiAgICB2YXIgZCA9IGRvbWFpbigpLFxuICAgICAgICBpMCA9IDAsXG4gICAgICAgIGkxID0gZC5sZW5ndGggLSAxLFxuICAgICAgICBzdGFydCA9IGRbaTBdLFxuICAgICAgICBzdG9wID0gZFtpMV0sXG4gICAgICAgIHN0ZXA7XG5cbiAgICBpZiAoc3RvcCA8IHN0YXJ0KSB7XG4gICAgICBzdGVwID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IHN0ZXA7XG4gICAgICBzdGVwID0gaTAsIGkwID0gaTEsIGkxID0gc3RlcDtcbiAgICB9XG5cbiAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuXG4gICAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBzdG9wID0gTWF0aC5jZWlsKHN0b3AgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgIHN0YXJ0ID0gTWF0aC5jZWlsKHN0YXJ0ICogc3RlcCkgLyBzdGVwO1xuICAgICAgc3RvcCA9IE1hdGguZmxvb3Ioc3RvcCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gICAgfVxuXG4gICAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICBkW2kwXSA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBkW2kxXSA9IE1hdGguY2VpbChzdG9wIC8gc3RlcCkgKiBzdGVwO1xuICAgICAgZG9tYWluKGQpO1xuICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgIGRbaTBdID0gTWF0aC5jZWlsKHN0YXJ0ICogc3RlcCkgLyBzdGVwO1xuICAgICAgZFtpMV0gPSBNYXRoLmZsb29yKHN0b3AgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICBkb21haW4oZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZnVuY3Rpb24gbGluZWFyJDIoKSB7XG4gIHZhciBzY2FsZSA9IGNvbnRpbnVvdXMoaWRlbnRpdHkkNiwgaWRlbnRpdHkkNik7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBsaW5lYXIkMigpKTtcbiAgfTtcblxuICBpbml0UmFuZ2UuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG5cbiAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG59XG5cbmZ1bmN0aW9uIGlkZW50aXR5JDcoZG9tYWluKSB7XG4gIHZhciB1bmtub3duO1xuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICByZXR1cm4gaXNOYU4oeCA9ICt4KSA/IHVua25vd24gOiB4O1xuICB9XG5cbiAgc2NhbGUuaW52ZXJ0ID0gc2NhbGU7XG5cbiAgc2NhbGUuZG9tYWluID0gc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gbWFwJDIuY2FsbChfLCBudW1iZXIkMiksIHNjYWxlKSA6IGRvbWFpbi5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHVua25vd247XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBpZGVudGl0eSQ3KGRvbWFpbikudW5rbm93bih1bmtub3duKTtcbiAgfTtcblxuICBkb21haW4gPSBhcmd1bWVudHMubGVuZ3RoID8gbWFwJDIuY2FsbChkb21haW4sIG51bWJlciQyKSA6IFswLCAxXTtcblxuICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcbn1cblxuZnVuY3Rpb24gbmljZShkb21haW4sIGludGVydmFsKSB7XG4gIGRvbWFpbiA9IGRvbWFpbi5zbGljZSgpO1xuXG4gIHZhciBpMCA9IDAsXG4gICAgICBpMSA9IGRvbWFpbi5sZW5ndGggLSAxLFxuICAgICAgeDAgPSBkb21haW5baTBdLFxuICAgICAgeDEgPSBkb21haW5baTFdLFxuICAgICAgdDtcblxuICBpZiAoeDEgPCB4MCkge1xuICAgIHQgPSBpMCwgaTAgPSBpMSwgaTEgPSB0O1xuICAgIHQgPSB4MCwgeDAgPSB4MSwgeDEgPSB0O1xuICB9XG5cbiAgZG9tYWluW2kwXSA9IGludGVydmFsLmZsb29yKHgwKTtcbiAgZG9tYWluW2kxXSA9IGludGVydmFsLmNlaWwoeDEpO1xuICByZXR1cm4gZG9tYWluO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Mb2coeCkge1xuICByZXR1cm4gTWF0aC5sb2coeCk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybUV4cCh4KSB7XG4gIHJldHVybiBNYXRoLmV4cCh4KTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtTG9nbih4KSB7XG4gIHJldHVybiAtTWF0aC5sb2coLXgpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1FeHBuKHgpIHtcbiAgcmV0dXJuIC1NYXRoLmV4cCgteCk7XG59XG5cbmZ1bmN0aW9uIHBvdzEwKHgpIHtcbiAgcmV0dXJuIGlzRmluaXRlKHgpID8gKyhcIjFlXCIgKyB4KSA6IHggPCAwID8gMCA6IHg7XG59XG5cbmZ1bmN0aW9uIHBvd3AoYmFzZSkge1xuICByZXR1cm4gYmFzZSA9PT0gMTAgPyBwb3cxMFxuICAgICAgOiBiYXNlID09PSBNYXRoLkUgPyBNYXRoLmV4cFxuICAgICAgOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnBvdyhiYXNlLCB4KTsgfTtcbn1cblxuZnVuY3Rpb24gbG9ncChiYXNlKSB7XG4gIHJldHVybiBiYXNlID09PSBNYXRoLkUgPyBNYXRoLmxvZ1xuICAgICAgOiBiYXNlID09PSAxMCAmJiBNYXRoLmxvZzEwXG4gICAgICB8fCBiYXNlID09PSAyICYmIE1hdGgubG9nMlxuICAgICAgfHwgKGJhc2UgPSBNYXRoLmxvZyhiYXNlKSwgZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5sb2coeCkgLyBiYXNlOyB9KTtcbn1cblxuZnVuY3Rpb24gcmVmbGVjdChmKSB7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIC1mKC14KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbG9nZ2lzaCh0cmFuc2Zvcm0pIHtcbiAgdmFyIHNjYWxlID0gdHJhbnNmb3JtKHRyYW5zZm9ybUxvZywgdHJhbnNmb3JtRXhwKSxcbiAgICAgIGRvbWFpbiA9IHNjYWxlLmRvbWFpbixcbiAgICAgIGJhc2UgPSAxMCxcbiAgICAgIGxvZ3MsXG4gICAgICBwb3dzO1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgbG9ncyA9IGxvZ3AoYmFzZSksIHBvd3MgPSBwb3dwKGJhc2UpO1xuICAgIGlmIChkb21haW4oKVswXSA8IDApIHtcbiAgICAgIGxvZ3MgPSByZWZsZWN0KGxvZ3MpLCBwb3dzID0gcmVmbGVjdChwb3dzKTtcbiAgICAgIHRyYW5zZm9ybSh0cmFuc2Zvcm1Mb2duLCB0cmFuc2Zvcm1FeHBuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJhbnNmb3JtKHRyYW5zZm9ybUxvZywgdHJhbnNmb3JtRXhwKTtcbiAgICB9XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG5cbiAgc2NhbGUuYmFzZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChiYXNlID0gK18sIHJlc2NhbGUoKSkgOiBiYXNlO1xuICB9O1xuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4oXyksIHJlc2NhbGUoKSkgOiBkb21haW4oKTtcbiAgfTtcblxuICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgdmFyIGQgPSBkb21haW4oKSxcbiAgICAgICAgdSA9IGRbMF0sXG4gICAgICAgIHYgPSBkW2QubGVuZ3RoIC0gMV0sXG4gICAgICAgIHI7XG5cbiAgICBpZiAociA9IHYgPCB1KSBpID0gdSwgdSA9IHYsIHYgPSBpO1xuXG4gICAgdmFyIGkgPSBsb2dzKHUpLFxuICAgICAgICBqID0gbG9ncyh2KSxcbiAgICAgICAgcCxcbiAgICAgICAgayxcbiAgICAgICAgdCxcbiAgICAgICAgbiA9IGNvdW50ID09IG51bGwgPyAxMCA6ICtjb3VudCxcbiAgICAgICAgeiA9IFtdO1xuXG4gICAgaWYgKCEoYmFzZSAlIDEpICYmIGogLSBpIDwgbikge1xuICAgICAgaSA9IE1hdGgucm91bmQoaSkgLSAxLCBqID0gTWF0aC5yb3VuZChqKSArIDE7XG4gICAgICBpZiAodSA+IDApIGZvciAoOyBpIDwgajsgKytpKSB7XG4gICAgICAgIGZvciAoayA9IDEsIHAgPSBwb3dzKGkpOyBrIDwgYmFzZTsgKytrKSB7XG4gICAgICAgICAgdCA9IHAgKiBrO1xuICAgICAgICAgIGlmICh0IDwgdSkgY29udGludWU7XG4gICAgICAgICAgaWYgKHQgPiB2KSBicmVhaztcbiAgICAgICAgICB6LnB1c2godCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBmb3IgKDsgaSA8IGo7ICsraSkge1xuICAgICAgICBmb3IgKGsgPSBiYXNlIC0gMSwgcCA9IHBvd3MoaSk7IGsgPj0gMTsgLS1rKSB7XG4gICAgICAgICAgdCA9IHAgKiBrO1xuICAgICAgICAgIGlmICh0IDwgdSkgY29udGludWU7XG4gICAgICAgICAgaWYgKHQgPiB2KSBicmVhaztcbiAgICAgICAgICB6LnB1c2godCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgeiA9IHRpY2tzKGksIGosIE1hdGgubWluKGogLSBpLCBuKSkubWFwKHBvd3MpO1xuICAgIH1cblxuICAgIHJldHVybiByID8gei5yZXZlcnNlKCkgOiB6O1xuICB9O1xuXG4gIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgaWYgKHNwZWNpZmllciA9PSBudWxsKSBzcGVjaWZpZXIgPSBiYXNlID09PSAxMCA/IFwiLjBlXCIgOiBcIixcIjtcbiAgICBpZiAodHlwZW9mIHNwZWNpZmllciAhPT0gXCJmdW5jdGlvblwiKSBzcGVjaWZpZXIgPSBleHBvcnRzLmZvcm1hdChzcGVjaWZpZXIpO1xuICAgIGlmIChjb3VudCA9PT0gSW5maW5pdHkpIHJldHVybiBzcGVjaWZpZXI7XG4gICAgaWYgKGNvdW50ID09IG51bGwpIGNvdW50ID0gMTA7XG4gICAgdmFyIGsgPSBNYXRoLm1heCgxLCBiYXNlICogY291bnQgLyBzY2FsZS50aWNrcygpLmxlbmd0aCk7IC8vIFRPRE8gZmFzdCBlc3RpbWF0ZT9cbiAgICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgICAgdmFyIGkgPSBkIC8gcG93cyhNYXRoLnJvdW5kKGxvZ3MoZCkpKTtcbiAgICAgIGlmIChpICogYmFzZSA8IGJhc2UgLSAwLjUpIGkgKj0gYmFzZTtcbiAgICAgIHJldHVybiBpIDw9IGsgPyBzcGVjaWZpZXIoZCkgOiBcIlwiO1xuICAgIH07XG4gIH07XG5cbiAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkb21haW4obmljZShkb21haW4oKSwge1xuICAgICAgZmxvb3I6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHBvd3MoTWF0aC5mbG9vcihsb2dzKHgpKSk7IH0sXG4gICAgICBjZWlsOiBmdW5jdGlvbih4KSB7IHJldHVybiBwb3dzKE1hdGguY2VpbChsb2dzKHgpKSk7IH1cbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5mdW5jdGlvbiBsb2ckMSgpIHtcbiAgdmFyIHNjYWxlID0gbG9nZ2lzaCh0cmFuc2Zvcm1lciQxKCkpLmRvbWFpbihbMSwgMTBdKTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkoc2NhbGUsIGxvZyQxKCkpLmJhc2Uoc2NhbGUuYmFzZSgpKTtcbiAgfTtcblxuICBpbml0UmFuZ2UuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1TeW1sb2coYykge1xuICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBNYXRoLnNpZ24oeCkgKiBNYXRoLmxvZzFwKE1hdGguYWJzKHggLyBjKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybVN5bWV4cChjKSB7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIE1hdGguc2lnbih4KSAqIE1hdGguZXhwbTEoTWF0aC5hYnMoeCkpICogYztcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3ltbG9naXNoKHRyYW5zZm9ybSkge1xuICB2YXIgYyA9IDEsIHNjYWxlID0gdHJhbnNmb3JtKHRyYW5zZm9ybVN5bWxvZyhjKSwgdHJhbnNmb3JtU3ltZXhwKGMpKTtcblxuICBzY2FsZS5jb25zdGFudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRyYW5zZm9ybSh0cmFuc2Zvcm1TeW1sb2coYyA9ICtfKSwgdHJhbnNmb3JtU3ltZXhwKGMpKSA6IGM7XG4gIH07XG5cbiAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG59XG5cbmZ1bmN0aW9uIHN5bWxvZygpIHtcbiAgdmFyIHNjYWxlID0gc3ltbG9naXNoKHRyYW5zZm9ybWVyJDEoKSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBzeW1sb2coKSkuY29uc3RhbnQoc2NhbGUuY29uc3RhbnQoKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtUG93KGV4cG9uZW50KSB7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHggPCAwID8gLU1hdGgucG93KC14LCBleHBvbmVudCkgOiBNYXRoLnBvdyh4LCBleHBvbmVudCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybVNxcnQoeCkge1xuICByZXR1cm4geCA8IDAgPyAtTWF0aC5zcXJ0KC14KSA6IE1hdGguc3FydCh4KTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtU3F1YXJlKHgpIHtcbiAgcmV0dXJuIHggPCAwID8gLXggKiB4IDogeCAqIHg7XG59XG5cbmZ1bmN0aW9uIHBvd2lzaCh0cmFuc2Zvcm0pIHtcbiAgdmFyIHNjYWxlID0gdHJhbnNmb3JtKGlkZW50aXR5JDYsIGlkZW50aXR5JDYpLFxuICAgICAgZXhwb25lbnQgPSAxO1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgcmV0dXJuIGV4cG9uZW50ID09PSAxID8gdHJhbnNmb3JtKGlkZW50aXR5JDYsIGlkZW50aXR5JDYpXG4gICAgICAgIDogZXhwb25lbnQgPT09IDAuNSA/IHRyYW5zZm9ybSh0cmFuc2Zvcm1TcXJ0LCB0cmFuc2Zvcm1TcXVhcmUpXG4gICAgICAgIDogdHJhbnNmb3JtKHRyYW5zZm9ybVBvdyhleHBvbmVudCksIHRyYW5zZm9ybVBvdygxIC8gZXhwb25lbnQpKTtcbiAgfVxuXG4gIHNjYWxlLmV4cG9uZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGV4cG9uZW50ID0gK18sIHJlc2NhbGUoKSkgOiBleHBvbmVudDtcbiAgfTtcblxuICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcbn1cblxuZnVuY3Rpb24gcG93JDEoKSB7XG4gIHZhciBzY2FsZSA9IHBvd2lzaCh0cmFuc2Zvcm1lciQxKCkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgcG93JDEoKSkuZXhwb25lbnQoc2NhbGUuZXhwb25lbnQoKSk7XG4gIH07XG5cbiAgaW5pdFJhbmdlLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZnVuY3Rpb24gc3FydCQxKCkge1xuICByZXR1cm4gcG93JDEuYXBwbHkobnVsbCwgYXJndW1lbnRzKS5leHBvbmVudCgwLjUpO1xufVxuXG5mdW5jdGlvbiBxdWFudGlsZSQkMSgpIHtcbiAgdmFyIGRvbWFpbiA9IFtdLFxuICAgICAgcmFuZ2UgPSBbXSxcbiAgICAgIHRocmVzaG9sZHMgPSBbXSxcbiAgICAgIHVua25vd247XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICB2YXIgaSA9IDAsIG4gPSBNYXRoLm1heCgxLCByYW5nZS5sZW5ndGgpO1xuICAgIHRocmVzaG9sZHMgPSBuZXcgQXJyYXkobiAtIDEpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aHJlc2hvbGRzW2kgLSAxXSA9IHRocmVzaG9sZChkb21haW4sIGkgLyBuKTtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIGlzTmFOKHggPSAreCkgPyB1bmtub3duIDogcmFuZ2VbYmlzZWN0UmlnaHQodGhyZXNob2xkcywgeCldO1xuICB9XG5cbiAgc2NhbGUuaW52ZXJ0RXh0ZW50ID0gZnVuY3Rpb24oeSkge1xuICAgIHZhciBpID0gcmFuZ2UuaW5kZXhPZih5KTtcbiAgICByZXR1cm4gaSA8IDAgPyBbTmFOLCBOYU5dIDogW1xuICAgICAgaSA+IDAgPyB0aHJlc2hvbGRzW2kgLSAxXSA6IGRvbWFpblswXSxcbiAgICAgIGkgPCB0aHJlc2hvbGRzLmxlbmd0aCA/IHRocmVzaG9sZHNbaV0gOiBkb21haW5bZG9tYWluLmxlbmd0aCAtIDFdXG4gICAgXTtcbiAgfTtcblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluLnNsaWNlKCk7XG4gICAgZG9tYWluID0gW107XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBfLmxlbmd0aCwgZDsgaSA8IG47ICsraSkgaWYgKGQgPSBfW2ldLCBkICE9IG51bGwgJiYgIWlzTmFOKGQgPSArZCkpIGRvbWFpbi5wdXNoKGQpO1xuICAgIGRvbWFpbi5zb3J0KGFzY2VuZGluZyk7XG4gICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlJDUuY2FsbChfKSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICBzY2FsZS5xdWFudGlsZXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhyZXNob2xkcy5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcXVhbnRpbGUkJDEoKVxuICAgICAgICAuZG9tYWluKGRvbWFpbilcbiAgICAgICAgLnJhbmdlKHJhbmdlKVxuICAgICAgICAudW5rbm93bih1bmtub3duKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdFJhbmdlLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBxdWFudGl6ZSQxKCkge1xuICB2YXIgeDAgPSAwLFxuICAgICAgeDEgPSAxLFxuICAgICAgbiA9IDEsXG4gICAgICBkb21haW4gPSBbMC41XSxcbiAgICAgIHJhbmdlID0gWzAsIDFdLFxuICAgICAgdW5rbm93bjtcblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIHggPD0geCA/IHJhbmdlW2Jpc2VjdFJpZ2h0KGRvbWFpbiwgeCwgMCwgbildIDogdW5rbm93bjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgdmFyIGkgPSAtMTtcbiAgICBkb21haW4gPSBuZXcgQXJyYXkobik7XG4gICAgd2hpbGUgKCsraSA8IG4pIGRvbWFpbltpXSA9ICgoaSArIDEpICogeDEgLSAoaSAtIG4pICogeDApIC8gKG4gKyAxKTtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSArX1swXSwgeDEgPSArX1sxXSwgcmVzY2FsZSgpKSA6IFt4MCwgeDFdO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG4gPSAocmFuZ2UgPSBzbGljZSQ1LmNhbGwoXykpLmxlbmd0aCAtIDEsIHJlc2NhbGUoKSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLmludmVydEV4dGVudCA9IGZ1bmN0aW9uKHkpIHtcbiAgICB2YXIgaSA9IHJhbmdlLmluZGV4T2YoeSk7XG4gICAgcmV0dXJuIGkgPCAwID8gW05hTiwgTmFOXVxuICAgICAgICA6IGkgPCAxID8gW3gwLCBkb21haW5bMF1dXG4gICAgICAgIDogaSA+PSBuID8gW2RvbWFpbltuIC0gMV0sIHgxXVxuICAgICAgICA6IFtkb21haW5baSAtIDFdLCBkb21haW5baV1dO1xuICB9O1xuXG4gIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHNjYWxlO1xuICB9O1xuXG4gIHNjYWxlLnRocmVzaG9sZHMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZG9tYWluLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBxdWFudGl6ZSQxKClcbiAgICAgICAgLmRvbWFpbihbeDAsIHgxXSlcbiAgICAgICAgLnJhbmdlKHJhbmdlKVxuICAgICAgICAudW5rbm93bih1bmtub3duKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdFJhbmdlLmFwcGx5KGxpbmVhcmlzaChzY2FsZSksIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRocmVzaG9sZCQxKCkge1xuICB2YXIgZG9tYWluID0gWzAuNV0sXG4gICAgICByYW5nZSA9IFswLCAxXSxcbiAgICAgIHVua25vd24sXG4gICAgICBuID0gMTtcblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIHggPD0geCA/IHJhbmdlW2Jpc2VjdFJpZ2h0KGRvbWFpbiwgeCwgMCwgbildIDogdW5rbm93bjtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSBzbGljZSQ1LmNhbGwoXyksIG4gPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGggLSAxKSwgc2NhbGUpIDogZG9tYWluLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBzbGljZSQ1LmNhbGwoXyksIG4gPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGggLSAxKSwgc2NhbGUpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5pbnZlcnRFeHRlbnQgPSBmdW5jdGlvbih5KSB7XG4gICAgdmFyIGkgPSByYW5nZS5pbmRleE9mKHkpO1xuICAgIHJldHVybiBbZG9tYWluW2kgLSAxXSwgZG9tYWluW2ldXTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhyZXNob2xkJDEoKVxuICAgICAgICAuZG9tYWluKGRvbWFpbilcbiAgICAgICAgLnJhbmdlKHJhbmdlKVxuICAgICAgICAudW5rbm93bih1bmtub3duKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdFJhbmdlLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuXG52YXIgdDAkMSA9IG5ldyBEYXRlLFxuICAgIHQxJDEgPSBuZXcgRGF0ZTtcblxuZnVuY3Rpb24gbmV3SW50ZXJ2YWwoZmxvb3JpLCBvZmZzZXRpLCBjb3VudCwgZmllbGQpIHtcblxuICBmdW5jdGlvbiBpbnRlcnZhbChkYXRlKSB7XG4gICAgcmV0dXJuIGZsb29yaShkYXRlID0gbmV3IERhdGUoK2RhdGUpKSwgZGF0ZTtcbiAgfVxuXG4gIGludGVydmFsLmZsb29yID0gaW50ZXJ2YWw7XG5cbiAgaW50ZXJ2YWwuY2VpbCA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZmxvb3JpKGRhdGUgPSBuZXcgRGF0ZShkYXRlIC0gMSkpLCBvZmZzZXRpKGRhdGUsIDEpLCBmbG9vcmkoZGF0ZSksIGRhdGU7XG4gIH07XG5cbiAgaW50ZXJ2YWwucm91bmQgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgdmFyIGQwID0gaW50ZXJ2YWwoZGF0ZSksXG4gICAgICAgIGQxID0gaW50ZXJ2YWwuY2VpbChkYXRlKTtcbiAgICByZXR1cm4gZGF0ZSAtIGQwIDwgZDEgLSBkYXRlID8gZDAgOiBkMTtcbiAgfTtcblxuICBpbnRlcnZhbC5vZmZzZXQgPSBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgcmV0dXJuIG9mZnNldGkoZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKSwgc3RlcCA9PSBudWxsID8gMSA6IE1hdGguZmxvb3Ioc3RlcCkpLCBkYXRlO1xuICB9O1xuXG4gIGludGVydmFsLnJhbmdlID0gZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICB2YXIgcmFuZ2UgPSBbXSwgcHJldmlvdXM7XG4gICAgc3RhcnQgPSBpbnRlcnZhbC5jZWlsKHN0YXJ0KTtcbiAgICBzdGVwID0gc3RlcCA9PSBudWxsID8gMSA6IE1hdGguZmxvb3Ioc3RlcCk7XG4gICAgaWYgKCEoc3RhcnQgPCBzdG9wKSB8fCAhKHN0ZXAgPiAwKSkgcmV0dXJuIHJhbmdlOyAvLyBhbHNvIGhhbmRsZXMgSW52YWxpZCBEYXRlXG4gICAgZG8gcmFuZ2UucHVzaChwcmV2aW91cyA9IG5ldyBEYXRlKCtzdGFydCkpLCBvZmZzZXRpKHN0YXJ0LCBzdGVwKSwgZmxvb3JpKHN0YXJ0KTtcbiAgICB3aGlsZSAocHJldmlvdXMgPCBzdGFydCAmJiBzdGFydCA8IHN0b3ApO1xuICAgIHJldHVybiByYW5nZTtcbiAgfTtcblxuICBpbnRlcnZhbC5maWx0ZXIgPSBmdW5jdGlvbih0ZXN0KSB7XG4gICAgcmV0dXJuIG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIGlmIChkYXRlID49IGRhdGUpIHdoaWxlIChmbG9vcmkoZGF0ZSksICF0ZXN0KGRhdGUpKSBkYXRlLnNldFRpbWUoZGF0ZSAtIDEpO1xuICAgIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICAgIGlmIChkYXRlID49IGRhdGUpIHtcbiAgICAgICAgaWYgKHN0ZXAgPCAwKSB3aGlsZSAoKytzdGVwIDw9IDApIHtcbiAgICAgICAgICB3aGlsZSAob2Zmc2V0aShkYXRlLCAtMSksICF0ZXN0KGRhdGUpKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG4gICAgICAgIH0gZWxzZSB3aGlsZSAoLS1zdGVwID49IDApIHtcbiAgICAgICAgICB3aGlsZSAob2Zmc2V0aShkYXRlLCArMSksICF0ZXN0KGRhdGUpKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBpZiAoY291bnQpIHtcbiAgICBpbnRlcnZhbC5jb3VudCA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHQwJDEuc2V0VGltZSgrc3RhcnQpLCB0MSQxLnNldFRpbWUoK2VuZCk7XG4gICAgICBmbG9vcmkodDAkMSksIGZsb29yaSh0MSQxKTtcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKGNvdW50KHQwJDEsIHQxJDEpKTtcbiAgICB9O1xuXG4gICAgaW50ZXJ2YWwuZXZlcnkgPSBmdW5jdGlvbihzdGVwKSB7XG4gICAgICBzdGVwID0gTWF0aC5mbG9vcihzdGVwKTtcbiAgICAgIHJldHVybiAhaXNGaW5pdGUoc3RlcCkgfHwgIShzdGVwID4gMCkgPyBudWxsXG4gICAgICAgICAgOiAhKHN0ZXAgPiAxKSA/IGludGVydmFsXG4gICAgICAgICAgOiBpbnRlcnZhbC5maWx0ZXIoZmllbGRcbiAgICAgICAgICAgICAgPyBmdW5jdGlvbihkKSB7IHJldHVybiBmaWVsZChkKSAlIHN0ZXAgPT09IDA7IH1cbiAgICAgICAgICAgICAgOiBmdW5jdGlvbihkKSB7IHJldHVybiBpbnRlcnZhbC5jb3VudCgwLCBkKSAlIHN0ZXAgPT09IDA7IH0pO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gaW50ZXJ2YWw7XG59XG5cbnZhciBtaWxsaXNlY29uZCA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKCkge1xuICAvLyBub29wXG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kIC0gc3RhcnQ7XG59KTtcblxuLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxubWlsbGlzZWNvbmQuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gIGsgPSBNYXRoLmZsb29yKGspO1xuICBpZiAoIWlzRmluaXRlKGspIHx8ICEoayA+IDApKSByZXR1cm4gbnVsbDtcbiAgaWYgKCEoayA+IDEpKSByZXR1cm4gbWlsbGlzZWNvbmQ7XG4gIHJldHVybiBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRUaW1lKE1hdGguZmxvb3IoZGF0ZSAvIGspICogayk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogayk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGs7XG4gIH0pO1xufTtcbnZhciBtaWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZC5yYW5nZTtcblxudmFyIGR1cmF0aW9uU2Vjb25kID0gMWUzO1xudmFyIGR1cmF0aW9uTWludXRlID0gNmU0O1xudmFyIGR1cmF0aW9uSG91ciA9IDM2ZTU7XG52YXIgZHVyYXRpb25EYXkgPSA4NjRlNTtcbnZhciBkdXJhdGlvbldlZWsgPSA2MDQ4ZTU7XG5cbnZhciBzZWNvbmQgPSBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShkYXRlIC0gZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvblNlY29uZCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25TZWNvbmQ7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ1NlY29uZHMoKTtcbn0pO1xudmFyIHNlY29uZHMgPSBzZWNvbmQucmFuZ2U7XG5cbnZhciBtaW51dGUgPSBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShkYXRlIC0gZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSAtIGRhdGUuZ2V0U2Vjb25kcygpICogZHVyYXRpb25TZWNvbmQpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uTWludXRlO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRNaW51dGVzKCk7XG59KTtcbnZhciBtaW51dGVzID0gbWludXRlLnJhbmdlO1xuXG52YXIgaG91ciA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRUaW1lKGRhdGUgLSBkYXRlLmdldE1pbGxpc2Vjb25kcygpIC0gZGF0ZS5nZXRTZWNvbmRzKCkgKiBkdXJhdGlvblNlY29uZCAtIGRhdGUuZ2V0TWludXRlcygpICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25Ib3VyKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkhvdXI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldEhvdXJzKCk7XG59KTtcbnZhciBob3VycyA9IGhvdXIucmFuZ2U7XG5cbnZhciBkYXkgPSBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0IC0gKGVuZC5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3RhcnQuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiBkdXJhdGlvbk1pbnV0ZSkgLyBkdXJhdGlvbkRheTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0RGF0ZSgpIC0gMTtcbn0pO1xudmFyIGRheXMgPSBkYXkucmFuZ2U7XG5cbmZ1bmN0aW9uIHdlZWtkYXkoaSkge1xuICByZXR1cm4gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSAtIChkYXRlLmdldERheSgpICsgNyAtIGkpICUgNyk7XG4gICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIHN0ZXAgKiA3KTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQgLSAoZW5kLmdldFRpbWV6b25lT2Zmc2V0KCkgLSBzdGFydC5nZXRUaW1lem9uZU9mZnNldCgpKSAqIGR1cmF0aW9uTWludXRlKSAvIGR1cmF0aW9uV2VlaztcbiAgfSk7XG59XG5cbnZhciBzdW5kYXkgPSB3ZWVrZGF5KDApO1xudmFyIG1vbmRheSA9IHdlZWtkYXkoMSk7XG52YXIgdHVlc2RheSA9IHdlZWtkYXkoMik7XG52YXIgd2VkbmVzZGF5ID0gd2Vla2RheSgzKTtcbnZhciB0aHVyc2RheSA9IHdlZWtkYXkoNCk7XG52YXIgZnJpZGF5ID0gd2Vla2RheSg1KTtcbnZhciBzYXR1cmRheSA9IHdlZWtkYXkoNik7XG5cbnZhciBzdW5kYXlzID0gc3VuZGF5LnJhbmdlO1xudmFyIG1vbmRheXMgPSBtb25kYXkucmFuZ2U7XG52YXIgdHVlc2RheXMgPSB0dWVzZGF5LnJhbmdlO1xudmFyIHdlZG5lc2RheXMgPSB3ZWRuZXNkYXkucmFuZ2U7XG52YXIgdGh1cnNkYXlzID0gdGh1cnNkYXkucmFuZ2U7XG52YXIgZnJpZGF5cyA9IGZyaWRheS5yYW5nZTtcbnZhciBzYXR1cmRheXMgPSBzYXR1cmRheS5yYW5nZTtcblxudmFyIG1vbnRoID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldERhdGUoMSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0TW9udGgoZGF0ZS5nZXRNb250aCgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0TW9udGgoKSAtIHN0YXJ0LmdldE1vbnRoKCkgKyAoZW5kLmdldEZ1bGxZZWFyKCkgLSBzdGFydC5nZXRGdWxsWWVhcigpKSAqIDEyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRNb250aCgpO1xufSk7XG52YXIgbW9udGhzID0gbW9udGgucmFuZ2U7XG5cbnZhciB5ZWFyID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldE1vbnRoKDAsIDEpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldEZ1bGxZZWFyKCkgLSBzdGFydC5nZXRGdWxsWWVhcigpO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpO1xufSk7XG5cbi8vIEFuIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBzaW1wbGUgY2FzZS5cbnllYXIuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gIHJldHVybiAhaXNGaW5pdGUoayA9IE1hdGguZmxvb3IoaykpIHx8ICEoayA+IDApID8gbnVsbCA6IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKE1hdGguZmxvb3IoZGF0ZS5nZXRGdWxsWWVhcigpIC8gaykgKiBrKTtcbiAgICBkYXRlLnNldE1vbnRoKDAsIDEpO1xuICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIHN0ZXAgKiBrKTtcbiAgfSk7XG59O1xudmFyIHllYXJzID0geWVhci5yYW5nZTtcblxudmFyIHV0Y01pbnV0ZSA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENTZWNvbmRzKDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uTWludXRlO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENNaW51dGVzKCk7XG59KTtcbnZhciB1dGNNaW51dGVzID0gdXRjTWludXRlLnJhbmdlO1xuXG52YXIgdXRjSG91ciA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENNaW51dGVzKDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25Ib3VyKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkhvdXI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0hvdXJzKCk7XG59KTtcbnZhciB1dGNIb3VycyA9IHV0Y0hvdXIucmFuZ2U7XG5cbnZhciB1dGNEYXkgPSBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uRGF5O1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENEYXRlKCkgLSAxO1xufSk7XG52YXIgdXRjRGF5cyA9IHV0Y0RheS5yYW5nZTtcblxuZnVuY3Rpb24gdXRjV2Vla2RheShpKSB7XG4gIHJldHVybiBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gKGRhdGUuZ2V0VVRDRGF5KCkgKyA3IC0gaSkgJSA3KTtcbiAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpICsgc3RlcCAqIDcpO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbldlZWs7XG4gIH0pO1xufVxuXG52YXIgdXRjU3VuZGF5ID0gdXRjV2Vla2RheSgwKTtcbnZhciB1dGNNb25kYXkgPSB1dGNXZWVrZGF5KDEpO1xudmFyIHV0Y1R1ZXNkYXkgPSB1dGNXZWVrZGF5KDIpO1xudmFyIHV0Y1dlZG5lc2RheSA9IHV0Y1dlZWtkYXkoMyk7XG52YXIgdXRjVGh1cnNkYXkgPSB1dGNXZWVrZGF5KDQpO1xudmFyIHV0Y0ZyaWRheSA9IHV0Y1dlZWtkYXkoNSk7XG52YXIgdXRjU2F0dXJkYXkgPSB1dGNXZWVrZGF5KDYpO1xuXG52YXIgdXRjU3VuZGF5cyA9IHV0Y1N1bmRheS5yYW5nZTtcbnZhciB1dGNNb25kYXlzID0gdXRjTW9uZGF5LnJhbmdlO1xudmFyIHV0Y1R1ZXNkYXlzID0gdXRjVHVlc2RheS5yYW5nZTtcbnZhciB1dGNXZWRuZXNkYXlzID0gdXRjV2VkbmVzZGF5LnJhbmdlO1xudmFyIHV0Y1RodXJzZGF5cyA9IHV0Y1RodXJzZGF5LnJhbmdlO1xudmFyIHV0Y0ZyaWRheXMgPSB1dGNGcmlkYXkucmFuZ2U7XG52YXIgdXRjU2F0dXJkYXlzID0gdXRjU2F0dXJkYXkucmFuZ2U7XG5cbnZhciB1dGNNb250aCA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENEYXRlKDEpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFVUQ01vbnRoKGRhdGUuZ2V0VVRDTW9udGgoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldFVUQ01vbnRoKCkgLSBzdGFydC5nZXRVVENNb250aCgpICsgKGVuZC5nZXRVVENGdWxsWWVhcigpIC0gc3RhcnQuZ2V0VVRDRnVsbFllYXIoKSkgKiAxMjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDTW9udGgoKTtcbn0pO1xudmFyIHV0Y01vbnRocyA9IHV0Y01vbnRoLnJhbmdlO1xuXG52YXIgdXRjWWVhciA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRVVENGdWxsWWVhcigpIC0gc3RhcnQuZ2V0VVRDRnVsbFllYXIoKTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG51dGNZZWFyLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xuICByZXR1cm4gIWlzRmluaXRlKGsgPSBNYXRoLmZsb29yKGspKSB8fCAhKGsgPiAwKSA/IG51bGwgOiBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcihNYXRoLmZsb29yKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSAvIGspICogayk7XG4gICAgZGF0ZS5zZXRVVENNb250aCgwLCAxKTtcbiAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgKyBzdGVwICogayk7XG4gIH0pO1xufTtcbnZhciB1dGNZZWFycyA9IHV0Y1llYXIucmFuZ2U7XG5cbmZ1bmN0aW9uIGxvY2FsRGF0ZShkKSB7XG4gIGlmICgwIDw9IGQueSAmJiBkLnkgPCAxMDApIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKC0xLCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKTtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKGQueSk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbiAgcmV0dXJuIG5ldyBEYXRlKGQueSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCk7XG59XG5cbmZ1bmN0aW9uIHV0Y0RhdGUoZCkge1xuICBpZiAoMCA8PSBkLnkgJiYgZC55IDwgMTAwKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQygtMSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCkpO1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZC55KTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoZC55LCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKSk7XG59XG5cbmZ1bmN0aW9uIG5ld1llYXIoeSkge1xuICByZXR1cm4ge3k6IHksIG06IDAsIGQ6IDEsIEg6IDAsIE06IDAsIFM6IDAsIEw6IDB9O1xufVxuXG5mdW5jdGlvbiBmb3JtYXRMb2NhbGUkMShsb2NhbGUpIHtcbiAgdmFyIGxvY2FsZV9kYXRlVGltZSA9IGxvY2FsZS5kYXRlVGltZSxcbiAgICAgIGxvY2FsZV9kYXRlID0gbG9jYWxlLmRhdGUsXG4gICAgICBsb2NhbGVfdGltZSA9IGxvY2FsZS50aW1lLFxuICAgICAgbG9jYWxlX3BlcmlvZHMgPSBsb2NhbGUucGVyaW9kcyxcbiAgICAgIGxvY2FsZV93ZWVrZGF5cyA9IGxvY2FsZS5kYXlzLFxuICAgICAgbG9jYWxlX3Nob3J0V2Vla2RheXMgPSBsb2NhbGUuc2hvcnREYXlzLFxuICAgICAgbG9jYWxlX21vbnRocyA9IGxvY2FsZS5tb250aHMsXG4gICAgICBsb2NhbGVfc2hvcnRNb250aHMgPSBsb2NhbGUuc2hvcnRNb250aHM7XG5cbiAgdmFyIHBlcmlvZFJlID0gZm9ybWF0UmUobG9jYWxlX3BlcmlvZHMpLFxuICAgICAgcGVyaW9kTG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9wZXJpb2RzKSxcbiAgICAgIHdlZWtkYXlSZSA9IGZvcm1hdFJlKGxvY2FsZV93ZWVrZGF5cyksXG4gICAgICB3ZWVrZGF5TG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV93ZWVrZGF5cyksXG4gICAgICBzaG9ydFdlZWtkYXlSZSA9IGZvcm1hdFJlKGxvY2FsZV9zaG9ydFdlZWtkYXlzKSxcbiAgICAgIHNob3J0V2Vla2RheUxvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfc2hvcnRXZWVrZGF5cyksXG4gICAgICBtb250aFJlID0gZm9ybWF0UmUobG9jYWxlX21vbnRocyksXG4gICAgICBtb250aExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfbW9udGhzKSxcbiAgICAgIHNob3J0TW9udGhSZSA9IGZvcm1hdFJlKGxvY2FsZV9zaG9ydE1vbnRocyksXG4gICAgICBzaG9ydE1vbnRoTG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9zaG9ydE1vbnRocyk7XG5cbiAgdmFyIGZvcm1hdHMgPSB7XG4gICAgXCJhXCI6IGZvcm1hdFNob3J0V2Vla2RheSxcbiAgICBcIkFcIjogZm9ybWF0V2Vla2RheSxcbiAgICBcImJcIjogZm9ybWF0U2hvcnRNb250aCxcbiAgICBcIkJcIjogZm9ybWF0TW9udGgsXG4gICAgXCJjXCI6IG51bGwsXG4gICAgXCJkXCI6IGZvcm1hdERheU9mTW9udGgsXG4gICAgXCJlXCI6IGZvcm1hdERheU9mTW9udGgsXG4gICAgXCJmXCI6IGZvcm1hdE1pY3Jvc2Vjb25kcyxcbiAgICBcIkhcIjogZm9ybWF0SG91cjI0LFxuICAgIFwiSVwiOiBmb3JtYXRIb3VyMTIsXG4gICAgXCJqXCI6IGZvcm1hdERheU9mWWVhcixcbiAgICBcIkxcIjogZm9ybWF0TWlsbGlzZWNvbmRzLFxuICAgIFwibVwiOiBmb3JtYXRNb250aE51bWJlcixcbiAgICBcIk1cIjogZm9ybWF0TWludXRlcyxcbiAgICBcInBcIjogZm9ybWF0UGVyaW9kLFxuICAgIFwiUVwiOiBmb3JtYXRVbml4VGltZXN0YW1wLFxuICAgIFwic1wiOiBmb3JtYXRVbml4VGltZXN0YW1wU2Vjb25kcyxcbiAgICBcIlNcIjogZm9ybWF0U2Vjb25kcyxcbiAgICBcInVcIjogZm9ybWF0V2Vla2RheU51bWJlck1vbmRheSxcbiAgICBcIlVcIjogZm9ybWF0V2Vla051bWJlclN1bmRheSxcbiAgICBcIlZcIjogZm9ybWF0V2Vla051bWJlcklTTyxcbiAgICBcIndcIjogZm9ybWF0V2Vla2RheU51bWJlclN1bmRheSxcbiAgICBcIldcIjogZm9ybWF0V2Vla051bWJlck1vbmRheSxcbiAgICBcInhcIjogbnVsbCxcbiAgICBcIlhcIjogbnVsbCxcbiAgICBcInlcIjogZm9ybWF0WWVhciQxLFxuICAgIFwiWVwiOiBmb3JtYXRGdWxsWWVhcixcbiAgICBcIlpcIjogZm9ybWF0Wm9uZSxcbiAgICBcIiVcIjogZm9ybWF0TGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICB2YXIgdXRjRm9ybWF0cyA9IHtcbiAgICBcImFcIjogZm9ybWF0VVRDU2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBmb3JtYXRVVENXZWVrZGF5LFxuICAgIFwiYlwiOiBmb3JtYXRVVENTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBmb3JtYXRVVENNb250aCxcbiAgICBcImNcIjogbnVsbCxcbiAgICBcImRcIjogZm9ybWF0VVRDRGF5T2ZNb250aCxcbiAgICBcImVcIjogZm9ybWF0VVRDRGF5T2ZNb250aCxcbiAgICBcImZcIjogZm9ybWF0VVRDTWljcm9zZWNvbmRzLFxuICAgIFwiSFwiOiBmb3JtYXRVVENIb3VyMjQsXG4gICAgXCJJXCI6IGZvcm1hdFVUQ0hvdXIxMixcbiAgICBcImpcIjogZm9ybWF0VVRDRGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBmb3JtYXRVVENNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IGZvcm1hdFVUQ01vbnRoTnVtYmVyLFxuICAgIFwiTVwiOiBmb3JtYXRVVENNaW51dGVzLFxuICAgIFwicFwiOiBmb3JtYXRVVENQZXJpb2QsXG4gICAgXCJRXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXAsXG4gICAgXCJzXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBmb3JtYXRVVENTZWNvbmRzLFxuICAgIFwidVwiOiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyTW9uZGF5LFxuICAgIFwiVVwiOiBmb3JtYXRVVENXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBmb3JtYXRVVENXZWVrTnVtYmVySVNPLFxuICAgIFwid1wiOiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyU3VuZGF5LFxuICAgIFwiV1wiOiBmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBudWxsLFxuICAgIFwiWFwiOiBudWxsLFxuICAgIFwieVwiOiBmb3JtYXRVVENZZWFyLFxuICAgIFwiWVwiOiBmb3JtYXRVVENGdWxsWWVhcixcbiAgICBcIlpcIjogZm9ybWF0VVRDWm9uZSxcbiAgICBcIiVcIjogZm9ybWF0TGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICB2YXIgcGFyc2VzID0ge1xuICAgIFwiYVwiOiBwYXJzZVNob3J0V2Vla2RheSxcbiAgICBcIkFcIjogcGFyc2VXZWVrZGF5LFxuICAgIFwiYlwiOiBwYXJzZVNob3J0TW9udGgsXG4gICAgXCJCXCI6IHBhcnNlTW9udGgsXG4gICAgXCJjXCI6IHBhcnNlTG9jYWxlRGF0ZVRpbWUsXG4gICAgXCJkXCI6IHBhcnNlRGF5T2ZNb250aCxcbiAgICBcImVcIjogcGFyc2VEYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBwYXJzZU1pY3Jvc2Vjb25kcyxcbiAgICBcIkhcIjogcGFyc2VIb3VyMjQsXG4gICAgXCJJXCI6IHBhcnNlSG91cjI0LFxuICAgIFwialwiOiBwYXJzZURheU9mWWVhcixcbiAgICBcIkxcIjogcGFyc2VNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IHBhcnNlTW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IHBhcnNlTWludXRlcyxcbiAgICBcInBcIjogcGFyc2VQZXJpb2QsXG4gICAgXCJRXCI6IHBhcnNlVW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogcGFyc2VVbml4VGltZXN0YW1wU2Vjb25kcyxcbiAgICBcIlNcIjogcGFyc2VTZWNvbmRzLFxuICAgIFwidVwiOiBwYXJzZVdlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IHBhcnNlV2Vla051bWJlclN1bmRheSxcbiAgICBcIlZcIjogcGFyc2VXZWVrTnVtYmVySVNPLFxuICAgIFwid1wiOiBwYXJzZVdlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IHBhcnNlV2Vla051bWJlck1vbmRheSxcbiAgICBcInhcIjogcGFyc2VMb2NhbGVEYXRlLFxuICAgIFwiWFwiOiBwYXJzZUxvY2FsZVRpbWUsXG4gICAgXCJ5XCI6IHBhcnNlWWVhcixcbiAgICBcIllcIjogcGFyc2VGdWxsWWVhcixcbiAgICBcIlpcIjogcGFyc2Vab25lLFxuICAgIFwiJVwiOiBwYXJzZUxpdGVyYWxQZXJjZW50XG4gIH07XG5cbiAgLy8gVGhlc2UgcmVjdXJzaXZlIGRpcmVjdGl2ZSBkZWZpbml0aW9ucyBtdXN0IGJlIGRlZmVycmVkLlxuICBmb3JtYXRzLnggPSBuZXdGb3JtYXQobG9jYWxlX2RhdGUsIGZvcm1hdHMpO1xuICBmb3JtYXRzLlggPSBuZXdGb3JtYXQobG9jYWxlX3RpbWUsIGZvcm1hdHMpO1xuICBmb3JtYXRzLmMgPSBuZXdGb3JtYXQobG9jYWxlX2RhdGVUaW1lLCBmb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy54ID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlLCB1dGNGb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy5YID0gbmV3Rm9ybWF0KGxvY2FsZV90aW1lLCB1dGNGb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy5jID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlVGltZSwgdXRjRm9ybWF0cyk7XG5cbiAgZnVuY3Rpb24gbmV3Rm9ybWF0KHNwZWNpZmllciwgZm9ybWF0cykge1xuICAgIHJldHVybiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICB2YXIgc3RyaW5nID0gW10sXG4gICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgIGogPSAwLFxuICAgICAgICAgIG4gPSBzcGVjaWZpZXIubGVuZ3RoLFxuICAgICAgICAgIGMsXG4gICAgICAgICAgcGFkLFxuICAgICAgICAgIGZvcm1hdDtcblxuICAgICAgaWYgKCEoZGF0ZSBpbnN0YW5jZW9mIERhdGUpKSBkYXRlID0gbmV3IERhdGUoK2RhdGUpO1xuXG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAoc3BlY2lmaWVyLmNoYXJDb2RlQXQoaSkgPT09IDM3KSB7XG4gICAgICAgICAgc3RyaW5nLnB1c2goc3BlY2lmaWVyLnNsaWNlKGosIGkpKTtcbiAgICAgICAgICBpZiAoKHBhZCA9IHBhZHNbYyA9IHNwZWNpZmllci5jaGFyQXQoKytpKV0pICE9IG51bGwpIGMgPSBzcGVjaWZpZXIuY2hhckF0KCsraSk7XG4gICAgICAgICAgZWxzZSBwYWQgPSBjID09PSBcImVcIiA/IFwiIFwiIDogXCIwXCI7XG4gICAgICAgICAgaWYgKGZvcm1hdCA9IGZvcm1hdHNbY10pIGMgPSBmb3JtYXQoZGF0ZSwgcGFkKTtcbiAgICAgICAgICBzdHJpbmcucHVzaChjKTtcbiAgICAgICAgICBqID0gaSArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3RyaW5nLnB1c2goc3BlY2lmaWVyLnNsaWNlKGosIGkpKTtcbiAgICAgIHJldHVybiBzdHJpbmcuam9pbihcIlwiKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbmV3UGFyc2Uoc3BlY2lmaWVyLCBuZXdEYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgdmFyIGQgPSBuZXdZZWFyKDE5MDApLFxuICAgICAgICAgIGkgPSBwYXJzZVNwZWNpZmllcihkLCBzcGVjaWZpZXIsIHN0cmluZyArPSBcIlwiLCAwKSxcbiAgICAgICAgICB3ZWVrLCBkYXkkJDE7XG4gICAgICBpZiAoaSAhPSBzdHJpbmcubGVuZ3RoKSByZXR1cm4gbnVsbDtcblxuICAgICAgLy8gSWYgYSBVTklYIHRpbWVzdGFtcCBpcyBzcGVjaWZpZWQsIHJldHVybiBpdC5cbiAgICAgIGlmIChcIlFcIiBpbiBkKSByZXR1cm4gbmV3IERhdGUoZC5RKTtcblxuICAgICAgLy8gVGhlIGFtLXBtIGZsYWcgaXMgMCBmb3IgQU0sIGFuZCAxIGZvciBQTS5cbiAgICAgIGlmIChcInBcIiBpbiBkKSBkLkggPSBkLkggJSAxMiArIGQucCAqIDEyO1xuXG4gICAgICAvLyBDb252ZXJ0IGRheS1vZi13ZWVrIGFuZCB3ZWVrLW9mLXllYXIgdG8gZGF5LW9mLXllYXIuXG4gICAgICBpZiAoXCJWXCIgaW4gZCkge1xuICAgICAgICBpZiAoZC5WIDwgMSB8fCBkLlYgPiA1MykgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmICghKFwid1wiIGluIGQpKSBkLncgPSAxO1xuICAgICAgICBpZiAoXCJaXCIgaW4gZCkge1xuICAgICAgICAgIHdlZWsgPSB1dGNEYXRlKG5ld1llYXIoZC55KSksIGRheSQkMSA9IHdlZWsuZ2V0VVRDRGF5KCk7XG4gICAgICAgICAgd2VlayA9IGRheSQkMSA+IDQgfHwgZGF5JCQxID09PSAwID8gdXRjTW9uZGF5LmNlaWwod2VlaykgOiB1dGNNb25kYXkod2Vlayk7XG4gICAgICAgICAgd2VlayA9IHV0Y0RheS5vZmZzZXQod2VlaywgKGQuViAtIDEpICogNyk7XG4gICAgICAgICAgZC55ID0gd2Vlay5nZXRVVENGdWxsWWVhcigpO1xuICAgICAgICAgIGQubSA9IHdlZWsuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgICBkLmQgPSB3ZWVrLmdldFVUQ0RhdGUoKSArIChkLncgKyA2KSAlIDc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2VlayA9IG5ld0RhdGUobmV3WWVhcihkLnkpKSwgZGF5JCQxID0gd2Vlay5nZXREYXkoKTtcbiAgICAgICAgICB3ZWVrID0gZGF5JCQxID4gNCB8fCBkYXkkJDEgPT09IDAgPyBtb25kYXkuY2VpbCh3ZWVrKSA6IG1vbmRheSh3ZWVrKTtcbiAgICAgICAgICB3ZWVrID0gZGF5Lm9mZnNldCh3ZWVrLCAoZC5WIC0gMSkgKiA3KTtcbiAgICAgICAgICBkLnkgPSB3ZWVrLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgZC5tID0gd2Vlay5nZXRNb250aCgpO1xuICAgICAgICAgIGQuZCA9IHdlZWsuZ2V0RGF0ZSgpICsgKGQudyArIDYpICUgNztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChcIldcIiBpbiBkIHx8IFwiVVwiIGluIGQpIHtcbiAgICAgICAgaWYgKCEoXCJ3XCIgaW4gZCkpIGQudyA9IFwidVwiIGluIGQgPyBkLnUgJSA3IDogXCJXXCIgaW4gZCA/IDEgOiAwO1xuICAgICAgICBkYXkkJDEgPSBcIlpcIiBpbiBkID8gdXRjRGF0ZShuZXdZZWFyKGQueSkpLmdldFVUQ0RheSgpIDogbmV3RGF0ZShuZXdZZWFyKGQueSkpLmdldERheSgpO1xuICAgICAgICBkLm0gPSAwO1xuICAgICAgICBkLmQgPSBcIldcIiBpbiBkID8gKGQudyArIDYpICUgNyArIGQuVyAqIDcgLSAoZGF5JCQxICsgNSkgJSA3IDogZC53ICsgZC5VICogNyAtIChkYXkkJDEgKyA2KSAlIDc7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIGEgdGltZSB6b25lIGlzIHNwZWNpZmllZCwgYWxsIGZpZWxkcyBhcmUgaW50ZXJwcmV0ZWQgYXMgVVRDIGFuZCB0aGVuXG4gICAgICAvLyBvZmZzZXQgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgdGltZSB6b25lLlxuICAgICAgaWYgKFwiWlwiIGluIGQpIHtcbiAgICAgICAgZC5IICs9IGQuWiAvIDEwMCB8IDA7XG4gICAgICAgIGQuTSArPSBkLlogJSAxMDA7XG4gICAgICAgIHJldHVybiB1dGNEYXRlKGQpO1xuICAgICAgfVxuXG4gICAgICAvLyBPdGhlcndpc2UsIGFsbCBmaWVsZHMgYXJlIGluIGxvY2FsIHRpbWUuXG4gICAgICByZXR1cm4gbmV3RGF0ZShkKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTcGVjaWZpZXIoZCwgc3BlY2lmaWVyLCBzdHJpbmcsIGopIHtcbiAgICB2YXIgaSA9IDAsXG4gICAgICAgIG4gPSBzcGVjaWZpZXIubGVuZ3RoLFxuICAgICAgICBtID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgYyxcbiAgICAgICAgcGFyc2U7XG5cbiAgICB3aGlsZSAoaSA8IG4pIHtcbiAgICAgIGlmIChqID49IG0pIHJldHVybiAtMTtcbiAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckNvZGVBdChpKyspO1xuICAgICAgaWYgKGMgPT09IDM3KSB7XG4gICAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckF0KGkrKyk7XG4gICAgICAgIHBhcnNlID0gcGFyc2VzW2MgaW4gcGFkcyA/IHNwZWNpZmllci5jaGFyQXQoaSsrKSA6IGNdO1xuICAgICAgICBpZiAoIXBhcnNlIHx8ICgoaiA9IHBhcnNlKGQsIHN0cmluZywgaikpIDwgMCkpIHJldHVybiAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYyAhPSBzdHJpbmcuY2hhckNvZGVBdChqKyspKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gajtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlUGVyaW9kKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gcGVyaW9kUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQucCA9IHBlcmlvZExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVNob3J0V2Vla2RheShkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHNob3J0V2Vla2RheVJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLncgPSBzaG9ydFdlZWtkYXlMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VXZWVrZGF5KGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gd2Vla2RheVJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLncgPSB3ZWVrZGF5TG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU2hvcnRNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHNob3J0TW9udGhSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5tID0gc2hvcnRNb250aExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZU1vbnRoKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gbW9udGhSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5tID0gbW9udGhMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVEYXRlVGltZShkLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX2RhdGVUaW1lLCBzdHJpbmcsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVEYXRlKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfZGF0ZSwgc3RyaW5nLCBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTG9jYWxlVGltZShkLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX3RpbWUsIHN0cmluZywgaSk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRTaG9ydFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRXZWVrZGF5c1tkLmdldERheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXREYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRTaG9ydE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0TW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9tb250aHNbZC5nZXRNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFBlcmlvZChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRIb3VycygpID49IDEyKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRXZWVrZGF5c1tkLmdldFVUQ0RheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXRVVENEYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0VVRDTW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9tb250aHNbZC5nZXRVVENNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1BlcmlvZChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRVVENIb3VycygpID49IDEyKV07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZvcm1hdDogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgZiA9IG5ld0Zvcm1hdChzcGVjaWZpZXIgKz0gXCJcIiwgZm9ybWF0cyk7XG4gICAgICBmLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gZjtcbiAgICB9LFxuICAgIHBhcnNlOiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyICs9IFwiXCIsIGxvY2FsRGF0ZSk7XG4gICAgICBwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gcDtcbiAgICB9LFxuICAgIHV0Y0Zvcm1hdDogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgZiA9IG5ld0Zvcm1hdChzcGVjaWZpZXIgKz0gXCJcIiwgdXRjRm9ybWF0cyk7XG4gICAgICBmLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gZjtcbiAgICB9LFxuICAgIHV0Y1BhcnNlOiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyLCB1dGNEYXRlKTtcbiAgICAgIHAudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBwO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIHBhZHMgPSB7XCItXCI6IFwiXCIsIFwiX1wiOiBcIiBcIiwgXCIwXCI6IFwiMFwifSxcbiAgICBudW1iZXJSZSA9IC9eXFxzKlxcZCsvLCAvLyBub3RlOiBpZ25vcmVzIG5leHQgZGlyZWN0aXZlXG4gICAgcGVyY2VudFJlID0gL14lLyxcbiAgICByZXF1b3RlUmUgPSAvW1xcXFxeJCorP3xbXFxdKCkue31dL2c7XG5cbmZ1bmN0aW9uIHBhZCQxKHZhbHVlLCBmaWxsLCB3aWR0aCkge1xuICB2YXIgc2lnbiA9IHZhbHVlIDwgMCA/IFwiLVwiIDogXCJcIixcbiAgICAgIHN0cmluZyA9IChzaWduID8gLXZhbHVlIDogdmFsdWUpICsgXCJcIixcbiAgICAgIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gIHJldHVybiBzaWduICsgKGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSArIHN0cmluZyA6IHN0cmluZyk7XG59XG5cbmZ1bmN0aW9uIHJlcXVvdGUocykge1xuICByZXR1cm4gcy5yZXBsYWNlKHJlcXVvdGVSZSwgXCJcXFxcJCZcIik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFJlKG5hbWVzKSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKFwiXig/OlwiICsgbmFtZXMubWFwKHJlcXVvdGUpLmpvaW4oXCJ8XCIpICsgXCIpXCIsIFwiaVwiKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TG9va3VwKG5hbWVzKSB7XG4gIHZhciBtYXAgPSB7fSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbWFwW25hbWVzW2ldLnRvTG93ZXJDYXNlKCldID0gaTtcbiAgcmV0dXJuIG1hcDtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gKGQudyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla2RheU51bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IChkLnUgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJTdW5kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5VID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVySVNPKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuViA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla051bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlcgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUZ1bGxZZWFyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA0KSk7XG4gIHJldHVybiBuID8gKGQueSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLnkgPSArblswXSArICgrblswXSA+IDY4ID8gMTkwMCA6IDIwMDApLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWm9uZShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSAvXihaKXwoWystXVxcZFxcZCkoPzo6PyhcXGRcXGQpKT8vLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA2KSk7XG4gIHJldHVybiBuID8gKGQuWiA9IG5bMV0gPyAwIDogLShuWzJdICsgKG5bM10gfHwgXCIwMFwiKSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNb250aE51bWJlcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLm0gPSBuWzBdIC0gMSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZURheU9mTW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5kID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VEYXlPZlllYXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDMpKTtcbiAgcmV0dXJuIG4gPyAoZC5tID0gMCwgZC5kID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VIb3VyMjQoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5IID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNaW51dGVzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuTSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlU2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlMgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pbGxpc2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMykpO1xuICByZXR1cm4gbiA/IChkLkwgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pY3Jvc2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNikpO1xuICByZXR1cm4gbiA/IChkLkwgPSBNYXRoLmZsb29yKG5bMF0gLyAxMDAwKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUxpdGVyYWxQZXJjZW50KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IHBlcmNlbnRSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IGkgKyBuWzBdLmxlbmd0aCA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVVuaXhUaW1lc3RhbXAoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICByZXR1cm4gbiA/IChkLlEgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVVuaXhUaW1lc3RhbXBTZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgcmV0dXJuIG4gPyAoZC5RID0gKCtuWzBdKSAqIDEwMDAsIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RGF5T2ZNb250aChkLCBwKSB7XG4gIHJldHVybiBwYWQkMShkLmdldERhdGUoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhvdXIyNChkLCBwKSB7XG4gIHJldHVybiBwYWQkMShkLmdldEhvdXJzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRIb3VyMTIoZCwgcCkge1xuICByZXR1cm4gcGFkJDEoZC5nZXRIb3VycygpICUgMTIgfHwgMTIsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXREYXlPZlllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkJDEoMSArIGRheS5jb3VudCh5ZWFyKGQpLCBkKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1pbGxpc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQkMShkLmdldE1pbGxpc2Vjb25kcygpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWljcm9zZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIGZvcm1hdE1pbGxpc2Vjb25kcyhkLCBwKSArIFwiMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1vbnRoTnVtYmVyKGQsIHApIHtcbiAgcmV0dXJuIHBhZCQxKGQuZ2V0TW9udGgoKSArIDEsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNaW51dGVzKGQsIHApIHtcbiAgcmV0dXJuIHBhZCQxKGQuZ2V0TWludXRlcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0U2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQkMShkLmdldFNlY29uZHMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtkYXlOdW1iZXJNb25kYXkoZCkge1xuICB2YXIgZGF5JCQxID0gZC5nZXREYXkoKTtcbiAgcmV0dXJuIGRheSQkMSA9PT0gMCA/IDcgOiBkYXkkJDE7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJTdW5kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkJDEoc3VuZGF5LmNvdW50KHllYXIoZCksIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla051bWJlcklTTyhkLCBwKSB7XG4gIHZhciBkYXkkJDEgPSBkLmdldERheSgpO1xuICBkID0gKGRheSQkMSA+PSA0IHx8IGRheSQkMSA9PT0gMCkgPyB0aHVyc2RheShkKSA6IHRodXJzZGF5LmNlaWwoZCk7XG4gIHJldHVybiBwYWQkMSh0aHVyc2RheS5jb3VudCh5ZWFyKGQpLCBkKSArICh5ZWFyKGQpLmdldERheSgpID09PSA0KSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXkoZCkge1xuICByZXR1cm4gZC5nZXREYXkoKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla051bWJlck1vbmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQkMShtb25kYXkuY291bnQoeWVhcihkKSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRZZWFyJDEoZCwgcCkge1xuICByZXR1cm4gcGFkJDEoZC5nZXRGdWxsWWVhcigpICUgMTAwLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RnVsbFllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkJDEoZC5nZXRGdWxsWWVhcigpICUgMTAwMDAsIHAsIDQpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRab25lKGQpIHtcbiAgdmFyIHogPSBkLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gIHJldHVybiAoeiA+IDAgPyBcIi1cIiA6ICh6ICo9IC0xLCBcIitcIikpXG4gICAgICArIHBhZCQxKHogLyA2MCB8IDAsIFwiMFwiLCAyKVxuICAgICAgKyBwYWQkMSh6ICUgNjAsIFwiMFwiLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRGF5T2ZNb250aChkLCBwKSB7XG4gIHJldHVybiBwYWQkMShkLmdldFVUQ0RhdGUoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0hvdXIyNChkLCBwKSB7XG4gIHJldHVybiBwYWQkMShkLmdldFVUQ0hvdXJzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENIb3VyMTIoZCwgcCkge1xuICByZXR1cm4gcGFkJDEoZC5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENEYXlPZlllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkJDEoMSArIHV0Y0RheS5jb3VudCh1dGNZZWFyKGQpLCBkKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01pbGxpc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQkMShkLmdldFVUQ01pbGxpc2Vjb25kcygpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWljcm9zZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIGZvcm1hdFVUQ01pbGxpc2Vjb25kcyhkLCBwKSArIFwiMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01vbnRoTnVtYmVyKGQsIHApIHtcbiAgcmV0dXJuIHBhZCQxKGQuZ2V0VVRDTW9udGgoKSArIDEsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaW51dGVzKGQsIHApIHtcbiAgcmV0dXJuIHBhZCQxKGQuZ2V0VVRDTWludXRlcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDU2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQkMShkLmdldFVUQ1NlY29uZHMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXkoZCkge1xuICB2YXIgZG93ID0gZC5nZXRVVENEYXkoKTtcbiAgcmV0dXJuIGRvdyA9PT0gMCA/IDcgOiBkb3c7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkJDEodXRjU3VuZGF5LmNvdW50KHV0Y1llYXIoZCksIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlcklTTyhkLCBwKSB7XG4gIHZhciBkYXkkJDEgPSBkLmdldFVUQ0RheSgpO1xuICBkID0gKGRheSQkMSA+PSA0IHx8IGRheSQkMSA9PT0gMCkgPyB1dGNUaHVyc2RheShkKSA6IHV0Y1RodXJzZGF5LmNlaWwoZCk7XG4gIHJldHVybiBwYWQkMSh1dGNUaHVyc2RheS5jb3VudCh1dGNZZWFyKGQpLCBkKSArICh1dGNZZWFyKGQpLmdldFVUQ0RheSgpID09PSA0KSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXkoZCkge1xuICByZXR1cm4gZC5nZXRVVENEYXkoKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlck1vbmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQkMSh1dGNNb25kYXkuY291bnQodXRjWWVhcihkKSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZCQxKGQuZ2V0VVRDRnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0Z1bGxZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZCQxKGQuZ2V0VVRDRnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDWm9uZSgpIHtcbiAgcmV0dXJuIFwiKzAwMDBcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TGl0ZXJhbFBlcmNlbnQoKSB7XG4gIHJldHVybiBcIiVcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VW5peFRpbWVzdGFtcChkKSB7XG4gIHJldHVybiArZDtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMoZCkge1xuICByZXR1cm4gTWF0aC5mbG9vcigrZCAvIDEwMDApO1xufVxuXG52YXIgbG9jYWxlJDE7XG5cbmRlZmF1bHRMb2NhbGUkMSh7XG4gIGRhdGVUaW1lOiBcIiV4LCAlWFwiLFxuICBkYXRlOiBcIiUtbS8lLWQvJVlcIixcbiAgdGltZTogXCIlLUk6JU06JVMgJXBcIixcbiAgcGVyaW9kczogW1wiQU1cIiwgXCJQTVwiXSxcbiAgZGF5czogW1wiU3VuZGF5XCIsIFwiTW9uZGF5XCIsIFwiVHVlc2RheVwiLCBcIldlZG5lc2RheVwiLCBcIlRodXJzZGF5XCIsIFwiRnJpZGF5XCIsIFwiU2F0dXJkYXlcIl0sXG4gIHNob3J0RGF5czogW1wiU3VuXCIsIFwiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCJdLFxuICBtb250aHM6IFtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdLFxuICBzaG9ydE1vbnRoczogW1wiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdXG59KTtcblxuZnVuY3Rpb24gZGVmYXVsdExvY2FsZSQxKGRlZmluaXRpb24pIHtcbiAgbG9jYWxlJDEgPSBmb3JtYXRMb2NhbGUkMShkZWZpbml0aW9uKTtcbiAgZXhwb3J0cy50aW1lRm9ybWF0ID0gbG9jYWxlJDEuZm9ybWF0O1xuICBleHBvcnRzLnRpbWVQYXJzZSA9IGxvY2FsZSQxLnBhcnNlO1xuICBleHBvcnRzLnV0Y0Zvcm1hdCA9IGxvY2FsZSQxLnV0Y0Zvcm1hdDtcbiAgZXhwb3J0cy51dGNQYXJzZSA9IGxvY2FsZSQxLnV0Y1BhcnNlO1xuICByZXR1cm4gbG9jYWxlJDE7XG59XG5cbnZhciBpc29TcGVjaWZpZXIgPSBcIiVZLSVtLSVkVCVIOiVNOiVTLiVMWlwiO1xuXG5mdW5jdGlvbiBmb3JtYXRJc29OYXRpdmUoZGF0ZSkge1xuICByZXR1cm4gZGF0ZS50b0lTT1N0cmluZygpO1xufVxuXG52YXIgZm9ybWF0SXNvID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmdcbiAgICA/IGZvcm1hdElzb05hdGl2ZVxuICAgIDogZXhwb3J0cy51dGNGb3JtYXQoaXNvU3BlY2lmaWVyKTtcblxuZnVuY3Rpb24gcGFyc2VJc29OYXRpdmUoc3RyaW5nKSB7XG4gIHZhciBkYXRlID0gbmV3IERhdGUoc3RyaW5nKTtcbiAgcmV0dXJuIGlzTmFOKGRhdGUpID8gbnVsbCA6IGRhdGU7XG59XG5cbnZhciBwYXJzZUlzbyA9ICtuZXcgRGF0ZShcIjIwMDAtMDEtMDFUMDA6MDA6MDAuMDAwWlwiKVxuICAgID8gcGFyc2VJc29OYXRpdmVcbiAgICA6IGV4cG9ydHMudXRjUGFyc2UoaXNvU3BlY2lmaWVyKTtcblxudmFyIGR1cmF0aW9uU2Vjb25kJDEgPSAxMDAwLFxuICAgIGR1cmF0aW9uTWludXRlJDEgPSBkdXJhdGlvblNlY29uZCQxICogNjAsXG4gICAgZHVyYXRpb25Ib3VyJDEgPSBkdXJhdGlvbk1pbnV0ZSQxICogNjAsXG4gICAgZHVyYXRpb25EYXkkMSA9IGR1cmF0aW9uSG91ciQxICogMjQsXG4gICAgZHVyYXRpb25XZWVrJDEgPSBkdXJhdGlvbkRheSQxICogNyxcbiAgICBkdXJhdGlvbk1vbnRoID0gZHVyYXRpb25EYXkkMSAqIDMwLFxuICAgIGR1cmF0aW9uWWVhciA9IGR1cmF0aW9uRGF5JDEgKiAzNjU7XG5cbmZ1bmN0aW9uIGRhdGUkMSh0KSB7XG4gIHJldHVybiBuZXcgRGF0ZSh0KTtcbn1cblxuZnVuY3Rpb24gbnVtYmVyJDModCkge1xuICByZXR1cm4gdCBpbnN0YW5jZW9mIERhdGUgPyArdCA6ICtuZXcgRGF0ZSgrdCk7XG59XG5cbmZ1bmN0aW9uIGNhbGVuZGFyKHllYXIkJDEsIG1vbnRoJCQxLCB3ZWVrLCBkYXkkJDEsIGhvdXIkJDEsIG1pbnV0ZSQkMSwgc2Vjb25kJCQxLCBtaWxsaXNlY29uZCQkMSwgZm9ybWF0KSB7XG4gIHZhciBzY2FsZSA9IGNvbnRpbnVvdXMoaWRlbnRpdHkkNiwgaWRlbnRpdHkkNiksXG4gICAgICBpbnZlcnQgPSBzY2FsZS5pbnZlcnQsXG4gICAgICBkb21haW4gPSBzY2FsZS5kb21haW47XG5cbiAgdmFyIGZvcm1hdE1pbGxpc2Vjb25kID0gZm9ybWF0KFwiLiVMXCIpLFxuICAgICAgZm9ybWF0U2Vjb25kID0gZm9ybWF0KFwiOiVTXCIpLFxuICAgICAgZm9ybWF0TWludXRlID0gZm9ybWF0KFwiJUk6JU1cIiksXG4gICAgICBmb3JtYXRIb3VyID0gZm9ybWF0KFwiJUkgJXBcIiksXG4gICAgICBmb3JtYXREYXkgPSBmb3JtYXQoXCIlYSAlZFwiKSxcbiAgICAgIGZvcm1hdFdlZWsgPSBmb3JtYXQoXCIlYiAlZFwiKSxcbiAgICAgIGZvcm1hdE1vbnRoID0gZm9ybWF0KFwiJUJcIiksXG4gICAgICBmb3JtYXRZZWFyID0gZm9ybWF0KFwiJVlcIik7XG5cbiAgdmFyIHRpY2tJbnRlcnZhbHMgPSBbXG4gICAgW3NlY29uZCQkMSwgIDEsICAgICAgZHVyYXRpb25TZWNvbmQkMV0sXG4gICAgW3NlY29uZCQkMSwgIDUsICA1ICogZHVyYXRpb25TZWNvbmQkMV0sXG4gICAgW3NlY29uZCQkMSwgMTUsIDE1ICogZHVyYXRpb25TZWNvbmQkMV0sXG4gICAgW3NlY29uZCQkMSwgMzAsIDMwICogZHVyYXRpb25TZWNvbmQkMV0sXG4gICAgW21pbnV0ZSQkMSwgIDEsICAgICAgZHVyYXRpb25NaW51dGUkMV0sXG4gICAgW21pbnV0ZSQkMSwgIDUsICA1ICogZHVyYXRpb25NaW51dGUkMV0sXG4gICAgW21pbnV0ZSQkMSwgMTUsIDE1ICogZHVyYXRpb25NaW51dGUkMV0sXG4gICAgW21pbnV0ZSQkMSwgMzAsIDMwICogZHVyYXRpb25NaW51dGUkMV0sXG4gICAgWyAgaG91ciQkMSwgIDEsICAgICAgZHVyYXRpb25Ib3VyJDEgIF0sXG4gICAgWyAgaG91ciQkMSwgIDMsICAzICogZHVyYXRpb25Ib3VyJDEgIF0sXG4gICAgWyAgaG91ciQkMSwgIDYsICA2ICogZHVyYXRpb25Ib3VyJDEgIF0sXG4gICAgWyAgaG91ciQkMSwgMTIsIDEyICogZHVyYXRpb25Ib3VyJDEgIF0sXG4gICAgWyAgIGRheSQkMSwgIDEsICAgICAgZHVyYXRpb25EYXkkMSAgIF0sXG4gICAgWyAgIGRheSQkMSwgIDIsICAyICogZHVyYXRpb25EYXkkMSAgIF0sXG4gICAgWyAgd2VlaywgIDEsICAgICAgZHVyYXRpb25XZWVrJDEgIF0sXG4gICAgWyBtb250aCQkMSwgIDEsICAgICAgZHVyYXRpb25Nb250aCBdLFxuICAgIFsgbW9udGgkJDEsICAzLCAgMyAqIGR1cmF0aW9uTW9udGggXSxcbiAgICBbICB5ZWFyJCQxLCAgMSwgICAgICBkdXJhdGlvblllYXIgIF1cbiAgXTtcblxuICBmdW5jdGlvbiB0aWNrRm9ybWF0KGRhdGUpIHtcbiAgICByZXR1cm4gKHNlY29uZCQkMShkYXRlKSA8IGRhdGUgPyBmb3JtYXRNaWxsaXNlY29uZFxuICAgICAgICA6IG1pbnV0ZSQkMShkYXRlKSA8IGRhdGUgPyBmb3JtYXRTZWNvbmRcbiAgICAgICAgOiBob3VyJCQxKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdE1pbnV0ZVxuICAgICAgICA6IGRheSQkMShkYXRlKSA8IGRhdGUgPyBmb3JtYXRIb3VyXG4gICAgICAgIDogbW9udGgkJDEoZGF0ZSkgPCBkYXRlID8gKHdlZWsoZGF0ZSkgPCBkYXRlID8gZm9ybWF0RGF5IDogZm9ybWF0V2VlaylcbiAgICAgICAgOiB5ZWFyJCQxKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdE1vbnRoXG4gICAgICAgIDogZm9ybWF0WWVhcikoZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiB0aWNrSW50ZXJ2YWwoaW50ZXJ2YWwsIHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gICAgaWYgKGludGVydmFsID09IG51bGwpIGludGVydmFsID0gMTA7XG5cbiAgICAvLyBJZiBhIGRlc2lyZWQgdGljayBjb3VudCBpcyBzcGVjaWZpZWQsIHBpY2sgYSByZWFzb25hYmxlIHRpY2sgaW50ZXJ2YWxcbiAgICAvLyBiYXNlZCBvbiB0aGUgZXh0ZW50IG9mIHRoZSBkb21haW4gYW5kIGEgcm91Z2ggZXN0aW1hdGUgb2YgdGljayBzaXplLlxuICAgIC8vIE90aGVyd2lzZSwgYXNzdW1lIGludGVydmFsIGlzIGFscmVhZHkgYSB0aW1lIGludGVydmFsIGFuZCB1c2UgaXQuXG4gICAgaWYgKHR5cGVvZiBpbnRlcnZhbCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgdmFyIHRhcmdldCA9IE1hdGguYWJzKHN0b3AgLSBzdGFydCkgLyBpbnRlcnZhbCxcbiAgICAgICAgICBpID0gYmlzZWN0b3IoZnVuY3Rpb24oaSkgeyByZXR1cm4gaVsyXTsgfSkucmlnaHQodGlja0ludGVydmFscywgdGFyZ2V0KTtcbiAgICAgIGlmIChpID09PSB0aWNrSW50ZXJ2YWxzLmxlbmd0aCkge1xuICAgICAgICBzdGVwID0gdGlja1N0ZXAoc3RhcnQgLyBkdXJhdGlvblllYXIsIHN0b3AgLyBkdXJhdGlvblllYXIsIGludGVydmFsKTtcbiAgICAgICAgaW50ZXJ2YWwgPSB5ZWFyJCQxO1xuICAgICAgfSBlbHNlIGlmIChpKSB7XG4gICAgICAgIGkgPSB0aWNrSW50ZXJ2YWxzW3RhcmdldCAvIHRpY2tJbnRlcnZhbHNbaSAtIDFdWzJdIDwgdGlja0ludGVydmFsc1tpXVsyXSAvIHRhcmdldCA/IGkgLSAxIDogaV07XG4gICAgICAgIHN0ZXAgPSBpWzFdO1xuICAgICAgICBpbnRlcnZhbCA9IGlbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGVwID0gTWF0aC5tYXgodGlja1N0ZXAoc3RhcnQsIHN0b3AsIGludGVydmFsKSwgMSk7XG4gICAgICAgIGludGVydmFsID0gbWlsbGlzZWNvbmQkJDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0ZXAgPT0gbnVsbCA/IGludGVydmFsIDogaW50ZXJ2YWwuZXZlcnkoc3RlcCk7XG4gIH1cblxuICBzY2FsZS5pbnZlcnQgPSBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGludmVydCh5KSk7XG4gIH07XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gZG9tYWluKG1hcCQyLmNhbGwoXywgbnVtYmVyJDMpKSA6IGRvbWFpbigpLm1hcChkYXRlJDEpO1xuICB9O1xuXG4gIHNjYWxlLnRpY2tzID0gZnVuY3Rpb24oaW50ZXJ2YWwsIHN0ZXApIHtcbiAgICB2YXIgZCA9IGRvbWFpbigpLFxuICAgICAgICB0MCA9IGRbMF0sXG4gICAgICAgIHQxID0gZFtkLmxlbmd0aCAtIDFdLFxuICAgICAgICByID0gdDEgPCB0MCxcbiAgICAgICAgdDtcbiAgICBpZiAocikgdCA9IHQwLCB0MCA9IHQxLCB0MSA9IHQ7XG4gICAgdCA9IHRpY2tJbnRlcnZhbChpbnRlcnZhbCwgdDAsIHQxLCBzdGVwKTtcbiAgICB0ID0gdCA/IHQucmFuZ2UodDAsIHQxICsgMSkgOiBbXTsgLy8gaW5jbHVzaXZlIHN0b3BcbiAgICByZXR1cm4gciA/IHQucmV2ZXJzZSgpIDogdDtcbiAgfTtcblxuICBzY2FsZS50aWNrRm9ybWF0ID0gZnVuY3Rpb24oY291bnQsIHNwZWNpZmllcikge1xuICAgIHJldHVybiBzcGVjaWZpZXIgPT0gbnVsbCA/IHRpY2tGb3JtYXQgOiBmb3JtYXQoc3BlY2lmaWVyKTtcbiAgfTtcblxuICBzY2FsZS5uaWNlID0gZnVuY3Rpb24oaW50ZXJ2YWwsIHN0ZXApIHtcbiAgICB2YXIgZCA9IGRvbWFpbigpO1xuICAgIHJldHVybiAoaW50ZXJ2YWwgPSB0aWNrSW50ZXJ2YWwoaW50ZXJ2YWwsIGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgc3RlcCkpXG4gICAgICAgID8gZG9tYWluKG5pY2UoZCwgaW50ZXJ2YWwpKVxuICAgICAgICA6IHNjYWxlO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgY2FsZW5kYXIoeWVhciQkMSwgbW9udGgkJDEsIHdlZWssIGRheSQkMSwgaG91ciQkMSwgbWludXRlJCQxLCBzZWNvbmQkJDEsIG1pbGxpc2Vjb25kJCQxLCBmb3JtYXQpKTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmZ1bmN0aW9uIHRpbWUoKSB7XG4gIHJldHVybiBpbml0UmFuZ2UuYXBwbHkoY2FsZW5kYXIoeWVhciwgbW9udGgsIHN1bmRheSwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmQsIGV4cG9ydHMudGltZUZvcm1hdCkuZG9tYWluKFtuZXcgRGF0ZSgyMDAwLCAwLCAxKSwgbmV3IERhdGUoMjAwMCwgMCwgMildKSwgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdXRjVGltZSgpIHtcbiAgcmV0dXJuIGluaXRSYW5nZS5hcHBseShjYWxlbmRhcih1dGNZZWFyLCB1dGNNb250aCwgdXRjU3VuZGF5LCB1dGNEYXksIHV0Y0hvdXIsIHV0Y01pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZCwgZXhwb3J0cy51dGNGb3JtYXQpLmRvbWFpbihbRGF0ZS5VVEMoMjAwMCwgMCwgMSksIERhdGUuVVRDKDIwMDAsIDAsIDIpXSksIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybWVyJDIoKSB7XG4gIHZhciB4MCA9IDAsXG4gICAgICB4MSA9IDEsXG4gICAgICB0MCxcbiAgICAgIHQxLFxuICAgICAgazEwLFxuICAgICAgdHJhbnNmb3JtLFxuICAgICAgaW50ZXJwb2xhdG9yID0gaWRlbnRpdHkkNixcbiAgICAgIGNsYW1wID0gZmFsc2UsXG4gICAgICB1bmtub3duO1xuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICByZXR1cm4gaXNOYU4oeCA9ICt4KSA/IHVua25vd24gOiBpbnRlcnBvbGF0b3IoazEwID09PSAwID8gMC41IDogKHggPSAodHJhbnNmb3JtKHgpIC0gdDApICogazEwLCBjbGFtcCA/IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIHgpKSA6IHgpKTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0MCA9IHRyYW5zZm9ybSh4MCA9ICtfWzBdKSwgdDEgPSB0cmFuc2Zvcm0oeDEgPSArX1sxXSksIGsxMCA9IHQwID09PSB0MSA/IDAgOiAxIC8gKHQxIC0gdDApLCBzY2FsZSkgOiBbeDAsIHgxXTtcbiAgfTtcblxuICBzY2FsZS5jbGFtcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGFtcCA9ICEhXywgc2NhbGUpIDogY2xhbXA7XG4gIH07XG5cbiAgc2NhbGUuaW50ZXJwb2xhdG9yID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGludGVycG9sYXRvciA9IF8sIHNjYWxlKSA6IGludGVycG9sYXRvcjtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdHJhbnNmb3JtID0gdCwgdDAgPSB0KHgwKSwgdDEgPSB0KHgxKSwgazEwID0gdDAgPT09IHQxID8gMCA6IDEgLyAodDEgLSB0MCk7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjb3B5JDEoc291cmNlLCB0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldFxuICAgICAgLmRvbWFpbihzb3VyY2UuZG9tYWluKCkpXG4gICAgICAuaW50ZXJwb2xhdG9yKHNvdXJjZS5pbnRlcnBvbGF0b3IoKSlcbiAgICAgIC5jbGFtcChzb3VyY2UuY2xhbXAoKSlcbiAgICAgIC51bmtub3duKHNvdXJjZS51bmtub3duKCkpO1xufVxuXG5mdW5jdGlvbiBzZXF1ZW50aWFsKCkge1xuICB2YXIgc2NhbGUgPSBsaW5lYXJpc2godHJhbnNmb3JtZXIkMigpKGlkZW50aXR5JDYpKTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkkMShzY2FsZSwgc2VxdWVudGlhbCgpKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gc2VxdWVudGlhbExvZygpIHtcbiAgdmFyIHNjYWxlID0gbG9nZ2lzaCh0cmFuc2Zvcm1lciQyKCkpLmRvbWFpbihbMSwgMTBdKTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkkMShzY2FsZSwgc2VxdWVudGlhbExvZygpKS5iYXNlKHNjYWxlLmJhc2UoKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRJbnRlcnBvbGF0b3IuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHNlcXVlbnRpYWxTeW1sb2coKSB7XG4gIHZhciBzY2FsZSA9IHN5bWxvZ2lzaCh0cmFuc2Zvcm1lciQyKCkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weSQxKHNjYWxlLCBzZXF1ZW50aWFsU3ltbG9nKCkpLmNvbnN0YW50KHNjYWxlLmNvbnN0YW50KCkpO1xuICB9O1xuXG4gIHJldHVybiBpbml0SW50ZXJwb2xhdG9yLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBzZXF1ZW50aWFsUG93KCkge1xuICB2YXIgc2NhbGUgPSBwb3dpc2godHJhbnNmb3JtZXIkMigpKTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkkMShzY2FsZSwgc2VxdWVudGlhbFBvdygpKS5leHBvbmVudChzY2FsZS5leHBvbmVudCgpKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gc2VxdWVudGlhbFNxcnQoKSB7XG4gIHJldHVybiBzZXF1ZW50aWFsUG93LmFwcGx5KG51bGwsIGFyZ3VtZW50cykuZXhwb25lbnQoMC41KTtcbn1cblxuZnVuY3Rpb24gc2VxdWVudGlhbFF1YW50aWxlKCkge1xuICB2YXIgZG9tYWluID0gW10sXG4gICAgICBpbnRlcnBvbGF0b3IgPSBpZGVudGl0eSQ2O1xuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICBpZiAoIWlzTmFOKHggPSAreCkpIHJldHVybiBpbnRlcnBvbGF0b3IoKGJpc2VjdFJpZ2h0KGRvbWFpbiwgeCkgLSAxKSAvIChkb21haW4ubGVuZ3RoIC0gMSkpO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRvbWFpbi5zbGljZSgpO1xuICAgIGRvbWFpbiA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gXy5sZW5ndGgsIGQ7IGkgPCBuOyArK2kpIGlmIChkID0gX1tpXSwgZCAhPSBudWxsICYmICFpc05hTihkID0gK2QpKSBkb21haW4ucHVzaChkKTtcbiAgICBkb21haW4uc29ydChhc2NlbmRpbmcpO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICBzY2FsZS5pbnRlcnBvbGF0b3IgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdG9yID0gXywgc2NhbGUpIDogaW50ZXJwb2xhdG9yO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc2VxdWVudGlhbFF1YW50aWxlKGludGVycG9sYXRvcikuZG9tYWluKGRvbWFpbik7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRJbnRlcnBvbGF0b3IuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybWVyJDMoKSB7XG4gIHZhciB4MCA9IDAsXG4gICAgICB4MSA9IDAuNSxcbiAgICAgIHgyID0gMSxcbiAgICAgIHQwLFxuICAgICAgdDEsXG4gICAgICB0MixcbiAgICAgIGsxMCxcbiAgICAgIGsyMSxcbiAgICAgIGludGVycG9sYXRvciA9IGlkZW50aXR5JDYsXG4gICAgICB0cmFuc2Zvcm0sXG4gICAgICBjbGFtcCA9IGZhbHNlLFxuICAgICAgdW5rbm93bjtcblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIGlzTmFOKHggPSAreCkgPyB1bmtub3duIDogKHggPSAwLjUgKyAoKHggPSArdHJhbnNmb3JtKHgpKSAtIHQxKSAqICh4IDwgdDEgPyBrMTAgOiBrMjEpLCBpbnRlcnBvbGF0b3IoY2xhbXAgPyBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCB4KSkgOiB4KSk7XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodDAgPSB0cmFuc2Zvcm0oeDAgPSArX1swXSksIHQxID0gdHJhbnNmb3JtKHgxID0gK19bMV0pLCB0MiA9IHRyYW5zZm9ybSh4MiA9ICtfWzJdKSwgazEwID0gdDAgPT09IHQxID8gMCA6IDAuNSAvICh0MSAtIHQwKSwgazIxID0gdDEgPT09IHQyID8gMCA6IDAuNSAvICh0MiAtIHQxKSwgc2NhbGUpIDogW3gwLCB4MSwgeDJdO1xuICB9O1xuXG4gIHNjYWxlLmNsYW1wID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsYW1wID0gISFfLCBzY2FsZSkgOiBjbGFtcDtcbiAgfTtcblxuICBzY2FsZS5pbnRlcnBvbGF0b3IgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdG9yID0gXywgc2NhbGUpIDogaW50ZXJwb2xhdG9yO1xuICB9O1xuXG4gIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHVua25vd247XG4gIH07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0cmFuc2Zvcm0gPSB0LCB0MCA9IHQoeDApLCB0MSA9IHQoeDEpLCB0MiA9IHQoeDIpLCBrMTAgPSB0MCA9PT0gdDEgPyAwIDogMC41IC8gKHQxIC0gdDApLCBrMjEgPSB0MSA9PT0gdDIgPyAwIDogMC41IC8gKHQyIC0gdDEpO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGl2ZXJnaW5nKCkge1xuICB2YXIgc2NhbGUgPSBsaW5lYXJpc2godHJhbnNmb3JtZXIkMygpKGlkZW50aXR5JDYpKTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkkMShzY2FsZSwgZGl2ZXJnaW5nKCkpO1xuICB9O1xuXG4gIHJldHVybiBpbml0SW50ZXJwb2xhdG9yLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBkaXZlcmdpbmdMb2coKSB7XG4gIHZhciBzY2FsZSA9IGxvZ2dpc2godHJhbnNmb3JtZXIkMygpKS5kb21haW4oWzAuMSwgMSwgMTBdKTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkkMShzY2FsZSwgZGl2ZXJnaW5nTG9nKCkpLmJhc2Uoc2NhbGUuYmFzZSgpKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gZGl2ZXJnaW5nU3ltbG9nKCkge1xuICB2YXIgc2NhbGUgPSBzeW1sb2dpc2godHJhbnNmb3JtZXIkMygpKTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkkMShzY2FsZSwgZGl2ZXJnaW5nU3ltbG9nKCkpLmNvbnN0YW50KHNjYWxlLmNvbnN0YW50KCkpO1xuICB9O1xuXG4gIHJldHVybiBpbml0SW50ZXJwb2xhdG9yLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBkaXZlcmdpbmdQb3coKSB7XG4gIHZhciBzY2FsZSA9IHBvd2lzaCh0cmFuc2Zvcm1lciQzKCkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weSQxKHNjYWxlLCBkaXZlcmdpbmdQb3coKSkuZXhwb25lbnQoc2NhbGUuZXhwb25lbnQoKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRJbnRlcnBvbGF0b3IuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGRpdmVyZ2luZ1NxcnQoKSB7XG4gIHJldHVybiBkaXZlcmdpbmdQb3cuYXBwbHkobnVsbCwgYXJndW1lbnRzKS5leHBvbmVudCgwLjUpO1xufVxuXG5mdW5jdGlvbiBjb2xvcnMoc3BlY2lmaWVyKSB7XG4gIHZhciBuID0gc3BlY2lmaWVyLmxlbmd0aCAvIDYgfCAwLCBjb2xvcnMgPSBuZXcgQXJyYXkobiksIGkgPSAwO1xuICB3aGlsZSAoaSA8IG4pIGNvbG9yc1tpXSA9IFwiI1wiICsgc3BlY2lmaWVyLnNsaWNlKGkgKiA2LCArK2kgKiA2KTtcbiAgcmV0dXJuIGNvbG9ycztcbn1cblxudmFyIGNhdGVnb3J5MTAgPSBjb2xvcnMoXCIxZjc3YjRmZjdmMGUyY2EwMmNkNjI3Mjg5NDY3YmQ4YzU2NGJlMzc3YzI3ZjdmN2ZiY2JkMjIxN2JlY2ZcIik7XG5cbnZhciBBY2NlbnQgPSBjb2xvcnMoXCI3ZmM5N2ZiZWFlZDRmZGMwODZmZmZmOTkzODZjYjBmMDAyN2ZiZjViMTc2NjY2NjZcIik7XG5cbnZhciBEYXJrMiA9IGNvbG9ycyhcIjFiOWU3N2Q5NWYwMjc1NzBiM2U3Mjk4YTY2YTYxZWU2YWIwMmE2NzYxZDY2NjY2NlwiKTtcblxudmFyIFBhaXJlZCA9IGNvbG9ycyhcImE2Y2VlMzFmNzhiNGIyZGY4YTMzYTAyY2ZiOWE5OWUzMWExY2ZkYmY2ZmZmN2YwMGNhYjJkNjZhM2Q5YWZmZmY5OWIxNTkyOFwiKTtcblxudmFyIFBhc3RlbDEgPSBjb2xvcnMoXCJmYmI0YWViM2NkZTNjY2ViYzVkZWNiZTRmZWQ5YTZmZmZmY2NlNWQ4YmRmZGRhZWNmMmYyZjJcIik7XG5cbnZhciBQYXN0ZWwyID0gY29sb3JzKFwiYjNlMmNkZmRjZGFjY2JkNWU4ZjRjYWU0ZTZmNWM5ZmZmMmFlZjFlMmNjY2NjY2NjXCIpO1xuXG52YXIgU2V0MSA9IGNvbG9ycyhcImU0MWExYzM3N2ViODRkYWY0YTk4NGVhM2ZmN2YwMGZmZmYzM2E2NTYyOGY3ODFiZjk5OTk5OVwiKTtcblxudmFyIFNldDIgPSBjb2xvcnMoXCI2NmMyYTVmYzhkNjI4ZGEwY2JlNzhhYzNhNmQ4NTRmZmQ5MmZlNWM0OTRiM2IzYjNcIik7XG5cbnZhciBTZXQzID0gY29sb3JzKFwiOGRkM2M3ZmZmZmIzYmViYWRhZmI4MDcyODBiMWQzZmRiNDYyYjNkZTY5ZmNjZGU1ZDlkOWQ5YmM4MGJkY2NlYmM1ZmZlZDZmXCIpO1xuXG5mdW5jdGlvbiByYW1wKHNjaGVtZSkge1xuICByZXR1cm4gcmdiQmFzaXMoc2NoZW1lW3NjaGVtZS5sZW5ndGggLSAxXSk7XG59XG5cbnZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImQ4YjM2NWY1ZjVmNTVhYjRhY1wiLFxuICBcImE2NjExYWRmYzI3ZDgwY2RjMTAxODU3MVwiLFxuICBcImE2NjExYWRmYzI3ZGY1ZjVmNTgwY2RjMTAxODU3MVwiLFxuICBcIjhjNTEwYWQ4YjM2NWY2ZThjM2M3ZWFlNTVhYjRhYzAxNjY1ZVwiLFxuICBcIjhjNTEwYWQ4YjM2NWY2ZThjM2Y1ZjVmNWM3ZWFlNTVhYjRhYzAxNjY1ZVwiLFxuICBcIjhjNTEwYWJmODEyZGRmYzI3ZGY2ZThjM2M3ZWFlNTgwY2RjMTM1OTc4ZjAxNjY1ZVwiLFxuICBcIjhjNTEwYWJmODEyZGRmYzI3ZGY2ZThjM2Y1ZjVmNWM3ZWFlNTgwY2RjMTM1OTc4ZjAxNjY1ZVwiLFxuICBcIjU0MzAwNThjNTEwYWJmODEyZGRmYzI3ZGY2ZThjM2M3ZWFlNTgwY2RjMTM1OTc4ZjAxNjY1ZTAwM2MzMFwiLFxuICBcIjU0MzAwNThjNTEwYWJmODEyZGRmYzI3ZGY2ZThjM2Y1ZjVmNWM3ZWFlNTgwY2RjMTM1OTc4ZjAxNjY1ZTAwM2MzMFwiXG4pLm1hcChjb2xvcnMpO1xuXG52YXIgQnJCRyA9IHJhbXAoc2NoZW1lKTtcblxudmFyIHNjaGVtZSQxID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJhZjhkYzNmN2Y3Zjc3ZmJmN2JcIixcbiAgXCI3YjMyOTRjMmE1Y2ZhNmRiYTAwMDg4MzdcIixcbiAgXCI3YjMyOTRjMmE1Y2ZmN2Y3ZjdhNmRiYTAwMDg4MzdcIixcbiAgXCI3NjJhODNhZjhkYzNlN2Q0ZThkOWYwZDM3ZmJmN2IxYjc4MzdcIixcbiAgXCI3NjJhODNhZjhkYzNlN2Q0ZThmN2Y3ZjdkOWYwZDM3ZmJmN2IxYjc4MzdcIixcbiAgXCI3NjJhODM5OTcwYWJjMmE1Y2ZlN2Q0ZThkOWYwZDNhNmRiYTA1YWFlNjExYjc4MzdcIixcbiAgXCI3NjJhODM5OTcwYWJjMmE1Y2ZlN2Q0ZThmN2Y3ZjdkOWYwZDNhNmRiYTA1YWFlNjExYjc4MzdcIixcbiAgXCI0MDAwNGI3NjJhODM5OTcwYWJjMmE1Y2ZlN2Q0ZThkOWYwZDNhNmRiYTA1YWFlNjExYjc4MzcwMDQ0MWJcIixcbiAgXCI0MDAwNGI3NjJhODM5OTcwYWJjMmE1Y2ZlN2Q0ZThmN2Y3ZjdkOWYwZDNhNmRiYTA1YWFlNjExYjc4MzcwMDQ0MWJcIlxuKS5tYXAoY29sb3JzKTtcblxudmFyIFBSR24gPSByYW1wKHNjaGVtZSQxKTtcblxudmFyIHNjaGVtZSQyID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlOWEzYzlmN2Y3ZjdhMWQ3NmFcIixcbiAgXCJkMDFjOGJmMWI2ZGFiOGUxODY0ZGFjMjZcIixcbiAgXCJkMDFjOGJmMWI2ZGFmN2Y3ZjdiOGUxODY0ZGFjMjZcIixcbiAgXCJjNTFiN2RlOWEzYzlmZGUwZWZlNmY1ZDBhMWQ3NmE0ZDkyMjFcIixcbiAgXCJjNTFiN2RlOWEzYzlmZGUwZWZmN2Y3ZjdlNmY1ZDBhMWQ3NmE0ZDkyMjFcIixcbiAgXCJjNTFiN2RkZTc3YWVmMWI2ZGFmZGUwZWZlNmY1ZDBiOGUxODY3ZmJjNDE0ZDkyMjFcIixcbiAgXCJjNTFiN2RkZTc3YWVmMWI2ZGFmZGUwZWZmN2Y3ZjdlNmY1ZDBiOGUxODY3ZmJjNDE0ZDkyMjFcIixcbiAgXCI4ZTAxNTJjNTFiN2RkZTc3YWVmMWI2ZGFmZGUwZWZlNmY1ZDBiOGUxODY3ZmJjNDE0ZDkyMjEyNzY0MTlcIixcbiAgXCI4ZTAxNTJjNTFiN2RkZTc3YWVmMWI2ZGFmZGUwZWZmN2Y3ZjdlNmY1ZDBiOGUxODY3ZmJjNDE0ZDkyMjEyNzY0MTlcIlxuKS5tYXAoY29sb3JzKTtcblxudmFyIFBpWUcgPSByYW1wKHNjaGVtZSQyKTtcblxudmFyIHNjaGVtZSQzID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCI5OThlYzNmN2Y3ZjdmMWEzNDBcIixcbiAgXCI1ZTNjOTliMmFiZDJmZGI4NjNlNjYxMDFcIixcbiAgXCI1ZTNjOTliMmFiZDJmN2Y3ZjdmZGI4NjNlNjYxMDFcIixcbiAgXCI1NDI3ODg5OThlYzNkOGRhZWJmZWUwYjZmMWEzNDBiMzU4MDZcIixcbiAgXCI1NDI3ODg5OThlYzNkOGRhZWJmN2Y3ZjdmZWUwYjZmMWEzNDBiMzU4MDZcIixcbiAgXCI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDZcIixcbiAgXCI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmN2Y3ZjdmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDZcIixcbiAgXCIyZDAwNGI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDY3ZjNiMDhcIixcbiAgXCIyZDAwNGI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmN2Y3ZjdmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDY3ZjNiMDhcIlxuKS5tYXAoY29sb3JzKTtcblxudmFyIFB1T3IgPSByYW1wKHNjaGVtZSQzKTtcblxudmFyIHNjaGVtZSQ0ID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlZjhhNjJmN2Y3Zjc2N2E5Y2ZcIixcbiAgXCJjYTAwMjBmNGE1ODI5MmM1ZGUwNTcxYjBcIixcbiAgXCJjYTAwMjBmNGE1ODJmN2Y3Zjc5MmM1ZGUwNTcxYjBcIixcbiAgXCJiMjE4MmJlZjhhNjJmZGRiYzdkMWU1ZjA2N2E5Y2YyMTY2YWNcIixcbiAgXCJiMjE4MmJlZjhhNjJmZGRiYzdmN2Y3ZjdkMWU1ZjA2N2E5Y2YyMTY2YWNcIixcbiAgXCJiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdkMWU1ZjA5MmM1ZGU0MzkzYzMyMTY2YWNcIixcbiAgXCJiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdmN2Y3ZjdkMWU1ZjA5MmM1ZGU0MzkzYzMyMTY2YWNcIixcbiAgXCI2NzAwMWZiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdkMWU1ZjA5MmM1ZGU0MzkzYzMyMTY2YWMwNTMwNjFcIixcbiAgXCI2NzAwMWZiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdmN2Y3ZjdkMWU1ZjA5MmM1ZGU0MzkzYzMyMTY2YWMwNTMwNjFcIlxuKS5tYXAoY29sb3JzKTtcblxudmFyIFJkQnUgPSByYW1wKHNjaGVtZSQ0KTtcblxudmFyIHNjaGVtZSQ1ID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlZjhhNjJmZmZmZmY5OTk5OTlcIixcbiAgXCJjYTAwMjBmNGE1ODJiYWJhYmE0MDQwNDBcIixcbiAgXCJjYTAwMjBmNGE1ODJmZmZmZmZiYWJhYmE0MDQwNDBcIixcbiAgXCJiMjE4MmJlZjhhNjJmZGRiYzdlMGUwZTA5OTk5OTk0ZDRkNGRcIixcbiAgXCJiMjE4MmJlZjhhNjJmZGRiYzdmZmZmZmZlMGUwZTA5OTk5OTk0ZDRkNGRcIixcbiAgXCJiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdlMGUwZTBiYWJhYmE4Nzg3ODc0ZDRkNGRcIixcbiAgXCJiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdmZmZmZmZlMGUwZTBiYWJhYmE4Nzg3ODc0ZDRkNGRcIixcbiAgXCI2NzAwMWZiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdlMGUwZTBiYWJhYmE4Nzg3ODc0ZDRkNGQxYTFhMWFcIixcbiAgXCI2NzAwMWZiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdmZmZmZmZlMGUwZTBiYWJhYmE4Nzg3ODc0ZDRkNGQxYTFhMWFcIlxuKS5tYXAoY29sb3JzKTtcblxudmFyIFJkR3kgPSByYW1wKHNjaGVtZSQ1KTtcblxudmFyIHNjaGVtZSQ2ID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmYzhkNTlmZmZmYmY5MWJmZGJcIixcbiAgXCJkNzE5MWNmZGFlNjFhYmQ5ZTkyYzdiYjZcIixcbiAgXCJkNzE5MWNmZGFlNjFmZmZmYmZhYmQ5ZTkyYzdiYjZcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOTBlMGYzZjg5MWJmZGI0NTc1YjRcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOTBmZmZmYmZlMGYzZjg5MWJmZGI0NTc1YjRcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjRcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBmZmZmYmZlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjRcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjQzMTM2OTVcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBmZmZmYmZlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjQzMTM2OTVcIlxuKS5tYXAoY29sb3JzKTtcblxudmFyIFJkWWxCdSA9IHJhbXAoc2NoZW1lJDYpO1xuXG52YXIgc2NoZW1lJDcgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZjOGQ1OWZmZmZiZjkxY2Y2MFwiLFxuICBcImQ3MTkxY2ZkYWU2MWE2ZDk2YTFhOTY0MVwiLFxuICBcImQ3MTkxY2ZkYWU2MWZmZmZiZmE2ZDk2YTFhOTY0MVwiLFxuICBcImQ3MzAyN2ZjOGQ1OWZlZTA4YmQ5ZWY4YjkxY2Y2MDFhOTg1MFwiLFxuICBcImQ3MzAyN2ZjOGQ1OWZlZTA4YmZmZmZiZmQ5ZWY4YjkxY2Y2MDFhOTg1MFwiLFxuICBcImQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA4YmQ5ZWY4YmE2ZDk2YTY2YmQ2MzFhOTg1MFwiLFxuICBcImQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA4YmZmZmZiZmQ5ZWY4YmE2ZDk2YTY2YmQ2MzFhOTg1MFwiLFxuICBcImE1MDAyNmQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA4YmQ5ZWY4YmE2ZDk2YTY2YmQ2MzFhOTg1MDAwNjgzN1wiLFxuICBcImE1MDAyNmQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA4YmZmZmZiZmQ5ZWY4YmE2ZDk2YTY2YmQ2MzFhOTg1MDAwNjgzN1wiXG4pLm1hcChjb2xvcnMpO1xuXG52YXIgUmRZbEduID0gcmFtcChzY2hlbWUkNyk7XG5cbnZhciBzY2hlbWUkOCA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmM4ZDU5ZmZmZmJmOTlkNTk0XCIsXG4gIFwiZDcxOTFjZmRhZTYxYWJkZGE0MmI4M2JhXCIsXG4gIFwiZDcxOTFjZmRhZTYxZmZmZmJmYWJkZGE0MmI4M2JhXCIsXG4gIFwiZDUzZTRmZmM4ZDU5ZmVlMDhiZTZmNTk4OTlkNTk0MzI4OGJkXCIsXG4gIFwiZDUzZTRmZmM4ZDU5ZmVlMDhiZmZmZmJmZTZmNTk4OTlkNTk0MzI4OGJkXCIsXG4gIFwiZDUzZTRmZjQ2ZDQzZmRhZTYxZmVlMDhiZTZmNTk4YWJkZGE0NjZjMmE1MzI4OGJkXCIsXG4gIFwiZDUzZTRmZjQ2ZDQzZmRhZTYxZmVlMDhiZmZmZmJmZTZmNTk4YWJkZGE0NjZjMmE1MzI4OGJkXCIsXG4gIFwiOWUwMTQyZDUzZTRmZjQ2ZDQzZmRhZTYxZmVlMDhiZTZmNTk4YWJkZGE0NjZjMmE1MzI4OGJkNWU0ZmEyXCIsXG4gIFwiOWUwMTQyZDUzZTRmZjQ2ZDQzZmRhZTYxZmVlMDhiZmZmZmJmZTZmNTk4YWJkZGE0NjZjMmE1MzI4OGJkNWU0ZmEyXCJcbikubWFwKGNvbG9ycyk7XG5cbnZhciBTcGVjdHJhbCA9IHJhbXAoc2NoZW1lJDgpO1xuXG52YXIgc2NoZW1lJDkgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImU1ZjVmOTk5ZDhjOTJjYTI1ZlwiLFxuICBcImVkZjhmYmIyZTJlMjY2YzJhNDIzOGI0NVwiLFxuICBcImVkZjhmYmIyZTJlMjY2YzJhNDJjYTI1ZjAwNmQyY1wiLFxuICBcImVkZjhmYmNjZWNlNjk5ZDhjOTY2YzJhNDJjYTI1ZjAwNmQyY1wiLFxuICBcImVkZjhmYmNjZWNlNjk5ZDhjOTY2YzJhNDQxYWU3NjIzOGI0NTAwNTgyNFwiLFxuICBcImY3ZmNmZGU1ZjVmOWNjZWNlNjk5ZDhjOTY2YzJhNDQxYWU3NjIzOGI0NTAwNTgyNFwiLFxuICBcImY3ZmNmZGU1ZjVmOWNjZWNlNjk5ZDhjOTY2YzJhNDQxYWU3NjIzOGI0NTAwNmQyYzAwNDQxYlwiXG4pLm1hcChjb2xvcnMpO1xuXG52YXIgQnVHbiA9IHJhbXAoc2NoZW1lJDkpO1xuXG52YXIgc2NoZW1lJGEgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImUwZWNmNDllYmNkYTg4NTZhN1wiLFxuICBcImVkZjhmYmIzY2RlMzhjOTZjNjg4NDE5ZFwiLFxuICBcImVkZjhmYmIzY2RlMzhjOTZjNjg4NTZhNzgxMGY3Y1wiLFxuICBcImVkZjhmYmJmZDNlNjllYmNkYThjOTZjNjg4NTZhNzgxMGY3Y1wiLFxuICBcImVkZjhmYmJmZDNlNjllYmNkYThjOTZjNjhjNmJiMTg4NDE5ZDZlMDE2YlwiLFxuICBcImY3ZmNmZGUwZWNmNGJmZDNlNjllYmNkYThjOTZjNjhjNmJiMTg4NDE5ZDZlMDE2YlwiLFxuICBcImY3ZmNmZGUwZWNmNGJmZDNlNjllYmNkYThjOTZjNjhjNmJiMTg4NDE5ZDgxMGY3YzRkMDA0YlwiXG4pLm1hcChjb2xvcnMpO1xuXG52YXIgQnVQdSA9IHJhbXAoc2NoZW1lJGEpO1xuXG52YXIgc2NoZW1lJGIgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImUwZjNkYmE4ZGRiNTQzYTJjYVwiLFxuICBcImYwZjllOGJhZTRiYzdiY2NjNDJiOGNiZVwiLFxuICBcImYwZjllOGJhZTRiYzdiY2NjNDQzYTJjYTA4NjhhY1wiLFxuICBcImYwZjllOGNjZWJjNWE4ZGRiNTdiY2NjNDQzYTJjYTA4NjhhY1wiLFxuICBcImYwZjllOGNjZWJjNWE4ZGRiNTdiY2NjNDRlYjNkMzJiOGNiZTA4NTg5ZVwiLFxuICBcImY3ZmNmMGUwZjNkYmNjZWJjNWE4ZGRiNTdiY2NjNDRlYjNkMzJiOGNiZTA4NTg5ZVwiLFxuICBcImY3ZmNmMGUwZjNkYmNjZWJjNWE4ZGRiNTdiY2NjNDRlYjNkMzJiOGNiZTA4NjhhYzA4NDA4MVwiXG4pLm1hcChjb2xvcnMpO1xuXG52YXIgR25CdSA9IHJhbXAoc2NoZW1lJGIpO1xuXG52YXIgc2NoZW1lJGMgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZlZThjOGZkYmI4NGUzNGEzM1wiLFxuICBcImZlZjBkOWZkY2M4YWZjOGQ1OWQ3MzAxZlwiLFxuICBcImZlZjBkOWZkY2M4YWZjOGQ1OWUzNGEzM2IzMDAwMFwiLFxuICBcImZlZjBkOWZkZDQ5ZWZkYmI4NGZjOGQ1OWUzNGEzM2IzMDAwMFwiLFxuICBcImZlZjBkOWZkZDQ5ZWZkYmI4NGZjOGQ1OWVmNjU0OGQ3MzAxZjk5MDAwMFwiLFxuICBcImZmZjdlY2ZlZThjOGZkZDQ5ZWZkYmI4NGZjOGQ1OWVmNjU0OGQ3MzAxZjk5MDAwMFwiLFxuICBcImZmZjdlY2ZlZThjOGZkZDQ5ZWZkYmI4NGZjOGQ1OWVmNjU0OGQ3MzAxZmIzMDAwMDdmMDAwMFwiXG4pLm1hcChjb2xvcnMpO1xuXG52YXIgT3JSZCA9IHJhbXAoc2NoZW1lJGMpO1xuXG52YXIgc2NoZW1lJGQgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVjZTJmMGE2YmRkYjFjOTA5OVwiLFxuICBcImY2ZWZmN2JkYzllMTY3YTljZjAyODE4YVwiLFxuICBcImY2ZWZmN2JkYzllMTY3YTljZjFjOTA5OTAxNmM1OVwiLFxuICBcImY2ZWZmN2QwZDFlNmE2YmRkYjY3YTljZjFjOTA5OTAxNmM1OVwiLFxuICBcImY2ZWZmN2QwZDFlNmE2YmRkYjY3YTljZjM2OTBjMDAyODE4YTAxNjQ1MFwiLFxuICBcImZmZjdmYmVjZTJmMGQwZDFlNmE2YmRkYjY3YTljZjM2OTBjMDAyODE4YTAxNjQ1MFwiLFxuICBcImZmZjdmYmVjZTJmMGQwZDFlNmE2YmRkYjY3YTljZjM2OTBjMDAyODE4YTAxNmM1OTAxNDYzNlwiXG4pLm1hcChjb2xvcnMpO1xuXG52YXIgUHVCdUduID0gcmFtcChzY2hlbWUkZCk7XG5cbnZhciBzY2hlbWUkZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWNlN2YyYTZiZGRiMmI4Y2JlXCIsXG4gIFwiZjFlZWY2YmRjOWUxNzRhOWNmMDU3MGIwXCIsXG4gIFwiZjFlZWY2YmRjOWUxNzRhOWNmMmI4Y2JlMDQ1YThkXCIsXG4gIFwiZjFlZWY2ZDBkMWU2YTZiZGRiNzRhOWNmMmI4Y2JlMDQ1YThkXCIsXG4gIFwiZjFlZWY2ZDBkMWU2YTZiZGRiNzRhOWNmMzY5MGMwMDU3MGIwMDM0ZTdiXCIsXG4gIFwiZmZmN2ZiZWNlN2YyZDBkMWU2YTZiZGRiNzRhOWNmMzY5MGMwMDU3MGIwMDM0ZTdiXCIsXG4gIFwiZmZmN2ZiZWNlN2YyZDBkMWU2YTZiZGRiNzRhOWNmMzY5MGMwMDU3MGIwMDQ1YThkMDIzODU4XCJcbikubWFwKGNvbG9ycyk7XG5cbnZhciBQdUJ1ID0gcmFtcChzY2hlbWUkZSk7XG5cbnZhciBzY2hlbWUkZiA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTdlMWVmYzk5NGM3ZGQxYzc3XCIsXG4gIFwiZjFlZWY2ZDdiNWQ4ZGY2NWIwY2UxMjU2XCIsXG4gIFwiZjFlZWY2ZDdiNWQ4ZGY2NWIwZGQxYzc3OTgwMDQzXCIsXG4gIFwiZjFlZWY2ZDRiOWRhYzk5NGM3ZGY2NWIwZGQxYzc3OTgwMDQzXCIsXG4gIFwiZjFlZWY2ZDRiOWRhYzk5NGM3ZGY2NWIwZTcyOThhY2UxMjU2OTEwMDNmXCIsXG4gIFwiZjdmNGY5ZTdlMWVmZDRiOWRhYzk5NGM3ZGY2NWIwZTcyOThhY2UxMjU2OTEwMDNmXCIsXG4gIFwiZjdmNGY5ZTdlMWVmZDRiOWRhYzk5NGM3ZGY2NWIwZTcyOThhY2UxMjU2OTgwMDQzNjcwMDFmXCJcbikubWFwKGNvbG9ycyk7XG5cbnZhciBQdVJkID0gcmFtcChzY2hlbWUkZik7XG5cbnZhciBzY2hlbWUkZyA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmRlMGRkZmE5ZmI1YzUxYjhhXCIsXG4gIFwiZmVlYmUyZmJiNGI5Zjc2OGExYWUwMTdlXCIsXG4gIFwiZmVlYmUyZmJiNGI5Zjc2OGExYzUxYjhhN2EwMTc3XCIsXG4gIFwiZmVlYmUyZmNjNWMwZmE5ZmI1Zjc2OGExYzUxYjhhN2EwMTc3XCIsXG4gIFwiZmVlYmUyZmNjNWMwZmE5ZmI1Zjc2OGExZGQzNDk3YWUwMTdlN2EwMTc3XCIsXG4gIFwiZmZmN2YzZmRlMGRkZmNjNWMwZmE5ZmI1Zjc2OGExZGQzNDk3YWUwMTdlN2EwMTc3XCIsXG4gIFwiZmZmN2YzZmRlMGRkZmNjNWMwZmE5ZmI1Zjc2OGExZGQzNDk3YWUwMTdlN2EwMTc3NDkwMDZhXCJcbikubWFwKGNvbG9ycyk7XG5cbnZhciBSZFB1ID0gcmFtcChzY2hlbWUkZyk7XG5cbnZhciBzY2hlbWUkaCA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWRmOGIxN2ZjZGJiMmM3ZmI4XCIsXG4gIFwiZmZmZmNjYTFkYWI0NDFiNmM0MjI1ZWE4XCIsXG4gIFwiZmZmZmNjYTFkYWI0NDFiNmM0MmM3ZmI4MjUzNDk0XCIsXG4gIFwiZmZmZmNjYzdlOWI0N2ZjZGJiNDFiNmM0MmM3ZmI4MjUzNDk0XCIsXG4gIFwiZmZmZmNjYzdlOWI0N2ZjZGJiNDFiNmM0MWQ5MWMwMjI1ZWE4MGMyYzg0XCIsXG4gIFwiZmZmZmQ5ZWRmOGIxYzdlOWI0N2ZjZGJiNDFiNmM0MWQ5MWMwMjI1ZWE4MGMyYzg0XCIsXG4gIFwiZmZmZmQ5ZWRmOGIxYzdlOWI0N2ZjZGJiNDFiNmM0MWQ5MWMwMjI1ZWE4MjUzNDk0MDgxZDU4XCJcbikubWFwKGNvbG9ycyk7XG5cbnZhciBZbEduQnUgPSByYW1wKHNjaGVtZSRoKTtcblxudmFyIHNjaGVtZSRpID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmN2ZjYjlhZGRkOGUzMWEzNTRcIixcbiAgXCJmZmZmY2NjMmU2OTk3OGM2NzkyMzg0NDNcIixcbiAgXCJmZmZmY2NjMmU2OTk3OGM2NzkzMWEzNTQwMDY4MzdcIixcbiAgXCJmZmZmY2NkOWYwYTNhZGRkOGU3OGM2NzkzMWEzNTQwMDY4MzdcIixcbiAgXCJmZmZmY2NkOWYwYTNhZGRkOGU3OGM2Nzk0MWFiNWQyMzg0NDMwMDVhMzJcIixcbiAgXCJmZmZmZTVmN2ZjYjlkOWYwYTNhZGRkOGU3OGM2Nzk0MWFiNWQyMzg0NDMwMDVhMzJcIixcbiAgXCJmZmZmZTVmN2ZjYjlkOWYwYTNhZGRkOGU3OGM2Nzk0MWFiNWQyMzg0NDMwMDY4MzcwMDQ1MjlcIlxuKS5tYXAoY29sb3JzKTtcblxudmFyIFlsR24gPSByYW1wKHNjaGVtZSRpKTtcblxudmFyIHNjaGVtZSRqID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZmY3YmNmZWM0NGZkOTVmMGVcIixcbiAgXCJmZmZmZDRmZWQ5OGVmZTk5MjljYzRjMDJcIixcbiAgXCJmZmZmZDRmZWQ5OGVmZTk5MjlkOTVmMGU5OTM0MDRcIixcbiAgXCJmZmZmZDRmZWUzOTFmZWM0NGZmZTk5MjlkOTVmMGU5OTM0MDRcIixcbiAgXCJmZmZmZDRmZWUzOTFmZWM0NGZmZTk5MjllYzcwMTRjYzRjMDI4YzJkMDRcIixcbiAgXCJmZmZmZTVmZmY3YmNmZWUzOTFmZWM0NGZmZTk5MjllYzcwMTRjYzRjMDI4YzJkMDRcIixcbiAgXCJmZmZmZTVmZmY3YmNmZWUzOTFmZWM0NGZmZTk5MjllYzcwMTRjYzRjMDI5OTM0MDQ2NjI1MDZcIlxuKS5tYXAoY29sb3JzKTtcblxudmFyIFlsT3JCciA9IHJhbXAoc2NoZW1lJGopO1xuXG52YXIgc2NoZW1lJGsgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZmZWRhMGZlYjI0Y2YwM2IyMFwiLFxuICBcImZmZmZiMmZlY2M1Y2ZkOGQzY2UzMWExY1wiLFxuICBcImZmZmZiMmZlY2M1Y2ZkOGQzY2YwM2IyMGJkMDAyNlwiLFxuICBcImZmZmZiMmZlZDk3NmZlYjI0Y2ZkOGQzY2YwM2IyMGJkMDAyNlwiLFxuICBcImZmZmZiMmZlZDk3NmZlYjI0Y2ZkOGQzY2ZjNGUyYWUzMWExY2IxMDAyNlwiLFxuICBcImZmZmZjY2ZmZWRhMGZlZDk3NmZlYjI0Y2ZkOGQzY2ZjNGUyYWUzMWExY2IxMDAyNlwiLFxuICBcImZmZmZjY2ZmZWRhMGZlZDk3NmZlYjI0Y2ZkOGQzY2ZjNGUyYWUzMWExY2JkMDAyNjgwMDAyNlwiXG4pLm1hcChjb2xvcnMpO1xuXG52YXIgWWxPclJkID0gcmFtcChzY2hlbWUkayk7XG5cbnZhciBzY2hlbWUkbCA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZGVlYmY3OWVjYWUxMzE4MmJkXCIsXG4gIFwiZWZmM2ZmYmRkN2U3NmJhZWQ2MjE3MWI1XCIsXG4gIFwiZWZmM2ZmYmRkN2U3NmJhZWQ2MzE4MmJkMDg1MTljXCIsXG4gIFwiZWZmM2ZmYzZkYmVmOWVjYWUxNmJhZWQ2MzE4MmJkMDg1MTljXCIsXG4gIFwiZWZmM2ZmYzZkYmVmOWVjYWUxNmJhZWQ2NDI5MmM2MjE3MWI1MDg0NTk0XCIsXG4gIFwiZjdmYmZmZGVlYmY3YzZkYmVmOWVjYWUxNmJhZWQ2NDI5MmM2MjE3MWI1MDg0NTk0XCIsXG4gIFwiZjdmYmZmZGVlYmY3YzZkYmVmOWVjYWUxNmJhZWQ2NDI5MmM2MjE3MWI1MDg1MTljMDgzMDZiXCJcbikubWFwKGNvbG9ycyk7XG5cbnZhciBCbHVlcyA9IHJhbXAoc2NoZW1lJGwpO1xuXG52YXIgc2NoZW1lJG0gPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImU1ZjVlMGExZDk5YjMxYTM1NFwiLFxuICBcImVkZjhlOWJhZTRiMzc0YzQ3NjIzOGI0NVwiLFxuICBcImVkZjhlOWJhZTRiMzc0YzQ3NjMxYTM1NDAwNmQyY1wiLFxuICBcImVkZjhlOWM3ZTljMGExZDk5Yjc0YzQ3NjMxYTM1NDAwNmQyY1wiLFxuICBcImVkZjhlOWM3ZTljMGExZDk5Yjc0YzQ3NjQxYWI1ZDIzOGI0NTAwNWEzMlwiLFxuICBcImY3ZmNmNWU1ZjVlMGM3ZTljMGExZDk5Yjc0YzQ3NjQxYWI1ZDIzOGI0NTAwNWEzMlwiLFxuICBcImY3ZmNmNWU1ZjVlMGM3ZTljMGExZDk5Yjc0YzQ3NjQxYWI1ZDIzOGI0NTAwNmQyYzAwNDQxYlwiXG4pLm1hcChjb2xvcnMpO1xuXG52YXIgR3JlZW5zID0gcmFtcChzY2hlbWUkbSk7XG5cbnZhciBzY2hlbWUkbiA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZjBmMGYwYmRiZGJkNjM2MzYzXCIsXG4gIFwiZjdmN2Y3Y2NjY2NjOTY5Njk2NTI1MjUyXCIsXG4gIFwiZjdmN2Y3Y2NjY2NjOTY5Njk2NjM2MzYzMjUyNTI1XCIsXG4gIFwiZjdmN2Y3ZDlkOWQ5YmRiZGJkOTY5Njk2NjM2MzYzMjUyNTI1XCIsXG4gIFwiZjdmN2Y3ZDlkOWQ5YmRiZGJkOTY5Njk2NzM3MzczNTI1MjUyMjUyNTI1XCIsXG4gIFwiZmZmZmZmZjBmMGYwZDlkOWQ5YmRiZGJkOTY5Njk2NzM3MzczNTI1MjUyMjUyNTI1XCIsXG4gIFwiZmZmZmZmZjBmMGYwZDlkOWQ5YmRiZGJkOTY5Njk2NzM3MzczNTI1MjUyMjUyNTI1MDAwMDAwXCJcbikubWFwKGNvbG9ycyk7XG5cbnZhciBHcmV5cyA9IHJhbXAoc2NoZW1lJG4pO1xuXG52YXIgc2NoZW1lJG8gPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVmZWRmNWJjYmRkYzc1NmJiMVwiLFxuICBcImYyZjBmN2NiYzllMjllOWFjODZhNTFhM1wiLFxuICBcImYyZjBmN2NiYzllMjllOWFjODc1NmJiMTU0Mjc4ZlwiLFxuICBcImYyZjBmN2RhZGFlYmJjYmRkYzllOWFjODc1NmJiMTU0Mjc4ZlwiLFxuICBcImYyZjBmN2RhZGFlYmJjYmRkYzllOWFjODgwN2RiYTZhNTFhMzRhMTQ4NlwiLFxuICBcImZjZmJmZGVmZWRmNWRhZGFlYmJjYmRkYzllOWFjODgwN2RiYTZhNTFhMzRhMTQ4NlwiLFxuICBcImZjZmJmZGVmZWRmNWRhZGFlYmJjYmRkYzllOWFjODgwN2RiYTZhNTFhMzU0Mjc4ZjNmMDA3ZFwiXG4pLm1hcChjb2xvcnMpO1xuXG52YXIgUHVycGxlcyA9IHJhbXAoc2NoZW1lJG8pO1xuXG52YXIgc2NoZW1lJHAgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZlZTBkMmZjOTI3MmRlMmQyNlwiLFxuICBcImZlZTVkOWZjYWU5MWZiNmE0YWNiMTgxZFwiLFxuICBcImZlZTVkOWZjYWU5MWZiNmE0YWRlMmQyNmE1MGYxNVwiLFxuICBcImZlZTVkOWZjYmJhMWZjOTI3MmZiNmE0YWRlMmQyNmE1MGYxNVwiLFxuICBcImZlZTVkOWZjYmJhMWZjOTI3MmZiNmE0YWVmM2IyY2NiMTgxZDk5MDAwZFwiLFxuICBcImZmZjVmMGZlZTBkMmZjYmJhMWZjOTI3MmZiNmE0YWVmM2IyY2NiMTgxZDk5MDAwZFwiLFxuICBcImZmZjVmMGZlZTBkMmZjYmJhMWZjOTI3MmZiNmE0YWVmM2IyY2NiMTgxZGE1MGYxNTY3MDAwZFwiXG4pLm1hcChjb2xvcnMpO1xuXG52YXIgUmVkcyA9IHJhbXAoc2NoZW1lJHApO1xuXG52YXIgc2NoZW1lJHEgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZlZTZjZWZkYWU2YmU2NTUwZFwiLFxuICBcImZlZWRkZWZkYmU4NWZkOGQzY2Q5NDcwMVwiLFxuICBcImZlZWRkZWZkYmU4NWZkOGQzY2U2NTUwZGE2MzYwM1wiLFxuICBcImZlZWRkZWZkZDBhMmZkYWU2YmZkOGQzY2U2NTUwZGE2MzYwM1wiLFxuICBcImZlZWRkZWZkZDBhMmZkYWU2YmZkOGQzY2YxNjkxM2Q5NDgwMThjMmQwNFwiLFxuICBcImZmZjVlYmZlZTZjZWZkZDBhMmZkYWU2YmZkOGQzY2YxNjkxM2Q5NDgwMThjMmQwNFwiLFxuICBcImZmZjVlYmZlZTZjZWZkZDBhMmZkYWU2YmZkOGQzY2YxNjkxM2Q5NDgwMWE2MzYwMzdmMjcwNFwiXG4pLm1hcChjb2xvcnMpO1xuXG52YXIgT3JhbmdlcyA9IHJhbXAoc2NoZW1lJHEpO1xuXG52YXIgY3ViZWhlbGl4JDMgPSBjdWJlaGVsaXhMb25nKGN1YmVoZWxpeCgzMDAsIDAuNSwgMC4wKSwgY3ViZWhlbGl4KC0yNDAsIDAuNSwgMS4wKSk7XG5cbnZhciB3YXJtID0gY3ViZWhlbGl4TG9uZyhjdWJlaGVsaXgoLTEwMCwgMC43NSwgMC4zNSksIGN1YmVoZWxpeCg4MCwgMS41MCwgMC44KSk7XG5cbnZhciBjb29sID0gY3ViZWhlbGl4TG9uZyhjdWJlaGVsaXgoMjYwLCAwLjc1LCAwLjM1KSwgY3ViZWhlbGl4KDgwLCAxLjUwLCAwLjgpKTtcblxudmFyIGMgPSBjdWJlaGVsaXgoKTtcblxuZnVuY3Rpb24gcmFpbmJvdyh0KSB7XG4gIGlmICh0IDwgMCB8fCB0ID4gMSkgdCAtPSBNYXRoLmZsb29yKHQpO1xuICB2YXIgdHMgPSBNYXRoLmFicyh0IC0gMC41KTtcbiAgYy5oID0gMzYwICogdCAtIDEwMDtcbiAgYy5zID0gMS41IC0gMS41ICogdHM7XG4gIGMubCA9IDAuOCAtIDAuOSAqIHRzO1xuICByZXR1cm4gYyArIFwiXCI7XG59XG5cbnZhciBjJDEgPSByZ2IoKSxcbiAgICBwaV8xXzMgPSBNYXRoLlBJIC8gMyxcbiAgICBwaV8yXzMgPSBNYXRoLlBJICogMiAvIDM7XG5cbmZ1bmN0aW9uIHNpbmVib3codCkge1xuICB2YXIgeDtcbiAgdCA9ICgwLjUgLSB0KSAqIE1hdGguUEk7XG4gIGMkMS5yID0gMjU1ICogKHggPSBNYXRoLnNpbih0KSkgKiB4O1xuICBjJDEuZyA9IDI1NSAqICh4ID0gTWF0aC5zaW4odCArIHBpXzFfMykpICogeDtcbiAgYyQxLmIgPSAyNTUgKiAoeCA9IE1hdGguc2luKHQgKyBwaV8yXzMpKSAqIHg7XG4gIHJldHVybiBjJDEgKyBcIlwiO1xufVxuXG5mdW5jdGlvbiByYW1wJDEocmFuZ2UpIHtcbiAgdmFyIG4gPSByYW5nZS5sZW5ndGg7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIHJhbmdlW01hdGgubWF4KDAsIE1hdGgubWluKG4gLSAxLCBNYXRoLmZsb29yKHQgKiBuKSkpXTtcbiAgfTtcbn1cblxudmFyIHZpcmlkaXMgPSByYW1wJDEoY29sb3JzKFwiNDQwMTU0NDQwMjU2NDUwNDU3NDUwNTU5NDYwNzVhNDYwODVjNDYwYTVkNDYwYjVlNDcwZDYwNDcwZTYxNDcxMDYzNDcxMTY0NDcxMzY1NDgxNDY3NDgxNjY4NDgxNzY5NDgxODZhNDgxYTZjNDgxYjZkNDgxYzZlNDgxZDZmNDgxZjcwNDgyMDcxNDgyMTczNDgyMzc0NDgyNDc1NDgyNTc2NDgyNjc3NDgyODc4NDgyOTc5NDcyYTdhNDcyYzdhNDcyZDdiNDcyZTdjNDcyZjdkNDYzMDdlNDYzMjdlNDYzMzdmNDYzNDgwNDUzNTgxNDUzNzgxNDUzODgyNDQzOTgzNDQzYTgzNDQzYjg0NDMzZDg0NDMzZTg1NDIzZjg1NDI0MDg2NDI0MTg2NDE0Mjg3NDE0NDg3NDA0NTg4NDA0Njg4M2Y0Nzg4M2Y0ODg5M2U0OTg5M2U0YTg5M2U0YzhhM2Q0ZDhhM2Q0ZThhM2M0ZjhhM2M1MDhiM2I1MThiM2I1MjhiM2E1MzhiM2E1NDhjMzk1NThjMzk1NjhjMzg1ODhjMzg1OThjMzc1YThjMzc1YjhkMzY1YzhkMzY1ZDhkMzU1ZThkMzU1ZjhkMzQ2MDhkMzQ2MThkMzM2MjhkMzM2MzhkMzI2NDhlMzI2NThlMzE2NjhlMzE2NzhlMzE2ODhlMzA2OThlMzA2YThlMmY2YjhlMmY2YzhlMmU2ZDhlMmU2ZThlMmU2ZjhlMmQ3MDhlMmQ3MThlMmM3MThlMmM3MjhlMmM3MzhlMmI3NDhlMmI3NThlMmE3NjhlMmE3NzhlMmE3ODhlMjk3OThlMjk3YThlMjk3YjhlMjg3YzhlMjg3ZDhlMjc3ZThlMjc3ZjhlMjc4MDhlMjY4MThlMjY4MjhlMjY4MjhlMjU4MzhlMjU4NDhlMjU4NThlMjQ4NjhlMjQ4NzhlMjM4ODhlMjM4OThlMjM4YThkMjI4YjhkMjI4YzhkMjI4ZDhkMjE4ZThkMjE4ZjhkMjE5MDhkMjE5MThjMjA5MjhjMjA5MjhjMjA5MzhjMWY5NDhjMWY5NThiMWY5NjhiMWY5NzhiMWY5ODhiMWY5OThhMWY5YThhMWU5YjhhMWU5Yzg5MWU5ZDg5MWY5ZTg5MWY5Zjg4MWZhMDg4MWZhMTg4MWZhMTg3MWZhMjg3MjBhMzg2MjBhNDg2MjFhNTg1MjFhNjg1MjJhNzg1MjJhODg0MjNhOTgzMjRhYTgzMjVhYjgyMjVhYzgyMjZhZDgxMjdhZDgxMjhhZTgwMjlhZjdmMmFiMDdmMmNiMTdlMmRiMjdkMmViMzdjMmZiNDdjMzFiNTdiMzJiNjdhMzRiNjc5MzViNzc5MzdiODc4MzhiOTc3M2FiYTc2M2JiYjc1M2RiYzc0M2ZiYzczNDBiZDcyNDJiZTcxNDRiZjcwNDZjMDZmNDhjMTZlNGFjMTZkNGNjMjZjNGVjMzZiNTBjNDZhNTJjNTY5NTRjNTY4NTZjNjY3NThjNzY1NWFjODY0NWNjODYzNWVjOTYyNjBjYTYwNjNjYjVmNjVjYjVlNjdjYzVjNjljZDViNmNjZDVhNmVjZTU4NzBjZjU3NzNkMDU2NzVkMDU0NzdkMTUzN2FkMTUxN2NkMjUwN2ZkMzRlODFkMzRkODRkNDRiODZkNTQ5ODlkNTQ4OGJkNjQ2OGVkNjQ1OTBkNzQzOTNkNzQxOTVkODQwOThkODNlOWJkOTNjOWRkOTNiYTBkYTM5YTJkYTM3YTVkYjM2YThkYjM0YWFkYzMyYWRkYzMwYjBkZDJmYjJkZDJkYjVkZTJiYjhkZTI5YmFkZTI4YmRkZjI2YzBkZjI1YzJkZjIzYzVlMDIxYzhlMDIwY2FlMTFmY2RlMTFkZDBlMTFjZDJlMjFiZDVlMjFhZDhlMjE5ZGFlMzE5ZGRlMzE4ZGZlMzE4ZTJlNDE4ZTVlNDE5ZTdlNDE5ZWFlNTFhZWNlNTFiZWZlNTFjZjFlNTFkZjRlNjFlZjZlNjIwZjhlNjIxZmJlNzIzZmRlNzI1XCIpKTtcblxudmFyIG1hZ21hID0gcmFtcCQxKGNvbG9ycyhcIjAwMDAwNDAxMDAwNTAxMDEwNjAxMDEwODAyMDEwOTAyMDIwYjAyMDIwZDAzMDMwZjAzMDMxMjA0MDQxNDA1MDQxNjA2MDUxODA2MDUxYTA3MDYxYzA4MDcxZTA5MDcyMDBhMDgyMjBiMDkyNDBjMDkyNjBkMGEyOTBlMGIyYjEwMGIyZDExMGMyZjEyMGQzMTEzMGQzNDE0MGUzNjE1MGUzODE2MGYzYjE4MGYzZDE5MTAzZjFhMTA0MjFjMTA0NDFkMTE0NzFlMTE0OTIwMTE0YjIxMTE0ZTIyMTE1MDI0MTI1MzI1MTI1NTI3MTI1ODI5MTE1YTJhMTE1YzJjMTE1ZjJkMTE2MTJmMTE2MzMxMTE2NTMzMTA2NzM0MTA2OTM2MTA2YjM4MTA2YzM5MGY2ZTNiMGY3MDNkMGY3MTNmMGY3MjQwMGY3NDQyMGY3NTQ0MGY3NjQ1MTA3NzQ3MTA3ODQ5MTA3ODRhMTA3OTRjMTE3YTRlMTE3YjRmMTI3YjUxMTI3YzUyMTM3YzU0MTM3ZDU2MTQ3ZDU3MTU3ZTU5MTU3ZTVhMTY3ZTVjMTY3ZjVkMTc3ZjVmMTg3ZjYwMTg4MDYyMTk4MDY0MWE4MDY1MWE4MDY3MWI4MDY4MWM4MTZhMWM4MTZiMWQ4MTZkMWQ4MTZlMWU4MTcwMWY4MTcyMWY4MTczMjA4MTc1MjE4MTc2MjE4MTc4MjI4MTc5MjI4MjdiMjM4MjdjMjM4MjdlMjQ4MjgwMjU4MjgxMjU4MTgzMjY4MTg0MjY4MTg2Mjc4MTg4Mjc4MTg5Mjg4MThiMjk4MThjMjk4MThlMmE4MTkwMmE4MTkxMmI4MTkzMmI4MDk0MmM4MDk2MmM4MDk4MmQ4MDk5MmQ4MDliMmU3ZjljMmU3ZjllMmY3ZmEwMmY3ZmExMzA3ZWEzMzA3ZWE1MzE3ZWE2MzE3ZGE4MzI3ZGFhMzM3ZGFiMzM3Y2FkMzQ3Y2FlMzQ3YmIwMzU3YmIyMzU3YmIzMzY3YWI1MzY3YWI3Mzc3OWI4Mzc3OWJhMzg3OGJjMzk3OGJkMzk3N2JmM2E3N2MwM2E3NmMyM2I3NWM0M2M3NWM1M2M3NGM3M2Q3M2M4M2U3M2NhM2U3MmNjM2Y3MWNkNDA3MWNmNDA3MGQwNDE2ZmQyNDI2ZmQzNDM2ZWQ1NDQ2ZGQ2NDU2Y2Q4NDU2Y2Q5NDY2YmRiNDc2YWRjNDg2OWRlNDk2OGRmNGE2OGUwNGM2N2UyNGQ2NmUzNGU2NWU0NGY2NGU1NTA2NGU3NTI2M2U4NTM2MmU5NTQ2MmVhNTY2MWViNTc2MGVjNTg2MGVkNWE1ZmVlNWI1ZWVmNWQ1ZWYwNWY1ZWYxNjA1ZGYyNjI1ZGYyNjQ1Y2YzNjU1Y2Y0Njc1Y2Y0Njk1Y2Y1NmI1Y2Y2NmM1Y2Y2NmU1Y2Y3NzA1Y2Y3NzI1Y2Y4NzQ1Y2Y4NzY1Y2Y5Nzg1ZGY5Nzk1ZGY5N2I1ZGZhN2Q1ZWZhN2Y1ZWZhODE1ZmZiODM1ZmZiODU2MGZiODc2MWZjODk2MWZjOGE2MmZjOGM2M2ZjOGU2NGZjOTA2NWZkOTI2NmZkOTQ2N2ZkOTY2OGZkOTg2OWZkOWE2YWZkOWI2YmZlOWQ2Y2ZlOWY2ZGZlYTE2ZWZlYTM2ZmZlYTU3MWZlYTc3MmZlYTk3M2ZlYWE3NGZlYWM3NmZlYWU3N2ZlYjA3OGZlYjI3YWZlYjQ3YmZlYjY3Y2ZlYjc3ZWZlYjk3ZmZlYmI4MWZlYmQ4MmZlYmY4NGZlYzE4NWZlYzI4N2ZlYzQ4OGZlYzY4YWZlYzg4Y2ZlY2E4ZGZlY2M4ZmZlY2Q5MGZlY2Y5MmZlZDE5NGZlZDM5NWZlZDU5N2ZlZDc5OWZlZDg5YWZkZGE5Y2ZkZGM5ZWZkZGVhMGZkZTBhMWZkZTJhM2ZkZTNhNWZkZTVhN2ZkZTdhOWZkZTlhYWZkZWJhY2ZjZWNhZWZjZWViMGZjZjBiMmZjZjJiNGZjZjRiNmZjZjZiOGZjZjdiOWZjZjliYmZjZmJiZGZjZmRiZlwiKSk7XG5cbnZhciBpbmZlcm5vID0gcmFtcCQxKGNvbG9ycyhcIjAwMDAwNDAxMDAwNTAxMDEwNjAxMDEwODAyMDEwYTAyMDIwYzAyMDIwZTAzMDIxMDA0MDMxMjA0MDMxNDA1MDQxNzA2MDQxOTA3MDUxYjA4MDUxZDA5MDYxZjBhMDcyMjBiMDcyNDBjMDgyNjBkMDgyOTBlMDkyYjEwMDkyZDExMGEzMDEyMGEzMjE0MGIzNDE1MGIzNzE2MGIzOTE4MGMzYzE5MGMzZTFiMGM0MTFjMGM0MzFlMGM0NTFmMGM0ODIxMGM0YTIzMGM0YzI0MGM0ZjI2MGM1MTI4MGI1MzI5MGI1NTJiMGI1NzJkMGI1OTJmMGE1YjMxMGE1YzMyMGE1ZTM0MGE1ZjM2MDk2MTM4MDk2MjM5MDk2MzNiMDk2NDNkMDk2NTNlMDk2NjQwMGE2NzQyMGE2ODQ0MGE2ODQ1MGE2OTQ3MGI2YTQ5MGI2YTRhMGM2YjRjMGM2YjRkMGQ2YzRmMGQ2YzUxMGU2YzUyMGU2ZDU0MGY2ZDU1MGY2ZDU3MTA2ZTU5MTA2ZTVhMTE2ZTVjMTI2ZTVkMTI2ZTVmMTM2ZTYxMTM2ZTYyMTQ2ZTY0MTU2ZTY1MTU2ZTY3MTY2ZTY5MTY2ZTZhMTc2ZTZjMTg2ZTZkMTg2ZTZmMTk2ZTcxMTk2ZTcyMWE2ZTc0MWE2ZTc1MWI2ZTc3MWM2ZDc4MWM2ZDdhMWQ2ZDdjMWQ2ZDdkMWU2ZDdmMWU2YzgwMWY2YzgyMjA2Yzg0MjA2Yjg1MjE2Yjg3MjE2Yjg4MjI2YThhMjI2YThjMjM2OThkMjM2OThmMjQ2OTkwMjU2ODkyMjU2ODkzMjY2Nzk1MjY2Nzk3Mjc2Njk4Mjc2NjlhMjg2NTliMjk2NDlkMjk2NDlmMmE2M2EwMmE2M2EyMmI2MmEzMmM2MWE1MmM2MGE2MmQ2MGE4MmU1ZmE5MmU1ZWFiMmY1ZWFkMzA1ZGFlMzA1Y2IwMzE1YmIxMzI1YWIzMzI1YWI0MzM1OWI2MzQ1OGI3MzU1N2I5MzU1NmJhMzY1NWJjMzc1NGJkMzg1M2JmMzk1MmMwM2E1MWMxM2E1MGMzM2I0ZmM0M2M0ZWM2M2Q0ZGM3M2U0Y2M4M2Y0YmNhNDA0YWNiNDE0OWNjNDI0OGNlNDM0N2NmNDQ0NmQwNDU0NWQyNDY0NGQzNDc0M2Q0NDg0MmQ1NGE0MWQ3NGIzZmQ4NGMzZWQ5NGQzZGRhNGUzY2RiNTAzYmRkNTEzYWRlNTIzOGRmNTMzN2UwNTUzNmUxNTYzNWUyNTczNGUzNTkzM2U0NWEzMWU1NWMzMGU2NWQyZmU3NWUyZWU4NjAyZGU5NjEyYmVhNjMyYWViNjQyOWViNjYyOGVjNjcyNmVkNjkyNWVlNmEyNGVmNmMyM2VmNmUyMWYwNmYyMGYxNzExZmYxNzMxZGYyNzQxY2YzNzYxYmYzNzgxOWY0NzkxOGY1N2IxN2Y1N2QxNWY2N2UxNGY2ODAxM2Y3ODIxMmY3ODQxMGY4ODUwZmY4ODcwZWY4ODkwY2Y5OGIwYmY5OGMwYWY5OGUwOWZhOTAwOGZhOTIwN2ZhOTQwN2ZiOTYwNmZiOTcwNmZiOTkwNmZiOWIwNmZiOWQwN2ZjOWYwN2ZjYTEwOGZjYTMwOWZjYTUwYWZjYTYwY2ZjYTgwZGZjYWEwZmZjYWMxMWZjYWUxMmZjYjAxNGZjYjIxNmZjYjQxOGZiYjYxYWZiYjgxZGZiYmExZmZiYmMyMWZiYmUyM2ZhYzAyNmZhYzIyOGZhYzQyYWZhYzYyZGY5YzcyZmY5YzkzMmY5Y2IzNWY4Y2QzN2Y4Y2YzYWY3ZDEzZGY3ZDM0MGY2ZDU0M2Y2ZDc0NmY1ZDk0OWY1ZGI0Y2Y0ZGQ0ZmY0ZGY1M2Y0ZTE1NmYzZTM1YWYzZTU1ZGYyZTY2MWYyZTg2NWYyZWE2OWYxZWM2ZGYxZWQ3MWYxZWY3NWYxZjE3OWYyZjI3ZGYyZjQ4MmYzZjU4NmYzZjY4YWY0Zjg4ZWY1Zjk5MmY2ZmE5NmY4ZmI5YWY5ZmM5ZGZhZmRhMWZjZmZhNFwiKSk7XG5cbnZhciBwbGFzbWEgPSByYW1wJDEoY29sb3JzKFwiMGQwODg3MTAwNzg4MTMwNzg5MTYwNzhhMTkwNjhjMWIwNjhkMWQwNjhlMjAwNjhmMjIwNjkwMjQwNjkxMjYwNTkxMjgwNTkyMmEwNTkzMmMwNTk0MmUwNTk1MmYwNTk2MzEwNTk3MzMwNTk3MzUwNDk4MzcwNDk5MzgwNDlhM2EwNDlhM2MwNDliM2UwNDljM2YwNDljNDEwNDlkNDMwMzllNDQwMzllNDYwMzlmNDgwMzlmNDkwM2EwNGIwM2ExNGMwMmExNGUwMmEyNTAwMmEyNTEwMmEzNTMwMmEzNTUwMmE0NTYwMWE0NTgwMWE0NTkwMWE1NWIwMWE1NWMwMWE2NWUwMWE2NjAwMWE2NjEwMGE3NjMwMGE3NjQwMGE3NjYwMGE3NjcwMGE4NjkwMGE4NmEwMGE4NmMwMGE4NmUwMGE4NmYwMGE4NzEwMGE4NzIwMWE4NzQwMWE4NzUwMWE4NzcwMWE4NzgwMWE4N2EwMmE4N2IwMmE4N2QwM2E4N2UwM2E4ODAwNGE4ODEwNGE3ODMwNWE3ODQwNWE3ODYwNmE2ODcwN2E2ODgwOGE2OGEwOWE1OGIwYWE1OGQwYmE1OGUwY2E0OGYwZGE0OTEwZWEzOTIwZmEzOTQxMGEyOTUxMWExOTYxM2ExOTgxNGEwOTkxNTlmOWExNjlmOWMxNzllOWQxODlkOWUxOTlkYTAxYTljYTExYjliYTIxZDlhYTMxZTlhYTUxZjk5YTYyMDk4YTcyMTk3YTgyMjk2YWEyMzk1YWIyNDk0YWMyNjk0YWQyNzkzYWUyODkyYjAyOTkxYjEyYTkwYjIyYjhmYjMyYzhlYjQyZThkYjUyZjhjYjYzMDhiYjczMThhYjgzMjg5YmEzMzg4YmIzNDg4YmMzNTg3YmQzNzg2YmUzODg1YmYzOTg0YzAzYTgzYzEzYjgyYzIzYzgxYzMzZDgwYzQzZTdmYzU0MDdlYzY0MTdkYzc0MjdjYzg0MzdiYzk0NDdhY2E0NTdhY2I0Njc5Y2M0Nzc4Y2M0OTc3Y2Q0YTc2Y2U0Yjc1Y2Y0Yzc0ZDA0ZDczZDE0ZTcyZDI0ZjcxZDM1MTcxZDQ1MjcwZDU1MzZmZDU1NDZlZDY1NTZkZDc1NjZjZDg1NzZiZDk1ODZhZGE1YTZhZGE1YjY5ZGI1YzY4ZGM1ZDY3ZGQ1ZTY2ZGU1ZjY1ZGU2MTY0ZGY2MjYzZTA2MzYzZTE2NDYyZTI2NTYxZTI2NjYwZTM2ODVmZTQ2OTVlZTU2YTVkZTU2YjVkZTY2YzVjZTc2ZTViZTc2ZjVhZTg3MDU5ZTk3MTU4ZTk3MjU3ZWE3NDU3ZWI3NTU2ZWI3NjU1ZWM3NzU0ZWQ3OTUzZWQ3YTUyZWU3YjUxZWY3YzUxZWY3ZTUwZjA3ZjRmZjA4MDRlZjE4MTRkZjE4MzRjZjI4NDRiZjM4NTRiZjM4NzRhZjQ4ODQ5ZjQ4OTQ4ZjU4YjQ3ZjU4YzQ2ZjY4ZDQ1ZjY4ZjQ0Zjc5MDQ0Zjc5MTQzZjc5MzQyZjg5NDQxZjg5NTQwZjk5NzNmZjk5ODNlZjk5YTNlZmE5YjNkZmE5YzNjZmE5ZTNiZmI5ZjNhZmJhMTM5ZmJhMjM4ZmNhMzM4ZmNhNTM3ZmNhNjM2ZmNhODM1ZmNhOTM0ZmRhYjMzZmRhYzMzZmRhZTMyZmRhZjMxZmRiMTMwZmRiMjJmZmRiNDJmZmRiNTJlZmViNzJkZmViODJjZmViYTJjZmViYjJiZmViZDJhZmViZTJhZmVjMDI5ZmRjMjI5ZmRjMzI4ZmRjNTI3ZmRjNjI3ZmRjODI3ZmRjYTI2ZmRjYjI2ZmNjZDI1ZmNjZTI1ZmNkMDI1ZmNkMjI1ZmJkMzI0ZmJkNTI0ZmJkNzI0ZmFkODI0ZmFkYTI0ZjlkYzI0ZjlkZDI1ZjhkZjI1ZjhlMTI1ZjdlMjI1ZjdlNDI1ZjZlNjI2ZjZlODI2ZjVlOTI2ZjVlYjI3ZjRlZDI3ZjNlZTI3ZjNmMDI3ZjJmMjI3ZjFmNDI2ZjFmNTI1ZjBmNzI0ZjBmOTIxXCIpKTtcblxuZnVuY3Rpb24gY29uc3RhbnQkYih4KSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb25zdGFudCgpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cblxudmFyIGFicyQxID0gTWF0aC5hYnM7XG52YXIgYXRhbjIkMSA9IE1hdGguYXRhbjI7XG52YXIgY29zJDIgPSBNYXRoLmNvcztcbnZhciBtYXgkMiA9IE1hdGgubWF4O1xudmFyIG1pbiQxID0gTWF0aC5taW47XG52YXIgc2luJDIgPSBNYXRoLnNpbjtcbnZhciBzcXJ0JDIgPSBNYXRoLnNxcnQ7XG5cbnZhciBlcHNpbG9uJDMgPSAxZS0xMjtcbnZhciBwaSQ0ID0gTWF0aC5QSTtcbnZhciBoYWxmUGkkMyA9IHBpJDQgLyAyO1xudmFyIHRhdSQ0ID0gMiAqIHBpJDQ7XG5cbmZ1bmN0aW9uIGFjb3MkMSh4KSB7XG4gIHJldHVybiB4ID4gMSA/IDAgOiB4IDwgLTEgPyBwaSQ0IDogTWF0aC5hY29zKHgpO1xufVxuXG5mdW5jdGlvbiBhc2luJDEoeCkge1xuICByZXR1cm4geCA+PSAxID8gaGFsZlBpJDMgOiB4IDw9IC0xID8gLWhhbGZQaSQzIDogTWF0aC5hc2luKHgpO1xufVxuXG5mdW5jdGlvbiBhcmNJbm5lclJhZGl1cyhkKSB7XG4gIHJldHVybiBkLmlubmVyUmFkaXVzO1xufVxuXG5mdW5jdGlvbiBhcmNPdXRlclJhZGl1cyhkKSB7XG4gIHJldHVybiBkLm91dGVyUmFkaXVzO1xufVxuXG5mdW5jdGlvbiBhcmNTdGFydEFuZ2xlKGQpIHtcbiAgcmV0dXJuIGQuc3RhcnRBbmdsZTtcbn1cblxuZnVuY3Rpb24gYXJjRW5kQW5nbGUoZCkge1xuICByZXR1cm4gZC5lbmRBbmdsZTtcbn1cblxuZnVuY3Rpb24gYXJjUGFkQW5nbGUoZCkge1xuICByZXR1cm4gZCAmJiBkLnBhZEFuZ2xlOyAvLyBOb3RlOiBvcHRpb25hbCFcbn1cblxuZnVuY3Rpb24gaW50ZXJzZWN0KHgwLCB5MCwgeDEsIHkxLCB4MiwgeTIsIHgzLCB5Mykge1xuICB2YXIgeDEwID0geDEgLSB4MCwgeTEwID0geTEgLSB5MCxcbiAgICAgIHgzMiA9IHgzIC0geDIsIHkzMiA9IHkzIC0geTIsXG4gICAgICB0ID0geTMyICogeDEwIC0geDMyICogeTEwO1xuICBpZiAodCAqIHQgPCBlcHNpbG9uJDMpIHJldHVybjtcbiAgdCA9ICh4MzIgKiAoeTAgLSB5MikgLSB5MzIgKiAoeDAgLSB4MikpIC8gdDtcbiAgcmV0dXJuIFt4MCArIHQgKiB4MTAsIHkwICsgdCAqIHkxMF07XG59XG5cbi8vIENvbXB1dGUgcGVycGVuZGljdWxhciBvZmZzZXQgbGluZSBvZiBsZW5ndGggcmMuXG4vLyBodHRwOi8vbWF0aHdvcmxkLndvbGZyYW0uY29tL0NpcmNsZS1MaW5lSW50ZXJzZWN0aW9uLmh0bWxcbmZ1bmN0aW9uIGNvcm5lclRhbmdlbnRzKHgwLCB5MCwgeDEsIHkxLCByMSwgcmMsIGN3KSB7XG4gIHZhciB4MDEgPSB4MCAtIHgxLFxuICAgICAgeTAxID0geTAgLSB5MSxcbiAgICAgIGxvID0gKGN3ID8gcmMgOiAtcmMpIC8gc3FydCQyKHgwMSAqIHgwMSArIHkwMSAqIHkwMSksXG4gICAgICBveCA9IGxvICogeTAxLFxuICAgICAgb3kgPSAtbG8gKiB4MDEsXG4gICAgICB4MTEgPSB4MCArIG94LFxuICAgICAgeTExID0geTAgKyBveSxcbiAgICAgIHgxMCA9IHgxICsgb3gsXG4gICAgICB5MTAgPSB5MSArIG95LFxuICAgICAgeDAwID0gKHgxMSArIHgxMCkgLyAyLFxuICAgICAgeTAwID0gKHkxMSArIHkxMCkgLyAyLFxuICAgICAgZHggPSB4MTAgLSB4MTEsXG4gICAgICBkeSA9IHkxMCAtIHkxMSxcbiAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHksXG4gICAgICByID0gcjEgLSByYyxcbiAgICAgIEQgPSB4MTEgKiB5MTAgLSB4MTAgKiB5MTEsXG4gICAgICBkID0gKGR5IDwgMCA/IC0xIDogMSkgKiBzcXJ0JDIobWF4JDIoMCwgciAqIHIgKiBkMiAtIEQgKiBEKSksXG4gICAgICBjeDAgPSAoRCAqIGR5IC0gZHggKiBkKSAvIGQyLFxuICAgICAgY3kwID0gKC1EICogZHggLSBkeSAqIGQpIC8gZDIsXG4gICAgICBjeDEgPSAoRCAqIGR5ICsgZHggKiBkKSAvIGQyLFxuICAgICAgY3kxID0gKC1EICogZHggKyBkeSAqIGQpIC8gZDIsXG4gICAgICBkeDAgPSBjeDAgLSB4MDAsXG4gICAgICBkeTAgPSBjeTAgLSB5MDAsXG4gICAgICBkeDEgPSBjeDEgLSB4MDAsXG4gICAgICBkeTEgPSBjeTEgLSB5MDA7XG5cbiAgLy8gUGljayB0aGUgY2xvc2VyIG9mIHRoZSB0d28gaW50ZXJzZWN0aW9uIHBvaW50cy5cbiAgLy8gVE9ETyBJcyB0aGVyZSBhIGZhc3RlciB3YXkgdG8gZGV0ZXJtaW5lIHdoaWNoIGludGVyc2VjdGlvbiB0byB1c2U/XG4gIGlmIChkeDAgKiBkeDAgKyBkeTAgKiBkeTAgPiBkeDEgKiBkeDEgKyBkeTEgKiBkeTEpIGN4MCA9IGN4MSwgY3kwID0gY3kxO1xuXG4gIHJldHVybiB7XG4gICAgY3g6IGN4MCxcbiAgICBjeTogY3kwLFxuICAgIHgwMTogLW94LFxuICAgIHkwMTogLW95LFxuICAgIHgxMTogY3gwICogKHIxIC8gciAtIDEpLFxuICAgIHkxMTogY3kwICogKHIxIC8gciAtIDEpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGFyYygpIHtcbiAgdmFyIGlubmVyUmFkaXVzID0gYXJjSW5uZXJSYWRpdXMsXG4gICAgICBvdXRlclJhZGl1cyA9IGFyY091dGVyUmFkaXVzLFxuICAgICAgY29ybmVyUmFkaXVzID0gY29uc3RhbnQkYigwKSxcbiAgICAgIHBhZFJhZGl1cyA9IG51bGwsXG4gICAgICBzdGFydEFuZ2xlID0gYXJjU3RhcnRBbmdsZSxcbiAgICAgIGVuZEFuZ2xlID0gYXJjRW5kQW5nbGUsXG4gICAgICBwYWRBbmdsZSA9IGFyY1BhZEFuZ2xlLFxuICAgICAgY29udGV4dCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gYXJjKCkge1xuICAgIHZhciBidWZmZXIsXG4gICAgICAgIHIsXG4gICAgICAgIHIwID0gK2lubmVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIHIxID0gK291dGVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIGEwID0gc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC0gaGFsZlBpJDMsXG4gICAgICAgIGExID0gZW5kQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSAtIGhhbGZQaSQzLFxuICAgICAgICBkYSA9IGFicyQxKGExIC0gYTApLFxuICAgICAgICBjdyA9IGExID4gYTA7XG5cbiAgICBpZiAoIWNvbnRleHQpIGNvbnRleHQgPSBidWZmZXIgPSBwYXRoKCk7XG5cbiAgICAvLyBFbnN1cmUgdGhhdCB0aGUgb3V0ZXIgcmFkaXVzIGlzIGFsd2F5cyBsYXJnZXIgdGhhbiB0aGUgaW5uZXIgcmFkaXVzLlxuICAgIGlmIChyMSA8IHIwKSByID0gcjEsIHIxID0gcjAsIHIwID0gcjtcblxuICAgIC8vIElzIGl0IGEgcG9pbnQ/XG4gICAgaWYgKCEocjEgPiBlcHNpbG9uJDMpKSBjb250ZXh0Lm1vdmVUbygwLCAwKTtcblxuICAgIC8vIE9yIGlzIGl0IGEgY2lyY2xlIG9yIGFubnVsdXM/XG4gICAgZWxzZSBpZiAoZGEgPiB0YXUkNCAtIGVwc2lsb24kMykge1xuICAgICAgY29udGV4dC5tb3ZlVG8ocjEgKiBjb3MkMihhMCksIHIxICogc2luJDIoYTApKTtcbiAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHIxLCBhMCwgYTEsICFjdyk7XG4gICAgICBpZiAocjAgPiBlcHNpbG9uJDMpIHtcbiAgICAgICAgY29udGV4dC5tb3ZlVG8ocjAgKiBjb3MkMihhMSksIHIwICogc2luJDIoYTEpKTtcbiAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgcjAsIGExLCBhMCwgY3cpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE9yIGlzIGl0IGEgY2lyY3VsYXIgb3IgYW5udWxhciBzZWN0b3I/XG4gICAgZWxzZSB7XG4gICAgICB2YXIgYTAxID0gYTAsXG4gICAgICAgICAgYTExID0gYTEsXG4gICAgICAgICAgYTAwID0gYTAsXG4gICAgICAgICAgYTEwID0gYTEsXG4gICAgICAgICAgZGEwID0gZGEsXG4gICAgICAgICAgZGExID0gZGEsXG4gICAgICAgICAgYXAgPSBwYWRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC8gMixcbiAgICAgICAgICBycCA9IChhcCA+IGVwc2lsb24kMykgJiYgKHBhZFJhZGl1cyA/ICtwYWRSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHNxcnQkMihyMCAqIHIwICsgcjEgKiByMSkpLFxuICAgICAgICAgIHJjID0gbWluJDEoYWJzJDEocjEgLSByMCkgLyAyLCArY29ybmVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpLFxuICAgICAgICAgIHJjMCA9IHJjLFxuICAgICAgICAgIHJjMSA9IHJjLFxuICAgICAgICAgIHQwLFxuICAgICAgICAgIHQxO1xuXG4gICAgICAvLyBBcHBseSBwYWRkaW5nPyBOb3RlIHRoYXQgc2luY2UgcjEg4omlIHIwLCBkYTEg4omlIGRhMC5cbiAgICAgIGlmIChycCA+IGVwc2lsb24kMykge1xuICAgICAgICB2YXIgcDAgPSBhc2luJDEocnAgLyByMCAqIHNpbiQyKGFwKSksXG4gICAgICAgICAgICBwMSA9IGFzaW4kMShycCAvIHIxICogc2luJDIoYXApKTtcbiAgICAgICAgaWYgKChkYTAgLT0gcDAgKiAyKSA+IGVwc2lsb24kMykgcDAgKj0gKGN3ID8gMSA6IC0xKSwgYTAwICs9IHAwLCBhMTAgLT0gcDA7XG4gICAgICAgIGVsc2UgZGEwID0gMCwgYTAwID0gYTEwID0gKGEwICsgYTEpIC8gMjtcbiAgICAgICAgaWYgKChkYTEgLT0gcDEgKiAyKSA+IGVwc2lsb24kMykgcDEgKj0gKGN3ID8gMSA6IC0xKSwgYTAxICs9IHAxLCBhMTEgLT0gcDE7XG4gICAgICAgIGVsc2UgZGExID0gMCwgYTAxID0gYTExID0gKGEwICsgYTEpIC8gMjtcbiAgICAgIH1cblxuICAgICAgdmFyIHgwMSA9IHIxICogY29zJDIoYTAxKSxcbiAgICAgICAgICB5MDEgPSByMSAqIHNpbiQyKGEwMSksXG4gICAgICAgICAgeDEwID0gcjAgKiBjb3MkMihhMTApLFxuICAgICAgICAgIHkxMCA9IHIwICogc2luJDIoYTEwKTtcblxuICAgICAgLy8gQXBwbHkgcm91bmRlZCBjb3JuZXJzP1xuICAgICAgaWYgKHJjID4gZXBzaWxvbiQzKSB7XG4gICAgICAgIHZhciB4MTEgPSByMSAqIGNvcyQyKGExMSksXG4gICAgICAgICAgICB5MTEgPSByMSAqIHNpbiQyKGExMSksXG4gICAgICAgICAgICB4MDAgPSByMCAqIGNvcyQyKGEwMCksXG4gICAgICAgICAgICB5MDAgPSByMCAqIHNpbiQyKGEwMCksXG4gICAgICAgICAgICBvYztcblxuICAgICAgICAvLyBSZXN0cmljdCB0aGUgY29ybmVyIHJhZGl1cyBhY2NvcmRpbmcgdG8gdGhlIHNlY3RvciBhbmdsZS5cbiAgICAgICAgaWYgKGRhIDwgcGkkNCAmJiAob2MgPSBpbnRlcnNlY3QoeDAxLCB5MDEsIHgwMCwgeTAwLCB4MTEsIHkxMSwgeDEwLCB5MTApKSkge1xuICAgICAgICAgIHZhciBheCA9IHgwMSAtIG9jWzBdLFxuICAgICAgICAgICAgICBheSA9IHkwMSAtIG9jWzFdLFxuICAgICAgICAgICAgICBieCA9IHgxMSAtIG9jWzBdLFxuICAgICAgICAgICAgICBieSA9IHkxMSAtIG9jWzFdLFxuICAgICAgICAgICAgICBrYyA9IDEgLyBzaW4kMihhY29zJDEoKGF4ICogYnggKyBheSAqIGJ5KSAvIChzcXJ0JDIoYXggKiBheCArIGF5ICogYXkpICogc3FydCQyKGJ4ICogYnggKyBieSAqIGJ5KSkpIC8gMiksXG4gICAgICAgICAgICAgIGxjID0gc3FydCQyKG9jWzBdICogb2NbMF0gKyBvY1sxXSAqIG9jWzFdKTtcbiAgICAgICAgICByYzAgPSBtaW4kMShyYywgKHIwIC0gbGMpIC8gKGtjIC0gMSkpO1xuICAgICAgICAgIHJjMSA9IG1pbiQxKHJjLCAocjEgLSBsYykgLyAoa2MgKyAxKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSXMgdGhlIHNlY3RvciBjb2xsYXBzZWQgdG8gYSBsaW5lP1xuICAgICAgaWYgKCEoZGExID4gZXBzaWxvbiQzKSkgY29udGV4dC5tb3ZlVG8oeDAxLCB5MDEpO1xuXG4gICAgICAvLyBEb2VzIHRoZSBzZWN0b3LigJlzIG91dGVyIHJpbmcgaGF2ZSByb3VuZGVkIGNvcm5lcnM/XG4gICAgICBlbHNlIGlmIChyYzEgPiBlcHNpbG9uJDMpIHtcbiAgICAgICAgdDAgPSBjb3JuZXJUYW5nZW50cyh4MDAsIHkwMCwgeDAxLCB5MDEsIHIxLCByYzEsIGN3KTtcbiAgICAgICAgdDEgPSBjb3JuZXJUYW5nZW50cyh4MTEsIHkxMSwgeDEwLCB5MTAsIHIxLCByYzEsIGN3KTtcblxuICAgICAgICBjb250ZXh0Lm1vdmVUbyh0MC5jeCArIHQwLngwMSwgdDAuY3kgKyB0MC55MDEpO1xuXG4gICAgICAgIC8vIEhhdmUgdGhlIGNvcm5lcnMgbWVyZ2VkP1xuICAgICAgICBpZiAocmMxIDwgcmMpIGNvbnRleHQuYXJjKHQwLmN4LCB0MC5jeSwgcmMxLCBhdGFuMiQxKHQwLnkwMSwgdDAueDAxKSwgYXRhbjIkMSh0MS55MDEsIHQxLngwMSksICFjdyk7XG5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBkcmF3IHRoZSB0d28gY29ybmVycyBhbmQgdGhlIHJpbmcuXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNvbnRleHQuYXJjKHQwLmN4LCB0MC5jeSwgcmMxLCBhdGFuMiQxKHQwLnkwMSwgdDAueDAxKSwgYXRhbjIkMSh0MC55MTEsIHQwLngxMSksICFjdyk7XG4gICAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgcjEsIGF0YW4yJDEodDAuY3kgKyB0MC55MTEsIHQwLmN4ICsgdDAueDExKSwgYXRhbjIkMSh0MS5jeSArIHQxLnkxMSwgdDEuY3ggKyB0MS54MTEpLCAhY3cpO1xuICAgICAgICAgIGNvbnRleHQuYXJjKHQxLmN4LCB0MS5jeSwgcmMxLCBhdGFuMiQxKHQxLnkxMSwgdDEueDExKSwgYXRhbjIkMSh0MS55MDEsIHQxLngwMSksICFjdyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gT3IgaXMgdGhlIG91dGVyIHJpbmcganVzdCBhIGNpcmN1bGFyIGFyYz9cbiAgICAgIGVsc2UgY29udGV4dC5tb3ZlVG8oeDAxLCB5MDEpLCBjb250ZXh0LmFyYygwLCAwLCByMSwgYTAxLCBhMTEsICFjdyk7XG5cbiAgICAgIC8vIElzIHRoZXJlIG5vIGlubmVyIHJpbmcsIGFuZCBpdOKAmXMgYSBjaXJjdWxhciBzZWN0b3I/XG4gICAgICAvLyBPciBwZXJoYXBzIGl04oCZcyBhbiBhbm51bGFyIHNlY3RvciBjb2xsYXBzZWQgZHVlIHRvIHBhZGRpbmc/XG4gICAgICBpZiAoIShyMCA+IGVwc2lsb24kMykgfHwgIShkYTAgPiBlcHNpbG9uJDMpKSBjb250ZXh0LmxpbmVUbyh4MTAsIHkxMCk7XG5cbiAgICAgIC8vIERvZXMgdGhlIHNlY3RvcuKAmXMgaW5uZXIgcmluZyAob3IgcG9pbnQpIGhhdmUgcm91bmRlZCBjb3JuZXJzP1xuICAgICAgZWxzZSBpZiAocmMwID4gZXBzaWxvbiQzKSB7XG4gICAgICAgIHQwID0gY29ybmVyVGFuZ2VudHMoeDEwLCB5MTAsIHgxMSwgeTExLCByMCwgLXJjMCwgY3cpO1xuICAgICAgICB0MSA9IGNvcm5lclRhbmdlbnRzKHgwMSwgeTAxLCB4MDAsIHkwMCwgcjAsIC1yYzAsIGN3KTtcblxuICAgICAgICBjb250ZXh0LmxpbmVUbyh0MC5jeCArIHQwLngwMSwgdDAuY3kgKyB0MC55MDEpO1xuXG4gICAgICAgIC8vIEhhdmUgdGhlIGNvcm5lcnMgbWVyZ2VkP1xuICAgICAgICBpZiAocmMwIDwgcmMpIGNvbnRleHQuYXJjKHQwLmN4LCB0MC5jeSwgcmMwLCBhdGFuMiQxKHQwLnkwMSwgdDAueDAxKSwgYXRhbjIkMSh0MS55MDEsIHQxLngwMSksICFjdyk7XG5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBkcmF3IHRoZSB0d28gY29ybmVycyBhbmQgdGhlIHJpbmcuXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNvbnRleHQuYXJjKHQwLmN4LCB0MC5jeSwgcmMwLCBhdGFuMiQxKHQwLnkwMSwgdDAueDAxKSwgYXRhbjIkMSh0MC55MTEsIHQwLngxMSksICFjdyk7XG4gICAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgcjAsIGF0YW4yJDEodDAuY3kgKyB0MC55MTEsIHQwLmN4ICsgdDAueDExKSwgYXRhbjIkMSh0MS5jeSArIHQxLnkxMSwgdDEuY3ggKyB0MS54MTEpLCBjdyk7XG4gICAgICAgICAgY29udGV4dC5hcmModDEuY3gsIHQxLmN5LCByYzAsIGF0YW4yJDEodDEueTExLCB0MS54MTEpLCBhdGFuMiQxKHQxLnkwMSwgdDEueDAxKSwgIWN3KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBPciBpcyB0aGUgaW5uZXIgcmluZyBqdXN0IGEgY2lyY3VsYXIgYXJjP1xuICAgICAgZWxzZSBjb250ZXh0LmFyYygwLCAwLCByMCwgYTEwLCBhMDAsIGN3KTtcbiAgICB9XG5cbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIGNvbnRleHQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBhcmMuY2VudHJvaWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgciA9ICgraW5uZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSArICtvdXRlclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSAvIDIsXG4gICAgICAgIGEgPSAoK3N0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSArICtlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSAvIDIgLSBwaSQ0IC8gMjtcbiAgICByZXR1cm4gW2NvcyQyKGEpICogciwgc2luJDIoYSkgKiByXTtcbiAgfTtcblxuICBhcmMuaW5uZXJSYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW5uZXJSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JGIoK18pLCBhcmMpIDogaW5uZXJSYWRpdXM7XG4gIH07XG5cbiAgYXJjLm91dGVyUmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG91dGVyUmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCRiKCtfKSwgYXJjKSA6IG91dGVyUmFkaXVzO1xuICB9O1xuXG4gIGFyYy5jb3JuZXJSYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY29ybmVyUmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCRiKCtfKSwgYXJjKSA6IGNvcm5lclJhZGl1cztcbiAgfTtcblxuICBhcmMucGFkUmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZFJhZGl1cyA9IF8gPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JGIoK18pLCBhcmMpIDogcGFkUmFkaXVzO1xuICB9O1xuXG4gIGFyYy5zdGFydEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0YXJ0QW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JGIoK18pLCBhcmMpIDogc3RhcnRBbmdsZTtcbiAgfTtcblxuICBhcmMuZW5kQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZW5kQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JGIoK18pLCBhcmMpIDogZW5kQW5nbGU7XG4gIH07XG5cbiAgYXJjLnBhZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCRiKCtfKSwgYXJjKSA6IHBhZEFuZ2xlO1xuICB9O1xuXG4gIGFyYy5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKChjb250ZXh0ID0gXyA9PSBudWxsID8gbnVsbCA6IF8pLCBhcmMpIDogY29udGV4dDtcbiAgfTtcblxuICByZXR1cm4gYXJjO1xufVxuXG5mdW5jdGlvbiBMaW5lYXIoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTGluZWFyLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBjdXJ2ZUxpbmVhcihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTGluZWFyKGNvbnRleHQpO1xufVxuXG5mdW5jdGlvbiB4JDMocCkge1xuICByZXR1cm4gcFswXTtcbn1cblxuZnVuY3Rpb24geSQzKHApIHtcbiAgcmV0dXJuIHBbMV07XG59XG5cbmZ1bmN0aW9uIGxpbmUoKSB7XG4gIHZhciB4JCQxID0geCQzLFxuICAgICAgeSQkMSA9IHkkMyxcbiAgICAgIGRlZmluZWQgPSBjb25zdGFudCRiKHRydWUpLFxuICAgICAgY29udGV4dCA9IG51bGwsXG4gICAgICBjdXJ2ZSA9IGN1cnZlTGluZWFyLFxuICAgICAgb3V0cHV0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBsaW5lKGRhdGEpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBkLFxuICAgICAgICBkZWZpbmVkMCA9IGZhbHNlLFxuICAgICAgICBidWZmZXI7XG5cbiAgICBpZiAoY29udGV4dCA9PSBudWxsKSBvdXRwdXQgPSBjdXJ2ZShidWZmZXIgPSBwYXRoKCkpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8PSBuOyArK2kpIHtcbiAgICAgIGlmICghKGkgPCBuICYmIGRlZmluZWQoZCA9IGRhdGFbaV0sIGksIGRhdGEpKSA9PT0gZGVmaW5lZDApIHtcbiAgICAgICAgaWYgKGRlZmluZWQwID0gIWRlZmluZWQwKSBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgIGVsc2Ugb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChkZWZpbmVkMCkgb3V0cHV0LnBvaW50KCt4JCQxKGQsIGksIGRhdGEpLCAreSQkMShkLCBpLCBkYXRhKSk7XG4gICAgfVxuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIG91dHB1dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIGxpbmUueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4JCQxID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCRiKCtfKSwgbGluZSkgOiB4JCQxO1xuICB9O1xuXG4gIGxpbmUueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5JCQxID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCRiKCtfKSwgbGluZSkgOiB5JCQxO1xuICB9O1xuXG4gIGxpbmUuZGVmaW5lZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkZWZpbmVkID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCRiKCEhXyksIGxpbmUpIDogZGVmaW5lZDtcbiAgfTtcblxuICBsaW5lLmN1cnZlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGN1cnZlID0gXywgY29udGV4dCAhPSBudWxsICYmIChvdXRwdXQgPSBjdXJ2ZShjb250ZXh0KSksIGxpbmUpIDogY3VydmU7XG4gIH07XG5cbiAgbGluZS5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF8gPT0gbnVsbCA/IGNvbnRleHQgPSBvdXRwdXQgPSBudWxsIDogb3V0cHV0ID0gY3VydmUoY29udGV4dCA9IF8pLCBsaW5lKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGxpbmU7XG59XG5cbmZ1bmN0aW9uIGFyZWEkMygpIHtcbiAgdmFyIHgwID0geCQzLFxuICAgICAgeDEgPSBudWxsLFxuICAgICAgeTAgPSBjb25zdGFudCRiKDApLFxuICAgICAgeTEgPSB5JDMsXG4gICAgICBkZWZpbmVkID0gY29uc3RhbnQkYih0cnVlKSxcbiAgICAgIGNvbnRleHQgPSBudWxsLFxuICAgICAgY3VydmUgPSBjdXJ2ZUxpbmVhcixcbiAgICAgIG91dHB1dCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gYXJlYShkYXRhKSB7XG4gICAgdmFyIGksXG4gICAgICAgIGosXG4gICAgICAgIGssXG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgZCxcbiAgICAgICAgZGVmaW5lZDAgPSBmYWxzZSxcbiAgICAgICAgYnVmZmVyLFxuICAgICAgICB4MHogPSBuZXcgQXJyYXkobiksXG4gICAgICAgIHkweiA9IG5ldyBBcnJheShuKTtcblxuICAgIGlmIChjb250ZXh0ID09IG51bGwpIG91dHB1dCA9IGN1cnZlKGJ1ZmZlciA9IHBhdGgoKSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDw9IG47ICsraSkge1xuICAgICAgaWYgKCEoaSA8IG4gJiYgZGVmaW5lZChkID0gZGF0YVtpXSwgaSwgZGF0YSkpID09PSBkZWZpbmVkMCkge1xuICAgICAgICBpZiAoZGVmaW5lZDAgPSAhZGVmaW5lZDApIHtcbiAgICAgICAgICBqID0gaTtcbiAgICAgICAgICBvdXRwdXQuYXJlYVN0YXJ0KCk7XG4gICAgICAgICAgb3V0cHV0LmxpbmVTdGFydCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dHB1dC5saW5lRW5kKCk7XG4gICAgICAgICAgb3V0cHV0LmxpbmVTdGFydCgpO1xuICAgICAgICAgIGZvciAoayA9IGkgLSAxOyBrID49IGo7IC0taykge1xuICAgICAgICAgICAgb3V0cHV0LnBvaW50KHgweltrXSwgeTB6W2tdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgICAgICBvdXRwdXQuYXJlYUVuZCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZGVmaW5lZDApIHtcbiAgICAgICAgeDB6W2ldID0gK3gwKGQsIGksIGRhdGEpLCB5MHpbaV0gPSAreTAoZCwgaSwgZGF0YSk7XG4gICAgICAgIG91dHB1dC5wb2ludCh4MSA/ICt4MShkLCBpLCBkYXRhKSA6IHgweltpXSwgeTEgPyAreTEoZCwgaSwgZGF0YSkgOiB5MHpbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChidWZmZXIpIHJldHVybiBvdXRwdXQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBhcmVhbGluZSgpIHtcbiAgICByZXR1cm4gbGluZSgpLmRlZmluZWQoZGVmaW5lZCkuY3VydmUoY3VydmUpLmNvbnRleHQoY29udGV4dCk7XG4gIH1cblxuICBhcmVhLnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JGIoK18pLCB4MSA9IG51bGwsIGFyZWEpIDogeDA7XG4gIH07XG5cbiAgYXJlYS54MCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkYigrXyksIGFyZWEpIDogeDA7XG4gIH07XG5cbiAgYXJlYS54MSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MSA9IF8gPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JGIoK18pLCBhcmVhKSA6IHgxO1xuICB9O1xuXG4gIGFyZWEueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkYigrXyksIHkxID0gbnVsbCwgYXJlYSkgOiB5MDtcbiAgfTtcblxuICBhcmVhLnkwID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkwID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCRiKCtfKSwgYXJlYSkgOiB5MDtcbiAgfTtcblxuICBhcmVhLnkxID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkxID0gXyA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkYigrXyksIGFyZWEpIDogeTE7XG4gIH07XG5cbiAgYXJlYS5saW5lWDAgPVxuICBhcmVhLmxpbmVZMCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBhcmVhbGluZSgpLngoeDApLnkoeTApO1xuICB9O1xuXG4gIGFyZWEubGluZVkxID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGFyZWFsaW5lKCkueCh4MCkueSh5MSk7XG4gIH07XG5cbiAgYXJlYS5saW5lWDEgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYXJlYWxpbmUoKS54KHgxKS55KHkwKTtcbiAgfTtcblxuICBhcmVhLmRlZmluZWQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGVmaW5lZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkYighIV8pLCBhcmVhKSA6IGRlZmluZWQ7XG4gIH07XG5cbiAgYXJlYS5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjdXJ2ZSA9IF8sIGNvbnRleHQgIT0gbnVsbCAmJiAob3V0cHV0ID0gY3VydmUoY29udGV4dCkpLCBhcmVhKSA6IGN1cnZlO1xuICB9O1xuXG4gIGFyZWEuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfID09IG51bGwgPyBjb250ZXh0ID0gb3V0cHV0ID0gbnVsbCA6IG91dHB1dCA9IGN1cnZlKGNvbnRleHQgPSBfKSwgYXJlYSkgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBhcmVhO1xufVxuXG5mdW5jdGlvbiBkZXNjZW5kaW5nJDEoYSwgYikge1xuICByZXR1cm4gYiA8IGEgPyAtMSA6IGIgPiBhID8gMSA6IGIgPj0gYSA/IDAgOiBOYU47XG59XG5cbmZ1bmN0aW9uIGlkZW50aXR5JDgoZCkge1xuICByZXR1cm4gZDtcbn1cblxuZnVuY3Rpb24gcGllKCkge1xuICB2YXIgdmFsdWUgPSBpZGVudGl0eSQ4LFxuICAgICAgc29ydFZhbHVlcyA9IGRlc2NlbmRpbmckMSxcbiAgICAgIHNvcnQgPSBudWxsLFxuICAgICAgc3RhcnRBbmdsZSA9IGNvbnN0YW50JGIoMCksXG4gICAgICBlbmRBbmdsZSA9IGNvbnN0YW50JGIodGF1JDQpLFxuICAgICAgcGFkQW5nbGUgPSBjb25zdGFudCRiKDApO1xuXG4gIGZ1bmN0aW9uIHBpZShkYXRhKSB7XG4gICAgdmFyIGksXG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgaixcbiAgICAgICAgayxcbiAgICAgICAgc3VtID0gMCxcbiAgICAgICAgaW5kZXggPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGFyY3MgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGEwID0gK3N0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgZGEgPSBNYXRoLm1pbih0YXUkNCwgTWF0aC5tYXgoLXRhdSQ0LCBlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC0gYTApKSxcbiAgICAgICAgYTEsXG4gICAgICAgIHAgPSBNYXRoLm1pbihNYXRoLmFicyhkYSkgLyBuLCBwYWRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSxcbiAgICAgICAgcGEgPSBwICogKGRhIDwgMCA/IC0xIDogMSksXG4gICAgICAgIHY7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKHYgPSBhcmNzW2luZGV4W2ldID0gaV0gPSArdmFsdWUoZGF0YVtpXSwgaSwgZGF0YSkpID4gMCkge1xuICAgICAgICBzdW0gKz0gdjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBPcHRpb25hbGx5IHNvcnQgdGhlIGFyY3MgYnkgcHJldmlvdXNseS1jb21wdXRlZCB2YWx1ZXMgb3IgYnkgZGF0YS5cbiAgICBpZiAoc29ydFZhbHVlcyAhPSBudWxsKSBpbmRleC5zb3J0KGZ1bmN0aW9uKGksIGopIHsgcmV0dXJuIHNvcnRWYWx1ZXMoYXJjc1tpXSwgYXJjc1tqXSk7IH0pO1xuICAgIGVsc2UgaWYgKHNvcnQgIT0gbnVsbCkgaW5kZXguc29ydChmdW5jdGlvbihpLCBqKSB7IHJldHVybiBzb3J0KGRhdGFbaV0sIGRhdGFbal0pOyB9KTtcblxuICAgIC8vIENvbXB1dGUgdGhlIGFyY3MhIFRoZXkgYXJlIHN0b3JlZCBpbiB0aGUgb3JpZ2luYWwgZGF0YSdzIG9yZGVyLlxuICAgIGZvciAoaSA9IDAsIGsgPSBzdW0gPyAoZGEgLSBuICogcGEpIC8gc3VtIDogMDsgaSA8IG47ICsraSwgYTAgPSBhMSkge1xuICAgICAgaiA9IGluZGV4W2ldLCB2ID0gYXJjc1tqXSwgYTEgPSBhMCArICh2ID4gMCA/IHYgKiBrIDogMCkgKyBwYSwgYXJjc1tqXSA9IHtcbiAgICAgICAgZGF0YTogZGF0YVtqXSxcbiAgICAgICAgaW5kZXg6IGksXG4gICAgICAgIHZhbHVlOiB2LFxuICAgICAgICBzdGFydEFuZ2xlOiBhMCxcbiAgICAgICAgZW5kQW5nbGU6IGExLFxuICAgICAgICBwYWRBbmdsZTogcFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJjcztcbiAgfVxuXG4gIHBpZS52YWx1ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh2YWx1ZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkYigrXyksIHBpZSkgOiB2YWx1ZTtcbiAgfTtcblxuICBwaWUuc29ydFZhbHVlcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3J0VmFsdWVzID0gXywgc29ydCA9IG51bGwsIHBpZSkgOiBzb3J0VmFsdWVzO1xuICB9O1xuXG4gIHBpZS5zb3J0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNvcnQgPSBfLCBzb3J0VmFsdWVzID0gbnVsbCwgcGllKSA6IHNvcnQ7XG4gIH07XG5cbiAgcGllLnN0YXJ0QW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RhcnRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkYigrXyksIHBpZSkgOiBzdGFydEFuZ2xlO1xuICB9O1xuXG4gIHBpZS5lbmRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChlbmRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkYigrXyksIHBpZSkgOiBlbmRBbmdsZTtcbiAgfTtcblxuICBwaWUucGFkQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JGIoK18pLCBwaWUpIDogcGFkQW5nbGU7XG4gIH07XG5cbiAgcmV0dXJuIHBpZTtcbn1cblxudmFyIGN1cnZlUmFkaWFsTGluZWFyID0gY3VydmVSYWRpYWwoY3VydmVMaW5lYXIpO1xuXG5mdW5jdGlvbiBSYWRpYWwoY3VydmUpIHtcbiAgdGhpcy5fY3VydmUgPSBjdXJ2ZTtcbn1cblxuUmFkaWFsLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9jdXJ2ZS5hcmVhU3RhcnQoKTtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fY3VydmUuYXJlYUVuZCgpO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2N1cnZlLmxpbmVTdGFydCgpO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9jdXJ2ZS5saW5lRW5kKCk7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbihhLCByKSB7XG4gICAgdGhpcy5fY3VydmUucG9pbnQociAqIE1hdGguc2luKGEpLCByICogLU1hdGguY29zKGEpKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gY3VydmVSYWRpYWwoY3VydmUpIHtcblxuICBmdW5jdGlvbiByYWRpYWwoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgUmFkaWFsKGN1cnZlKGNvbnRleHQpKTtcbiAgfVxuXG4gIHJhZGlhbC5fY3VydmUgPSBjdXJ2ZTtcblxuICByZXR1cm4gcmFkaWFsO1xufVxuXG5mdW5jdGlvbiBsaW5lUmFkaWFsKGwpIHtcbiAgdmFyIGMgPSBsLmN1cnZlO1xuXG4gIGwuYW5nbGUgPSBsLngsIGRlbGV0ZSBsLng7XG4gIGwucmFkaXVzID0gbC55LCBkZWxldGUgbC55O1xuXG4gIGwuY3VydmUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBjKGN1cnZlUmFkaWFsKF8pKSA6IGMoKS5fY3VydmU7XG4gIH07XG5cbiAgcmV0dXJuIGw7XG59XG5cbmZ1bmN0aW9uIGxpbmVSYWRpYWwkMSgpIHtcbiAgcmV0dXJuIGxpbmVSYWRpYWwobGluZSgpLmN1cnZlKGN1cnZlUmFkaWFsTGluZWFyKSk7XG59XG5cbmZ1bmN0aW9uIGFyZWFSYWRpYWwoKSB7XG4gIHZhciBhID0gYXJlYSQzKCkuY3VydmUoY3VydmVSYWRpYWxMaW5lYXIpLFxuICAgICAgYyA9IGEuY3VydmUsXG4gICAgICB4MCA9IGEubGluZVgwLFxuICAgICAgeDEgPSBhLmxpbmVYMSxcbiAgICAgIHkwID0gYS5saW5lWTAsXG4gICAgICB5MSA9IGEubGluZVkxO1xuXG4gIGEuYW5nbGUgPSBhLngsIGRlbGV0ZSBhLng7XG4gIGEuc3RhcnRBbmdsZSA9IGEueDAsIGRlbGV0ZSBhLngwO1xuICBhLmVuZEFuZ2xlID0gYS54MSwgZGVsZXRlIGEueDE7XG4gIGEucmFkaXVzID0gYS55LCBkZWxldGUgYS55O1xuICBhLmlubmVyUmFkaXVzID0gYS55MCwgZGVsZXRlIGEueTA7XG4gIGEub3V0ZXJSYWRpdXMgPSBhLnkxLCBkZWxldGUgYS55MTtcbiAgYS5saW5lU3RhcnRBbmdsZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbGluZVJhZGlhbCh4MCgpKTsgfSwgZGVsZXRlIGEubGluZVgwO1xuICBhLmxpbmVFbmRBbmdsZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbGluZVJhZGlhbCh4MSgpKTsgfSwgZGVsZXRlIGEubGluZVgxO1xuICBhLmxpbmVJbm5lclJhZGl1cyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbGluZVJhZGlhbCh5MCgpKTsgfSwgZGVsZXRlIGEubGluZVkwO1xuICBhLmxpbmVPdXRlclJhZGl1cyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbGluZVJhZGlhbCh5MSgpKTsgfSwgZGVsZXRlIGEubGluZVkxO1xuXG4gIGEuY3VydmUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBjKGN1cnZlUmFkaWFsKF8pKSA6IGMoKS5fY3VydmU7XG4gIH07XG5cbiAgcmV0dXJuIGE7XG59XG5cbmZ1bmN0aW9uIHBvaW50UmFkaWFsKHgsIHkpIHtcbiAgcmV0dXJuIFsoeSA9ICt5KSAqIE1hdGguY29zKHggLT0gTWF0aC5QSSAvIDIpLCB5ICogTWF0aC5zaW4oeCldO1xufVxuXG52YXIgc2xpY2UkNiA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuZnVuY3Rpb24gbGlua1NvdXJjZShkKSB7XG4gIHJldHVybiBkLnNvdXJjZTtcbn1cblxuZnVuY3Rpb24gbGlua1RhcmdldChkKSB7XG4gIHJldHVybiBkLnRhcmdldDtcbn1cblxuZnVuY3Rpb24gbGluayQyKGN1cnZlKSB7XG4gIHZhciBzb3VyY2UgPSBsaW5rU291cmNlLFxuICAgICAgdGFyZ2V0ID0gbGlua1RhcmdldCxcbiAgICAgIHgkJDEgPSB4JDMsXG4gICAgICB5JCQxID0geSQzLFxuICAgICAgY29udGV4dCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbGluaygpIHtcbiAgICB2YXIgYnVmZmVyLCBhcmd2ID0gc2xpY2UkNi5jYWxsKGFyZ3VtZW50cyksIHMgPSBzb3VyY2UuYXBwbHkodGhpcywgYXJndiksIHQgPSB0YXJnZXQuYXBwbHkodGhpcywgYXJndik7XG4gICAgaWYgKCFjb250ZXh0KSBjb250ZXh0ID0gYnVmZmVyID0gcGF0aCgpO1xuICAgIGN1cnZlKGNvbnRleHQsICt4JCQxLmFwcGx5KHRoaXMsIChhcmd2WzBdID0gcywgYXJndikpLCAreSQkMS5hcHBseSh0aGlzLCBhcmd2KSwgK3gkJDEuYXBwbHkodGhpcywgKGFyZ3ZbMF0gPSB0LCBhcmd2KSksICt5JCQxLmFwcGx5KHRoaXMsIGFyZ3YpKTtcbiAgICBpZiAoYnVmZmVyKSByZXR1cm4gY29udGV4dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIGxpbmsuc291cmNlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNvdXJjZSA9IF8sIGxpbmspIDogc291cmNlO1xuICB9O1xuXG4gIGxpbmsudGFyZ2V0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRhcmdldCA9IF8sIGxpbmspIDogdGFyZ2V0O1xuICB9O1xuXG4gIGxpbmsueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4JCQxID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCRiKCtfKSwgbGluaykgOiB4JCQxO1xuICB9O1xuXG4gIGxpbmsueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5JCQxID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCRiKCtfKSwgbGluaykgOiB5JCQxO1xuICB9O1xuXG4gIGxpbmsuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICgoY29udGV4dCA9IF8gPT0gbnVsbCA/IG51bGwgOiBfKSwgbGluaykgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBjdXJ2ZUhvcml6b250YWwoY29udGV4dCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgY29udGV4dC5tb3ZlVG8oeDAsIHkwKTtcbiAgY29udGV4dC5iZXppZXJDdXJ2ZVRvKHgwID0gKHgwICsgeDEpIC8gMiwgeTAsIHgwLCB5MSwgeDEsIHkxKTtcbn1cblxuZnVuY3Rpb24gY3VydmVWZXJ0aWNhbChjb250ZXh0LCB4MCwgeTAsIHgxLCB5MSkge1xuICBjb250ZXh0Lm1vdmVUbyh4MCwgeTApO1xuICBjb250ZXh0LmJlemllckN1cnZlVG8oeDAsIHkwID0gKHkwICsgeTEpIC8gMiwgeDEsIHkwLCB4MSwgeTEpO1xufVxuXG5mdW5jdGlvbiBjdXJ2ZVJhZGlhbCQxKGNvbnRleHQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBwMCA9IHBvaW50UmFkaWFsKHgwLCB5MCksXG4gICAgICBwMSA9IHBvaW50UmFkaWFsKHgwLCB5MCA9ICh5MCArIHkxKSAvIDIpLFxuICAgICAgcDIgPSBwb2ludFJhZGlhbCh4MSwgeTApLFxuICAgICAgcDMgPSBwb2ludFJhZGlhbCh4MSwgeTEpO1xuICBjb250ZXh0Lm1vdmVUbyhwMFswXSwgcDBbMV0pO1xuICBjb250ZXh0LmJlemllckN1cnZlVG8ocDFbMF0sIHAxWzFdLCBwMlswXSwgcDJbMV0sIHAzWzBdLCBwM1sxXSk7XG59XG5cbmZ1bmN0aW9uIGxpbmtIb3Jpem9udGFsKCkge1xuICByZXR1cm4gbGluayQyKGN1cnZlSG9yaXpvbnRhbCk7XG59XG5cbmZ1bmN0aW9uIGxpbmtWZXJ0aWNhbCgpIHtcbiAgcmV0dXJuIGxpbmskMihjdXJ2ZVZlcnRpY2FsKTtcbn1cblxuZnVuY3Rpb24gbGlua1JhZGlhbCgpIHtcbiAgdmFyIGwgPSBsaW5rJDIoY3VydmVSYWRpYWwkMSk7XG4gIGwuYW5nbGUgPSBsLngsIGRlbGV0ZSBsLng7XG4gIGwucmFkaXVzID0gbC55LCBkZWxldGUgbC55O1xuICByZXR1cm4gbDtcbn1cblxudmFyIGNpcmNsZSQyID0ge1xuICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgdmFyIHIgPSBNYXRoLnNxcnQoc2l6ZSAvIHBpJDQpO1xuICAgIGNvbnRleHQubW92ZVRvKHIsIDApO1xuICAgIGNvbnRleHQuYXJjKDAsIDAsIHIsIDAsIHRhdSQ0KTtcbiAgfVxufTtcblxudmFyIGNyb3NzJDIgPSB7XG4gIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICB2YXIgciA9IE1hdGguc3FydChzaXplIC8gNSkgLyAyO1xuICAgIGNvbnRleHQubW92ZVRvKC0zICogciwgLXIpO1xuICAgIGNvbnRleHQubGluZVRvKC1yLCAtcik7XG4gICAgY29udGV4dC5saW5lVG8oLXIsIC0zICogcik7XG4gICAgY29udGV4dC5saW5lVG8ociwgLTMgKiByKTtcbiAgICBjb250ZXh0LmxpbmVUbyhyLCAtcik7XG4gICAgY29udGV4dC5saW5lVG8oMyAqIHIsIC1yKTtcbiAgICBjb250ZXh0LmxpbmVUbygzICogciwgcik7XG4gICAgY29udGV4dC5saW5lVG8ociwgcik7XG4gICAgY29udGV4dC5saW5lVG8ociwgMyAqIHIpO1xuICAgIGNvbnRleHQubGluZVRvKC1yLCAzICogcik7XG4gICAgY29udGV4dC5saW5lVG8oLXIsIHIpO1xuICAgIGNvbnRleHQubGluZVRvKC0zICogciwgcik7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfVxufTtcblxudmFyIHRhbjMwID0gTWF0aC5zcXJ0KDEgLyAzKSxcbiAgICB0YW4zMF8yID0gdGFuMzAgKiAyO1xuXG52YXIgZGlhbW9uZCA9IHtcbiAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgIHZhciB5ID0gTWF0aC5zcXJ0KHNpemUgLyB0YW4zMF8yKSxcbiAgICAgICAgeCA9IHkgKiB0YW4zMDtcbiAgICBjb250ZXh0Lm1vdmVUbygwLCAteSk7XG4gICAgY29udGV4dC5saW5lVG8oeCwgMCk7XG4gICAgY29udGV4dC5saW5lVG8oMCwgeSk7XG4gICAgY29udGV4dC5saW5lVG8oLXgsIDApO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gIH1cbn07XG5cbnZhciBrYSA9IDAuODkwODEzMDkxNTI5Mjg1MjI4MTAsXG4gICAga3IgPSBNYXRoLnNpbihwaSQ0IC8gMTApIC8gTWF0aC5zaW4oNyAqIHBpJDQgLyAxMCksXG4gICAga3ggPSBNYXRoLnNpbih0YXUkNCAvIDEwKSAqIGtyLFxuICAgIGt5ID0gLU1hdGguY29zKHRhdSQ0IC8gMTApICoga3I7XG5cbnZhciBzdGFyID0ge1xuICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgdmFyIHIgPSBNYXRoLnNxcnQoc2l6ZSAqIGthKSxcbiAgICAgICAgeCA9IGt4ICogcixcbiAgICAgICAgeSA9IGt5ICogcjtcbiAgICBjb250ZXh0Lm1vdmVUbygwLCAtcik7XG4gICAgY29udGV4dC5saW5lVG8oeCwgeSk7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCA1OyArK2kpIHtcbiAgICAgIHZhciBhID0gdGF1JDQgKiBpIC8gNSxcbiAgICAgICAgICBjID0gTWF0aC5jb3MoYSksXG4gICAgICAgICAgcyA9IE1hdGguc2luKGEpO1xuICAgICAgY29udGV4dC5saW5lVG8ocyAqIHIsIC1jICogcik7XG4gICAgICBjb250ZXh0LmxpbmVUbyhjICogeCAtIHMgKiB5LCBzICogeCArIGMgKiB5KTtcbiAgICB9XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfVxufTtcblxudmFyIHNxdWFyZSA9IHtcbiAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgIHZhciB3ID0gTWF0aC5zcXJ0KHNpemUpLFxuICAgICAgICB4ID0gLXcgLyAyO1xuICAgIGNvbnRleHQucmVjdCh4LCB4LCB3LCB3KTtcbiAgfVxufTtcblxudmFyIHNxcnQzID0gTWF0aC5zcXJ0KDMpO1xuXG52YXIgdHJpYW5nbGUgPSB7XG4gIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICB2YXIgeSA9IC1NYXRoLnNxcnQoc2l6ZSAvIChzcXJ0MyAqIDMpKTtcbiAgICBjb250ZXh0Lm1vdmVUbygwLCB5ICogMik7XG4gICAgY29udGV4dC5saW5lVG8oLXNxcnQzICogeSwgLXkpO1xuICAgIGNvbnRleHQubGluZVRvKHNxcnQzICogeSwgLXkpO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gIH1cbn07XG5cbnZhciBjJDIgPSAtMC41LFxuICAgIHMgPSBNYXRoLnNxcnQoMykgLyAyLFxuICAgIGsgPSAxIC8gTWF0aC5zcXJ0KDEyKSxcbiAgICBhID0gKGsgLyAyICsgMSkgKiAzO1xuXG52YXIgd3llID0ge1xuICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgdmFyIHIgPSBNYXRoLnNxcnQoc2l6ZSAvIGEpLFxuICAgICAgICB4MCA9IHIgLyAyLFxuICAgICAgICB5MCA9IHIgKiBrLFxuICAgICAgICB4MSA9IHgwLFxuICAgICAgICB5MSA9IHIgKiBrICsgcixcbiAgICAgICAgeDIgPSAteDEsXG4gICAgICAgIHkyID0geTE7XG4gICAgY29udGV4dC5tb3ZlVG8oeDAsIHkwKTtcbiAgICBjb250ZXh0LmxpbmVUbyh4MSwgeTEpO1xuICAgIGNvbnRleHQubGluZVRvKHgyLCB5Mik7XG4gICAgY29udGV4dC5saW5lVG8oYyQyICogeDAgLSBzICogeTAsIHMgKiB4MCArIGMkMiAqIHkwKTtcbiAgICBjb250ZXh0LmxpbmVUbyhjJDIgKiB4MSAtIHMgKiB5MSwgcyAqIHgxICsgYyQyICogeTEpO1xuICAgIGNvbnRleHQubGluZVRvKGMkMiAqIHgyIC0gcyAqIHkyLCBzICogeDIgKyBjJDIgKiB5Mik7XG4gICAgY29udGV4dC5saW5lVG8oYyQyICogeDAgKyBzICogeTAsIGMkMiAqIHkwIC0gcyAqIHgwKTtcbiAgICBjb250ZXh0LmxpbmVUbyhjJDIgKiB4MSArIHMgKiB5MSwgYyQyICogeTEgLSBzICogeDEpO1xuICAgIGNvbnRleHQubGluZVRvKGMkMiAqIHgyICsgcyAqIHkyLCBjJDIgKiB5MiAtIHMgKiB4Mik7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfVxufTtcblxudmFyIHN5bWJvbHMgPSBbXG4gIGNpcmNsZSQyLFxuICBjcm9zcyQyLFxuICBkaWFtb25kLFxuICBzcXVhcmUsXG4gIHN0YXIsXG4gIHRyaWFuZ2xlLFxuICB3eWVcbl07XG5cbmZ1bmN0aW9uIHN5bWJvbCgpIHtcbiAgdmFyIHR5cGUgPSBjb25zdGFudCRiKGNpcmNsZSQyKSxcbiAgICAgIHNpemUgPSBjb25zdGFudCRiKDY0KSxcbiAgICAgIGNvbnRleHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHN5bWJvbCgpIHtcbiAgICB2YXIgYnVmZmVyO1xuICAgIGlmICghY29udGV4dCkgY29udGV4dCA9IGJ1ZmZlciA9IHBhdGgoKTtcbiAgICB0eXBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykuZHJhdyhjb250ZXh0LCArc2l6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICBpZiAoYnVmZmVyKSByZXR1cm4gY29udGV4dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIHN5bWJvbC50eXBlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHR5cGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JGIoXyksIHN5bWJvbCkgOiB0eXBlO1xuICB9O1xuXG4gIHN5bWJvbC5zaXplID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNpemUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JGIoK18pLCBzeW1ib2wpIDogc2l6ZTtcbiAgfTtcblxuICBzeW1ib2wuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjb250ZXh0ID0gXyA9PSBudWxsID8gbnVsbCA6IF8sIHN5bWJvbCkgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBzeW1ib2w7XG59XG5cbmZ1bmN0aW9uIG5vb3AkMygpIHt9XG5cbmZ1bmN0aW9uIHBvaW50JDIodGhhdCwgeCwgeSkge1xuICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oXG4gICAgKDIgKiB0aGF0Ll94MCArIHRoYXQuX3gxKSAvIDMsXG4gICAgKDIgKiB0aGF0Ll95MCArIHRoYXQuX3kxKSAvIDMsXG4gICAgKHRoYXQuX3gwICsgMiAqIHRoYXQuX3gxKSAvIDMsXG4gICAgKHRoYXQuX3kwICsgMiAqIHRoYXQuX3kxKSAvIDMsXG4gICAgKHRoYXQuX3gwICsgNCAqIHRoYXQuX3gxICsgeCkgLyA2LFxuICAgICh0aGF0Ll95MCArIDQgKiB0aGF0Ll95MSArIHkpIC8gNlxuICApO1xufVxuXG5mdW5jdGlvbiBCYXNpcyhjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5CYXNpcy5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMzogcG9pbnQkMih0aGlzLCB0aGlzLl94MSwgdGhpcy5feTEpOyAvLyBwcm9jZWVkXG4gICAgICBjYXNlIDI6IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gxLCB0aGlzLl95MSk7IGJyZWFrO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdGhpcy5fY29udGV4dC5saW5lVG8oKDUgKiB0aGlzLl94MCArIHRoaXMuX3gxKSAvIDYsICg1ICogdGhpcy5feTAgKyB0aGlzLl95MSkgLyA2KTsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDogcG9pbnQkMih0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGJhc2lzJDIoY29udGV4dCkge1xuICByZXR1cm4gbmV3IEJhc2lzKGNvbnRleHQpO1xufVxuXG5mdW5jdGlvbiBCYXNpc0Nsb3NlZChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5CYXNpc0Nsb3NlZC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogbm9vcCQzLFxuICBhcmVhRW5kOiBub29wJDMsXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID0gdGhpcy5feDMgPSB0aGlzLl94NCA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gdGhpcy5feTMgPSB0aGlzLl95NCA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMToge1xuICAgICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94MiwgdGhpcy5feTIpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMjoge1xuICAgICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbygodGhpcy5feDIgKyAyICogdGhpcy5feDMpIC8gMywgKHRoaXMuX3kyICsgMiAqIHRoaXMuX3kzKSAvIDMpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbygodGhpcy5feDMgKyAyICogdGhpcy5feDIpIC8gMywgKHRoaXMuX3kzICsgMiAqIHRoaXMuX3kyKSAvIDMpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMzoge1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3gyLCB0aGlzLl95Mik7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDMsIHRoaXMuX3kzKTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94NCwgdGhpcy5feTQpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX3gyID0geCwgdGhpcy5feTIgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyB0aGlzLl94MyA9IHgsIHRoaXMuX3kzID0geTsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdGhpcy5feDQgPSB4LCB0aGlzLl95NCA9IHk7IHRoaXMuX2NvbnRleHQubW92ZVRvKCh0aGlzLl94MCArIDQgKiB0aGlzLl94MSArIHgpIC8gNiwgKHRoaXMuX3kwICsgNCAqIHRoaXMuX3kxICsgeSkgLyA2KTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiBwb2ludCQyKHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0geTtcbiAgfVxufTtcblxuZnVuY3Rpb24gYmFzaXNDbG9zZWQkMShjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgQmFzaXNDbG9zZWQoY29udGV4dCk7XG59XG5cbmZ1bmN0aW9uIEJhc2lzT3Blbihjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5CYXNpc09wZW4ucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMykpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB2YXIgeDAgPSAodGhpcy5feDAgKyA0ICogdGhpcy5feDEgKyB4KSAvIDYsIHkwID0gKHRoaXMuX3kwICsgNCAqIHRoaXMuX3kxICsgeSkgLyA2OyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeDAsIHkwKSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgwLCB5MCk7IGJyZWFrO1xuICAgICAgY2FzZSAzOiB0aGlzLl9wb2ludCA9IDQ7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50JDIodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICB9XG59O1xuXG5mdW5jdGlvbiBiYXNpc09wZW4oY29udGV4dCkge1xuICByZXR1cm4gbmV3IEJhc2lzT3Blbihjb250ZXh0KTtcbn1cblxuZnVuY3Rpb24gQnVuZGxlKGNvbnRleHQsIGJldGEpIHtcbiAgdGhpcy5fYmFzaXMgPSBuZXcgQmFzaXMoY29udGV4dCk7XG4gIHRoaXMuX2JldGEgPSBiZXRhO1xufVxuXG5CdW5kbGUucHJvdG90eXBlID0ge1xuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3ggPSBbXTtcbiAgICB0aGlzLl95ID0gW107XG4gICAgdGhpcy5fYmFzaXMubGluZVN0YXJ0KCk7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB4ID0gdGhpcy5feCxcbiAgICAgICAgeSA9IHRoaXMuX3ksXG4gICAgICAgIGogPSB4Lmxlbmd0aCAtIDE7XG5cbiAgICBpZiAoaiA+IDApIHtcbiAgICAgIHZhciB4MCA9IHhbMF0sXG4gICAgICAgICAgeTAgPSB5WzBdLFxuICAgICAgICAgIGR4ID0geFtqXSAtIHgwLFxuICAgICAgICAgIGR5ID0geVtqXSAtIHkwLFxuICAgICAgICAgIGkgPSAtMSxcbiAgICAgICAgICB0O1xuXG4gICAgICB3aGlsZSAoKytpIDw9IGopIHtcbiAgICAgICAgdCA9IGkgLyBqO1xuICAgICAgICB0aGlzLl9iYXNpcy5wb2ludChcbiAgICAgICAgICB0aGlzLl9iZXRhICogeFtpXSArICgxIC0gdGhpcy5fYmV0YSkgKiAoeDAgKyB0ICogZHgpLFxuICAgICAgICAgIHRoaXMuX2JldGEgKiB5W2ldICsgKDEgLSB0aGlzLl9iZXRhKSAqICh5MCArIHQgKiBkeSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl94ID0gdGhpcy5feSA9IG51bGw7XG4gICAgdGhpcy5fYmFzaXMubGluZUVuZCgpO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuX3gucHVzaCgreCk7XG4gICAgdGhpcy5feS5wdXNoKCt5KTtcbiAgfVxufTtcblxudmFyIGJ1bmRsZSA9IChmdW5jdGlvbiBjdXN0b20oYmV0YSkge1xuXG4gIGZ1bmN0aW9uIGJ1bmRsZShjb250ZXh0KSB7XG4gICAgcmV0dXJuIGJldGEgPT09IDEgPyBuZXcgQmFzaXMoY29udGV4dCkgOiBuZXcgQnVuZGxlKGNvbnRleHQsIGJldGEpO1xuICB9XG5cbiAgYnVuZGxlLmJldGEgPSBmdW5jdGlvbihiZXRhKSB7XG4gICAgcmV0dXJuIGN1c3RvbSgrYmV0YSk7XG4gIH07XG5cbiAgcmV0dXJuIGJ1bmRsZTtcbn0pKDAuODUpO1xuXG5mdW5jdGlvbiBwb2ludCQzKHRoYXQsIHgsIHkpIHtcbiAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKFxuICAgIHRoYXQuX3gxICsgdGhhdC5fayAqICh0aGF0Ll94MiAtIHRoYXQuX3gwKSxcbiAgICB0aGF0Ll95MSArIHRoYXQuX2sgKiAodGhhdC5feTIgLSB0aGF0Ll95MCksXG4gICAgdGhhdC5feDIgKyB0aGF0Ll9rICogKHRoYXQuX3gxIC0geCksXG4gICAgdGhhdC5feTIgKyB0aGF0Ll9rICogKHRoYXQuX3kxIC0geSksXG4gICAgdGhhdC5feDIsXG4gICAgdGhhdC5feTJcbiAgKTtcbn1cblxuZnVuY3Rpb24gQ2FyZGluYWwoY29udGV4dCwgdGVuc2lvbikge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fayA9ICgxIC0gdGVuc2lvbikgLyA2O1xufVxuXG5DYXJkaW5hbC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDI6IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgY2FzZSAzOiBwb2ludCQzKHRoaXMsIHRoaXMuX3gxLCB0aGlzLl95MSk7IGJyZWFrO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgdGhpcy5feDEgPSB4LCB0aGlzLl95MSA9IHk7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50JDModGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICB9XG59O1xuXG52YXIgY2FyZGluYWwgPSAoZnVuY3Rpb24gY3VzdG9tKHRlbnNpb24pIHtcblxuICBmdW5jdGlvbiBjYXJkaW5hbChjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBDYXJkaW5hbChjb250ZXh0LCB0ZW5zaW9uKTtcbiAgfVxuXG4gIGNhcmRpbmFsLnRlbnNpb24gPSBmdW5jdGlvbih0ZW5zaW9uKSB7XG4gICAgcmV0dXJuIGN1c3RvbSgrdGVuc2lvbik7XG4gIH07XG5cbiAgcmV0dXJuIGNhcmRpbmFsO1xufSkoMCk7XG5cbmZ1bmN0aW9uIENhcmRpbmFsQ2xvc2VkKGNvbnRleHQsIHRlbnNpb24pIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuX2sgPSAoMSAtIHRlbnNpb24pIC8gNjtcbn1cblxuQ2FyZGluYWxDbG9zZWQucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IG5vb3AkMyxcbiAgYXJlYUVuZDogbm9vcCQzLFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9IHRoaXMuX3gzID0gdGhpcy5feDQgPSB0aGlzLl94NSA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gdGhpcy5feTMgPSB0aGlzLl95NCA9IHRoaXMuX3k1ID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAxOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAyOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAzOiB7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDMsIHRoaXMuX3kzKTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94NCwgdGhpcy5feTQpO1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g1LCB0aGlzLl95NSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5feDMgPSB4LCB0aGlzLl95MyA9IHk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3g0ID0geCwgdGhpcy5feTQgPSB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdGhpcy5feDUgPSB4LCB0aGlzLl95NSA9IHk7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogcG9pbnQkMyh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbnZhciBjYXJkaW5hbENsb3NlZCA9IChmdW5jdGlvbiBjdXN0b20odGVuc2lvbikge1xuXG4gIGZ1bmN0aW9uIGNhcmRpbmFsJCQxKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IENhcmRpbmFsQ2xvc2VkKGNvbnRleHQsIHRlbnNpb24pO1xuICB9XG5cbiAgY2FyZGluYWwkJDEudGVuc2lvbiA9IGZ1bmN0aW9uKHRlbnNpb24pIHtcbiAgICByZXR1cm4gY3VzdG9tKCt0ZW5zaW9uKTtcbiAgfTtcblxuICByZXR1cm4gY2FyZGluYWwkJDE7XG59KSgwKTtcblxuZnVuY3Rpb24gQ2FyZGluYWxPcGVuKGNvbnRleHQsIHRlbnNpb24pIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuX2sgPSAoMSAtIHRlbnNpb24pIC8gNjtcbn1cblxuQ2FyZGluYWxPcGVuLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAzKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MiwgdGhpcy5feTIpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDIsIHRoaXMuX3kyKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHRoaXMuX3BvaW50ID0gNDsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDogcG9pbnQkMyh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbnZhciBjYXJkaW5hbE9wZW4gPSAoZnVuY3Rpb24gY3VzdG9tKHRlbnNpb24pIHtcblxuICBmdW5jdGlvbiBjYXJkaW5hbCQkMShjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBDYXJkaW5hbE9wZW4oY29udGV4dCwgdGVuc2lvbik7XG4gIH1cblxuICBjYXJkaW5hbCQkMS50ZW5zaW9uID0gZnVuY3Rpb24odGVuc2lvbikge1xuICAgIHJldHVybiBjdXN0b20oK3RlbnNpb24pO1xuICB9O1xuXG4gIHJldHVybiBjYXJkaW5hbCQkMTtcbn0pKDApO1xuXG5mdW5jdGlvbiBwb2ludCQ0KHRoYXQsIHgsIHkpIHtcbiAgdmFyIHgxID0gdGhhdC5feDEsXG4gICAgICB5MSA9IHRoYXQuX3kxLFxuICAgICAgeDIgPSB0aGF0Ll94MixcbiAgICAgIHkyID0gdGhhdC5feTI7XG5cbiAgaWYgKHRoYXQuX2wwMV9hID4gZXBzaWxvbiQzKSB7XG4gICAgdmFyIGEgPSAyICogdGhhdC5fbDAxXzJhICsgMyAqIHRoYXQuX2wwMV9hICogdGhhdC5fbDEyX2EgKyB0aGF0Ll9sMTJfMmEsXG4gICAgICAgIG4gPSAzICogdGhhdC5fbDAxX2EgKiAodGhhdC5fbDAxX2EgKyB0aGF0Ll9sMTJfYSk7XG4gICAgeDEgPSAoeDEgKiBhIC0gdGhhdC5feDAgKiB0aGF0Ll9sMTJfMmEgKyB0aGF0Ll94MiAqIHRoYXQuX2wwMV8yYSkgLyBuO1xuICAgIHkxID0gKHkxICogYSAtIHRoYXQuX3kwICogdGhhdC5fbDEyXzJhICsgdGhhdC5feTIgKiB0aGF0Ll9sMDFfMmEpIC8gbjtcbiAgfVxuXG4gIGlmICh0aGF0Ll9sMjNfYSA+IGVwc2lsb24kMykge1xuICAgIHZhciBiID0gMiAqIHRoYXQuX2wyM18yYSArIDMgKiB0aGF0Ll9sMjNfYSAqIHRoYXQuX2wxMl9hICsgdGhhdC5fbDEyXzJhLFxuICAgICAgICBtID0gMyAqIHRoYXQuX2wyM19hICogKHRoYXQuX2wyM19hICsgdGhhdC5fbDEyX2EpO1xuICAgIHgyID0gKHgyICogYiArIHRoYXQuX3gxICogdGhhdC5fbDIzXzJhIC0geCAqIHRoYXQuX2wxMl8yYSkgLyBtO1xuICAgIHkyID0gKHkyICogYiArIHRoYXQuX3kxICogdGhhdC5fbDIzXzJhIC0geSAqIHRoYXQuX2wxMl8yYSkgLyBtO1xuICB9XG5cbiAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHgxLCB5MSwgeDIsIHkyLCB0aGF0Ll94MiwgdGhhdC5feTIpO1xufVxuXG5mdW5jdGlvbiBDYXRtdWxsUm9tKGNvbnRleHQsIGFscGhhKSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl9hbHBoYSA9IGFscGhhO1xufVxuXG5DYXRtdWxsUm9tLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IE5hTjtcbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2EgPVxuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYSA9XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDI6IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgY2FzZSAzOiB0aGlzLnBvaW50KHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuXG4gICAgaWYgKHRoaXMuX3BvaW50KSB7XG4gICAgICB2YXIgeDIzID0gdGhpcy5feDIgLSB4LFxuICAgICAgICAgIHkyMyA9IHRoaXMuX3kyIC0geTtcbiAgICAgIHRoaXMuX2wyM19hID0gTWF0aC5zcXJ0KHRoaXMuX2wyM18yYSA9IE1hdGgucG93KHgyMyAqIHgyMyArIHkyMyAqIHkyMywgdGhpcy5fYWxwaGEpKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50JDQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cblxuICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EsIHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2E7XG4gICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhLCB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmE7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgfVxufTtcblxudmFyIGNhdG11bGxSb20gPSAoZnVuY3Rpb24gY3VzdG9tKGFscGhhKSB7XG5cbiAgZnVuY3Rpb24gY2F0bXVsbFJvbShjb250ZXh0KSB7XG4gICAgcmV0dXJuIGFscGhhID8gbmV3IENhdG11bGxSb20oY29udGV4dCwgYWxwaGEpIDogbmV3IENhcmRpbmFsKGNvbnRleHQsIDApO1xuICB9XG5cbiAgY2F0bXVsbFJvbS5hbHBoYSA9IGZ1bmN0aW9uKGFscGhhKSB7XG4gICAgcmV0dXJuIGN1c3RvbSgrYWxwaGEpO1xuICB9O1xuXG4gIHJldHVybiBjYXRtdWxsUm9tO1xufSkoMC41KTtcblxuZnVuY3Rpb24gQ2F0bXVsbFJvbUNsb3NlZChjb250ZXh0LCBhbHBoYSkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fYWxwaGEgPSBhbHBoYTtcbn1cblxuQ2F0bXVsbFJvbUNsb3NlZC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogbm9vcCQzLFxuICBhcmVhRW5kOiBub29wJDMsXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID0gdGhpcy5feDMgPSB0aGlzLl94NCA9IHRoaXMuX3g1ID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSB0aGlzLl95MyA9IHRoaXMuX3k0ID0gdGhpcy5feTUgPSBOYU47XG4gICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hID1cbiAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmEgPVxuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAxOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAyOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAzOiB7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDMsIHRoaXMuX3kzKTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94NCwgdGhpcy5feTQpO1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g1LCB0aGlzLl95NSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcblxuICAgIGlmICh0aGlzLl9wb2ludCkge1xuICAgICAgdmFyIHgyMyA9IHRoaXMuX3gyIC0geCxcbiAgICAgICAgICB5MjMgPSB0aGlzLl95MiAtIHk7XG4gICAgICB0aGlzLl9sMjNfYSA9IE1hdGguc3FydCh0aGlzLl9sMjNfMmEgPSBNYXRoLnBvdyh4MjMgKiB4MjMgKyB5MjMgKiB5MjMsIHRoaXMuX2FscGhhKSk7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX3gzID0geCwgdGhpcy5feTMgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94NCA9IHgsIHRoaXMuX3k0ID0geSk7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX3g1ID0geCwgdGhpcy5feTUgPSB5OyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IHBvaW50JDQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cblxuICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EsIHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2E7XG4gICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhLCB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmE7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgfVxufTtcblxudmFyIGNhdG11bGxSb21DbG9zZWQgPSAoZnVuY3Rpb24gY3VzdG9tKGFscGhhKSB7XG5cbiAgZnVuY3Rpb24gY2F0bXVsbFJvbSQkMShjb250ZXh0KSB7XG4gICAgcmV0dXJuIGFscGhhID8gbmV3IENhdG11bGxSb21DbG9zZWQoY29udGV4dCwgYWxwaGEpIDogbmV3IENhcmRpbmFsQ2xvc2VkKGNvbnRleHQsIDApO1xuICB9XG5cbiAgY2F0bXVsbFJvbSQkMS5hbHBoYSA9IGZ1bmN0aW9uKGFscGhhKSB7XG4gICAgcmV0dXJuIGN1c3RvbSgrYWxwaGEpO1xuICB9O1xuXG4gIHJldHVybiBjYXRtdWxsUm9tJCQxO1xufSkoMC41KTtcblxuZnVuY3Rpb24gQ2F0bXVsbFJvbU9wZW4oY29udGV4dCwgYWxwaGEpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuX2FscGhhID0gYWxwaGE7XG59XG5cbkNhdG11bGxSb21PcGVuLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IE5hTjtcbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2EgPVxuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYSA9XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMykpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuXG4gICAgaWYgKHRoaXMuX3BvaW50KSB7XG4gICAgICB2YXIgeDIzID0gdGhpcy5feDIgLSB4LFxuICAgICAgICAgIHkyMyA9IHRoaXMuX3kyIC0geTtcbiAgICAgIHRoaXMuX2wyM19hID0gTWF0aC5zcXJ0KHRoaXMuX2wyM18yYSA9IE1hdGgucG93KHgyMyAqIHgyMyArIHkyMyAqIHkyMywgdGhpcy5fYWxwaGEpKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gyLCB0aGlzLl95MikgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94MiwgdGhpcy5feTIpOyBicmVhaztcbiAgICAgIGNhc2UgMzogdGhpcy5fcG9pbnQgPSA0OyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiBwb2ludCQ0KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hLCB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hO1xuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSwgdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhO1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbnZhciBjYXRtdWxsUm9tT3BlbiA9IChmdW5jdGlvbiBjdXN0b20oYWxwaGEpIHtcblxuICBmdW5jdGlvbiBjYXRtdWxsUm9tJCQxKGNvbnRleHQpIHtcbiAgICByZXR1cm4gYWxwaGEgPyBuZXcgQ2F0bXVsbFJvbU9wZW4oY29udGV4dCwgYWxwaGEpIDogbmV3IENhcmRpbmFsT3Blbihjb250ZXh0LCAwKTtcbiAgfVxuXG4gIGNhdG11bGxSb20kJDEuYWxwaGEgPSBmdW5jdGlvbihhbHBoYSkge1xuICAgIHJldHVybiBjdXN0b20oK2FscGhhKTtcbiAgfTtcblxuICByZXR1cm4gY2F0bXVsbFJvbSQkMTtcbn0pKDAuNSk7XG5cbmZ1bmN0aW9uIExpbmVhckNsb3NlZChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5MaW5lYXJDbG9zZWQucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IG5vb3AkMyxcbiAgYXJlYUVuZDogbm9vcCQzLFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX3BvaW50KSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIGlmICh0aGlzLl9wb2ludCkgdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSk7XG4gICAgZWxzZSB0aGlzLl9wb2ludCA9IDEsIHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBsaW5lYXJDbG9zZWQoY29udGV4dCkge1xuICByZXR1cm4gbmV3IExpbmVhckNsb3NlZChjb250ZXh0KTtcbn1cblxuZnVuY3Rpb24gc2lnbiQxKHgpIHtcbiAgcmV0dXJuIHggPCAwID8gLTEgOiAxO1xufVxuXG4vLyBDYWxjdWxhdGUgdGhlIHNsb3BlcyBvZiB0aGUgdGFuZ2VudHMgKEhlcm1pdGUtdHlwZSBpbnRlcnBvbGF0aW9uKSBiYXNlZCBvblxuLy8gdGhlIGZvbGxvd2luZyBwYXBlcjogU3RlZmZlbiwgTS4gMTk5MC4gQSBTaW1wbGUgTWV0aG9kIGZvciBNb25vdG9uaWNcbi8vIEludGVycG9sYXRpb24gaW4gT25lIERpbWVuc2lvbi4gQXN0cm9ub215IGFuZCBBc3Ryb3BoeXNpY3MsIFZvbC4gMjM5LCBOTy5cbi8vIE5PVihJSSksIFAuIDQ0MywgMTk5MC5cbmZ1bmN0aW9uIHNsb3BlMyh0aGF0LCB4MiwgeTIpIHtcbiAgdmFyIGgwID0gdGhhdC5feDEgLSB0aGF0Ll94MCxcbiAgICAgIGgxID0geDIgLSB0aGF0Ll94MSxcbiAgICAgIHMwID0gKHRoYXQuX3kxIC0gdGhhdC5feTApIC8gKGgwIHx8IGgxIDwgMCAmJiAtMCksXG4gICAgICBzMSA9ICh5MiAtIHRoYXQuX3kxKSAvIChoMSB8fCBoMCA8IDAgJiYgLTApLFxuICAgICAgcCA9IChzMCAqIGgxICsgczEgKiBoMCkgLyAoaDAgKyBoMSk7XG4gIHJldHVybiAoc2lnbiQxKHMwKSArIHNpZ24kMShzMSkpICogTWF0aC5taW4oTWF0aC5hYnMoczApLCBNYXRoLmFicyhzMSksIDAuNSAqIE1hdGguYWJzKHApKSB8fCAwO1xufVxuXG4vLyBDYWxjdWxhdGUgYSBvbmUtc2lkZWQgc2xvcGUuXG5mdW5jdGlvbiBzbG9wZTIodGhhdCwgdCkge1xuICB2YXIgaCA9IHRoYXQuX3gxIC0gdGhhdC5feDA7XG4gIHJldHVybiBoID8gKDMgKiAodGhhdC5feTEgLSB0aGF0Ll95MCkgLyBoIC0gdCkgLyAyIDogdDtcbn1cblxuLy8gQWNjb3JkaW5nIHRvIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0N1YmljX0hlcm1pdGVfc3BsaW5lI1JlcHJlc2VudGF0aW9uc1xuLy8gXCJ5b3UgY2FuIGV4cHJlc3MgY3ViaWMgSGVybWl0ZSBpbnRlcnBvbGF0aW9uIGluIHRlcm1zIG9mIGN1YmljIELDqXppZXIgY3VydmVzXG4vLyB3aXRoIHJlc3BlY3QgdG8gdGhlIGZvdXIgdmFsdWVzIHAwLCBwMCArIG0wIC8gMywgcDEgLSBtMSAvIDMsIHAxXCIuXG5mdW5jdGlvbiBwb2ludCQ1KHRoYXQsIHQwLCB0MSkge1xuICB2YXIgeDAgPSB0aGF0Ll94MCxcbiAgICAgIHkwID0gdGhhdC5feTAsXG4gICAgICB4MSA9IHRoYXQuX3gxLFxuICAgICAgeTEgPSB0aGF0Ll95MSxcbiAgICAgIGR4ID0gKHgxIC0geDApIC8gMztcbiAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHgwICsgZHgsIHkwICsgZHggKiB0MCwgeDEgLSBkeCwgeTEgLSBkeCAqIHQxLCB4MSwgeTEpO1xufVxuXG5mdW5jdGlvbiBNb25vdG9uZVgoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTW9ub3RvbmVYLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID1cbiAgICB0aGlzLl90MCA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMjogdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDEsIHRoaXMuX3kxKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHBvaW50JDUodGhpcywgdGhpcy5fdDAsIHNsb3BlMih0aGlzLCB0aGlzLl90MCkpOyBicmVhaztcbiAgICB9XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB2YXIgdDEgPSBOYU47XG5cbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBpZiAoeCA9PT0gdGhpcy5feDEgJiYgeSA9PT0gdGhpcy5feTEpIHJldHVybjsgLy8gSWdub3JlIGNvaW5jaWRlbnQgcG9pbnRzLlxuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgcG9pbnQkNSh0aGlzLCBzbG9wZTIodGhpcywgdDEgPSBzbG9wZTModGhpcywgeCwgeSkpLCB0MSk7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogcG9pbnQkNSh0aGlzLCB0aGlzLl90MCwgdDEgPSBzbG9wZTModGhpcywgeCwgeSkpOyBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICAgIHRoaXMuX3QwID0gdDE7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIE1vbm90b25lWShjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBuZXcgUmVmbGVjdENvbnRleHQoY29udGV4dCk7XG59XG5cbihNb25vdG9uZVkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShNb25vdG9uZVgucHJvdG90eXBlKSkucG9pbnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gIE1vbm90b25lWC5wcm90b3R5cGUucG9pbnQuY2FsbCh0aGlzLCB5LCB4KTtcbn07XG5cbmZ1bmN0aW9uIFJlZmxlY3RDb250ZXh0KGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cblJlZmxlY3RDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgbW92ZVRvOiBmdW5jdGlvbih4LCB5KSB7IHRoaXMuX2NvbnRleHQubW92ZVRvKHksIHgpOyB9LFxuICBjbG9zZVBhdGg6IGZ1bmN0aW9uKCkgeyB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpOyB9LFxuICBsaW5lVG86IGZ1bmN0aW9uKHgsIHkpIHsgdGhpcy5fY29udGV4dC5saW5lVG8oeSwgeCk7IH0sXG4gIGJlemllckN1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCB4LCB5KSB7IHRoaXMuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyh5MSwgeDEsIHkyLCB4MiwgeSwgeCk7IH1cbn07XG5cbmZ1bmN0aW9uIG1vbm90b25lWChjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTW9ub3RvbmVYKGNvbnRleHQpO1xufVxuXG5mdW5jdGlvbiBtb25vdG9uZVkoY29udGV4dCkge1xuICByZXR1cm4gbmV3IE1vbm90b25lWShjb250ZXh0KTtcbn1cblxuZnVuY3Rpb24gTmF0dXJhbChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5OYXR1cmFsLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94ID0gW107XG4gICAgdGhpcy5feSA9IFtdO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgeCA9IHRoaXMuX3gsXG4gICAgICAgIHkgPSB0aGlzLl95LFxuICAgICAgICBuID0geC5sZW5ndGg7XG5cbiAgICBpZiAobikge1xuICAgICAgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHhbMF0sIHlbMF0pIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeFswXSwgeVswXSk7XG4gICAgICBpZiAobiA9PT0gMikge1xuICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4WzFdLCB5WzFdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBweCA9IGNvbnRyb2xQb2ludHMoeCksXG4gICAgICAgICAgICBweSA9IGNvbnRyb2xQb2ludHMoeSk7XG4gICAgICAgIGZvciAodmFyIGkwID0gMCwgaTEgPSAxOyBpMSA8IG47ICsraTAsICsraTEpIHtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmJlemllckN1cnZlVG8ocHhbMF1baTBdLCBweVswXVtpMF0sIHB4WzFdW2kwXSwgcHlbMV1baTBdLCB4W2kxXSwgeVtpMV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgbiA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICAgIHRoaXMuX3ggPSB0aGlzLl95ID0gbnVsbDtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLl94LnB1c2goK3gpO1xuICAgIHRoaXMuX3kucHVzaCgreSk7XG4gIH1cbn07XG5cbi8vIFNlZSBodHRwczovL3d3dy5wYXJ0aWNsZWluY2VsbC5jb20vMjAxMi9iZXppZXItc3BsaW5lcy8gZm9yIGRlcml2YXRpb24uXG5mdW5jdGlvbiBjb250cm9sUG9pbnRzKHgpIHtcbiAgdmFyIGksXG4gICAgICBuID0geC5sZW5ndGggLSAxLFxuICAgICAgbSxcbiAgICAgIGEgPSBuZXcgQXJyYXkobiksXG4gICAgICBiID0gbmV3IEFycmF5KG4pLFxuICAgICAgciA9IG5ldyBBcnJheShuKTtcbiAgYVswXSA9IDAsIGJbMF0gPSAyLCByWzBdID0geFswXSArIDIgKiB4WzFdO1xuICBmb3IgKGkgPSAxOyBpIDwgbiAtIDE7ICsraSkgYVtpXSA9IDEsIGJbaV0gPSA0LCByW2ldID0gNCAqIHhbaV0gKyAyICogeFtpICsgMV07XG4gIGFbbiAtIDFdID0gMiwgYltuIC0gMV0gPSA3LCByW24gLSAxXSA9IDggKiB4W24gLSAxXSArIHhbbl07XG4gIGZvciAoaSA9IDE7IGkgPCBuOyArK2kpIG0gPSBhW2ldIC8gYltpIC0gMV0sIGJbaV0gLT0gbSwgcltpXSAtPSBtICogcltpIC0gMV07XG4gIGFbbiAtIDFdID0gcltuIC0gMV0gLyBiW24gLSAxXTtcbiAgZm9yIChpID0gbiAtIDI7IGkgPj0gMDsgLS1pKSBhW2ldID0gKHJbaV0gLSBhW2kgKyAxXSkgLyBiW2ldO1xuICBiW24gLSAxXSA9ICh4W25dICsgYVtuIC0gMV0pIC8gMjtcbiAgZm9yIChpID0gMDsgaSA8IG4gLSAxOyArK2kpIGJbaV0gPSAyICogeFtpICsgMV0gLSBhW2kgKyAxXTtcbiAgcmV0dXJuIFthLCBiXTtcbn1cblxuZnVuY3Rpb24gbmF0dXJhbChjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTmF0dXJhbChjb250ZXh0KTtcbn1cblxuZnVuY3Rpb24gU3RlcChjb250ZXh0LCB0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl90ID0gdDtcbn1cblxuU3RlcC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feCA9IHRoaXMuX3kgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAoMCA8IHRoaXMuX3QgJiYgdGhpcy5fdCA8IDEgJiYgdGhpcy5fcG9pbnQgPT09IDIpIHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gsIHRoaXMuX3kpO1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICBpZiAodGhpcy5fbGluZSA+PSAwKSB0aGlzLl90ID0gMSAtIHRoaXMuX3QsIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgaWYgKHRoaXMuX3QgPD0gMCkge1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gsIHkpO1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB4MSA9IHRoaXMuX3ggKiAoMSAtIHRoaXMuX3QpICsgeCAqIHRoaXMuX3Q7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oeDEsIHRoaXMuX3kpO1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHgxLCB5KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5feCA9IHgsIHRoaXMuX3kgPSB5O1xuICB9XG59O1xuXG5mdW5jdGlvbiBzdGVwKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBTdGVwKGNvbnRleHQsIDAuNSk7XG59XG5cbmZ1bmN0aW9uIHN0ZXBCZWZvcmUoY29udGV4dCkge1xuICByZXR1cm4gbmV3IFN0ZXAoY29udGV4dCwgMCk7XG59XG5cbmZ1bmN0aW9uIHN0ZXBBZnRlcihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgU3RlcChjb250ZXh0LCAxKTtcbn1cblxuZnVuY3Rpb24gbm9uZSQxKHNlcmllcywgb3JkZXIpIHtcbiAgaWYgKCEoKG4gPSBzZXJpZXMubGVuZ3RoKSA+IDEpKSByZXR1cm47XG4gIGZvciAodmFyIGkgPSAxLCBqLCBzMCwgczEgPSBzZXJpZXNbb3JkZXJbMF1dLCBuLCBtID0gczEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgczAgPSBzMSwgczEgPSBzZXJpZXNbb3JkZXJbaV1dO1xuICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICAgIHMxW2pdWzFdICs9IHMxW2pdWzBdID0gaXNOYU4oczBbal1bMV0pID8gczBbal1bMF0gOiBzMFtqXVsxXTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbm9uZSQyKHNlcmllcykge1xuICB2YXIgbiA9IHNlcmllcy5sZW5ndGgsIG8gPSBuZXcgQXJyYXkobik7XG4gIHdoaWxlICgtLW4gPj0gMCkgb1tuXSA9IG47XG4gIHJldHVybiBvO1xufVxuXG5mdW5jdGlvbiBzdGFja1ZhbHVlKGQsIGtleSkge1xuICByZXR1cm4gZFtrZXldO1xufVxuXG5mdW5jdGlvbiBzdGFjaygpIHtcbiAgdmFyIGtleXMgPSBjb25zdGFudCRiKFtdKSxcbiAgICAgIG9yZGVyID0gbm9uZSQyLFxuICAgICAgb2Zmc2V0ID0gbm9uZSQxLFxuICAgICAgdmFsdWUgPSBzdGFja1ZhbHVlO1xuXG4gIGZ1bmN0aW9uIHN0YWNrKGRhdGEpIHtcbiAgICB2YXIga3ogPSBrZXlzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIGksXG4gICAgICAgIG0gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgbiA9IGt6Lmxlbmd0aCxcbiAgICAgICAgc3ogPSBuZXcgQXJyYXkobiksXG4gICAgICAgIG96O1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgZm9yICh2YXIga2kgPSBreltpXSwgc2kgPSBzeltpXSA9IG5ldyBBcnJheShtKSwgaiA9IDAsIHNpajsgaiA8IG07ICsraikge1xuICAgICAgICBzaVtqXSA9IHNpaiA9IFswLCArdmFsdWUoZGF0YVtqXSwga2ksIGosIGRhdGEpXTtcbiAgICAgICAgc2lqLmRhdGEgPSBkYXRhW2pdO1xuICAgICAgfVxuICAgICAgc2kua2V5ID0ga2k7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMCwgb3ogPSBvcmRlcihzeik7IGkgPCBuOyArK2kpIHtcbiAgICAgIHN6W296W2ldXS5pbmRleCA9IGk7XG4gICAgfVxuXG4gICAgb2Zmc2V0KHN6LCBveik7XG4gICAgcmV0dXJuIHN6O1xuICB9XG5cbiAgc3RhY2sua2V5cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChrZXlzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCRiKHNsaWNlJDYuY2FsbChfKSksIHN0YWNrKSA6IGtleXM7XG4gIH07XG5cbiAgc3RhY2sudmFsdWUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodmFsdWUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JGIoK18pLCBzdGFjaykgOiB2YWx1ZTtcbiAgfTtcblxuICBzdGFjay5vcmRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChvcmRlciA9IF8gPT0gbnVsbCA/IG5vbmUkMiA6IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkYihzbGljZSQ2LmNhbGwoXykpLCBzdGFjaykgOiBvcmRlcjtcbiAgfTtcblxuICBzdGFjay5vZmZzZXQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAob2Zmc2V0ID0gXyA9PSBudWxsID8gbm9uZSQxIDogXywgc3RhY2spIDogb2Zmc2V0O1xuICB9O1xuXG4gIHJldHVybiBzdGFjaztcbn1cblxuZnVuY3Rpb24gZXhwYW5kKHNlcmllcywgb3JkZXIpIHtcbiAgaWYgKCEoKG4gPSBzZXJpZXMubGVuZ3RoKSA+IDApKSByZXR1cm47XG4gIGZvciAodmFyIGksIG4sIGogPSAwLCBtID0gc2VyaWVzWzBdLmxlbmd0aCwgeTsgaiA8IG07ICsraikge1xuICAgIGZvciAoeSA9IGkgPSAwOyBpIDwgbjsgKytpKSB5ICs9IHNlcmllc1tpXVtqXVsxXSB8fCAwO1xuICAgIGlmICh5KSBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBzZXJpZXNbaV1bal1bMV0gLz0geTtcbiAgfVxuICBub25lJDEoc2VyaWVzLCBvcmRlcik7XG59XG5cbmZ1bmN0aW9uIGRpdmVyZ2luZyQxKHNlcmllcywgb3JkZXIpIHtcbiAgaWYgKCEoKG4gPSBzZXJpZXMubGVuZ3RoKSA+IDEpKSByZXR1cm47XG4gIGZvciAodmFyIGksIGogPSAwLCBkLCBkeSwgeXAsIHluLCBuLCBtID0gc2VyaWVzW29yZGVyWzBdXS5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHlwID0geW4gPSAwLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChkeSA9IChkID0gc2VyaWVzW29yZGVyW2ldXVtqXSlbMV0gLSBkWzBdKSA+PSAwKSB7XG4gICAgICAgIGRbMF0gPSB5cCwgZFsxXSA9IHlwICs9IGR5O1xuICAgICAgfSBlbHNlIGlmIChkeSA8IDApIHtcbiAgICAgICAgZFsxXSA9IHluLCBkWzBdID0geW4gKz0gZHk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkWzBdID0geXA7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNpbGhvdWV0dGUoc2VyaWVzLCBvcmRlcikge1xuICBpZiAoISgobiA9IHNlcmllcy5sZW5ndGgpID4gMCkpIHJldHVybjtcbiAgZm9yICh2YXIgaiA9IDAsIHMwID0gc2VyaWVzW29yZGVyWzBdXSwgbiwgbSA9IHMwLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGkgPSAwLCB5ID0gMDsgaSA8IG47ICsraSkgeSArPSBzZXJpZXNbaV1bal1bMV0gfHwgMDtcbiAgICBzMFtqXVsxXSArPSBzMFtqXVswXSA9IC15IC8gMjtcbiAgfVxuICBub25lJDEoc2VyaWVzLCBvcmRlcik7XG59XG5cbmZ1bmN0aW9uIHdpZ2dsZShzZXJpZXMsIG9yZGVyKSB7XG4gIGlmICghKChuID0gc2VyaWVzLmxlbmd0aCkgPiAwKSB8fCAhKChtID0gKHMwID0gc2VyaWVzW29yZGVyWzBdXSkubGVuZ3RoKSA+IDApKSByZXR1cm47XG4gIGZvciAodmFyIHkgPSAwLCBqID0gMSwgczAsIG0sIG47IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBpID0gMCwgczEgPSAwLCBzMiA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhciBzaSA9IHNlcmllc1tvcmRlcltpXV0sXG4gICAgICAgICAgc2lqMCA9IHNpW2pdWzFdIHx8IDAsXG4gICAgICAgICAgc2lqMSA9IHNpW2ogLSAxXVsxXSB8fCAwLFxuICAgICAgICAgIHMzID0gKHNpajAgLSBzaWoxKSAvIDI7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IGk7ICsraykge1xuICAgICAgICB2YXIgc2sgPSBzZXJpZXNbb3JkZXJba11dLFxuICAgICAgICAgICAgc2tqMCA9IHNrW2pdWzFdIHx8IDAsXG4gICAgICAgICAgICBza2oxID0gc2tbaiAtIDFdWzFdIHx8IDA7XG4gICAgICAgIHMzICs9IHNrajAgLSBza2oxO1xuICAgICAgfVxuICAgICAgczEgKz0gc2lqMCwgczIgKz0gczMgKiBzaWowO1xuICAgIH1cbiAgICBzMFtqIC0gMV1bMV0gKz0gczBbaiAtIDFdWzBdID0geTtcbiAgICBpZiAoczEpIHkgLT0gczIgLyBzMTtcbiAgfVxuICBzMFtqIC0gMV1bMV0gKz0gczBbaiAtIDFdWzBdID0geTtcbiAgbm9uZSQxKHNlcmllcywgb3JkZXIpO1xufVxuXG5mdW5jdGlvbiBhcHBlYXJhbmNlKHNlcmllcykge1xuICB2YXIgcGVha3MgPSBzZXJpZXMubWFwKHBlYWspO1xuICByZXR1cm4gbm9uZSQyKHNlcmllcykuc29ydChmdW5jdGlvbihhLCBiKSB7IHJldHVybiBwZWFrc1thXSAtIHBlYWtzW2JdOyB9KTtcbn1cblxuZnVuY3Rpb24gcGVhayhzZXJpZXMpIHtcbiAgdmFyIGkgPSAtMSwgaiA9IDAsIG4gPSBzZXJpZXMubGVuZ3RoLCB2aSwgdmogPSAtSW5maW5pdHk7XG4gIHdoaWxlICgrK2kgPCBuKSBpZiAoKHZpID0gK3Nlcmllc1tpXVsxXSkgPiB2aikgdmogPSB2aSwgaiA9IGk7XG4gIHJldHVybiBqO1xufVxuXG5mdW5jdGlvbiBhc2NlbmRpbmckMyhzZXJpZXMpIHtcbiAgdmFyIHN1bXMgPSBzZXJpZXMubWFwKHN1bSQyKTtcbiAgcmV0dXJuIG5vbmUkMihzZXJpZXMpLnNvcnQoZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gc3Vtc1thXSAtIHN1bXNbYl07IH0pO1xufVxuXG5mdW5jdGlvbiBzdW0kMihzZXJpZXMpIHtcbiAgdmFyIHMgPSAwLCBpID0gLTEsIG4gPSBzZXJpZXMubGVuZ3RoLCB2O1xuICB3aGlsZSAoKytpIDwgbikgaWYgKHYgPSArc2VyaWVzW2ldWzFdKSBzICs9IHY7XG4gIHJldHVybiBzO1xufVxuXG5mdW5jdGlvbiBkZXNjZW5kaW5nJDIoc2VyaWVzKSB7XG4gIHJldHVybiBhc2NlbmRpbmckMyhzZXJpZXMpLnJldmVyc2UoKTtcbn1cblxuZnVuY3Rpb24gaW5zaWRlT3V0KHNlcmllcykge1xuICB2YXIgbiA9IHNlcmllcy5sZW5ndGgsXG4gICAgICBpLFxuICAgICAgaixcbiAgICAgIHN1bXMgPSBzZXJpZXMubWFwKHN1bSQyKSxcbiAgICAgIG9yZGVyID0gYXBwZWFyYW5jZShzZXJpZXMpLFxuICAgICAgdG9wID0gMCxcbiAgICAgIGJvdHRvbSA9IDAsXG4gICAgICB0b3BzID0gW10sXG4gICAgICBib3R0b21zID0gW107XG5cbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgIGogPSBvcmRlcltpXTtcbiAgICBpZiAodG9wIDwgYm90dG9tKSB7XG4gICAgICB0b3AgKz0gc3Vtc1tqXTtcbiAgICAgIHRvcHMucHVzaChqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYm90dG9tICs9IHN1bXNbal07XG4gICAgICBib3R0b21zLnB1c2goaik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJvdHRvbXMucmV2ZXJzZSgpLmNvbmNhdCh0b3BzKTtcbn1cblxuZnVuY3Rpb24gcmV2ZXJzZShzZXJpZXMpIHtcbiAgcmV0dXJuIG5vbmUkMihzZXJpZXMpLnJldmVyc2UoKTtcbn1cblxuZnVuY3Rpb24gY29uc3RhbnQkYyh4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cblxuZnVuY3Rpb24geCQ0KGQpIHtcbiAgcmV0dXJuIGRbMF07XG59XG5cbmZ1bmN0aW9uIHkkNChkKSB7XG4gIHJldHVybiBkWzFdO1xufVxuXG5mdW5jdGlvbiBSZWRCbGFja1RyZWUoKSB7XG4gIHRoaXMuXyA9IG51bGw7IC8vIHJvb3Qgbm9kZVxufVxuXG5mdW5jdGlvbiBSZWRCbGFja05vZGUobm9kZSkge1xuICBub2RlLlUgPSAvLyBwYXJlbnQgbm9kZVxuICBub2RlLkMgPSAvLyBjb2xvciAtIHRydWUgZm9yIHJlZCwgZmFsc2UgZm9yIGJsYWNrXG4gIG5vZGUuTCA9IC8vIGxlZnQgbm9kZVxuICBub2RlLlIgPSAvLyByaWdodCBub2RlXG4gIG5vZGUuUCA9IC8vIHByZXZpb3VzIG5vZGVcbiAgbm9kZS5OID0gbnVsbDsgLy8gbmV4dCBub2RlXG59XG5cblJlZEJsYWNrVHJlZS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBSZWRCbGFja1RyZWUsXG5cbiAgaW5zZXJ0OiBmdW5jdGlvbihhZnRlciwgbm9kZSkge1xuICAgIHZhciBwYXJlbnQsIGdyYW5kcGEsIHVuY2xlO1xuXG4gICAgaWYgKGFmdGVyKSB7XG4gICAgICBub2RlLlAgPSBhZnRlcjtcbiAgICAgIG5vZGUuTiA9IGFmdGVyLk47XG4gICAgICBpZiAoYWZ0ZXIuTikgYWZ0ZXIuTi5QID0gbm9kZTtcbiAgICAgIGFmdGVyLk4gPSBub2RlO1xuICAgICAgaWYgKGFmdGVyLlIpIHtcbiAgICAgICAgYWZ0ZXIgPSBhZnRlci5SO1xuICAgICAgICB3aGlsZSAoYWZ0ZXIuTCkgYWZ0ZXIgPSBhZnRlci5MO1xuICAgICAgICBhZnRlci5MID0gbm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFmdGVyLlIgPSBub2RlO1xuICAgICAgfVxuICAgICAgcGFyZW50ID0gYWZ0ZXI7XG4gICAgfSBlbHNlIGlmICh0aGlzLl8pIHtcbiAgICAgIGFmdGVyID0gUmVkQmxhY2tGaXJzdCh0aGlzLl8pO1xuICAgICAgbm9kZS5QID0gbnVsbDtcbiAgICAgIG5vZGUuTiA9IGFmdGVyO1xuICAgICAgYWZ0ZXIuUCA9IGFmdGVyLkwgPSBub2RlO1xuICAgICAgcGFyZW50ID0gYWZ0ZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuUCA9IG5vZGUuTiA9IG51bGw7XG4gICAgICB0aGlzLl8gPSBub2RlO1xuICAgICAgcGFyZW50ID0gbnVsbDtcbiAgICB9XG4gICAgbm9kZS5MID0gbm9kZS5SID0gbnVsbDtcbiAgICBub2RlLlUgPSBwYXJlbnQ7XG4gICAgbm9kZS5DID0gdHJ1ZTtcblxuICAgIGFmdGVyID0gbm9kZTtcbiAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5DKSB7XG4gICAgICBncmFuZHBhID0gcGFyZW50LlU7XG4gICAgICBpZiAocGFyZW50ID09PSBncmFuZHBhLkwpIHtcbiAgICAgICAgdW5jbGUgPSBncmFuZHBhLlI7XG4gICAgICAgIGlmICh1bmNsZSAmJiB1bmNsZS5DKSB7XG4gICAgICAgICAgcGFyZW50LkMgPSB1bmNsZS5DID0gZmFsc2U7XG4gICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICBhZnRlciA9IGdyYW5kcGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGFmdGVyID09PSBwYXJlbnQuUikge1xuICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgICBhZnRlciA9IHBhcmVudDtcbiAgICAgICAgICAgIHBhcmVudCA9IGFmdGVyLlU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcmVudC5DID0gZmFsc2U7XG4gICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIGdyYW5kcGEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1bmNsZSA9IGdyYW5kcGEuTDtcbiAgICAgICAgaWYgKHVuY2xlICYmIHVuY2xlLkMpIHtcbiAgICAgICAgICBwYXJlbnQuQyA9IHVuY2xlLkMgPSBmYWxzZTtcbiAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgIGFmdGVyID0gZ3JhbmRwYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoYWZ0ZXIgPT09IHBhcmVudC5MKSB7XG4gICAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgICBhZnRlciA9IHBhcmVudDtcbiAgICAgICAgICAgIHBhcmVudCA9IGFmdGVyLlU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcmVudC5DID0gZmFsc2U7XG4gICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgZ3JhbmRwYSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IGFmdGVyLlU7XG4gICAgfVxuICAgIHRoaXMuXy5DID0gZmFsc2U7XG4gIH0sXG5cbiAgcmVtb3ZlOiBmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUuTikgbm9kZS5OLlAgPSBub2RlLlA7XG4gICAgaWYgKG5vZGUuUCkgbm9kZS5QLk4gPSBub2RlLk47XG4gICAgbm9kZS5OID0gbm9kZS5QID0gbnVsbDtcblxuICAgIHZhciBwYXJlbnQgPSBub2RlLlUsXG4gICAgICAgIHNpYmxpbmcsXG4gICAgICAgIGxlZnQgPSBub2RlLkwsXG4gICAgICAgIHJpZ2h0ID0gbm9kZS5SLFxuICAgICAgICBuZXh0LFxuICAgICAgICByZWQ7XG5cbiAgICBpZiAoIWxlZnQpIG5leHQgPSByaWdodDtcbiAgICBlbHNlIGlmICghcmlnaHQpIG5leHQgPSBsZWZ0O1xuICAgIGVsc2UgbmV4dCA9IFJlZEJsYWNrRmlyc3QocmlnaHQpO1xuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC5MID09PSBub2RlKSBwYXJlbnQuTCA9IG5leHQ7XG4gICAgICBlbHNlIHBhcmVudC5SID0gbmV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fID0gbmV4dDtcbiAgICB9XG5cbiAgICBpZiAobGVmdCAmJiByaWdodCkge1xuICAgICAgcmVkID0gbmV4dC5DO1xuICAgICAgbmV4dC5DID0gbm9kZS5DO1xuICAgICAgbmV4dC5MID0gbGVmdDtcbiAgICAgIGxlZnQuVSA9IG5leHQ7XG4gICAgICBpZiAobmV4dCAhPT0gcmlnaHQpIHtcbiAgICAgICAgcGFyZW50ID0gbmV4dC5VO1xuICAgICAgICBuZXh0LlUgPSBub2RlLlU7XG4gICAgICAgIG5vZGUgPSBuZXh0LlI7XG4gICAgICAgIHBhcmVudC5MID0gbm9kZTtcbiAgICAgICAgbmV4dC5SID0gcmlnaHQ7XG4gICAgICAgIHJpZ2h0LlUgPSBuZXh0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dC5VID0gcGFyZW50O1xuICAgICAgICBwYXJlbnQgPSBuZXh0O1xuICAgICAgICBub2RlID0gbmV4dC5SO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZWQgPSBub2RlLkM7XG4gICAgICBub2RlID0gbmV4dDtcbiAgICB9XG5cbiAgICBpZiAobm9kZSkgbm9kZS5VID0gcGFyZW50O1xuICAgIGlmIChyZWQpIHJldHVybjtcbiAgICBpZiAobm9kZSAmJiBub2RlLkMpIHsgbm9kZS5DID0gZmFsc2U7IHJldHVybjsgfVxuXG4gICAgZG8ge1xuICAgICAgaWYgKG5vZGUgPT09IHRoaXMuXykgYnJlYWs7XG4gICAgICBpZiAobm9kZSA9PT0gcGFyZW50LkwpIHtcbiAgICAgICAgc2libGluZyA9IHBhcmVudC5SO1xuICAgICAgICBpZiAoc2libGluZy5DKSB7XG4gICAgICAgICAgc2libGluZy5DID0gZmFsc2U7XG4gICAgICAgICAgcGFyZW50LkMgPSB0cnVlO1xuICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuUjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHNpYmxpbmcuTCAmJiBzaWJsaW5nLkwuQylcbiAgICAgICAgICAgIHx8IChzaWJsaW5nLlIgJiYgc2libGluZy5SLkMpKSB7XG4gICAgICAgICAgaWYgKCFzaWJsaW5nLlIgfHwgIXNpYmxpbmcuUi5DKSB7XG4gICAgICAgICAgICBzaWJsaW5nLkwuQyA9IGZhbHNlO1xuICAgICAgICAgICAgc2libGluZy5DID0gdHJ1ZTtcbiAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgc2libGluZyk7XG4gICAgICAgICAgICBzaWJsaW5nID0gcGFyZW50LlI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNpYmxpbmcuQyA9IHBhcmVudC5DO1xuICAgICAgICAgIHBhcmVudC5DID0gc2libGluZy5SLkMgPSBmYWxzZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICBub2RlID0gdGhpcy5fO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaWJsaW5nID0gcGFyZW50Lkw7XG4gICAgICAgIGlmIChzaWJsaW5nLkMpIHtcbiAgICAgICAgICBzaWJsaW5nLkMgPSBmYWxzZTtcbiAgICAgICAgICBwYXJlbnQuQyA9IHRydWU7XG4gICAgICAgICAgUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHNpYmxpbmcuTCAmJiBzaWJsaW5nLkwuQylcbiAgICAgICAgICB8fCAoc2libGluZy5SICYmIHNpYmxpbmcuUi5DKSkge1xuICAgICAgICAgIGlmICghc2libGluZy5MIHx8ICFzaWJsaW5nLkwuQykge1xuICAgICAgICAgICAgc2libGluZy5SLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIHNpYmxpbmcuQyA9IHRydWU7XG4gICAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgc2libGluZyk7XG4gICAgICAgICAgICBzaWJsaW5nID0gcGFyZW50Lkw7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNpYmxpbmcuQyA9IHBhcmVudC5DO1xuICAgICAgICAgIHBhcmVudC5DID0gc2libGluZy5MLkMgPSBmYWxzZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgbm9kZSA9IHRoaXMuXztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc2libGluZy5DID0gdHJ1ZTtcbiAgICAgIG5vZGUgPSBwYXJlbnQ7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQuVTtcbiAgICB9IHdoaWxlICghbm9kZS5DKTtcblxuICAgIGlmIChub2RlKSBub2RlLkMgPSBmYWxzZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gUmVkQmxhY2tSb3RhdGVMZWZ0KHRyZWUsIG5vZGUpIHtcbiAgdmFyIHAgPSBub2RlLFxuICAgICAgcSA9IG5vZGUuUixcbiAgICAgIHBhcmVudCA9IHAuVTtcblxuICBpZiAocGFyZW50KSB7XG4gICAgaWYgKHBhcmVudC5MID09PSBwKSBwYXJlbnQuTCA9IHE7XG4gICAgZWxzZSBwYXJlbnQuUiA9IHE7XG4gIH0gZWxzZSB7XG4gICAgdHJlZS5fID0gcTtcbiAgfVxuXG4gIHEuVSA9IHBhcmVudDtcbiAgcC5VID0gcTtcbiAgcC5SID0gcS5MO1xuICBpZiAocC5SKSBwLlIuVSA9IHA7XG4gIHEuTCA9IHA7XG59XG5cbmZ1bmN0aW9uIFJlZEJsYWNrUm90YXRlUmlnaHQodHJlZSwgbm9kZSkge1xuICB2YXIgcCA9IG5vZGUsXG4gICAgICBxID0gbm9kZS5MLFxuICAgICAgcGFyZW50ID0gcC5VO1xuXG4gIGlmIChwYXJlbnQpIHtcbiAgICBpZiAocGFyZW50LkwgPT09IHApIHBhcmVudC5MID0gcTtcbiAgICBlbHNlIHBhcmVudC5SID0gcTtcbiAgfSBlbHNlIHtcbiAgICB0cmVlLl8gPSBxO1xuICB9XG5cbiAgcS5VID0gcGFyZW50O1xuICBwLlUgPSBxO1xuICBwLkwgPSBxLlI7XG4gIGlmIChwLkwpIHAuTC5VID0gcDtcbiAgcS5SID0gcDtcbn1cblxuZnVuY3Rpb24gUmVkQmxhY2tGaXJzdChub2RlKSB7XG4gIHdoaWxlIChub2RlLkwpIG5vZGUgPSBub2RlLkw7XG4gIHJldHVybiBub2RlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVFZGdlKGxlZnQsIHJpZ2h0LCB2MCwgdjEpIHtcbiAgdmFyIGVkZ2UgPSBbbnVsbCwgbnVsbF0sXG4gICAgICBpbmRleCA9IGVkZ2VzLnB1c2goZWRnZSkgLSAxO1xuICBlZGdlLmxlZnQgPSBsZWZ0O1xuICBlZGdlLnJpZ2h0ID0gcmlnaHQ7XG4gIGlmICh2MCkgc2V0RWRnZUVuZChlZGdlLCBsZWZ0LCByaWdodCwgdjApO1xuICBpZiAodjEpIHNldEVkZ2VFbmQoZWRnZSwgcmlnaHQsIGxlZnQsIHYxKTtcbiAgY2VsbHNbbGVmdC5pbmRleF0uaGFsZmVkZ2VzLnB1c2goaW5kZXgpO1xuICBjZWxsc1tyaWdodC5pbmRleF0uaGFsZmVkZ2VzLnB1c2goaW5kZXgpO1xuICByZXR1cm4gZWRnZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQm9yZGVyRWRnZShsZWZ0LCB2MCwgdjEpIHtcbiAgdmFyIGVkZ2UgPSBbdjAsIHYxXTtcbiAgZWRnZS5sZWZ0ID0gbGVmdDtcbiAgcmV0dXJuIGVkZ2U7XG59XG5cbmZ1bmN0aW9uIHNldEVkZ2VFbmQoZWRnZSwgbGVmdCwgcmlnaHQsIHZlcnRleCkge1xuICBpZiAoIWVkZ2VbMF0gJiYgIWVkZ2VbMV0pIHtcbiAgICBlZGdlWzBdID0gdmVydGV4O1xuICAgIGVkZ2UubGVmdCA9IGxlZnQ7XG4gICAgZWRnZS5yaWdodCA9IHJpZ2h0O1xuICB9IGVsc2UgaWYgKGVkZ2UubGVmdCA9PT0gcmlnaHQpIHtcbiAgICBlZGdlWzFdID0gdmVydGV4O1xuICB9IGVsc2Uge1xuICAgIGVkZ2VbMF0gPSB2ZXJ0ZXg7XG4gIH1cbn1cblxuLy8gTGlhbmfigJNCYXJza3kgbGluZSBjbGlwcGluZy5cbmZ1bmN0aW9uIGNsaXBFZGdlKGVkZ2UsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBhID0gZWRnZVswXSxcbiAgICAgIGIgPSBlZGdlWzFdLFxuICAgICAgYXggPSBhWzBdLFxuICAgICAgYXkgPSBhWzFdLFxuICAgICAgYnggPSBiWzBdLFxuICAgICAgYnkgPSBiWzFdLFxuICAgICAgdDAgPSAwLFxuICAgICAgdDEgPSAxLFxuICAgICAgZHggPSBieCAtIGF4LFxuICAgICAgZHkgPSBieSAtIGF5LFxuICAgICAgcjtcblxuICByID0geDAgLSBheDtcbiAgaWYgKCFkeCAmJiByID4gMCkgcmV0dXJuO1xuICByIC89IGR4O1xuICBpZiAoZHggPCAwKSB7XG4gICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICB9XG5cbiAgciA9IHgxIC0gYXg7XG4gIGlmICghZHggJiYgciA8IDApIHJldHVybjtcbiAgciAvPSBkeDtcbiAgaWYgKGR4IDwgMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH0gZWxzZSBpZiAoZHggPiAwKSB7XG4gICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgfVxuXG4gIHIgPSB5MCAtIGF5O1xuICBpZiAoIWR5ICYmIHIgPiAwKSByZXR1cm47XG4gIHIgLz0gZHk7XG4gIGlmIChkeSA8IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9IGVsc2UgaWYgKGR5ID4gMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH1cblxuICByID0geTEgLSBheTtcbiAgaWYgKCFkeSAmJiByIDwgMCkgcmV0dXJuO1xuICByIC89IGR5O1xuICBpZiAoZHkgPCAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9XG5cbiAgaWYgKCEodDAgPiAwKSAmJiAhKHQxIDwgMSkpIHJldHVybiB0cnVlOyAvLyBUT0RPIEJldHRlciBjaGVjaz9cblxuICBpZiAodDAgPiAwKSBlZGdlWzBdID0gW2F4ICsgdDAgKiBkeCwgYXkgKyB0MCAqIGR5XTtcbiAgaWYgKHQxIDwgMSkgZWRnZVsxXSA9IFtheCArIHQxICogZHgsIGF5ICsgdDEgKiBkeV07XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjb25uZWN0RWRnZShlZGdlLCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgdjEgPSBlZGdlWzFdO1xuICBpZiAodjEpIHJldHVybiB0cnVlO1xuXG4gIHZhciB2MCA9IGVkZ2VbMF0sXG4gICAgICBsZWZ0ID0gZWRnZS5sZWZ0LFxuICAgICAgcmlnaHQgPSBlZGdlLnJpZ2h0LFxuICAgICAgbHggPSBsZWZ0WzBdLFxuICAgICAgbHkgPSBsZWZ0WzFdLFxuICAgICAgcnggPSByaWdodFswXSxcbiAgICAgIHJ5ID0gcmlnaHRbMV0sXG4gICAgICBmeCA9IChseCArIHJ4KSAvIDIsXG4gICAgICBmeSA9IChseSArIHJ5KSAvIDIsXG4gICAgICBmbSxcbiAgICAgIGZiO1xuXG4gIGlmIChyeSA9PT0gbHkpIHtcbiAgICBpZiAoZnggPCB4MCB8fCBmeCA+PSB4MSkgcmV0dXJuO1xuICAgIGlmIChseCA+IHJ4KSB7XG4gICAgICBpZiAoIXYwKSB2MCA9IFtmeCwgeTBdO1xuICAgICAgZWxzZSBpZiAodjBbMV0gPj0geTEpIHJldHVybjtcbiAgICAgIHYxID0gW2Z4LCB5MV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghdjApIHYwID0gW2Z4LCB5MV07XG4gICAgICBlbHNlIGlmICh2MFsxXSA8IHkwKSByZXR1cm47XG4gICAgICB2MSA9IFtmeCwgeTBdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmbSA9IChseCAtIHJ4KSAvIChyeSAtIGx5KTtcbiAgICBmYiA9IGZ5IC0gZm0gKiBmeDtcbiAgICBpZiAoZm0gPCAtMSB8fCBmbSA+IDEpIHtcbiAgICAgIGlmIChseCA+IHJ4KSB7XG4gICAgICAgIGlmICghdjApIHYwID0gWyh5MCAtIGZiKSAvIGZtLCB5MF07XG4gICAgICAgIGVsc2UgaWYgKHYwWzFdID49IHkxKSByZXR1cm47XG4gICAgICAgIHYxID0gWyh5MSAtIGZiKSAvIGZtLCB5MV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIXYwKSB2MCA9IFsoeTEgLSBmYikgLyBmbSwgeTFdO1xuICAgICAgICBlbHNlIGlmICh2MFsxXSA8IHkwKSByZXR1cm47XG4gICAgICAgIHYxID0gWyh5MCAtIGZiKSAvIGZtLCB5MF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChseSA8IHJ5KSB7XG4gICAgICAgIGlmICghdjApIHYwID0gW3gwLCBmbSAqIHgwICsgZmJdO1xuICAgICAgICBlbHNlIGlmICh2MFswXSA+PSB4MSkgcmV0dXJuO1xuICAgICAgICB2MSA9IFt4MSwgZm0gKiB4MSArIGZiXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdjApIHYwID0gW3gxLCBmbSAqIHgxICsgZmJdO1xuICAgICAgICBlbHNlIGlmICh2MFswXSA8IHgwKSByZXR1cm47XG4gICAgICAgIHYxID0gW3gwLCBmbSAqIHgwICsgZmJdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVkZ2VbMF0gPSB2MDtcbiAgZWRnZVsxXSA9IHYxO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY2xpcEVkZ2VzKHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBpID0gZWRnZXMubGVuZ3RoLFxuICAgICAgZWRnZTtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKCFjb25uZWN0RWRnZShlZGdlID0gZWRnZXNbaV0sIHgwLCB5MCwgeDEsIHkxKVxuICAgICAgICB8fCAhY2xpcEVkZ2UoZWRnZSwgeDAsIHkwLCB4MSwgeTEpXG4gICAgICAgIHx8ICEoTWF0aC5hYnMoZWRnZVswXVswXSAtIGVkZ2VbMV1bMF0pID4gZXBzaWxvbiQ0XG4gICAgICAgICAgICB8fCBNYXRoLmFicyhlZGdlWzBdWzFdIC0gZWRnZVsxXVsxXSkgPiBlcHNpbG9uJDQpKSB7XG4gICAgICBkZWxldGUgZWRnZXNbaV07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNlbGwoc2l0ZSkge1xuICByZXR1cm4gY2VsbHNbc2l0ZS5pbmRleF0gPSB7XG4gICAgc2l0ZTogc2l0ZSxcbiAgICBoYWxmZWRnZXM6IFtdXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNlbGxIYWxmZWRnZUFuZ2xlKGNlbGwsIGVkZ2UpIHtcbiAgdmFyIHNpdGUgPSBjZWxsLnNpdGUsXG4gICAgICB2YSA9IGVkZ2UubGVmdCxcbiAgICAgIHZiID0gZWRnZS5yaWdodDtcbiAgaWYgKHNpdGUgPT09IHZiKSB2YiA9IHZhLCB2YSA9IHNpdGU7XG4gIGlmICh2YikgcmV0dXJuIE1hdGguYXRhbjIodmJbMV0gLSB2YVsxXSwgdmJbMF0gLSB2YVswXSk7XG4gIGlmIChzaXRlID09PSB2YSkgdmEgPSBlZGdlWzFdLCB2YiA9IGVkZ2VbMF07XG4gIGVsc2UgdmEgPSBlZGdlWzBdLCB2YiA9IGVkZ2VbMV07XG4gIHJldHVybiBNYXRoLmF0YW4yKHZhWzBdIC0gdmJbMF0sIHZiWzFdIC0gdmFbMV0pO1xufVxuXG5mdW5jdGlvbiBjZWxsSGFsZmVkZ2VTdGFydChjZWxsLCBlZGdlKSB7XG4gIHJldHVybiBlZGdlWysoZWRnZS5sZWZ0ICE9PSBjZWxsLnNpdGUpXTtcbn1cblxuZnVuY3Rpb24gY2VsbEhhbGZlZGdlRW5kKGNlbGwsIGVkZ2UpIHtcbiAgcmV0dXJuIGVkZ2VbKyhlZGdlLmxlZnQgPT09IGNlbGwuc2l0ZSldO1xufVxuXG5mdW5jdGlvbiBzb3J0Q2VsbEhhbGZlZGdlcygpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBjZWxscy5sZW5ndGgsIGNlbGwsIGhhbGZlZGdlcywgaiwgbTsgaSA8IG47ICsraSkge1xuICAgIGlmICgoY2VsbCA9IGNlbGxzW2ldKSAmJiAobSA9IChoYWxmZWRnZXMgPSBjZWxsLmhhbGZlZGdlcykubGVuZ3RoKSkge1xuICAgICAgdmFyIGluZGV4ID0gbmV3IEFycmF5KG0pLFxuICAgICAgICAgIGFycmF5ID0gbmV3IEFycmF5KG0pO1xuICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikgaW5kZXhbal0gPSBqLCBhcnJheVtqXSA9IGNlbGxIYWxmZWRnZUFuZ2xlKGNlbGwsIGVkZ2VzW2hhbGZlZGdlc1tqXV0pO1xuICAgICAgaW5kZXguc29ydChmdW5jdGlvbihpLCBqKSB7IHJldHVybiBhcnJheVtqXSAtIGFycmF5W2ldOyB9KTtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIGFycmF5W2pdID0gaGFsZmVkZ2VzW2luZGV4W2pdXTtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIGhhbGZlZGdlc1tqXSA9IGFycmF5W2pdO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjbGlwQ2VsbHMoeDAsIHkwLCB4MSwgeTEpIHtcbiAgdmFyIG5DZWxscyA9IGNlbGxzLmxlbmd0aCxcbiAgICAgIGlDZWxsLFxuICAgICAgY2VsbCxcbiAgICAgIHNpdGUsXG4gICAgICBpSGFsZmVkZ2UsXG4gICAgICBoYWxmZWRnZXMsXG4gICAgICBuSGFsZmVkZ2VzLFxuICAgICAgc3RhcnQsXG4gICAgICBzdGFydFgsXG4gICAgICBzdGFydFksXG4gICAgICBlbmQsXG4gICAgICBlbmRYLFxuICAgICAgZW5kWSxcbiAgICAgIGNvdmVyID0gdHJ1ZTtcblxuICBmb3IgKGlDZWxsID0gMDsgaUNlbGwgPCBuQ2VsbHM7ICsraUNlbGwpIHtcbiAgICBpZiAoY2VsbCA9IGNlbGxzW2lDZWxsXSkge1xuICAgICAgc2l0ZSA9IGNlbGwuc2l0ZTtcbiAgICAgIGhhbGZlZGdlcyA9IGNlbGwuaGFsZmVkZ2VzO1xuICAgICAgaUhhbGZlZGdlID0gaGFsZmVkZ2VzLmxlbmd0aDtcblxuICAgICAgLy8gUmVtb3ZlIGFueSBkYW5nbGluZyBjbGlwcGVkIGVkZ2VzLlxuICAgICAgd2hpbGUgKGlIYWxmZWRnZS0tKSB7XG4gICAgICAgIGlmICghZWRnZXNbaGFsZmVkZ2VzW2lIYWxmZWRnZV1dKSB7XG4gICAgICAgICAgaGFsZmVkZ2VzLnNwbGljZShpSGFsZmVkZ2UsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEluc2VydCBhbnkgYm9yZGVyIGVkZ2VzIGFzIG5lY2Vzc2FyeS5cbiAgICAgIGlIYWxmZWRnZSA9IDAsIG5IYWxmZWRnZXMgPSBoYWxmZWRnZXMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGlIYWxmZWRnZSA8IG5IYWxmZWRnZXMpIHtcbiAgICAgICAgZW5kID0gY2VsbEhhbGZlZGdlRW5kKGNlbGwsIGVkZ2VzW2hhbGZlZGdlc1tpSGFsZmVkZ2VdXSksIGVuZFggPSBlbmRbMF0sIGVuZFkgPSBlbmRbMV07XG4gICAgICAgIHN0YXJ0ID0gY2VsbEhhbGZlZGdlU3RhcnQoY2VsbCwgZWRnZXNbaGFsZmVkZ2VzWysraUhhbGZlZGdlICUgbkhhbGZlZGdlc11dKSwgc3RhcnRYID0gc3RhcnRbMF0sIHN0YXJ0WSA9IHN0YXJ0WzFdO1xuICAgICAgICBpZiAoTWF0aC5hYnMoZW5kWCAtIHN0YXJ0WCkgPiBlcHNpbG9uJDQgfHwgTWF0aC5hYnMoZW5kWSAtIHN0YXJ0WSkgPiBlcHNpbG9uJDQpIHtcbiAgICAgICAgICBoYWxmZWRnZXMuc3BsaWNlKGlIYWxmZWRnZSwgMCwgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUsIGVuZCxcbiAgICAgICAgICAgICAgTWF0aC5hYnMoZW5kWCAtIHgwKSA8IGVwc2lsb24kNCAmJiB5MSAtIGVuZFkgPiBlcHNpbG9uJDQgPyBbeDAsIE1hdGguYWJzKHN0YXJ0WCAtIHgwKSA8IGVwc2lsb24kNCA/IHN0YXJ0WSA6IHkxXVxuICAgICAgICAgICAgICA6IE1hdGguYWJzKGVuZFkgLSB5MSkgPCBlcHNpbG9uJDQgJiYgeDEgLSBlbmRYID4gZXBzaWxvbiQ0ID8gW01hdGguYWJzKHN0YXJ0WSAtIHkxKSA8IGVwc2lsb24kNCA/IHN0YXJ0WCA6IHgxLCB5MV1cbiAgICAgICAgICAgICAgOiBNYXRoLmFicyhlbmRYIC0geDEpIDwgZXBzaWxvbiQ0ICYmIGVuZFkgLSB5MCA+IGVwc2lsb24kNCA/IFt4MSwgTWF0aC5hYnMoc3RhcnRYIC0geDEpIDwgZXBzaWxvbiQ0ID8gc3RhcnRZIDogeTBdXG4gICAgICAgICAgICAgIDogTWF0aC5hYnMoZW5kWSAtIHkwKSA8IGVwc2lsb24kNCAmJiBlbmRYIC0geDAgPiBlcHNpbG9uJDQgPyBbTWF0aC5hYnMoc3RhcnRZIC0geTApIDwgZXBzaWxvbiQ0ID8gc3RhcnRYIDogeDAsIHkwXVxuICAgICAgICAgICAgICA6IG51bGwpKSAtIDEpO1xuICAgICAgICAgICsrbkhhbGZlZGdlcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobkhhbGZlZGdlcykgY292ZXIgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvLyBJZiB0aGVyZSB3ZXJlbuKAmXQgYW55IGVkZ2VzLCBoYXZlIHRoZSBjbG9zZXN0IHNpdGUgY292ZXIgdGhlIGV4dGVudC5cbiAgLy8gSXQgZG9lc27igJl0IG1hdHRlciB3aGljaCBjb3JuZXIgb2YgdGhlIGV4dGVudCB3ZSBtZWFzdXJlIVxuICBpZiAoY292ZXIpIHtcbiAgICB2YXIgZHgsIGR5LCBkMiwgZGMgPSBJbmZpbml0eTtcblxuICAgIGZvciAoaUNlbGwgPSAwLCBjb3ZlciA9IG51bGw7IGlDZWxsIDwgbkNlbGxzOyArK2lDZWxsKSB7XG4gICAgICBpZiAoY2VsbCA9IGNlbGxzW2lDZWxsXSkge1xuICAgICAgICBzaXRlID0gY2VsbC5zaXRlO1xuICAgICAgICBkeCA9IHNpdGVbMF0gLSB4MDtcbiAgICAgICAgZHkgPSBzaXRlWzFdIC0geTA7XG4gICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgIGlmIChkMiA8IGRjKSBkYyA9IGQyLCBjb3ZlciA9IGNlbGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvdmVyKSB7XG4gICAgICB2YXIgdjAwID0gW3gwLCB5MF0sIHYwMSA9IFt4MCwgeTFdLCB2MTEgPSBbeDEsIHkxXSwgdjEwID0gW3gxLCB5MF07XG4gICAgICBjb3Zlci5oYWxmZWRnZXMucHVzaChcbiAgICAgICAgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUgPSBjb3Zlci5zaXRlLCB2MDAsIHYwMSkpIC0gMSxcbiAgICAgICAgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUsIHYwMSwgdjExKSkgLSAxLFxuICAgICAgICBlZGdlcy5wdXNoKGNyZWF0ZUJvcmRlckVkZ2Uoc2l0ZSwgdjExLCB2MTApKSAtIDEsXG4gICAgICAgIGVkZ2VzLnB1c2goY3JlYXRlQm9yZGVyRWRnZShzaXRlLCB2MTAsIHYwMCkpIC0gMVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvLyBMYXN0bHkgZGVsZXRlIGFueSBjZWxscyB3aXRoIG5vIGVkZ2VzOyB0aGVzZSB3ZXJlIGVudGlyZWx5IGNsaXBwZWQuXG4gIGZvciAoaUNlbGwgPSAwOyBpQ2VsbCA8IG5DZWxsczsgKytpQ2VsbCkge1xuICAgIGlmIChjZWxsID0gY2VsbHNbaUNlbGxdKSB7XG4gICAgICBpZiAoIWNlbGwuaGFsZmVkZ2VzLmxlbmd0aCkge1xuICAgICAgICBkZWxldGUgY2VsbHNbaUNlbGxdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgY2lyY2xlUG9vbCA9IFtdO1xuXG52YXIgZmlyc3RDaXJjbGU7XG5cbmZ1bmN0aW9uIENpcmNsZSgpIHtcbiAgUmVkQmxhY2tOb2RlKHRoaXMpO1xuICB0aGlzLnggPVxuICB0aGlzLnkgPVxuICB0aGlzLmFyYyA9XG4gIHRoaXMuc2l0ZSA9XG4gIHRoaXMuY3kgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBhdHRhY2hDaXJjbGUoYXJjKSB7XG4gIHZhciBsQXJjID0gYXJjLlAsXG4gICAgICByQXJjID0gYXJjLk47XG5cbiAgaWYgKCFsQXJjIHx8ICFyQXJjKSByZXR1cm47XG5cbiAgdmFyIGxTaXRlID0gbEFyYy5zaXRlLFxuICAgICAgY1NpdGUgPSBhcmMuc2l0ZSxcbiAgICAgIHJTaXRlID0gckFyYy5zaXRlO1xuXG4gIGlmIChsU2l0ZSA9PT0gclNpdGUpIHJldHVybjtcblxuICB2YXIgYnggPSBjU2l0ZVswXSxcbiAgICAgIGJ5ID0gY1NpdGVbMV0sXG4gICAgICBheCA9IGxTaXRlWzBdIC0gYngsXG4gICAgICBheSA9IGxTaXRlWzFdIC0gYnksXG4gICAgICBjeCA9IHJTaXRlWzBdIC0gYngsXG4gICAgICBjeSA9IHJTaXRlWzFdIC0gYnk7XG5cbiAgdmFyIGQgPSAyICogKGF4ICogY3kgLSBheSAqIGN4KTtcbiAgaWYgKGQgPj0gLWVwc2lsb24yJDIpIHJldHVybjtcblxuICB2YXIgaGEgPSBheCAqIGF4ICsgYXkgKiBheSxcbiAgICAgIGhjID0gY3ggKiBjeCArIGN5ICogY3ksXG4gICAgICB4ID0gKGN5ICogaGEgLSBheSAqIGhjKSAvIGQsXG4gICAgICB5ID0gKGF4ICogaGMgLSBjeCAqIGhhKSAvIGQ7XG5cbiAgdmFyIGNpcmNsZSA9IGNpcmNsZVBvb2wucG9wKCkgfHwgbmV3IENpcmNsZTtcbiAgY2lyY2xlLmFyYyA9IGFyYztcbiAgY2lyY2xlLnNpdGUgPSBjU2l0ZTtcbiAgY2lyY2xlLnggPSB4ICsgYng7XG4gIGNpcmNsZS55ID0gKGNpcmNsZS5jeSA9IHkgKyBieSkgKyBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7IC8vIHkgYm90dG9tXG5cbiAgYXJjLmNpcmNsZSA9IGNpcmNsZTtcblxuICB2YXIgYmVmb3JlID0gbnVsbCxcbiAgICAgIG5vZGUgPSBjaXJjbGVzLl87XG5cbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBpZiAoY2lyY2xlLnkgPCBub2RlLnkgfHwgKGNpcmNsZS55ID09PSBub2RlLnkgJiYgY2lyY2xlLnggPD0gbm9kZS54KSkge1xuICAgICAgaWYgKG5vZGUuTCkgbm9kZSA9IG5vZGUuTDtcbiAgICAgIGVsc2UgeyBiZWZvcmUgPSBub2RlLlA7IGJyZWFrOyB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChub2RlLlIpIG5vZGUgPSBub2RlLlI7XG4gICAgICBlbHNlIHsgYmVmb3JlID0gbm9kZTsgYnJlYWs7IH1cbiAgICB9XG4gIH1cblxuICBjaXJjbGVzLmluc2VydChiZWZvcmUsIGNpcmNsZSk7XG4gIGlmICghYmVmb3JlKSBmaXJzdENpcmNsZSA9IGNpcmNsZTtcbn1cblxuZnVuY3Rpb24gZGV0YWNoQ2lyY2xlKGFyYykge1xuICB2YXIgY2lyY2xlID0gYXJjLmNpcmNsZTtcbiAgaWYgKGNpcmNsZSkge1xuICAgIGlmICghY2lyY2xlLlApIGZpcnN0Q2lyY2xlID0gY2lyY2xlLk47XG4gICAgY2lyY2xlcy5yZW1vdmUoY2lyY2xlKTtcbiAgICBjaXJjbGVQb29sLnB1c2goY2lyY2xlKTtcbiAgICBSZWRCbGFja05vZGUoY2lyY2xlKTtcbiAgICBhcmMuY2lyY2xlID0gbnVsbDtcbiAgfVxufVxuXG52YXIgYmVhY2hQb29sID0gW107XG5cbmZ1bmN0aW9uIEJlYWNoKCkge1xuICBSZWRCbGFja05vZGUodGhpcyk7XG4gIHRoaXMuZWRnZSA9XG4gIHRoaXMuc2l0ZSA9XG4gIHRoaXMuY2lyY2xlID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQmVhY2goc2l0ZSkge1xuICB2YXIgYmVhY2ggPSBiZWFjaFBvb2wucG9wKCkgfHwgbmV3IEJlYWNoO1xuICBiZWFjaC5zaXRlID0gc2l0ZTtcbiAgcmV0dXJuIGJlYWNoO1xufVxuXG5mdW5jdGlvbiBkZXRhY2hCZWFjaChiZWFjaCkge1xuICBkZXRhY2hDaXJjbGUoYmVhY2gpO1xuICBiZWFjaGVzLnJlbW92ZShiZWFjaCk7XG4gIGJlYWNoUG9vbC5wdXNoKGJlYWNoKTtcbiAgUmVkQmxhY2tOb2RlKGJlYWNoKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQmVhY2goYmVhY2gpIHtcbiAgdmFyIGNpcmNsZSA9IGJlYWNoLmNpcmNsZSxcbiAgICAgIHggPSBjaXJjbGUueCxcbiAgICAgIHkgPSBjaXJjbGUuY3ksXG4gICAgICB2ZXJ0ZXggPSBbeCwgeV0sXG4gICAgICBwcmV2aW91cyA9IGJlYWNoLlAsXG4gICAgICBuZXh0ID0gYmVhY2guTixcbiAgICAgIGRpc2FwcGVhcmluZyA9IFtiZWFjaF07XG5cbiAgZGV0YWNoQmVhY2goYmVhY2gpO1xuXG4gIHZhciBsQXJjID0gcHJldmlvdXM7XG4gIHdoaWxlIChsQXJjLmNpcmNsZVxuICAgICAgJiYgTWF0aC5hYnMoeCAtIGxBcmMuY2lyY2xlLngpIDwgZXBzaWxvbiQ0XG4gICAgICAmJiBNYXRoLmFicyh5IC0gbEFyYy5jaXJjbGUuY3kpIDwgZXBzaWxvbiQ0KSB7XG4gICAgcHJldmlvdXMgPSBsQXJjLlA7XG4gICAgZGlzYXBwZWFyaW5nLnVuc2hpZnQobEFyYyk7XG4gICAgZGV0YWNoQmVhY2gobEFyYyk7XG4gICAgbEFyYyA9IHByZXZpb3VzO1xuICB9XG5cbiAgZGlzYXBwZWFyaW5nLnVuc2hpZnQobEFyYyk7XG4gIGRldGFjaENpcmNsZShsQXJjKTtcblxuICB2YXIgckFyYyA9IG5leHQ7XG4gIHdoaWxlIChyQXJjLmNpcmNsZVxuICAgICAgJiYgTWF0aC5hYnMoeCAtIHJBcmMuY2lyY2xlLngpIDwgZXBzaWxvbiQ0XG4gICAgICAmJiBNYXRoLmFicyh5IC0gckFyYy5jaXJjbGUuY3kpIDwgZXBzaWxvbiQ0KSB7XG4gICAgbmV4dCA9IHJBcmMuTjtcbiAgICBkaXNhcHBlYXJpbmcucHVzaChyQXJjKTtcbiAgICBkZXRhY2hCZWFjaChyQXJjKTtcbiAgICByQXJjID0gbmV4dDtcbiAgfVxuXG4gIGRpc2FwcGVhcmluZy5wdXNoKHJBcmMpO1xuICBkZXRhY2hDaXJjbGUockFyYyk7XG5cbiAgdmFyIG5BcmNzID0gZGlzYXBwZWFyaW5nLmxlbmd0aCxcbiAgICAgIGlBcmM7XG4gIGZvciAoaUFyYyA9IDE7IGlBcmMgPCBuQXJjczsgKytpQXJjKSB7XG4gICAgckFyYyA9IGRpc2FwcGVhcmluZ1tpQXJjXTtcbiAgICBsQXJjID0gZGlzYXBwZWFyaW5nW2lBcmMgLSAxXTtcbiAgICBzZXRFZGdlRW5kKHJBcmMuZWRnZSwgbEFyYy5zaXRlLCByQXJjLnNpdGUsIHZlcnRleCk7XG4gIH1cblxuICBsQXJjID0gZGlzYXBwZWFyaW5nWzBdO1xuICByQXJjID0gZGlzYXBwZWFyaW5nW25BcmNzIC0gMV07XG4gIHJBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobEFyYy5zaXRlLCByQXJjLnNpdGUsIG51bGwsIHZlcnRleCk7XG5cbiAgYXR0YWNoQ2lyY2xlKGxBcmMpO1xuICBhdHRhY2hDaXJjbGUockFyYyk7XG59XG5cbmZ1bmN0aW9uIGFkZEJlYWNoKHNpdGUpIHtcbiAgdmFyIHggPSBzaXRlWzBdLFxuICAgICAgZGlyZWN0cml4ID0gc2l0ZVsxXSxcbiAgICAgIGxBcmMsXG4gICAgICByQXJjLFxuICAgICAgZHhsLFxuICAgICAgZHhyLFxuICAgICAgbm9kZSA9IGJlYWNoZXMuXztcblxuICB3aGlsZSAobm9kZSkge1xuICAgIGR4bCA9IGxlZnRCcmVha1BvaW50KG5vZGUsIGRpcmVjdHJpeCkgLSB4O1xuICAgIGlmIChkeGwgPiBlcHNpbG9uJDQpIG5vZGUgPSBub2RlLkw7IGVsc2Uge1xuICAgICAgZHhyID0geCAtIHJpZ2h0QnJlYWtQb2ludChub2RlLCBkaXJlY3RyaXgpO1xuICAgICAgaWYgKGR4ciA+IGVwc2lsb24kNCkge1xuICAgICAgICBpZiAoIW5vZGUuUikge1xuICAgICAgICAgIGxBcmMgPSBub2RlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBub2RlLlI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZHhsID4gLWVwc2lsb24kNCkge1xuICAgICAgICAgIGxBcmMgPSBub2RlLlA7XG4gICAgICAgICAgckFyYyA9IG5vZGU7XG4gICAgICAgIH0gZWxzZSBpZiAoZHhyID4gLWVwc2lsb24kNCkge1xuICAgICAgICAgIGxBcmMgPSBub2RlO1xuICAgICAgICAgIHJBcmMgPSBub2RlLk47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbEFyYyA9IHJBcmMgPSBub2RlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZUNlbGwoc2l0ZSk7XG4gIHZhciBuZXdBcmMgPSBjcmVhdGVCZWFjaChzaXRlKTtcbiAgYmVhY2hlcy5pbnNlcnQobEFyYywgbmV3QXJjKTtcblxuICBpZiAoIWxBcmMgJiYgIXJBcmMpIHJldHVybjtcblxuICBpZiAobEFyYyA9PT0gckFyYykge1xuICAgIGRldGFjaENpcmNsZShsQXJjKTtcbiAgICByQXJjID0gY3JlYXRlQmVhY2gobEFyYy5zaXRlKTtcbiAgICBiZWFjaGVzLmluc2VydChuZXdBcmMsIHJBcmMpO1xuICAgIG5ld0FyYy5lZGdlID0gckFyYy5lZGdlID0gY3JlYXRlRWRnZShsQXJjLnNpdGUsIG5ld0FyYy5zaXRlKTtcbiAgICBhdHRhY2hDaXJjbGUobEFyYyk7XG4gICAgYXR0YWNoQ2lyY2xlKHJBcmMpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghckFyYykgeyAvLyAmJiBsQXJjXG4gICAgbmV3QXJjLmVkZ2UgPSBjcmVhdGVFZGdlKGxBcmMuc2l0ZSwgbmV3QXJjLnNpdGUpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGVsc2UgbEFyYyAhPT0gckFyY1xuICBkZXRhY2hDaXJjbGUobEFyYyk7XG4gIGRldGFjaENpcmNsZShyQXJjKTtcblxuICB2YXIgbFNpdGUgPSBsQXJjLnNpdGUsXG4gICAgICBheCA9IGxTaXRlWzBdLFxuICAgICAgYXkgPSBsU2l0ZVsxXSxcbiAgICAgIGJ4ID0gc2l0ZVswXSAtIGF4LFxuICAgICAgYnkgPSBzaXRlWzFdIC0gYXksXG4gICAgICByU2l0ZSA9IHJBcmMuc2l0ZSxcbiAgICAgIGN4ID0gclNpdGVbMF0gLSBheCxcbiAgICAgIGN5ID0gclNpdGVbMV0gLSBheSxcbiAgICAgIGQgPSAyICogKGJ4ICogY3kgLSBieSAqIGN4KSxcbiAgICAgIGhiID0gYnggKiBieCArIGJ5ICogYnksXG4gICAgICBoYyA9IGN4ICogY3ggKyBjeSAqIGN5LFxuICAgICAgdmVydGV4ID0gWyhjeSAqIGhiIC0gYnkgKiBoYykgLyBkICsgYXgsIChieCAqIGhjIC0gY3ggKiBoYikgLyBkICsgYXldO1xuXG4gIHNldEVkZ2VFbmQockFyYy5lZGdlLCBsU2l0ZSwgclNpdGUsIHZlcnRleCk7XG4gIG5ld0FyYy5lZGdlID0gY3JlYXRlRWRnZShsU2l0ZSwgc2l0ZSwgbnVsbCwgdmVydGV4KTtcbiAgckFyYy5lZGdlID0gY3JlYXRlRWRnZShzaXRlLCByU2l0ZSwgbnVsbCwgdmVydGV4KTtcbiAgYXR0YWNoQ2lyY2xlKGxBcmMpO1xuICBhdHRhY2hDaXJjbGUockFyYyk7XG59XG5cbmZ1bmN0aW9uIGxlZnRCcmVha1BvaW50KGFyYywgZGlyZWN0cml4KSB7XG4gIHZhciBzaXRlID0gYXJjLnNpdGUsXG4gICAgICByZm9jeCA9IHNpdGVbMF0sXG4gICAgICByZm9jeSA9IHNpdGVbMV0sXG4gICAgICBwYnkyID0gcmZvY3kgLSBkaXJlY3RyaXg7XG5cbiAgaWYgKCFwYnkyKSByZXR1cm4gcmZvY3g7XG5cbiAgdmFyIGxBcmMgPSBhcmMuUDtcbiAgaWYgKCFsQXJjKSByZXR1cm4gLUluZmluaXR5O1xuXG4gIHNpdGUgPSBsQXJjLnNpdGU7XG4gIHZhciBsZm9jeCA9IHNpdGVbMF0sXG4gICAgICBsZm9jeSA9IHNpdGVbMV0sXG4gICAgICBwbGJ5MiA9IGxmb2N5IC0gZGlyZWN0cml4O1xuXG4gIGlmICghcGxieTIpIHJldHVybiBsZm9jeDtcblxuICB2YXIgaGwgPSBsZm9jeCAtIHJmb2N4LFxuICAgICAgYWJ5MiA9IDEgLyBwYnkyIC0gMSAvIHBsYnkyLFxuICAgICAgYiA9IGhsIC8gcGxieTI7XG5cbiAgaWYgKGFieTIpIHJldHVybiAoLWIgKyBNYXRoLnNxcnQoYiAqIGIgLSAyICogYWJ5MiAqIChobCAqIGhsIC8gKC0yICogcGxieTIpIC0gbGZvY3kgKyBwbGJ5MiAvIDIgKyByZm9jeSAtIHBieTIgLyAyKSkpIC8gYWJ5MiArIHJmb2N4O1xuXG4gIHJldHVybiAocmZvY3ggKyBsZm9jeCkgLyAyO1xufVxuXG5mdW5jdGlvbiByaWdodEJyZWFrUG9pbnQoYXJjLCBkaXJlY3RyaXgpIHtcbiAgdmFyIHJBcmMgPSBhcmMuTjtcbiAgaWYgKHJBcmMpIHJldHVybiBsZWZ0QnJlYWtQb2ludChyQXJjLCBkaXJlY3RyaXgpO1xuICB2YXIgc2l0ZSA9IGFyYy5zaXRlO1xuICByZXR1cm4gc2l0ZVsxXSA9PT0gZGlyZWN0cml4ID8gc2l0ZVswXSA6IEluZmluaXR5O1xufVxuXG52YXIgZXBzaWxvbiQ0ID0gMWUtNjtcbnZhciBlcHNpbG9uMiQyID0gMWUtMTI7XG52YXIgYmVhY2hlcztcbnZhciBjZWxscztcbnZhciBjaXJjbGVzO1xudmFyIGVkZ2VzO1xuXG5mdW5jdGlvbiB0cmlhbmdsZUFyZWEoYSwgYiwgYykge1xuICByZXR1cm4gKGFbMF0gLSBjWzBdKSAqIChiWzFdIC0gYVsxXSkgLSAoYVswXSAtIGJbMF0pICogKGNbMV0gLSBhWzFdKTtcbn1cblxuZnVuY3Rpb24gbGV4aWNvZ3JhcGhpYyhhLCBiKSB7XG4gIHJldHVybiBiWzFdIC0gYVsxXVxuICAgICAgfHwgYlswXSAtIGFbMF07XG59XG5cbmZ1bmN0aW9uIERpYWdyYW0oc2l0ZXMsIGV4dGVudCkge1xuICB2YXIgc2l0ZSA9IHNpdGVzLnNvcnQobGV4aWNvZ3JhcGhpYykucG9wKCksXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIGNpcmNsZTtcblxuICBlZGdlcyA9IFtdO1xuICBjZWxscyA9IG5ldyBBcnJheShzaXRlcy5sZW5ndGgpO1xuICBiZWFjaGVzID0gbmV3IFJlZEJsYWNrVHJlZTtcbiAgY2lyY2xlcyA9IG5ldyBSZWRCbGFja1RyZWU7XG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBjaXJjbGUgPSBmaXJzdENpcmNsZTtcbiAgICBpZiAoc2l0ZSAmJiAoIWNpcmNsZSB8fCBzaXRlWzFdIDwgY2lyY2xlLnkgfHwgKHNpdGVbMV0gPT09IGNpcmNsZS55ICYmIHNpdGVbMF0gPCBjaXJjbGUueCkpKSB7XG4gICAgICBpZiAoc2l0ZVswXSAhPT0geCB8fCBzaXRlWzFdICE9PSB5KSB7XG4gICAgICAgIGFkZEJlYWNoKHNpdGUpO1xuICAgICAgICB4ID0gc2l0ZVswXSwgeSA9IHNpdGVbMV07XG4gICAgICB9XG4gICAgICBzaXRlID0gc2l0ZXMucG9wKCk7XG4gICAgfSBlbHNlIGlmIChjaXJjbGUpIHtcbiAgICAgIHJlbW92ZUJlYWNoKGNpcmNsZS5hcmMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBzb3J0Q2VsbEhhbGZlZGdlcygpO1xuXG4gIGlmIChleHRlbnQpIHtcbiAgICB2YXIgeDAgPSArZXh0ZW50WzBdWzBdLFxuICAgICAgICB5MCA9ICtleHRlbnRbMF1bMV0sXG4gICAgICAgIHgxID0gK2V4dGVudFsxXVswXSxcbiAgICAgICAgeTEgPSArZXh0ZW50WzFdWzFdO1xuICAgIGNsaXBFZGdlcyh4MCwgeTAsIHgxLCB5MSk7XG4gICAgY2xpcENlbGxzKHgwLCB5MCwgeDEsIHkxKTtcbiAgfVxuXG4gIHRoaXMuZWRnZXMgPSBlZGdlcztcbiAgdGhpcy5jZWxscyA9IGNlbGxzO1xuXG4gIGJlYWNoZXMgPVxuICBjaXJjbGVzID1cbiAgZWRnZXMgPVxuICBjZWxscyA9IG51bGw7XG59XG5cbkRpYWdyYW0ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRGlhZ3JhbSxcblxuICBwb2x5Z29uczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGVkZ2VzID0gdGhpcy5lZGdlcztcblxuICAgIHJldHVybiB0aGlzLmNlbGxzLm1hcChmdW5jdGlvbihjZWxsKSB7XG4gICAgICB2YXIgcG9seWdvbiA9IGNlbGwuaGFsZmVkZ2VzLm1hcChmdW5jdGlvbihpKSB7IHJldHVybiBjZWxsSGFsZmVkZ2VTdGFydChjZWxsLCBlZGdlc1tpXSk7IH0pO1xuICAgICAgcG9seWdvbi5kYXRhID0gY2VsbC5zaXRlLmRhdGE7XG4gICAgICByZXR1cm4gcG9seWdvbjtcbiAgICB9KTtcbiAgfSxcblxuICB0cmlhbmdsZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0cmlhbmdsZXMgPSBbXSxcbiAgICAgICAgZWRnZXMgPSB0aGlzLmVkZ2VzO1xuXG4gICAgdGhpcy5jZWxscy5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwsIGkpIHtcbiAgICAgIGlmICghKG0gPSAoaGFsZmVkZ2VzID0gY2VsbC5oYWxmZWRnZXMpLmxlbmd0aCkpIHJldHVybjtcbiAgICAgIHZhciBzaXRlID0gY2VsbC5zaXRlLFxuICAgICAgICAgIGhhbGZlZGdlcyxcbiAgICAgICAgICBqID0gLTEsXG4gICAgICAgICAgbSxcbiAgICAgICAgICBzMCxcbiAgICAgICAgICBlMSA9IGVkZ2VzW2hhbGZlZGdlc1ttIC0gMV1dLFxuICAgICAgICAgIHMxID0gZTEubGVmdCA9PT0gc2l0ZSA/IGUxLnJpZ2h0IDogZTEubGVmdDtcblxuICAgICAgd2hpbGUgKCsraiA8IG0pIHtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgICAgZTEgPSBlZGdlc1toYWxmZWRnZXNbal1dO1xuICAgICAgICBzMSA9IGUxLmxlZnQgPT09IHNpdGUgPyBlMS5yaWdodCA6IGUxLmxlZnQ7XG4gICAgICAgIGlmIChzMCAmJiBzMSAmJiBpIDwgczAuaW5kZXggJiYgaSA8IHMxLmluZGV4ICYmIHRyaWFuZ2xlQXJlYShzaXRlLCBzMCwgczEpIDwgMCkge1xuICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKFtzaXRlLmRhdGEsIHMwLmRhdGEsIHMxLmRhdGFdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRyaWFuZ2xlcztcbiAgfSxcblxuICBsaW5rczogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZWRnZXMuZmlsdGVyKGZ1bmN0aW9uKGVkZ2UpIHtcbiAgICAgIHJldHVybiBlZGdlLnJpZ2h0O1xuICAgIH0pLm1hcChmdW5jdGlvbihlZGdlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzb3VyY2U6IGVkZ2UubGVmdC5kYXRhLFxuICAgICAgICB0YXJnZXQ6IGVkZ2UucmlnaHQuZGF0YVxuICAgICAgfTtcbiAgICB9KTtcbiAgfSxcblxuICBmaW5kOiBmdW5jdGlvbih4LCB5LCByYWRpdXMpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXMsIGkwLCBpMSA9IHRoYXQuX2ZvdW5kIHx8IDAsIG4gPSB0aGF0LmNlbGxzLmxlbmd0aCwgY2VsbDtcblxuICAgIC8vIFVzZSB0aGUgcHJldmlvdXNseS1mb3VuZCBjZWxsLCBvciBzdGFydCB3aXRoIGFuIGFyYml0cmFyeSBvbmUuXG4gICAgd2hpbGUgKCEoY2VsbCA9IHRoYXQuY2VsbHNbaTFdKSkgaWYgKCsraTEgPj0gbikgcmV0dXJuIG51bGw7XG4gICAgdmFyIGR4ID0geCAtIGNlbGwuc2l0ZVswXSwgZHkgPSB5IC0gY2VsbC5zaXRlWzFdLCBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuXG4gICAgLy8gVHJhdmVyc2UgdGhlIGhhbGYtZWRnZXMgdG8gZmluZCBhIGNsb3NlciBjZWxsLCBpZiBhbnkuXG4gICAgZG8ge1xuICAgICAgY2VsbCA9IHRoYXQuY2VsbHNbaTAgPSBpMV0sIGkxID0gbnVsbDtcbiAgICAgIGNlbGwuaGFsZmVkZ2VzLmZvckVhY2goZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgZWRnZSA9IHRoYXQuZWRnZXNbZV0sIHYgPSBlZGdlLmxlZnQ7XG4gICAgICAgIGlmICgodiA9PT0gY2VsbC5zaXRlIHx8ICF2KSAmJiAhKHYgPSBlZGdlLnJpZ2h0KSkgcmV0dXJuO1xuICAgICAgICB2YXIgdnggPSB4IC0gdlswXSwgdnkgPSB5IC0gdlsxXSwgdjIgPSB2eCAqIHZ4ICsgdnkgKiB2eTtcbiAgICAgICAgaWYgKHYyIDwgZDIpIGQyID0gdjIsIGkxID0gdi5pbmRleDtcbiAgICAgIH0pO1xuICAgIH0gd2hpbGUgKGkxICE9PSBudWxsKTtcblxuICAgIHRoYXQuX2ZvdW5kID0gaTA7XG5cbiAgICByZXR1cm4gcmFkaXVzID09IG51bGwgfHwgZDIgPD0gcmFkaXVzICogcmFkaXVzID8gY2VsbC5zaXRlIDogbnVsbDtcbiAgfVxufTtcblxuZnVuY3Rpb24gdm9yb25vaSgpIHtcbiAgdmFyIHgkJDEgPSB4JDQsXG4gICAgICB5JCQxID0geSQ0LFxuICAgICAgZXh0ZW50ID0gbnVsbDtcblxuICBmdW5jdGlvbiB2b3Jvbm9pKGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IERpYWdyYW0oZGF0YS5tYXAoZnVuY3Rpb24oZCwgaSkge1xuICAgICAgdmFyIHMgPSBbTWF0aC5yb3VuZCh4JCQxKGQsIGksIGRhdGEpIC8gZXBzaWxvbiQ0KSAqIGVwc2lsb24kNCwgTWF0aC5yb3VuZCh5JCQxKGQsIGksIGRhdGEpIC8gZXBzaWxvbiQ0KSAqIGVwc2lsb24kNF07XG4gICAgICBzLmluZGV4ID0gaTtcbiAgICAgIHMuZGF0YSA9IGQ7XG4gICAgICByZXR1cm4gcztcbiAgICB9KSwgZXh0ZW50KTtcbiAgfVxuXG4gIHZvcm9ub2kucG9seWdvbnMgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgcmV0dXJuIHZvcm9ub2koZGF0YSkucG9seWdvbnMoKTtcbiAgfTtcblxuICB2b3Jvbm9pLmxpbmtzID0gZnVuY3Rpb24oZGF0YSkge1xuICAgIHJldHVybiB2b3Jvbm9pKGRhdGEpLmxpbmtzKCk7XG4gIH07XG5cbiAgdm9yb25vaS50cmlhbmdsZXMgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgcmV0dXJuIHZvcm9ub2koZGF0YSkudHJpYW5nbGVzKCk7XG4gIH07XG5cbiAgdm9yb25vaS54ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgkJDEgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JGMoK18pLCB2b3Jvbm9pKSA6IHgkJDE7XG4gIH07XG5cbiAgdm9yb25vaS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkkJDEgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JGMoK18pLCB2b3Jvbm9pKSA6IHkkJDE7XG4gIH07XG5cbiAgdm9yb25vaS5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXh0ZW50ID0gXyA9PSBudWxsID8gbnVsbCA6IFtbK19bMF1bMF0sICtfWzBdWzFdXSwgWytfWzFdWzBdLCArX1sxXVsxXV1dLCB2b3Jvbm9pKSA6IGV4dGVudCAmJiBbW2V4dGVudFswXVswXSwgZXh0ZW50WzBdWzFdXSwgW2V4dGVudFsxXVswXSwgZXh0ZW50WzFdWzFdXV07XG4gIH07XG5cbiAgdm9yb25vaS5zaXplID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGV4dGVudCA9IF8gPT0gbnVsbCA/IG51bGwgOiBbWzAsIDBdLCBbK19bMF0sICtfWzFdXV0sIHZvcm9ub2kpIDogZXh0ZW50ICYmIFtleHRlbnRbMV1bMF0gLSBleHRlbnRbMF1bMF0sIGV4dGVudFsxXVsxXSAtIGV4dGVudFswXVsxXV07XG4gIH07XG5cbiAgcmV0dXJuIHZvcm9ub2k7XG59XG5cbmZ1bmN0aW9uIGNvbnN0YW50JGQoeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFpvb21FdmVudCh0YXJnZXQsIHR5cGUsIHRyYW5zZm9ybSkge1xuICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG59XG5cbmZ1bmN0aW9uIFRyYW5zZm9ybShrLCB4LCB5KSB7XG4gIHRoaXMuayA9IGs7XG4gIHRoaXMueCA9IHg7XG4gIHRoaXMueSA9IHk7XG59XG5cblRyYW5zZm9ybS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2Zvcm0sXG4gIHNjYWxlOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIGsgPT09IDEgPyB0aGlzIDogbmV3IFRyYW5zZm9ybSh0aGlzLmsgKiBrLCB0aGlzLngsIHRoaXMueSk7XG4gIH0sXG4gIHRyYW5zbGF0ZTogZnVuY3Rpb24oeCwgeSkge1xuICAgIHJldHVybiB4ID09PSAwICYgeSA9PT0gMCA/IHRoaXMgOiBuZXcgVHJhbnNmb3JtKHRoaXMuaywgdGhpcy54ICsgdGhpcy5rICogeCwgdGhpcy55ICsgdGhpcy5rICogeSk7XG4gIH0sXG4gIGFwcGx5OiBmdW5jdGlvbihwb2ludCkge1xuICAgIHJldHVybiBbcG9pbnRbMF0gKiB0aGlzLmsgKyB0aGlzLngsIHBvaW50WzFdICogdGhpcy5rICsgdGhpcy55XTtcbiAgfSxcbiAgYXBwbHlYOiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHggKiB0aGlzLmsgKyB0aGlzLng7XG4gIH0sXG4gIGFwcGx5WTogZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiB5ICogdGhpcy5rICsgdGhpcy55O1xuICB9LFxuICBpbnZlcnQ6IGZ1bmN0aW9uKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIFsobG9jYXRpb25bMF0gLSB0aGlzLngpIC8gdGhpcy5rLCAobG9jYXRpb25bMV0gLSB0aGlzLnkpIC8gdGhpcy5rXTtcbiAgfSxcbiAgaW52ZXJ0WDogZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiAoeCAtIHRoaXMueCkgLyB0aGlzLms7XG4gIH0sXG4gIGludmVydFk6IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4gKHkgLSB0aGlzLnkpIC8gdGhpcy5rO1xuICB9LFxuICByZXNjYWxlWDogZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiB4LmNvcHkoKS5kb21haW4oeC5yYW5nZSgpLm1hcCh0aGlzLmludmVydFgsIHRoaXMpLm1hcCh4LmludmVydCwgeCkpO1xuICB9LFxuICByZXNjYWxlWTogZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiB5LmNvcHkoKS5kb21haW4oeS5yYW5nZSgpLm1hcCh0aGlzLmludmVydFksIHRoaXMpLm1hcCh5LmludmVydCwgeSkpO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgdGhpcy54ICsgXCIsXCIgKyB0aGlzLnkgKyBcIikgc2NhbGUoXCIgKyB0aGlzLmsgKyBcIilcIjtcbiAgfVxufTtcblxudmFyIGlkZW50aXR5JDkgPSBuZXcgVHJhbnNmb3JtKDEsIDAsIDApO1xuXG50cmFuc2Zvcm0kMS5wcm90b3R5cGUgPSBUcmFuc2Zvcm0ucHJvdG90eXBlO1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm0kMShub2RlKSB7XG4gIHJldHVybiBub2RlLl9fem9vbSB8fCBpZGVudGl0eSQ5O1xufVxuXG5mdW5jdGlvbiBub3Byb3BhZ2F0aW9uJDIoKSB7XG4gIGV4cG9ydHMuZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG5cbmZ1bmN0aW9uIG5vZXZlbnQkMigpIHtcbiAgZXhwb3J0cy5ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICBleHBvcnRzLmV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuXG4vLyBJZ25vcmUgcmlnaHQtY2xpY2ssIHNpbmNlIHRoYXQgc2hvdWxkIG9wZW4gdGhlIGNvbnRleHQgbWVudS5cbmZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXIkMigpIHtcbiAgcmV0dXJuICFleHBvcnRzLmV2ZW50LmJ1dHRvbjtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEV4dGVudCQxKCkge1xuICB2YXIgZSA9IHRoaXMsIHcsIGg7XG4gIGlmIChlIGluc3RhbmNlb2YgU1ZHRWxlbWVudCkge1xuICAgIGUgPSBlLm93bmVyU1ZHRWxlbWVudCB8fCBlO1xuICAgIHcgPSBlLndpZHRoLmJhc2VWYWwudmFsdWU7XG4gICAgaCA9IGUuaGVpZ2h0LmJhc2VWYWwudmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgdyA9IGUuY2xpZW50V2lkdGg7XG4gICAgaCA9IGUuY2xpZW50SGVpZ2h0O1xuICB9XG4gIHJldHVybiBbWzAsIDBdLCBbdywgaF1dO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0VHJhbnNmb3JtKCkge1xuICByZXR1cm4gdGhpcy5fX3pvb20gfHwgaWRlbnRpdHkkOTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFdoZWVsRGVsdGEoKSB7XG4gIHJldHVybiAtZXhwb3J0cy5ldmVudC5kZWx0YVkgKiAoZXhwb3J0cy5ldmVudC5kZWx0YU1vZGUgPyAxMjAgOiAxKSAvIDUwMDtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFRvdWNoYWJsZSQxKCkge1xuICByZXR1cm4gXCJvbnRvdWNoc3RhcnRcIiBpbiB0aGlzO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0Q29uc3RyYWluKHRyYW5zZm9ybSwgZXh0ZW50LCB0cmFuc2xhdGVFeHRlbnQpIHtcbiAgdmFyIGR4MCA9IHRyYW5zZm9ybS5pbnZlcnRYKGV4dGVudFswXVswXSkgLSB0cmFuc2xhdGVFeHRlbnRbMF1bMF0sXG4gICAgICBkeDEgPSB0cmFuc2Zvcm0uaW52ZXJ0WChleHRlbnRbMV1bMF0pIC0gdHJhbnNsYXRlRXh0ZW50WzFdWzBdLFxuICAgICAgZHkwID0gdHJhbnNmb3JtLmludmVydFkoZXh0ZW50WzBdWzFdKSAtIHRyYW5zbGF0ZUV4dGVudFswXVsxXSxcbiAgICAgIGR5MSA9IHRyYW5zZm9ybS5pbnZlcnRZKGV4dGVudFsxXVsxXSkgLSB0cmFuc2xhdGVFeHRlbnRbMV1bMV07XG4gIHJldHVybiB0cmFuc2Zvcm0udHJhbnNsYXRlKFxuICAgIGR4MSA+IGR4MCA/IChkeDAgKyBkeDEpIC8gMiA6IE1hdGgubWluKDAsIGR4MCkgfHwgTWF0aC5tYXgoMCwgZHgxKSxcbiAgICBkeTEgPiBkeTAgPyAoZHkwICsgZHkxKSAvIDIgOiBNYXRoLm1pbigwLCBkeTApIHx8IE1hdGgubWF4KDAsIGR5MSlcbiAgKTtcbn1cblxuZnVuY3Rpb24gem9vbSgpIHtcbiAgdmFyIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIkMixcbiAgICAgIGV4dGVudCA9IGRlZmF1bHRFeHRlbnQkMSxcbiAgICAgIGNvbnN0cmFpbiA9IGRlZmF1bHRDb25zdHJhaW4sXG4gICAgICB3aGVlbERlbHRhID0gZGVmYXVsdFdoZWVsRGVsdGEsXG4gICAgICB0b3VjaGFibGUgPSBkZWZhdWx0VG91Y2hhYmxlJDEsXG4gICAgICBzY2FsZUV4dGVudCA9IFswLCBJbmZpbml0eV0sXG4gICAgICB0cmFuc2xhdGVFeHRlbnQgPSBbWy1JbmZpbml0eSwgLUluZmluaXR5XSwgW0luZmluaXR5LCBJbmZpbml0eV1dLFxuICAgICAgZHVyYXRpb24gPSAyNTAsXG4gICAgICBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlWm9vbSxcbiAgICAgIGdlc3R1cmVzID0gW10sXG4gICAgICBsaXN0ZW5lcnMgPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiem9vbVwiLCBcImVuZFwiKSxcbiAgICAgIHRvdWNoc3RhcnRpbmcsXG4gICAgICB0b3VjaGVuZGluZyxcbiAgICAgIHRvdWNoRGVsYXkgPSA1MDAsXG4gICAgICB3aGVlbERlbGF5ID0gMTUwLFxuICAgICAgY2xpY2tEaXN0YW5jZTIgPSAwO1xuXG4gIGZ1bmN0aW9uIHpvb20oc2VsZWN0aW9uJCQxKSB7XG4gICAgc2VsZWN0aW9uJCQxXG4gICAgICAgIC5wcm9wZXJ0eShcIl9fem9vbVwiLCBkZWZhdWx0VHJhbnNmb3JtKVxuICAgICAgICAub24oXCJ3aGVlbC56b29tXCIsIHdoZWVsZWQpXG4gICAgICAgIC5vbihcIm1vdXNlZG93bi56b29tXCIsIG1vdXNlZG93bmVkKVxuICAgICAgICAub24oXCJkYmxjbGljay56b29tXCIsIGRibGNsaWNrZWQpXG4gICAgICAuZmlsdGVyKHRvdWNoYWJsZSlcbiAgICAgICAgLm9uKFwidG91Y2hzdGFydC56b29tXCIsIHRvdWNoc3RhcnRlZClcbiAgICAgICAgLm9uKFwidG91Y2htb3ZlLnpvb21cIiwgdG91Y2htb3ZlZClcbiAgICAgICAgLm9uKFwidG91Y2hlbmQuem9vbSB0b3VjaGNhbmNlbC56b29tXCIsIHRvdWNoZW5kZWQpXG4gICAgICAgIC5zdHlsZShcInRvdWNoLWFjdGlvblwiLCBcIm5vbmVcIilcbiAgICAgICAgLnN0eWxlKFwiLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yXCIsIFwicmdiYSgwLDAsMCwwKVwiKTtcbiAgfVxuXG4gIHpvb20udHJhbnNmb3JtID0gZnVuY3Rpb24oY29sbGVjdGlvbiwgdHJhbnNmb3JtKSB7XG4gICAgdmFyIHNlbGVjdGlvbiQkMSA9IGNvbGxlY3Rpb24uc2VsZWN0aW9uID8gY29sbGVjdGlvbi5zZWxlY3Rpb24oKSA6IGNvbGxlY3Rpb247XG4gICAgc2VsZWN0aW9uJCQxLnByb3BlcnR5KFwiX196b29tXCIsIGRlZmF1bHRUcmFuc2Zvcm0pO1xuICAgIGlmIChjb2xsZWN0aW9uICE9PSBzZWxlY3Rpb24kJDEpIHtcbiAgICAgIHNjaGVkdWxlKGNvbGxlY3Rpb24sIHRyYW5zZm9ybSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdGlvbiQkMS5pbnRlcnJ1cHQoKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cylcbiAgICAgICAgICAgIC5zdGFydCgpXG4gICAgICAgICAgICAuem9vbShudWxsLCB0eXBlb2YgdHJhbnNmb3JtID09PSBcImZ1bmN0aW9uXCIgPyB0cmFuc2Zvcm0uYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHRyYW5zZm9ybSlcbiAgICAgICAgICAgIC5lbmQoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB6b29tLnNjYWxlQnkgPSBmdW5jdGlvbihzZWxlY3Rpb24kJDEsIGspIHtcbiAgICB6b29tLnNjYWxlVG8oc2VsZWN0aW9uJCQxLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBrMCA9IHRoaXMuX196b29tLmssXG4gICAgICAgICAgazEgPSB0eXBlb2YgayA9PT0gXCJmdW5jdGlvblwiID8gay5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogaztcbiAgICAgIHJldHVybiBrMCAqIGsxO1xuICAgIH0pO1xuICB9O1xuXG4gIHpvb20uc2NhbGVUbyA9IGZ1bmN0aW9uKHNlbGVjdGlvbiQkMSwgaykge1xuICAgIHpvb20udHJhbnNmb3JtKHNlbGVjdGlvbiQkMSwgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZSA9IGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgIHQwID0gdGhpcy5fX3pvb20sXG4gICAgICAgICAgcDAgPSBjZW50cm9pZChlKSxcbiAgICAgICAgICBwMSA9IHQwLmludmVydChwMCksXG4gICAgICAgICAgazEgPSB0eXBlb2YgayA9PT0gXCJmdW5jdGlvblwiID8gay5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogaztcbiAgICAgIHJldHVybiBjb25zdHJhaW4odHJhbnNsYXRlKHNjYWxlKHQwLCBrMSksIHAwLCBwMSksIGUsIHRyYW5zbGF0ZUV4dGVudCk7XG4gICAgfSk7XG4gIH07XG5cbiAgem9vbS50cmFuc2xhdGVCeSA9IGZ1bmN0aW9uKHNlbGVjdGlvbiQkMSwgeCwgeSkge1xuICAgIHpvb20udHJhbnNmb3JtKHNlbGVjdGlvbiQkMSwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gY29uc3RyYWluKHRoaXMuX196b29tLnRyYW5zbGF0ZShcbiAgICAgICAgdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHguYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHgsXG4gICAgICAgIHR5cGVvZiB5ID09PSBcImZ1bmN0aW9uXCIgPyB5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiB5XG4gICAgICApLCBleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgdHJhbnNsYXRlRXh0ZW50KTtcbiAgICB9KTtcbiAgfTtcblxuICB6b29tLnRyYW5zbGF0ZVRvID0gZnVuY3Rpb24oc2VsZWN0aW9uJCQxLCB4LCB5KSB7XG4gICAgem9vbS50cmFuc2Zvcm0oc2VsZWN0aW9uJCQxLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlID0gZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgdCA9IHRoaXMuX196b29tLFxuICAgICAgICAgIHAgPSBjZW50cm9pZChlKTtcbiAgICAgIHJldHVybiBjb25zdHJhaW4oaWRlbnRpdHkkOS50cmFuc2xhdGUocFswXSwgcFsxXSkuc2NhbGUodC5rKS50cmFuc2xhdGUoXG4gICAgICAgIHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyAteC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogLXgsXG4gICAgICAgIHR5cGVvZiB5ID09PSBcImZ1bmN0aW9uXCIgPyAteS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogLXlcbiAgICAgICksIGUsIHRyYW5zbGF0ZUV4dGVudCk7XG4gICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gc2NhbGUodHJhbnNmb3JtLCBrKSB7XG4gICAgayA9IE1hdGgubWF4KHNjYWxlRXh0ZW50WzBdLCBNYXRoLm1pbihzY2FsZUV4dGVudFsxXSwgaykpO1xuICAgIHJldHVybiBrID09PSB0cmFuc2Zvcm0uayA/IHRyYW5zZm9ybSA6IG5ldyBUcmFuc2Zvcm0oaywgdHJhbnNmb3JtLngsIHRyYW5zZm9ybS55KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZSh0cmFuc2Zvcm0sIHAwLCBwMSkge1xuICAgIHZhciB4ID0gcDBbMF0gLSBwMVswXSAqIHRyYW5zZm9ybS5rLCB5ID0gcDBbMV0gLSBwMVsxXSAqIHRyYW5zZm9ybS5rO1xuICAgIHJldHVybiB4ID09PSB0cmFuc2Zvcm0ueCAmJiB5ID09PSB0cmFuc2Zvcm0ueSA/IHRyYW5zZm9ybSA6IG5ldyBUcmFuc2Zvcm0odHJhbnNmb3JtLmssIHgsIHkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudHJvaWQoZXh0ZW50KSB7XG4gICAgcmV0dXJuIFsoK2V4dGVudFswXVswXSArICtleHRlbnRbMV1bMF0pIC8gMiwgKCtleHRlbnRbMF1bMV0gKyArZXh0ZW50WzFdWzFdKSAvIDJdO1xuICB9XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGUodHJhbnNpdGlvbiQkMSwgdHJhbnNmb3JtLCBjZW50ZXIpIHtcbiAgICB0cmFuc2l0aW9uJCQxXG4gICAgICAgIC5vbihcInN0YXJ0Lnpvb21cIiwgZnVuY3Rpb24oKSB7IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKS5zdGFydCgpOyB9KVxuICAgICAgICAub24oXCJpbnRlcnJ1cHQuem9vbSBlbmQuem9vbVwiLCBmdW5jdGlvbigpIHsgZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLmVuZCgpOyB9KVxuICAgICAgICAudHdlZW4oXCJ6b29tXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgZyA9IGdlc3R1cmUodGhhdCwgYXJncyksXG4gICAgICAgICAgICAgIGUgPSBleHRlbnQuYXBwbHkodGhhdCwgYXJncyksXG4gICAgICAgICAgICAgIHAgPSBjZW50ZXIgfHwgY2VudHJvaWQoZSksXG4gICAgICAgICAgICAgIHcgPSBNYXRoLm1heChlWzFdWzBdIC0gZVswXVswXSwgZVsxXVsxXSAtIGVbMF1bMV0pLFxuICAgICAgICAgICAgICBhID0gdGhhdC5fX3pvb20sXG4gICAgICAgICAgICAgIGIgPSB0eXBlb2YgdHJhbnNmb3JtID09PSBcImZ1bmN0aW9uXCIgPyB0cmFuc2Zvcm0uYXBwbHkodGhhdCwgYXJncykgOiB0cmFuc2Zvcm0sXG4gICAgICAgICAgICAgIGkgPSBpbnRlcnBvbGF0ZShhLmludmVydChwKS5jb25jYXQodyAvIGEuayksIGIuaW52ZXJ0KHApLmNvbmNhdCh3IC8gYi5rKSk7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGlmICh0ID09PSAxKSB0ID0gYjsgLy8gQXZvaWQgcm91bmRpbmcgZXJyb3Igb24gZW5kLlxuICAgICAgICAgICAgZWxzZSB7IHZhciBsID0gaSh0KSwgayA9IHcgLyBsWzJdOyB0ID0gbmV3IFRyYW5zZm9ybShrLCBwWzBdIC0gbFswXSAqIGssIHBbMV0gLSBsWzFdICogayk7IH1cbiAgICAgICAgICAgIGcuem9vbShudWxsLCB0KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdlc3R1cmUodGhhdCwgYXJncykge1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gZ2VzdHVyZXMubGVuZ3RoLCBnOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKGcgPSBnZXN0dXJlc1tpXSkudGhhdCA9PT0gdGhhdCkge1xuICAgICAgICByZXR1cm4gZztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBHZXN0dXJlKHRoYXQsIGFyZ3MpO1xuICB9XG5cbiAgZnVuY3Rpb24gR2VzdHVyZSh0aGF0LCBhcmdzKSB7XG4gICAgdGhpcy50aGF0ID0gdGhhdDtcbiAgICB0aGlzLmFyZ3MgPSBhcmdzO1xuICAgIHRoaXMuaW5kZXggPSAtMTtcbiAgICB0aGlzLmFjdGl2ZSA9IDA7XG4gICAgdGhpcy5leHRlbnQgPSBleHRlbnQuYXBwbHkodGhhdCwgYXJncyk7XG4gIH1cblxuICBHZXN0dXJlLnByb3RvdHlwZSA9IHtcbiAgICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoKyt0aGlzLmFjdGl2ZSA9PT0gMSkge1xuICAgICAgICB0aGlzLmluZGV4ID0gZ2VzdHVyZXMucHVzaCh0aGlzKSAtIDE7XG4gICAgICAgIHRoaXMuZW1pdChcInN0YXJ0XCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICB6b29tOiBmdW5jdGlvbihrZXksIHRyYW5zZm9ybSkge1xuICAgICAgaWYgKHRoaXMubW91c2UgJiYga2V5ICE9PSBcIm1vdXNlXCIpIHRoaXMubW91c2VbMV0gPSB0cmFuc2Zvcm0uaW52ZXJ0KHRoaXMubW91c2VbMF0pO1xuICAgICAgaWYgKHRoaXMudG91Y2gwICYmIGtleSAhPT0gXCJ0b3VjaFwiKSB0aGlzLnRvdWNoMFsxXSA9IHRyYW5zZm9ybS5pbnZlcnQodGhpcy50b3VjaDBbMF0pO1xuICAgICAgaWYgKHRoaXMudG91Y2gxICYmIGtleSAhPT0gXCJ0b3VjaFwiKSB0aGlzLnRvdWNoMVsxXSA9IHRyYW5zZm9ybS5pbnZlcnQodGhpcy50b3VjaDFbMF0pO1xuICAgICAgdGhpcy50aGF0Ll9fem9vbSA9IHRyYW5zZm9ybTtcbiAgICAgIHRoaXMuZW1pdChcInpvb21cIik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoLS10aGlzLmFjdGl2ZSA9PT0gMCkge1xuICAgICAgICBnZXN0dXJlcy5zcGxpY2UodGhpcy5pbmRleCwgMSk7XG4gICAgICAgIHRoaXMuaW5kZXggPSAtMTtcbiAgICAgICAgdGhpcy5lbWl0KFwiZW5kXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBlbWl0OiBmdW5jdGlvbih0eXBlKSB7XG4gICAgICBjdXN0b21FdmVudChuZXcgWm9vbUV2ZW50KHpvb20sIHR5cGUsIHRoaXMudGhhdC5fX3pvb20pLCBsaXN0ZW5lcnMuYXBwbHksIGxpc3RlbmVycywgW3R5cGUsIHRoaXMudGhhdCwgdGhpcy5hcmdzXSk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHdoZWVsZWQoKSB7XG4gICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciBnID0gZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICB0ID0gdGhpcy5fX3pvb20sXG4gICAgICAgIGsgPSBNYXRoLm1heChzY2FsZUV4dGVudFswXSwgTWF0aC5taW4oc2NhbGVFeHRlbnRbMV0sIHQuayAqIE1hdGgucG93KDIsIHdoZWVsRGVsdGEuYXBwbHkodGhpcywgYXJndW1lbnRzKSkpKSxcbiAgICAgICAgcCA9IG1vdXNlKHRoaXMpO1xuXG4gICAgLy8gSWYgdGhlIG1vdXNlIGlzIGluIHRoZSBzYW1lIGxvY2F0aW9uIGFzIGJlZm9yZSwgcmV1c2UgaXQuXG4gICAgLy8gSWYgdGhlcmUgd2VyZSByZWNlbnQgd2hlZWwgZXZlbnRzLCByZXNldCB0aGUgd2hlZWwgaWRsZSB0aW1lb3V0LlxuICAgIGlmIChnLndoZWVsKSB7XG4gICAgICBpZiAoZy5tb3VzZVswXVswXSAhPT0gcFswXSB8fCBnLm1vdXNlWzBdWzFdICE9PSBwWzFdKSB7XG4gICAgICAgIGcubW91c2VbMV0gPSB0LmludmVydChnLm1vdXNlWzBdID0gcCk7XG4gICAgICB9XG4gICAgICBjbGVhclRpbWVvdXQoZy53aGVlbCk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhpcyB3aGVlbCBldmVudCB3b27igJl0IHRyaWdnZXIgYSB0cmFuc2Zvcm0gY2hhbmdlLCBpZ25vcmUgaXQuXG4gICAgZWxzZSBpZiAodC5rID09PSBrKSByZXR1cm47XG5cbiAgICAvLyBPdGhlcndpc2UsIGNhcHR1cmUgdGhlIG1vdXNlIHBvaW50IGFuZCBsb2NhdGlvbiBhdCB0aGUgc3RhcnQuXG4gICAgZWxzZSB7XG4gICAgICBnLm1vdXNlID0gW3AsIHQuaW52ZXJ0KHApXTtcbiAgICAgIGludGVycnVwdCh0aGlzKTtcbiAgICAgIGcuc3RhcnQoKTtcbiAgICB9XG5cbiAgICBub2V2ZW50JDIoKTtcbiAgICBnLndoZWVsID0gc2V0VGltZW91dCh3aGVlbGlkbGVkLCB3aGVlbERlbGF5KTtcbiAgICBnLnpvb20oXCJtb3VzZVwiLCBjb25zdHJhaW4odHJhbnNsYXRlKHNjYWxlKHQsIGspLCBnLm1vdXNlWzBdLCBnLm1vdXNlWzFdKSwgZy5leHRlbnQsIHRyYW5zbGF0ZUV4dGVudCkpO1xuXG4gICAgZnVuY3Rpb24gd2hlZWxpZGxlZCgpIHtcbiAgICAgIGcud2hlZWwgPSBudWxsO1xuICAgICAgZy5lbmQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBtb3VzZWRvd25lZCgpIHtcbiAgICBpZiAodG91Y2hlbmRpbmcgfHwgIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgdmFyIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIHYgPSBzZWxlY3QoZXhwb3J0cy5ldmVudC52aWV3KS5vbihcIm1vdXNlbW92ZS56b29tXCIsIG1vdXNlbW92ZWQsIHRydWUpLm9uKFwibW91c2V1cC56b29tXCIsIG1vdXNldXBwZWQsIHRydWUpLFxuICAgICAgICBwID0gbW91c2UodGhpcyksXG4gICAgICAgIHgwID0gZXhwb3J0cy5ldmVudC5jbGllbnRYLFxuICAgICAgICB5MCA9IGV4cG9ydHMuZXZlbnQuY2xpZW50WTtcblxuICAgIGRyYWdEaXNhYmxlKGV4cG9ydHMuZXZlbnQudmlldyk7XG4gICAgbm9wcm9wYWdhdGlvbiQyKCk7XG4gICAgZy5tb3VzZSA9IFtwLCB0aGlzLl9fem9vbS5pbnZlcnQocCldO1xuICAgIGludGVycnVwdCh0aGlzKTtcbiAgICBnLnN0YXJ0KCk7XG5cbiAgICBmdW5jdGlvbiBtb3VzZW1vdmVkKCkge1xuICAgICAgbm9ldmVudCQyKCk7XG4gICAgICBpZiAoIWcubW92ZWQpIHtcbiAgICAgICAgdmFyIGR4ID0gZXhwb3J0cy5ldmVudC5jbGllbnRYIC0geDAsIGR5ID0gZXhwb3J0cy5ldmVudC5jbGllbnRZIC0geTA7XG4gICAgICAgIGcubW92ZWQgPSBkeCAqIGR4ICsgZHkgKiBkeSA+IGNsaWNrRGlzdGFuY2UyO1xuICAgICAgfVxuICAgICAgZy56b29tKFwibW91c2VcIiwgY29uc3RyYWluKHRyYW5zbGF0ZShnLnRoYXQuX196b29tLCBnLm1vdXNlWzBdID0gbW91c2UoZy50aGF0KSwgZy5tb3VzZVsxXSksIGcuZXh0ZW50LCB0cmFuc2xhdGVFeHRlbnQpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3VzZXVwcGVkKCkge1xuICAgICAgdi5vbihcIm1vdXNlbW92ZS56b29tIG1vdXNldXAuem9vbVwiLCBudWxsKTtcbiAgICAgIHllc2RyYWcoZXhwb3J0cy5ldmVudC52aWV3LCBnLm1vdmVkKTtcbiAgICAgIG5vZXZlbnQkMigpO1xuICAgICAgZy5lbmQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkYmxjbGlja2VkKCkge1xuICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICB2YXIgdDAgPSB0aGlzLl9fem9vbSxcbiAgICAgICAgcDAgPSBtb3VzZSh0aGlzKSxcbiAgICAgICAgcDEgPSB0MC5pbnZlcnQocDApLFxuICAgICAgICBrMSA9IHQwLmsgKiAoZXhwb3J0cy5ldmVudC5zaGlmdEtleSA/IDAuNSA6IDIpLFxuICAgICAgICB0MSA9IGNvbnN0cmFpbih0cmFuc2xhdGUoc2NhbGUodDAsIGsxKSwgcDAsIHAxKSwgZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRyYW5zbGF0ZUV4dGVudCk7XG5cbiAgICBub2V2ZW50JDIoKTtcbiAgICBpZiAoZHVyYXRpb24gPiAwKSBzZWxlY3QodGhpcykudHJhbnNpdGlvbigpLmR1cmF0aW9uKGR1cmF0aW9uKS5jYWxsKHNjaGVkdWxlLCB0MSwgcDApO1xuICAgIGVsc2Ugc2VsZWN0KHRoaXMpLmNhbGwoem9vbS50cmFuc2Zvcm0sIHQxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoc3RhcnRlZCgpIHtcbiAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgdmFyIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIHRvdWNoZXMkJDEgPSBleHBvcnRzLmV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICBzdGFydGVkLFxuICAgICAgICBuID0gdG91Y2hlcyQkMS5sZW5ndGgsIGksIHQsIHA7XG5cbiAgICBub3Byb3BhZ2F0aW9uJDIoKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICB0ID0gdG91Y2hlcyQkMVtpXSwgcCA9IHRvdWNoKHRoaXMsIHRvdWNoZXMkJDEsIHQuaWRlbnRpZmllcik7XG4gICAgICBwID0gW3AsIHRoaXMuX196b29tLmludmVydChwKSwgdC5pZGVudGlmaWVyXTtcbiAgICAgIGlmICghZy50b3VjaDApIGcudG91Y2gwID0gcCwgc3RhcnRlZCA9IHRydWU7XG4gICAgICBlbHNlIGlmICghZy50b3VjaDEpIGcudG91Y2gxID0gcDtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGlzIGlzIGEgZGJsdGFwLCByZXJvdXRlIHRvIHRoZSAob3B0aW9uYWwpIGRibGNsaWNrLnpvb20gaGFuZGxlci5cbiAgICBpZiAodG91Y2hzdGFydGluZykge1xuICAgICAgdG91Y2hzdGFydGluZyA9IGNsZWFyVGltZW91dCh0b3VjaHN0YXJ0aW5nKTtcbiAgICAgIGlmICghZy50b3VjaDEpIHtcbiAgICAgICAgZy5lbmQoKTtcbiAgICAgICAgcCA9IHNlbGVjdCh0aGlzKS5vbihcImRibGNsaWNrLnpvb21cIik7XG4gICAgICAgIGlmIChwKSBwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3RhcnRlZCkge1xuICAgICAgdG91Y2hzdGFydGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoc3RhcnRpbmcgPSBudWxsOyB9LCB0b3VjaERlbGF5KTtcbiAgICAgIGludGVycnVwdCh0aGlzKTtcbiAgICAgIGcuc3RhcnQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaG1vdmVkKCkge1xuICAgIHZhciBnID0gZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICB0b3VjaGVzJCQxID0gZXhwb3J0cy5ldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgbiA9IHRvdWNoZXMkJDEubGVuZ3RoLCBpLCB0LCBwLCBsO1xuXG4gICAgbm9ldmVudCQyKCk7XG4gICAgaWYgKHRvdWNoc3RhcnRpbmcpIHRvdWNoc3RhcnRpbmcgPSBjbGVhclRpbWVvdXQodG91Y2hzdGFydGluZyk7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgdCA9IHRvdWNoZXMkJDFbaV0sIHAgPSB0b3VjaCh0aGlzLCB0b3VjaGVzJCQxLCB0LmlkZW50aWZpZXIpO1xuICAgICAgaWYgKGcudG91Y2gwICYmIGcudG91Y2gwWzJdID09PSB0LmlkZW50aWZpZXIpIGcudG91Y2gwWzBdID0gcDtcbiAgICAgIGVsc2UgaWYgKGcudG91Y2gxICYmIGcudG91Y2gxWzJdID09PSB0LmlkZW50aWZpZXIpIGcudG91Y2gxWzBdID0gcDtcbiAgICB9XG4gICAgdCA9IGcudGhhdC5fX3pvb207XG4gICAgaWYgKGcudG91Y2gxKSB7XG4gICAgICB2YXIgcDAgPSBnLnRvdWNoMFswXSwgbDAgPSBnLnRvdWNoMFsxXSxcbiAgICAgICAgICBwMSA9IGcudG91Y2gxWzBdLCBsMSA9IGcudG91Y2gxWzFdLFxuICAgICAgICAgIGRwID0gKGRwID0gcDFbMF0gLSBwMFswXSkgKiBkcCArIChkcCA9IHAxWzFdIC0gcDBbMV0pICogZHAsXG4gICAgICAgICAgZGwgPSAoZGwgPSBsMVswXSAtIGwwWzBdKSAqIGRsICsgKGRsID0gbDFbMV0gLSBsMFsxXSkgKiBkbDtcbiAgICAgIHQgPSBzY2FsZSh0LCBNYXRoLnNxcnQoZHAgLyBkbCkpO1xuICAgICAgcCA9IFsocDBbMF0gKyBwMVswXSkgLyAyLCAocDBbMV0gKyBwMVsxXSkgLyAyXTtcbiAgICAgIGwgPSBbKGwwWzBdICsgbDFbMF0pIC8gMiwgKGwwWzFdICsgbDFbMV0pIC8gMl07XG4gICAgfVxuICAgIGVsc2UgaWYgKGcudG91Y2gwKSBwID0gZy50b3VjaDBbMF0sIGwgPSBnLnRvdWNoMFsxXTtcbiAgICBlbHNlIHJldHVybjtcbiAgICBnLnpvb20oXCJ0b3VjaFwiLCBjb25zdHJhaW4odHJhbnNsYXRlKHQsIHAsIGwpLCBnLmV4dGVudCwgdHJhbnNsYXRlRXh0ZW50KSk7XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaGVuZGVkKCkge1xuICAgIHZhciBnID0gZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICB0b3VjaGVzJCQxID0gZXhwb3J0cy5ldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgbiA9IHRvdWNoZXMkJDEubGVuZ3RoLCBpLCB0O1xuXG4gICAgbm9wcm9wYWdhdGlvbiQyKCk7XG4gICAgaWYgKHRvdWNoZW5kaW5nKSBjbGVhclRpbWVvdXQodG91Y2hlbmRpbmcpO1xuICAgIHRvdWNoZW5kaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hlbmRpbmcgPSBudWxsOyB9LCB0b3VjaERlbGF5KTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICB0ID0gdG91Y2hlcyQkMVtpXTtcbiAgICAgIGlmIChnLnRvdWNoMCAmJiBnLnRvdWNoMFsyXSA9PT0gdC5pZGVudGlmaWVyKSBkZWxldGUgZy50b3VjaDA7XG4gICAgICBlbHNlIGlmIChnLnRvdWNoMSAmJiBnLnRvdWNoMVsyXSA9PT0gdC5pZGVudGlmaWVyKSBkZWxldGUgZy50b3VjaDE7XG4gICAgfVxuICAgIGlmIChnLnRvdWNoMSAmJiAhZy50b3VjaDApIGcudG91Y2gwID0gZy50b3VjaDEsIGRlbGV0ZSBnLnRvdWNoMTtcbiAgICBpZiAoZy50b3VjaDApIGcudG91Y2gwWzFdID0gdGhpcy5fX3pvb20uaW52ZXJ0KGcudG91Y2gwWzBdKTtcbiAgICBlbHNlIGcuZW5kKCk7XG4gIH1cblxuICB6b29tLndoZWVsRGVsdGEgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAod2hlZWxEZWx0YSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkZCgrXyksIHpvb20pIDogd2hlZWxEZWx0YTtcbiAgfTtcblxuICB6b29tLmZpbHRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmaWx0ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JGQoISFfKSwgem9vbSkgOiBmaWx0ZXI7XG4gIH07XG5cbiAgem9vbS50b3VjaGFibGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodG91Y2hhYmxlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCRkKCEhXyksIHpvb20pIDogdG91Y2hhYmxlO1xuICB9O1xuXG4gIHpvb20uZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGV4dGVudCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkZChbWytfWzBdWzBdLCArX1swXVsxXV0sIFsrX1sxXVswXSwgK19bMV1bMV1dXSksIHpvb20pIDogZXh0ZW50O1xuICB9O1xuXG4gIHpvb20uc2NhbGVFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2NhbGVFeHRlbnRbMF0gPSArX1swXSwgc2NhbGVFeHRlbnRbMV0gPSArX1sxXSwgem9vbSkgOiBbc2NhbGVFeHRlbnRbMF0sIHNjYWxlRXh0ZW50WzFdXTtcbiAgfTtcblxuICB6b29tLnRyYW5zbGF0ZUV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0cmFuc2xhdGVFeHRlbnRbMF1bMF0gPSArX1swXVswXSwgdHJhbnNsYXRlRXh0ZW50WzFdWzBdID0gK19bMV1bMF0sIHRyYW5zbGF0ZUV4dGVudFswXVsxXSA9ICtfWzBdWzFdLCB0cmFuc2xhdGVFeHRlbnRbMV1bMV0gPSArX1sxXVsxXSwgem9vbSkgOiBbW3RyYW5zbGF0ZUV4dGVudFswXVswXSwgdHJhbnNsYXRlRXh0ZW50WzBdWzFdXSwgW3RyYW5zbGF0ZUV4dGVudFsxXVswXSwgdHJhbnNsYXRlRXh0ZW50WzFdWzFdXV07XG4gIH07XG5cbiAgem9vbS5jb25zdHJhaW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY29uc3RyYWluID0gXywgem9vbSkgOiBjb25zdHJhaW47XG4gIH07XG5cbiAgem9vbS5kdXJhdGlvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkdXJhdGlvbiA9ICtfLCB6b29tKSA6IGR1cmF0aW9uO1xuICB9O1xuXG4gIHpvb20uaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdGUgPSBfLCB6b29tKSA6IGludGVycG9sYXRlO1xuICB9O1xuXG4gIHpvb20ub24gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUgPSBsaXN0ZW5lcnMub24uYXBwbHkobGlzdGVuZXJzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbGlzdGVuZXJzID8gem9vbSA6IHZhbHVlO1xuICB9O1xuXG4gIHpvb20uY2xpY2tEaXN0YW5jZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGlja0Rpc3RhbmNlMiA9IChfID0gK18pICogXywgem9vbSkgOiBNYXRoLnNxcnQoY2xpY2tEaXN0YW5jZTIpO1xuICB9O1xuXG4gIHJldHVybiB6b29tO1xufVxuXG5leHBvcnRzLnZlcnNpb24gPSB2ZXJzaW9uO1xuZXhwb3J0cy5iaXNlY3QgPSBiaXNlY3RSaWdodDtcbmV4cG9ydHMuYmlzZWN0UmlnaHQgPSBiaXNlY3RSaWdodDtcbmV4cG9ydHMuYmlzZWN0TGVmdCA9IGJpc2VjdExlZnQ7XG5leHBvcnRzLmFzY2VuZGluZyA9IGFzY2VuZGluZztcbmV4cG9ydHMuYmlzZWN0b3IgPSBiaXNlY3RvcjtcbmV4cG9ydHMuY3Jvc3MgPSBjcm9zcztcbmV4cG9ydHMuZGVzY2VuZGluZyA9IGRlc2NlbmRpbmc7XG5leHBvcnRzLmRldmlhdGlvbiA9IGRldmlhdGlvbjtcbmV4cG9ydHMuZXh0ZW50ID0gZXh0ZW50O1xuZXhwb3J0cy5oaXN0b2dyYW0gPSBoaXN0b2dyYW07XG5leHBvcnRzLnRocmVzaG9sZEZyZWVkbWFuRGlhY29uaXMgPSBmcmVlZG1hbkRpYWNvbmlzO1xuZXhwb3J0cy50aHJlc2hvbGRTY290dCA9IHNjb3R0O1xuZXhwb3J0cy50aHJlc2hvbGRTdHVyZ2VzID0gdGhyZXNob2xkU3R1cmdlcztcbmV4cG9ydHMubWF4ID0gbWF4O1xuZXhwb3J0cy5tZWFuID0gbWVhbjtcbmV4cG9ydHMubWVkaWFuID0gbWVkaWFuO1xuZXhwb3J0cy5tZXJnZSA9IG1lcmdlO1xuZXhwb3J0cy5taW4gPSBtaW47XG5leHBvcnRzLnBhaXJzID0gcGFpcnM7XG5leHBvcnRzLnBlcm11dGUgPSBwZXJtdXRlO1xuZXhwb3J0cy5xdWFudGlsZSA9IHRocmVzaG9sZDtcbmV4cG9ydHMucmFuZ2UgPSBzZXF1ZW5jZTtcbmV4cG9ydHMuc2NhbiA9IHNjYW47XG5leHBvcnRzLnNodWZmbGUgPSBzaHVmZmxlO1xuZXhwb3J0cy5zdW0gPSBzdW07XG5leHBvcnRzLnRpY2tzID0gdGlja3M7XG5leHBvcnRzLnRpY2tJbmNyZW1lbnQgPSB0aWNrSW5jcmVtZW50O1xuZXhwb3J0cy50aWNrU3RlcCA9IHRpY2tTdGVwO1xuZXhwb3J0cy50cmFuc3Bvc2UgPSB0cmFuc3Bvc2U7XG5leHBvcnRzLnZhcmlhbmNlID0gdmFyaWFuY2U7XG5leHBvcnRzLnppcCA9IHppcDtcbmV4cG9ydHMuYXhpc1RvcCA9IGF4aXNUb3A7XG5leHBvcnRzLmF4aXNSaWdodCA9IGF4aXNSaWdodDtcbmV4cG9ydHMuYXhpc0JvdHRvbSA9IGF4aXNCb3R0b207XG5leHBvcnRzLmF4aXNMZWZ0ID0gYXhpc0xlZnQ7XG5leHBvcnRzLmJydXNoID0gYnJ1c2g7XG5leHBvcnRzLmJydXNoWCA9IGJydXNoWDtcbmV4cG9ydHMuYnJ1c2hZID0gYnJ1c2hZO1xuZXhwb3J0cy5icnVzaFNlbGVjdGlvbiA9IGJydXNoU2VsZWN0aW9uO1xuZXhwb3J0cy5jaG9yZCA9IGNob3JkO1xuZXhwb3J0cy5yaWJib24gPSByaWJib247XG5leHBvcnRzLm5lc3QgPSBuZXN0O1xuZXhwb3J0cy5zZXQgPSBzZXQkMjtcbmV4cG9ydHMubWFwID0gbWFwJDE7XG5leHBvcnRzLmtleXMgPSBrZXlzO1xuZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5leHBvcnRzLmVudHJpZXMgPSBlbnRyaWVzO1xuZXhwb3J0cy5jb2xvciA9IGNvbG9yO1xuZXhwb3J0cy5yZ2IgPSByZ2I7XG5leHBvcnRzLmhzbCA9IGhzbDtcbmV4cG9ydHMubGFiID0gbGFiO1xuZXhwb3J0cy5oY2wgPSBoY2w7XG5leHBvcnRzLmxjaCA9IGxjaDtcbmV4cG9ydHMuZ3JheSA9IGdyYXk7XG5leHBvcnRzLmN1YmVoZWxpeCA9IGN1YmVoZWxpeDtcbmV4cG9ydHMuY29udG91cnMgPSBjb250b3VycztcbmV4cG9ydHMuY29udG91ckRlbnNpdHkgPSBkZW5zaXR5O1xuZXhwb3J0cy5kaXNwYXRjaCA9IGRpc3BhdGNoO1xuZXhwb3J0cy5kcmFnID0gZHJhZztcbmV4cG9ydHMuZHJhZ0Rpc2FibGUgPSBkcmFnRGlzYWJsZTtcbmV4cG9ydHMuZHJhZ0VuYWJsZSA9IHllc2RyYWc7XG5leHBvcnRzLmRzdkZvcm1hdCA9IGRzdkZvcm1hdDtcbmV4cG9ydHMuY3N2UGFyc2UgPSBjc3ZQYXJzZTtcbmV4cG9ydHMuY3N2UGFyc2VSb3dzID0gY3N2UGFyc2VSb3dzO1xuZXhwb3J0cy5jc3ZGb3JtYXQgPSBjc3ZGb3JtYXQ7XG5leHBvcnRzLmNzdkZvcm1hdEJvZHkgPSBjc3ZGb3JtYXRCb2R5O1xuZXhwb3J0cy5jc3ZGb3JtYXRSb3dzID0gY3N2Rm9ybWF0Um93cztcbmV4cG9ydHMudHN2UGFyc2UgPSB0c3ZQYXJzZTtcbmV4cG9ydHMudHN2UGFyc2VSb3dzID0gdHN2UGFyc2VSb3dzO1xuZXhwb3J0cy50c3ZGb3JtYXQgPSB0c3ZGb3JtYXQ7XG5leHBvcnRzLnRzdkZvcm1hdEJvZHkgPSB0c3ZGb3JtYXRCb2R5O1xuZXhwb3J0cy50c3ZGb3JtYXRSb3dzID0gdHN2Rm9ybWF0Um93cztcbmV4cG9ydHMuYXV0b1R5cGUgPSBhdXRvVHlwZTtcbmV4cG9ydHMuZWFzZUxpbmVhciA9IGxpbmVhciQxO1xuZXhwb3J0cy5lYXNlUXVhZCA9IHF1YWRJbk91dDtcbmV4cG9ydHMuZWFzZVF1YWRJbiA9IHF1YWRJbjtcbmV4cG9ydHMuZWFzZVF1YWRPdXQgPSBxdWFkT3V0O1xuZXhwb3J0cy5lYXNlUXVhZEluT3V0ID0gcXVhZEluT3V0O1xuZXhwb3J0cy5lYXNlQ3ViaWMgPSBjdWJpY0luT3V0O1xuZXhwb3J0cy5lYXNlQ3ViaWNJbiA9IGN1YmljSW47XG5leHBvcnRzLmVhc2VDdWJpY091dCA9IGN1YmljT3V0O1xuZXhwb3J0cy5lYXNlQ3ViaWNJbk91dCA9IGN1YmljSW5PdXQ7XG5leHBvcnRzLmVhc2VQb2x5ID0gcG9seUluT3V0O1xuZXhwb3J0cy5lYXNlUG9seUluID0gcG9seUluO1xuZXhwb3J0cy5lYXNlUG9seU91dCA9IHBvbHlPdXQ7XG5leHBvcnRzLmVhc2VQb2x5SW5PdXQgPSBwb2x5SW5PdXQ7XG5leHBvcnRzLmVhc2VTaW4gPSBzaW5Jbk91dDtcbmV4cG9ydHMuZWFzZVNpbkluID0gc2luSW47XG5leHBvcnRzLmVhc2VTaW5PdXQgPSBzaW5PdXQ7XG5leHBvcnRzLmVhc2VTaW5Jbk91dCA9IHNpbkluT3V0O1xuZXhwb3J0cy5lYXNlRXhwID0gZXhwSW5PdXQ7XG5leHBvcnRzLmVhc2VFeHBJbiA9IGV4cEluO1xuZXhwb3J0cy5lYXNlRXhwT3V0ID0gZXhwT3V0O1xuZXhwb3J0cy5lYXNlRXhwSW5PdXQgPSBleHBJbk91dDtcbmV4cG9ydHMuZWFzZUNpcmNsZSA9IGNpcmNsZUluT3V0O1xuZXhwb3J0cy5lYXNlQ2lyY2xlSW4gPSBjaXJjbGVJbjtcbmV4cG9ydHMuZWFzZUNpcmNsZU91dCA9IGNpcmNsZU91dDtcbmV4cG9ydHMuZWFzZUNpcmNsZUluT3V0ID0gY2lyY2xlSW5PdXQ7XG5leHBvcnRzLmVhc2VCb3VuY2UgPSBib3VuY2VPdXQ7XG5leHBvcnRzLmVhc2VCb3VuY2VJbiA9IGJvdW5jZUluO1xuZXhwb3J0cy5lYXNlQm91bmNlT3V0ID0gYm91bmNlT3V0O1xuZXhwb3J0cy5lYXNlQm91bmNlSW5PdXQgPSBib3VuY2VJbk91dDtcbmV4cG9ydHMuZWFzZUJhY2sgPSBiYWNrSW5PdXQ7XG5leHBvcnRzLmVhc2VCYWNrSW4gPSBiYWNrSW47XG5leHBvcnRzLmVhc2VCYWNrT3V0ID0gYmFja091dDtcbmV4cG9ydHMuZWFzZUJhY2tJbk91dCA9IGJhY2tJbk91dDtcbmV4cG9ydHMuZWFzZUVsYXN0aWMgPSBlbGFzdGljT3V0O1xuZXhwb3J0cy5lYXNlRWxhc3RpY0luID0gZWxhc3RpY0luO1xuZXhwb3J0cy5lYXNlRWxhc3RpY091dCA9IGVsYXN0aWNPdXQ7XG5leHBvcnRzLmVhc2VFbGFzdGljSW5PdXQgPSBlbGFzdGljSW5PdXQ7XG5leHBvcnRzLmJsb2IgPSBibG9iO1xuZXhwb3J0cy5idWZmZXIgPSBidWZmZXI7XG5leHBvcnRzLmRzdiA9IGRzdjtcbmV4cG9ydHMuY3N2ID0gY3N2JDE7XG5leHBvcnRzLnRzdiA9IHRzdiQxO1xuZXhwb3J0cy5pbWFnZSA9IGltYWdlO1xuZXhwb3J0cy5qc29uID0ganNvbjtcbmV4cG9ydHMudGV4dCA9IHRleHQ7XG5leHBvcnRzLnhtbCA9IHhtbDtcbmV4cG9ydHMuaHRtbCA9IGh0bWw7XG5leHBvcnRzLnN2ZyA9IHN2ZztcbmV4cG9ydHMuZm9yY2VDZW50ZXIgPSBjZW50ZXIkMTtcbmV4cG9ydHMuZm9yY2VDb2xsaWRlID0gY29sbGlkZTtcbmV4cG9ydHMuZm9yY2VMaW5rID0gbGluaztcbmV4cG9ydHMuZm9yY2VNYW55Qm9keSA9IG1hbnlCb2R5O1xuZXhwb3J0cy5mb3JjZVJhZGlhbCA9IHJhZGlhbDtcbmV4cG9ydHMuZm9yY2VTaW11bGF0aW9uID0gc2ltdWxhdGlvbjtcbmV4cG9ydHMuZm9yY2VYID0geCQyO1xuZXhwb3J0cy5mb3JjZVkgPSB5JDI7XG5leHBvcnRzLmZvcm1hdERlZmF1bHRMb2NhbGUgPSBkZWZhdWx0TG9jYWxlO1xuZXhwb3J0cy5mb3JtYXRMb2NhbGUgPSBmb3JtYXRMb2NhbGU7XG5leHBvcnRzLmZvcm1hdFNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcjtcbmV4cG9ydHMucHJlY2lzaW9uRml4ZWQgPSBwcmVjaXNpb25GaXhlZDtcbmV4cG9ydHMucHJlY2lzaW9uUHJlZml4ID0gcHJlY2lzaW9uUHJlZml4O1xuZXhwb3J0cy5wcmVjaXNpb25Sb3VuZCA9IHByZWNpc2lvblJvdW5kO1xuZXhwb3J0cy5nZW9BcmVhID0gYXJlYSQxO1xuZXhwb3J0cy5nZW9Cb3VuZHMgPSBib3VuZHM7XG5leHBvcnRzLmdlb0NlbnRyb2lkID0gY2VudHJvaWQ7XG5leHBvcnRzLmdlb0NpcmNsZSA9IGNpcmNsZTtcbmV4cG9ydHMuZ2VvQ2xpcEFudGltZXJpZGlhbiA9IGNsaXBBbnRpbWVyaWRpYW47XG5leHBvcnRzLmdlb0NsaXBDaXJjbGUgPSBjbGlwQ2lyY2xlO1xuZXhwb3J0cy5nZW9DbGlwRXh0ZW50ID0gZXh0ZW50JDE7XG5leHBvcnRzLmdlb0NsaXBSZWN0YW5nbGUgPSBjbGlwUmVjdGFuZ2xlO1xuZXhwb3J0cy5nZW9Db250YWlucyA9IGNvbnRhaW5zJDE7XG5leHBvcnRzLmdlb0Rpc3RhbmNlID0gZGlzdGFuY2U7XG5leHBvcnRzLmdlb0dyYXRpY3VsZSA9IGdyYXRpY3VsZTtcbmV4cG9ydHMuZ2VvR3JhdGljdWxlMTAgPSBncmF0aWN1bGUxMDtcbmV4cG9ydHMuZ2VvSW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZSQxO1xuZXhwb3J0cy5nZW9MZW5ndGggPSBsZW5ndGgkMTtcbmV4cG9ydHMuZ2VvUGF0aCA9IGluZGV4JDE7XG5leHBvcnRzLmdlb0FsYmVycyA9IGFsYmVycztcbmV4cG9ydHMuZ2VvQWxiZXJzVXNhID0gYWxiZXJzVXNhO1xuZXhwb3J0cy5nZW9BemltdXRoYWxFcXVhbEFyZWEgPSBhemltdXRoYWxFcXVhbEFyZWE7XG5leHBvcnRzLmdlb0F6aW11dGhhbEVxdWFsQXJlYVJhdyA9IGF6aW11dGhhbEVxdWFsQXJlYVJhdztcbmV4cG9ydHMuZ2VvQXppbXV0aGFsRXF1aWRpc3RhbnQgPSBhemltdXRoYWxFcXVpZGlzdGFudDtcbmV4cG9ydHMuZ2VvQXppbXV0aGFsRXF1aWRpc3RhbnRSYXcgPSBhemltdXRoYWxFcXVpZGlzdGFudFJhdztcbmV4cG9ydHMuZ2VvQ29uaWNDb25mb3JtYWwgPSBjb25pY0NvbmZvcm1hbDtcbmV4cG9ydHMuZ2VvQ29uaWNDb25mb3JtYWxSYXcgPSBjb25pY0NvbmZvcm1hbFJhdztcbmV4cG9ydHMuZ2VvQ29uaWNFcXVhbEFyZWEgPSBjb25pY0VxdWFsQXJlYTtcbmV4cG9ydHMuZ2VvQ29uaWNFcXVhbEFyZWFSYXcgPSBjb25pY0VxdWFsQXJlYVJhdztcbmV4cG9ydHMuZ2VvQ29uaWNFcXVpZGlzdGFudCA9IGNvbmljRXF1aWRpc3RhbnQ7XG5leHBvcnRzLmdlb0NvbmljRXF1aWRpc3RhbnRSYXcgPSBjb25pY0VxdWlkaXN0YW50UmF3O1xuZXhwb3J0cy5nZW9FcXVhbEVhcnRoID0gZXF1YWxFYXJ0aDtcbmV4cG9ydHMuZ2VvRXF1YWxFYXJ0aFJhdyA9IGVxdWFsRWFydGhSYXc7XG5leHBvcnRzLmdlb0VxdWlyZWN0YW5ndWxhciA9IGVxdWlyZWN0YW5ndWxhcjtcbmV4cG9ydHMuZ2VvRXF1aXJlY3Rhbmd1bGFyUmF3ID0gZXF1aXJlY3Rhbmd1bGFyUmF3O1xuZXhwb3J0cy5nZW9Hbm9tb25pYyA9IGdub21vbmljO1xuZXhwb3J0cy5nZW9Hbm9tb25pY1JhdyA9IGdub21vbmljUmF3O1xuZXhwb3J0cy5nZW9JZGVudGl0eSA9IGlkZW50aXR5JDU7XG5leHBvcnRzLmdlb1Byb2plY3Rpb24gPSBwcm9qZWN0aW9uO1xuZXhwb3J0cy5nZW9Qcm9qZWN0aW9uTXV0YXRvciA9IHByb2plY3Rpb25NdXRhdG9yO1xuZXhwb3J0cy5nZW9NZXJjYXRvciA9IG1lcmNhdG9yO1xuZXhwb3J0cy5nZW9NZXJjYXRvclJhdyA9IG1lcmNhdG9yUmF3O1xuZXhwb3J0cy5nZW9OYXR1cmFsRWFydGgxID0gbmF0dXJhbEVhcnRoMTtcbmV4cG9ydHMuZ2VvTmF0dXJhbEVhcnRoMVJhdyA9IG5hdHVyYWxFYXJ0aDFSYXc7XG5leHBvcnRzLmdlb09ydGhvZ3JhcGhpYyA9IG9ydGhvZ3JhcGhpYztcbmV4cG9ydHMuZ2VvT3J0aG9ncmFwaGljUmF3ID0gb3J0aG9ncmFwaGljUmF3O1xuZXhwb3J0cy5nZW9TdGVyZW9ncmFwaGljID0gc3RlcmVvZ3JhcGhpYztcbmV4cG9ydHMuZ2VvU3RlcmVvZ3JhcGhpY1JhdyA9IHN0ZXJlb2dyYXBoaWNSYXc7XG5leHBvcnRzLmdlb1RyYW5zdmVyc2VNZXJjYXRvciA9IHRyYW5zdmVyc2VNZXJjYXRvcjtcbmV4cG9ydHMuZ2VvVHJhbnN2ZXJzZU1lcmNhdG9yUmF3ID0gdHJhbnN2ZXJzZU1lcmNhdG9yUmF3O1xuZXhwb3J0cy5nZW9Sb3RhdGlvbiA9IHJvdGF0aW9uO1xuZXhwb3J0cy5nZW9TdHJlYW0gPSBnZW9TdHJlYW07XG5leHBvcnRzLmdlb1RyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbmV4cG9ydHMuY2x1c3RlciA9IGNsdXN0ZXI7XG5leHBvcnRzLmhpZXJhcmNoeSA9IGhpZXJhcmNoeTtcbmV4cG9ydHMucGFjayA9IGluZGV4JDI7XG5leHBvcnRzLnBhY2tTaWJsaW5ncyA9IHNpYmxpbmdzO1xuZXhwb3J0cy5wYWNrRW5jbG9zZSA9IGVuY2xvc2U7XG5leHBvcnRzLnBhcnRpdGlvbiA9IHBhcnRpdGlvbjtcbmV4cG9ydHMuc3RyYXRpZnkgPSBzdHJhdGlmeTtcbmV4cG9ydHMudHJlZSA9IHRyZWU7XG5leHBvcnRzLnRyZWVtYXAgPSBpbmRleCQzO1xuZXhwb3J0cy50cmVlbWFwQmluYXJ5ID0gYmluYXJ5O1xuZXhwb3J0cy50cmVlbWFwRGljZSA9IHRyZWVtYXBEaWNlO1xuZXhwb3J0cy50cmVlbWFwU2xpY2UgPSB0cmVlbWFwU2xpY2U7XG5leHBvcnRzLnRyZWVtYXBTbGljZURpY2UgPSBzbGljZURpY2U7XG5leHBvcnRzLnRyZWVtYXBTcXVhcmlmeSA9IHNxdWFyaWZ5O1xuZXhwb3J0cy50cmVlbWFwUmVzcXVhcmlmeSA9IHJlc3F1YXJpZnk7XG5leHBvcnRzLmludGVycG9sYXRlID0gaW50ZXJwb2xhdGVWYWx1ZTtcbmV4cG9ydHMuaW50ZXJwb2xhdGVBcnJheSA9IGFycmF5JDE7XG5leHBvcnRzLmludGVycG9sYXRlQmFzaXMgPSBiYXNpcyQxO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZUJhc2lzQ2xvc2VkID0gYmFzaXNDbG9zZWQ7XG5leHBvcnRzLmludGVycG9sYXRlRGF0ZSA9IGRhdGU7XG5leHBvcnRzLmludGVycG9sYXRlRGlzY3JldGUgPSBkaXNjcmV0ZTtcbmV4cG9ydHMuaW50ZXJwb2xhdGVIdWUgPSBodWUkMTtcbmV4cG9ydHMuaW50ZXJwb2xhdGVOdW1iZXIgPSBpbnRlcnBvbGF0ZU51bWJlcjtcbmV4cG9ydHMuaW50ZXJwb2xhdGVPYmplY3QgPSBvYmplY3Q7XG5leHBvcnRzLmludGVycG9sYXRlUm91bmQgPSBpbnRlcnBvbGF0ZVJvdW5kO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZVN0cmluZyA9IGludGVycG9sYXRlU3RyaW5nO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyA9IGludGVycG9sYXRlVHJhbnNmb3JtQ3NzO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyA9IGludGVycG9sYXRlVHJhbnNmb3JtU3ZnO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZVpvb20gPSBpbnRlcnBvbGF0ZVpvb207XG5leHBvcnRzLmludGVycG9sYXRlUmdiID0gaW50ZXJwb2xhdGVSZ2I7XG5leHBvcnRzLmludGVycG9sYXRlUmdiQmFzaXMgPSByZ2JCYXNpcztcbmV4cG9ydHMuaW50ZXJwb2xhdGVSZ2JCYXNpc0Nsb3NlZCA9IHJnYkJhc2lzQ2xvc2VkO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZUhzbCA9IGhzbCQyO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZUhzbExvbmcgPSBoc2xMb25nO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZUxhYiA9IGxhYiQxO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZUhjbCA9IGhjbCQyO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZUhjbExvbmcgPSBoY2xMb25nO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZUN1YmVoZWxpeCA9IGN1YmVoZWxpeCQyO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmcgPSBjdWJlaGVsaXhMb25nO1xuZXhwb3J0cy5waWVjZXdpc2UgPSBwaWVjZXdpc2U7XG5leHBvcnRzLnF1YW50aXplID0gcXVhbnRpemU7XG5leHBvcnRzLnBhdGggPSBwYXRoO1xuZXhwb3J0cy5wb2x5Z29uQXJlYSA9IGFyZWEkMjtcbmV4cG9ydHMucG9seWdvbkNlbnRyb2lkID0gY2VudHJvaWQkMTtcbmV4cG9ydHMucG9seWdvbkh1bGwgPSBodWxsO1xuZXhwb3J0cy5wb2x5Z29uQ29udGFpbnMgPSBjb250YWlucyQyO1xuZXhwb3J0cy5wb2x5Z29uTGVuZ3RoID0gbGVuZ3RoJDI7XG5leHBvcnRzLnF1YWR0cmVlID0gcXVhZHRyZWU7XG5leHBvcnRzLnJhbmRvbVVuaWZvcm0gPSB1bmlmb3JtO1xuZXhwb3J0cy5yYW5kb21Ob3JtYWwgPSBub3JtYWw7XG5leHBvcnRzLnJhbmRvbUxvZ05vcm1hbCA9IGxvZ05vcm1hbDtcbmV4cG9ydHMucmFuZG9tQmF0ZXMgPSBiYXRlcztcbmV4cG9ydHMucmFuZG9tSXJ3aW5IYWxsID0gaXJ3aW5IYWxsO1xuZXhwb3J0cy5yYW5kb21FeHBvbmVudGlhbCA9IGV4cG9uZW50aWFsJDE7XG5leHBvcnRzLnNjYWxlQmFuZCA9IGJhbmQ7XG5leHBvcnRzLnNjYWxlUG9pbnQgPSBwb2ludCQxO1xuZXhwb3J0cy5zY2FsZUlkZW50aXR5ID0gaWRlbnRpdHkkNztcbmV4cG9ydHMuc2NhbGVMaW5lYXIgPSBsaW5lYXIkMjtcbmV4cG9ydHMuc2NhbGVMb2cgPSBsb2ckMTtcbmV4cG9ydHMuc2NhbGVTeW1sb2cgPSBzeW1sb2c7XG5leHBvcnRzLnNjYWxlT3JkaW5hbCA9IG9yZGluYWw7XG5leHBvcnRzLnNjYWxlSW1wbGljaXQgPSBpbXBsaWNpdDtcbmV4cG9ydHMuc2NhbGVQb3cgPSBwb3ckMTtcbmV4cG9ydHMuc2NhbGVTcXJ0ID0gc3FydCQxO1xuZXhwb3J0cy5zY2FsZVF1YW50aWxlID0gcXVhbnRpbGUkJDE7XG5leHBvcnRzLnNjYWxlUXVhbnRpemUgPSBxdWFudGl6ZSQxO1xuZXhwb3J0cy5zY2FsZVRocmVzaG9sZCA9IHRocmVzaG9sZCQxO1xuZXhwb3J0cy5zY2FsZVRpbWUgPSB0aW1lO1xuZXhwb3J0cy5zY2FsZVV0YyA9IHV0Y1RpbWU7XG5leHBvcnRzLnNjYWxlU2VxdWVudGlhbCA9IHNlcXVlbnRpYWw7XG5leHBvcnRzLnNjYWxlU2VxdWVudGlhbExvZyA9IHNlcXVlbnRpYWxMb2c7XG5leHBvcnRzLnNjYWxlU2VxdWVudGlhbFBvdyA9IHNlcXVlbnRpYWxQb3c7XG5leHBvcnRzLnNjYWxlU2VxdWVudGlhbFNxcnQgPSBzZXF1ZW50aWFsU3FydDtcbmV4cG9ydHMuc2NhbGVTZXF1ZW50aWFsU3ltbG9nID0gc2VxdWVudGlhbFN5bWxvZztcbmV4cG9ydHMuc2NhbGVTZXF1ZW50aWFsUXVhbnRpbGUgPSBzZXF1ZW50aWFsUXVhbnRpbGU7XG5leHBvcnRzLnNjYWxlRGl2ZXJnaW5nID0gZGl2ZXJnaW5nO1xuZXhwb3J0cy5zY2FsZURpdmVyZ2luZ0xvZyA9IGRpdmVyZ2luZ0xvZztcbmV4cG9ydHMuc2NhbGVEaXZlcmdpbmdQb3cgPSBkaXZlcmdpbmdQb3c7XG5leHBvcnRzLnNjYWxlRGl2ZXJnaW5nU3FydCA9IGRpdmVyZ2luZ1NxcnQ7XG5leHBvcnRzLnNjYWxlRGl2ZXJnaW5nU3ltbG9nID0gZGl2ZXJnaW5nU3ltbG9nO1xuZXhwb3J0cy50aWNrRm9ybWF0ID0gdGlja0Zvcm1hdDtcbmV4cG9ydHMuc2NoZW1lQ2F0ZWdvcnkxMCA9IGNhdGVnb3J5MTA7XG5leHBvcnRzLnNjaGVtZUFjY2VudCA9IEFjY2VudDtcbmV4cG9ydHMuc2NoZW1lRGFyazIgPSBEYXJrMjtcbmV4cG9ydHMuc2NoZW1lUGFpcmVkID0gUGFpcmVkO1xuZXhwb3J0cy5zY2hlbWVQYXN0ZWwxID0gUGFzdGVsMTtcbmV4cG9ydHMuc2NoZW1lUGFzdGVsMiA9IFBhc3RlbDI7XG5leHBvcnRzLnNjaGVtZVNldDEgPSBTZXQxO1xuZXhwb3J0cy5zY2hlbWVTZXQyID0gU2V0MjtcbmV4cG9ydHMuc2NoZW1lU2V0MyA9IFNldDM7XG5leHBvcnRzLmludGVycG9sYXRlQnJCRyA9IEJyQkc7XG5leHBvcnRzLnNjaGVtZUJyQkcgPSBzY2hlbWU7XG5leHBvcnRzLmludGVycG9sYXRlUFJHbiA9IFBSR247XG5leHBvcnRzLnNjaGVtZVBSR24gPSBzY2hlbWUkMTtcbmV4cG9ydHMuaW50ZXJwb2xhdGVQaVlHID0gUGlZRztcbmV4cG9ydHMuc2NoZW1lUGlZRyA9IHNjaGVtZSQyO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZVB1T3IgPSBQdU9yO1xuZXhwb3J0cy5zY2hlbWVQdU9yID0gc2NoZW1lJDM7XG5leHBvcnRzLmludGVycG9sYXRlUmRCdSA9IFJkQnU7XG5leHBvcnRzLnNjaGVtZVJkQnUgPSBzY2hlbWUkNDtcbmV4cG9ydHMuaW50ZXJwb2xhdGVSZEd5ID0gUmRHeTtcbmV4cG9ydHMuc2NoZW1lUmRHeSA9IHNjaGVtZSQ1O1xuZXhwb3J0cy5pbnRlcnBvbGF0ZVJkWWxCdSA9IFJkWWxCdTtcbmV4cG9ydHMuc2NoZW1lUmRZbEJ1ID0gc2NoZW1lJDY7XG5leHBvcnRzLmludGVycG9sYXRlUmRZbEduID0gUmRZbEduO1xuZXhwb3J0cy5zY2hlbWVSZFlsR24gPSBzY2hlbWUkNztcbmV4cG9ydHMuaW50ZXJwb2xhdGVTcGVjdHJhbCA9IFNwZWN0cmFsO1xuZXhwb3J0cy5zY2hlbWVTcGVjdHJhbCA9IHNjaGVtZSQ4O1xuZXhwb3J0cy5pbnRlcnBvbGF0ZUJ1R24gPSBCdUduO1xuZXhwb3J0cy5zY2hlbWVCdUduID0gc2NoZW1lJDk7XG5leHBvcnRzLmludGVycG9sYXRlQnVQdSA9IEJ1UHU7XG5leHBvcnRzLnNjaGVtZUJ1UHUgPSBzY2hlbWUkYTtcbmV4cG9ydHMuaW50ZXJwb2xhdGVHbkJ1ID0gR25CdTtcbmV4cG9ydHMuc2NoZW1lR25CdSA9IHNjaGVtZSRiO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZU9yUmQgPSBPclJkO1xuZXhwb3J0cy5zY2hlbWVPclJkID0gc2NoZW1lJGM7XG5leHBvcnRzLmludGVycG9sYXRlUHVCdUduID0gUHVCdUduO1xuZXhwb3J0cy5zY2hlbWVQdUJ1R24gPSBzY2hlbWUkZDtcbmV4cG9ydHMuaW50ZXJwb2xhdGVQdUJ1ID0gUHVCdTtcbmV4cG9ydHMuc2NoZW1lUHVCdSA9IHNjaGVtZSRlO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZVB1UmQgPSBQdVJkO1xuZXhwb3J0cy5zY2hlbWVQdVJkID0gc2NoZW1lJGY7XG5leHBvcnRzLmludGVycG9sYXRlUmRQdSA9IFJkUHU7XG5leHBvcnRzLnNjaGVtZVJkUHUgPSBzY2hlbWUkZztcbmV4cG9ydHMuaW50ZXJwb2xhdGVZbEduQnUgPSBZbEduQnU7XG5leHBvcnRzLnNjaGVtZVlsR25CdSA9IHNjaGVtZSRoO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZVlsR24gPSBZbEduO1xuZXhwb3J0cy5zY2hlbWVZbEduID0gc2NoZW1lJGk7XG5leHBvcnRzLmludGVycG9sYXRlWWxPckJyID0gWWxPckJyO1xuZXhwb3J0cy5zY2hlbWVZbE9yQnIgPSBzY2hlbWUkajtcbmV4cG9ydHMuaW50ZXJwb2xhdGVZbE9yUmQgPSBZbE9yUmQ7XG5leHBvcnRzLnNjaGVtZVlsT3JSZCA9IHNjaGVtZSRrO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZUJsdWVzID0gQmx1ZXM7XG5leHBvcnRzLnNjaGVtZUJsdWVzID0gc2NoZW1lJGw7XG5leHBvcnRzLmludGVycG9sYXRlR3JlZW5zID0gR3JlZW5zO1xuZXhwb3J0cy5zY2hlbWVHcmVlbnMgPSBzY2hlbWUkbTtcbmV4cG9ydHMuaW50ZXJwb2xhdGVHcmV5cyA9IEdyZXlzO1xuZXhwb3J0cy5zY2hlbWVHcmV5cyA9IHNjaGVtZSRuO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZVB1cnBsZXMgPSBQdXJwbGVzO1xuZXhwb3J0cy5zY2hlbWVQdXJwbGVzID0gc2NoZW1lJG87XG5leHBvcnRzLmludGVycG9sYXRlUmVkcyA9IFJlZHM7XG5leHBvcnRzLnNjaGVtZVJlZHMgPSBzY2hlbWUkcDtcbmV4cG9ydHMuaW50ZXJwb2xhdGVPcmFuZ2VzID0gT3JhbmdlcztcbmV4cG9ydHMuc2NoZW1lT3JhbmdlcyA9IHNjaGVtZSRxO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZUN1YmVoZWxpeERlZmF1bHQgPSBjdWJlaGVsaXgkMztcbmV4cG9ydHMuaW50ZXJwb2xhdGVSYWluYm93ID0gcmFpbmJvdztcbmV4cG9ydHMuaW50ZXJwb2xhdGVXYXJtID0gd2FybTtcbmV4cG9ydHMuaW50ZXJwb2xhdGVDb29sID0gY29vbDtcbmV4cG9ydHMuaW50ZXJwb2xhdGVTaW5lYm93ID0gc2luZWJvdztcbmV4cG9ydHMuaW50ZXJwb2xhdGVWaXJpZGlzID0gdmlyaWRpcztcbmV4cG9ydHMuaW50ZXJwb2xhdGVNYWdtYSA9IG1hZ21hO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZUluZmVybm8gPSBpbmZlcm5vO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZVBsYXNtYSA9IHBsYXNtYTtcbmV4cG9ydHMuY3JlYXRlID0gY3JlYXRlO1xuZXhwb3J0cy5jcmVhdG9yID0gY3JlYXRvcjtcbmV4cG9ydHMubG9jYWwgPSBsb2NhbDtcbmV4cG9ydHMubWF0Y2hlciA9IG1hdGNoZXI7XG5leHBvcnRzLm1vdXNlID0gbW91c2U7XG5leHBvcnRzLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcbmV4cG9ydHMubmFtZXNwYWNlcyA9IG5hbWVzcGFjZXM7XG5leHBvcnRzLmNsaWVudFBvaW50ID0gcG9pbnQ7XG5leHBvcnRzLnNlbGVjdCA9IHNlbGVjdDtcbmV4cG9ydHMuc2VsZWN0QWxsID0gc2VsZWN0QWxsO1xuZXhwb3J0cy5zZWxlY3Rpb24gPSBzZWxlY3Rpb247XG5leHBvcnRzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5leHBvcnRzLnNlbGVjdG9yQWxsID0gc2VsZWN0b3JBbGw7XG5leHBvcnRzLnN0eWxlID0gc3R5bGVWYWx1ZTtcbmV4cG9ydHMudG91Y2ggPSB0b3VjaDtcbmV4cG9ydHMudG91Y2hlcyA9IHRvdWNoZXM7XG5leHBvcnRzLndpbmRvdyA9IGRlZmF1bHRWaWV3O1xuZXhwb3J0cy5jdXN0b21FdmVudCA9IGN1c3RvbUV2ZW50O1xuZXhwb3J0cy5hcmMgPSBhcmM7XG5leHBvcnRzLmFyZWEgPSBhcmVhJDM7XG5leHBvcnRzLmxpbmUgPSBsaW5lO1xuZXhwb3J0cy5waWUgPSBwaWU7XG5leHBvcnRzLmFyZWFSYWRpYWwgPSBhcmVhUmFkaWFsO1xuZXhwb3J0cy5yYWRpYWxBcmVhID0gYXJlYVJhZGlhbDtcbmV4cG9ydHMubGluZVJhZGlhbCA9IGxpbmVSYWRpYWwkMTtcbmV4cG9ydHMucmFkaWFsTGluZSA9IGxpbmVSYWRpYWwkMTtcbmV4cG9ydHMucG9pbnRSYWRpYWwgPSBwb2ludFJhZGlhbDtcbmV4cG9ydHMubGlua0hvcml6b250YWwgPSBsaW5rSG9yaXpvbnRhbDtcbmV4cG9ydHMubGlua1ZlcnRpY2FsID0gbGlua1ZlcnRpY2FsO1xuZXhwb3J0cy5saW5rUmFkaWFsID0gbGlua1JhZGlhbDtcbmV4cG9ydHMuc3ltYm9sID0gc3ltYm9sO1xuZXhwb3J0cy5zeW1ib2xzID0gc3ltYm9scztcbmV4cG9ydHMuc3ltYm9sQ2lyY2xlID0gY2lyY2xlJDI7XG5leHBvcnRzLnN5bWJvbENyb3NzID0gY3Jvc3MkMjtcbmV4cG9ydHMuc3ltYm9sRGlhbW9uZCA9IGRpYW1vbmQ7XG5leHBvcnRzLnN5bWJvbFNxdWFyZSA9IHNxdWFyZTtcbmV4cG9ydHMuc3ltYm9sU3RhciA9IHN0YXI7XG5leHBvcnRzLnN5bWJvbFRyaWFuZ2xlID0gdHJpYW5nbGU7XG5leHBvcnRzLnN5bWJvbFd5ZSA9IHd5ZTtcbmV4cG9ydHMuY3VydmVCYXNpc0Nsb3NlZCA9IGJhc2lzQ2xvc2VkJDE7XG5leHBvcnRzLmN1cnZlQmFzaXNPcGVuID0gYmFzaXNPcGVuO1xuZXhwb3J0cy5jdXJ2ZUJhc2lzID0gYmFzaXMkMjtcbmV4cG9ydHMuY3VydmVCdW5kbGUgPSBidW5kbGU7XG5leHBvcnRzLmN1cnZlQ2FyZGluYWxDbG9zZWQgPSBjYXJkaW5hbENsb3NlZDtcbmV4cG9ydHMuY3VydmVDYXJkaW5hbE9wZW4gPSBjYXJkaW5hbE9wZW47XG5leHBvcnRzLmN1cnZlQ2FyZGluYWwgPSBjYXJkaW5hbDtcbmV4cG9ydHMuY3VydmVDYXRtdWxsUm9tQ2xvc2VkID0gY2F0bXVsbFJvbUNsb3NlZDtcbmV4cG9ydHMuY3VydmVDYXRtdWxsUm9tT3BlbiA9IGNhdG11bGxSb21PcGVuO1xuZXhwb3J0cy5jdXJ2ZUNhdG11bGxSb20gPSBjYXRtdWxsUm9tO1xuZXhwb3J0cy5jdXJ2ZUxpbmVhckNsb3NlZCA9IGxpbmVhckNsb3NlZDtcbmV4cG9ydHMuY3VydmVMaW5lYXIgPSBjdXJ2ZUxpbmVhcjtcbmV4cG9ydHMuY3VydmVNb25vdG9uZVggPSBtb25vdG9uZVg7XG5leHBvcnRzLmN1cnZlTW9ub3RvbmVZID0gbW9ub3RvbmVZO1xuZXhwb3J0cy5jdXJ2ZU5hdHVyYWwgPSBuYXR1cmFsO1xuZXhwb3J0cy5jdXJ2ZVN0ZXAgPSBzdGVwO1xuZXhwb3J0cy5jdXJ2ZVN0ZXBBZnRlciA9IHN0ZXBBZnRlcjtcbmV4cG9ydHMuY3VydmVTdGVwQmVmb3JlID0gc3RlcEJlZm9yZTtcbmV4cG9ydHMuc3RhY2sgPSBzdGFjaztcbmV4cG9ydHMuc3RhY2tPZmZzZXRFeHBhbmQgPSBleHBhbmQ7XG5leHBvcnRzLnN0YWNrT2Zmc2V0RGl2ZXJnaW5nID0gZGl2ZXJnaW5nJDE7XG5leHBvcnRzLnN0YWNrT2Zmc2V0Tm9uZSA9IG5vbmUkMTtcbmV4cG9ydHMuc3RhY2tPZmZzZXRTaWxob3VldHRlID0gc2lsaG91ZXR0ZTtcbmV4cG9ydHMuc3RhY2tPZmZzZXRXaWdnbGUgPSB3aWdnbGU7XG5leHBvcnRzLnN0YWNrT3JkZXJBcHBlYXJhbmNlID0gYXBwZWFyYW5jZTtcbmV4cG9ydHMuc3RhY2tPcmRlckFzY2VuZGluZyA9IGFzY2VuZGluZyQzO1xuZXhwb3J0cy5zdGFja09yZGVyRGVzY2VuZGluZyA9IGRlc2NlbmRpbmckMjtcbmV4cG9ydHMuc3RhY2tPcmRlckluc2lkZU91dCA9IGluc2lkZU91dDtcbmV4cG9ydHMuc3RhY2tPcmRlck5vbmUgPSBub25lJDI7XG5leHBvcnRzLnN0YWNrT3JkZXJSZXZlcnNlID0gcmV2ZXJzZTtcbmV4cG9ydHMudGltZUludGVydmFsID0gbmV3SW50ZXJ2YWw7XG5leHBvcnRzLnRpbWVNaWxsaXNlY29uZCA9IG1pbGxpc2Vjb25kO1xuZXhwb3J0cy50aW1lTWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmRzO1xuZXhwb3J0cy51dGNNaWxsaXNlY29uZCA9IG1pbGxpc2Vjb25kO1xuZXhwb3J0cy51dGNNaWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZHM7XG5leHBvcnRzLnRpbWVTZWNvbmQgPSBzZWNvbmQ7XG5leHBvcnRzLnRpbWVTZWNvbmRzID0gc2Vjb25kcztcbmV4cG9ydHMudXRjU2Vjb25kID0gc2Vjb25kO1xuZXhwb3J0cy51dGNTZWNvbmRzID0gc2Vjb25kcztcbmV4cG9ydHMudGltZU1pbnV0ZSA9IG1pbnV0ZTtcbmV4cG9ydHMudGltZU1pbnV0ZXMgPSBtaW51dGVzO1xuZXhwb3J0cy50aW1lSG91ciA9IGhvdXI7XG5leHBvcnRzLnRpbWVIb3VycyA9IGhvdXJzO1xuZXhwb3J0cy50aW1lRGF5ID0gZGF5O1xuZXhwb3J0cy50aW1lRGF5cyA9IGRheXM7XG5leHBvcnRzLnRpbWVXZWVrID0gc3VuZGF5O1xuZXhwb3J0cy50aW1lV2Vla3MgPSBzdW5kYXlzO1xuZXhwb3J0cy50aW1lU3VuZGF5ID0gc3VuZGF5O1xuZXhwb3J0cy50aW1lU3VuZGF5cyA9IHN1bmRheXM7XG5leHBvcnRzLnRpbWVNb25kYXkgPSBtb25kYXk7XG5leHBvcnRzLnRpbWVNb25kYXlzID0gbW9uZGF5cztcbmV4cG9ydHMudGltZVR1ZXNkYXkgPSB0dWVzZGF5O1xuZXhwb3J0cy50aW1lVHVlc2RheXMgPSB0dWVzZGF5cztcbmV4cG9ydHMudGltZVdlZG5lc2RheSA9IHdlZG5lc2RheTtcbmV4cG9ydHMudGltZVdlZG5lc2RheXMgPSB3ZWRuZXNkYXlzO1xuZXhwb3J0cy50aW1lVGh1cnNkYXkgPSB0aHVyc2RheTtcbmV4cG9ydHMudGltZVRodXJzZGF5cyA9IHRodXJzZGF5cztcbmV4cG9ydHMudGltZUZyaWRheSA9IGZyaWRheTtcbmV4cG9ydHMudGltZUZyaWRheXMgPSBmcmlkYXlzO1xuZXhwb3J0cy50aW1lU2F0dXJkYXkgPSBzYXR1cmRheTtcbmV4cG9ydHMudGltZVNhdHVyZGF5cyA9IHNhdHVyZGF5cztcbmV4cG9ydHMudGltZU1vbnRoID0gbW9udGg7XG5leHBvcnRzLnRpbWVNb250aHMgPSBtb250aHM7XG5leHBvcnRzLnRpbWVZZWFyID0geWVhcjtcbmV4cG9ydHMudGltZVllYXJzID0geWVhcnM7XG5leHBvcnRzLnV0Y01pbnV0ZSA9IHV0Y01pbnV0ZTtcbmV4cG9ydHMudXRjTWludXRlcyA9IHV0Y01pbnV0ZXM7XG5leHBvcnRzLnV0Y0hvdXIgPSB1dGNIb3VyO1xuZXhwb3J0cy51dGNIb3VycyA9IHV0Y0hvdXJzO1xuZXhwb3J0cy51dGNEYXkgPSB1dGNEYXk7XG5leHBvcnRzLnV0Y0RheXMgPSB1dGNEYXlzO1xuZXhwb3J0cy51dGNXZWVrID0gdXRjU3VuZGF5O1xuZXhwb3J0cy51dGNXZWVrcyA9IHV0Y1N1bmRheXM7XG5leHBvcnRzLnV0Y1N1bmRheSA9IHV0Y1N1bmRheTtcbmV4cG9ydHMudXRjU3VuZGF5cyA9IHV0Y1N1bmRheXM7XG5leHBvcnRzLnV0Y01vbmRheSA9IHV0Y01vbmRheTtcbmV4cG9ydHMudXRjTW9uZGF5cyA9IHV0Y01vbmRheXM7XG5leHBvcnRzLnV0Y1R1ZXNkYXkgPSB1dGNUdWVzZGF5O1xuZXhwb3J0cy51dGNUdWVzZGF5cyA9IHV0Y1R1ZXNkYXlzO1xuZXhwb3J0cy51dGNXZWRuZXNkYXkgPSB1dGNXZWRuZXNkYXk7XG5leHBvcnRzLnV0Y1dlZG5lc2RheXMgPSB1dGNXZWRuZXNkYXlzO1xuZXhwb3J0cy51dGNUaHVyc2RheSA9IHV0Y1RodXJzZGF5O1xuZXhwb3J0cy51dGNUaHVyc2RheXMgPSB1dGNUaHVyc2RheXM7XG5leHBvcnRzLnV0Y0ZyaWRheSA9IHV0Y0ZyaWRheTtcbmV4cG9ydHMudXRjRnJpZGF5cyA9IHV0Y0ZyaWRheXM7XG5leHBvcnRzLnV0Y1NhdHVyZGF5ID0gdXRjU2F0dXJkYXk7XG5leHBvcnRzLnV0Y1NhdHVyZGF5cyA9IHV0Y1NhdHVyZGF5cztcbmV4cG9ydHMudXRjTW9udGggPSB1dGNNb250aDtcbmV4cG9ydHMudXRjTW9udGhzID0gdXRjTW9udGhzO1xuZXhwb3J0cy51dGNZZWFyID0gdXRjWWVhcjtcbmV4cG9ydHMudXRjWWVhcnMgPSB1dGNZZWFycztcbmV4cG9ydHMudGltZUZvcm1hdERlZmF1bHRMb2NhbGUgPSBkZWZhdWx0TG9jYWxlJDE7XG5leHBvcnRzLnRpbWVGb3JtYXRMb2NhbGUgPSBmb3JtYXRMb2NhbGUkMTtcbmV4cG9ydHMuaXNvRm9ybWF0ID0gZm9ybWF0SXNvO1xuZXhwb3J0cy5pc29QYXJzZSA9IHBhcnNlSXNvO1xuZXhwb3J0cy5ub3cgPSBub3c7XG5leHBvcnRzLnRpbWVyID0gdGltZXI7XG5leHBvcnRzLnRpbWVyRmx1c2ggPSB0aW1lckZsdXNoO1xuZXhwb3J0cy50aW1lb3V0ID0gdGltZW91dCQxO1xuZXhwb3J0cy5pbnRlcnZhbCA9IGludGVydmFsJDE7XG5leHBvcnRzLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uO1xuZXhwb3J0cy5hY3RpdmUgPSBhY3RpdmU7XG5leHBvcnRzLmludGVycnVwdCA9IGludGVycnVwdDtcbmV4cG9ydHMudm9yb25vaSA9IHZvcm9ub2k7XG5leHBvcnRzLnpvb20gPSB6b29tO1xuZXhwb3J0cy56b29tVHJhbnNmb3JtID0gdHJhbnNmb3JtJDE7XG5leHBvcnRzLnpvb21JZGVudGl0eSA9IGlkZW50aXR5JDk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pKSk7XG4iLCIvKipcbiAqIElvbi5Tb3VuZFxuICogdmVyc2lvbiAzLjAuNyBCdWlsZCA4OVxuICogwqkgRGVuaXMgSW5lc2hpbiwgMjAxNlxuICpcbiAqIFByb2plY3QgcGFnZTogICAgaHR0cDovL2lvbmRlbi5jb20vYS9wbHVnaW5zL2lvbi5zb3VuZC9lbi5odG1sXG4gKiBHaXRIdWIgcGFnZTogICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9Jb25EZW4vaW9uLnNvdW5kXG4gKlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2VuY2U6XG4gKiBodHRwOi8vaW9uZGVuLmNvbS9hL3BsdWdpbnMvbGljZW5jZS1lbi5odG1sXG4gKi9cblxuOyhmdW5jdGlvbiAod2luZG93LCBuYXZpZ2F0b3IsICQsIHVuZGVmaW5lZCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgd2luZG93LmlvbiA9IHdpbmRvdy5pb24gfHwge307XG5cbiAgICBpZiAoaW9uLnNvdW5kKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgd2FybiA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgICAgIGlmICghdGV4dCkgdGV4dCA9IFwidW5kZWZpbmVkXCI7XG5cbiAgICAgICAgaWYgKHdpbmRvdy5jb25zb2xlKSB7XG4gICAgICAgICAgICBpZiAoY29uc29sZS53YXJuICYmIHR5cGVvZiBjb25zb2xlLndhcm4gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybih0ZXh0KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29uc29sZS5sb2cgJiYgdHlwZW9mIGNvbnNvbGUubG9nID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0ZXh0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGQgPSAkICYmICQoXCIjZGVidWdcIik7XG4gICAgICAgICAgICBpZiAoZCAmJiBkLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZhciBhID0gZC5odG1sKCk7XG4gICAgICAgICAgICAgICAgZC5odG1sKGEgKyB0ZXh0ICsgJzxici8+Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGV4dGVuZCA9IGZ1bmN0aW9uIChwYXJlbnQsIGNoaWxkKSB7XG4gICAgICAgIHZhciBwcm9wO1xuICAgICAgICBjaGlsZCA9IGNoaWxkIHx8IHt9O1xuXG4gICAgICAgIGZvciAocHJvcCBpbiBwYXJlbnQpIHtcbiAgICAgICAgICAgIGlmIChwYXJlbnQuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgICAgICAgICBjaGlsZFtwcm9wXSA9IHBhcmVudFtwcm9wXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9O1xuXG5cblxuICAgIC8qKlxuICAgICAqIERJU0FCTEUgZm9yIHVuc3VwcG9ydGVkIGJyb3dzZXJzXG4gICAgICovXG5cbiAgICBpZiAodHlwZW9mIEF1ZGlvICE9PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIEF1ZGlvICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHZhciBmdW5jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd2FybihcIkhUTUw1IEF1ZGlvIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuICAgICAgICB9O1xuICAgICAgICBpb24uc291bmQgPSBmdW5jO1xuICAgICAgICBpb24uc291bmQucGxheSA9IGZ1bmM7XG4gICAgICAgIGlvbi5zb3VuZC5zdG9wID0gZnVuYztcbiAgICAgICAgaW9uLnNvdW5kLnBhdXNlID0gZnVuYztcbiAgICAgICAgaW9uLnNvdW5kLnByZWxvYWQgPSBmdW5jO1xuICAgICAgICBpb24uc291bmQuZGVzdHJveSA9IGZ1bmM7XG4gICAgICAgIGZ1bmMoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuXG5cbiAgICAvKipcbiAgICAgKiBDT1JFXG4gICAgICogLSBjcmVhdGluZyBzb3VuZHMgY29sbGVjdGlvblxuICAgICAqIC0gcHVibGljIG1ldGhvZHNcbiAgICAgKi9cblxuICAgIHZhciBpc19pT1MgPSAvaVBhZHxpUGhvbmV8aVBvZC8udGVzdChuYXZpZ2F0b3IuYXBwVmVyc2lvbiksXG4gICAgICAgIHNvdW5kc19udW0gPSAwLFxuICAgICAgICBzZXR0aW5ncyA9IHt9LFxuICAgICAgICBzb3VuZHMgPSB7fSxcbiAgICAgICAgaTtcblxuXG5cbiAgICBpZiAoIXNldHRpbmdzLnN1cHBvcnRlZCAmJiBpc19pT1MpIHtcbiAgICAgICAgc2V0dGluZ3Muc3VwcG9ydGVkID0gW1wibXAzXCIsIFwibXA0XCIsIFwiYWFjXCJdO1xuICAgIH0gZWxzZSBpZiAoIXNldHRpbmdzLnN1cHBvcnRlZCkge1xuICAgICAgICBzZXR0aW5ncy5zdXBwb3J0ZWQgPSBbXCJtcDNcIiwgXCJvZ2dcIiwgXCJtcDRcIiwgXCJhYWNcIiwgXCJ3YXZcIl07XG4gICAgfVxuXG4gICAgdmFyIGNyZWF0ZVNvdW5kID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICB2YXIgbmFtZSA9IG9iai5hbGlhcyB8fCBvYmoubmFtZTtcblxuICAgICAgICBpZiAoIXNvdW5kc1tuYW1lXSkge1xuICAgICAgICAgICAgc291bmRzW25hbWVdID0gbmV3IFNvdW5kKG9iaik7XG4gICAgICAgICAgICBzb3VuZHNbbmFtZV0uaW5pdCgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGlvbi5zb3VuZCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIGV4dGVuZChvcHRpb25zLCBzZXR0aW5ncyk7XG5cbiAgICAgICAgc2V0dGluZ3MucGF0aCA9IHNldHRpbmdzLnBhdGggfHwgXCJcIjtcbiAgICAgICAgc2V0dGluZ3Mudm9sdW1lID0gc2V0dGluZ3Mudm9sdW1lIHx8IDE7XG4gICAgICAgIHNldHRpbmdzLnByZWxvYWQgPSBzZXR0aW5ncy5wcmVsb2FkIHx8IGZhbHNlO1xuICAgICAgICBzZXR0aW5ncy5tdWx0aXBsYXkgPSBzZXR0aW5ncy5tdWx0aXBsYXkgfHwgZmFsc2U7XG4gICAgICAgIHNldHRpbmdzLmxvb3AgPSBzZXR0aW5ncy5sb29wIHx8IGZhbHNlO1xuICAgICAgICBzZXR0aW5ncy5zcHJpdGUgPSBzZXR0aW5ncy5zcHJpdGUgfHwgbnVsbDtcbiAgICAgICAgc2V0dGluZ3Muc2NvcGUgPSBzZXR0aW5ncy5zY29wZSB8fCBudWxsO1xuICAgICAgICBzZXR0aW5ncy5yZWFkeV9jYWxsYmFjayA9IHNldHRpbmdzLnJlYWR5X2NhbGxiYWNrIHx8IG51bGw7XG4gICAgICAgIHNldHRpbmdzLmVuZGVkX2NhbGxiYWNrID0gc2V0dGluZ3MuZW5kZWRfY2FsbGJhY2sgfHwgbnVsbDtcblxuICAgICAgICBzb3VuZHNfbnVtID0gc2V0dGluZ3Muc291bmRzLmxlbmd0aDtcblxuICAgICAgICBpZiAoIXNvdW5kc19udW0pIHtcbiAgICAgICAgICAgIHdhcm4oXCJObyBzb3VuZC1maWxlcyBwcm92aWRlZCFcIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc291bmRzX251bTsgaSsrKSB7XG4gICAgICAgICAgICBjcmVhdGVTb3VuZChzZXR0aW5ncy5zb3VuZHNbaV0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGlvbi5zb3VuZC5WRVJTSU9OID0gXCIzLjAuN1wiO1xuXG4gICAgaW9uLnNvdW5kLl9tZXRob2QgPSBmdW5jdGlvbiAobWV0aG9kLCBuYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICBzb3VuZHNbbmFtZV0gJiYgc291bmRzW25hbWVdW21ldGhvZF0ob3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGkgaW4gc291bmRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzb3VuZHMuaGFzT3duUHJvcGVydHkoaSkgfHwgIXNvdW5kc1tpXSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzb3VuZHNbaV1bbWV0aG9kXShvcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBpb24uc291bmQucHJlbG9hZCA9IGZ1bmN0aW9uIChuYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICBleHRlbmQoe3ByZWxvYWQ6IHRydWV9LCBvcHRpb25zKTtcblxuICAgICAgICBpb24uc291bmQuX21ldGhvZChcImluaXRcIiwgbmFtZSwgb3B0aW9ucyk7XG4gICAgfTtcblxuICAgIGlvbi5zb3VuZC5kZXN0cm95ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgaW9uLnNvdW5kLl9tZXRob2QoXCJkZXN0cm95XCIsIG5hbWUpO1xuXG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICBzb3VuZHNbbmFtZV0gPSBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yIChpIGluIHNvdW5kcykge1xuICAgICAgICAgICAgICAgIGlmICghc291bmRzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc291bmRzW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIHNvdW5kc1tpXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIGlvbi5zb3VuZC5wbGF5ID0gZnVuY3Rpb24gKG5hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgaW9uLnNvdW5kLl9tZXRob2QoXCJwbGF5XCIsIG5hbWUsIG9wdGlvbnMpO1xuICAgIH07XG5cbiAgICBpb24uc291bmQuc3RvcCA9IGZ1bmN0aW9uIChuYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIGlvbi5zb3VuZC5fbWV0aG9kKFwic3RvcFwiLCBuYW1lLCBvcHRpb25zKTtcbiAgICB9O1xuXG4gICAgaW9uLnNvdW5kLnBhdXNlID0gZnVuY3Rpb24gKG5hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgaW9uLnNvdW5kLl9tZXRob2QoXCJwYXVzZVwiLCBuYW1lLCBvcHRpb25zKTtcbiAgICB9O1xuXG4gICAgaW9uLnNvdW5kLnZvbHVtZSA9IGZ1bmN0aW9uIChuYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIGlvbi5zb3VuZC5fbWV0aG9kKFwidm9sdW1lXCIsIG5hbWUsIG9wdGlvbnMpO1xuICAgIH07XG5cbiAgICBpZiAoJCkge1xuICAgICAgICAkLmlvblNvdW5kID0gaW9uLnNvdW5kO1xuICAgIH1cblxuXG5cbiAgICAvKipcbiAgICAgKiBXZWIgQXVkaW8gQVBJIGNvcmVcbiAgICAgKiAtIGZvciBtb3N0IGFkdmFuY2VkIGJyb3dzZXJzXG4gICAgICovXG5cbiAgICB2YXIgQXVkaW9Db250ZXh0ID0gd2luZG93LkF1ZGlvQ29udGV4dCB8fCB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0LFxuICAgICAgICBhdWRpbztcblxuICAgIGlmIChBdWRpb0NvbnRleHQpIHtcbiAgICAgICAgYXVkaW8gPSBuZXcgQXVkaW9Db250ZXh0KCk7XG4gICAgfVxuXG5cbiAgICB2YXIgU291bmQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBleHRlbmQoc2V0dGluZ3MpO1xuICAgICAgICBkZWxldGUgdGhpcy5vcHRpb25zLnNvdW5kcztcbiAgICAgICAgZXh0ZW5kKG9wdGlvbnMsIHRoaXMub3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5yZXF1ZXN0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdHJlYW1zID0ge307XG4gICAgICAgIHRoaXMucmVzdWx0ID0ge307XG4gICAgICAgIHRoaXMuZXh0ID0gMDtcbiAgICAgICAgdGhpcy51cmwgPSBcIlwiO1xuXG4gICAgICAgIHRoaXMubG9hZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGVjb2RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLm5vX2ZpbGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hdXRvcGxheSA9IGZhbHNlO1xuICAgIH07XG5cbiAgICBTb3VuZC5wcm90b3R5cGUgPSB7XG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGV4dGVuZChvcHRpb25zLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnByZWxvYWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc3RyZWFtO1xuXG4gICAgICAgICAgICBmb3IgKGkgaW4gdGhpcy5zdHJlYW1zKSB7XG4gICAgICAgICAgICAgICAgc3RyZWFtID0gdGhpcy5zdHJlYW1zW2ldO1xuXG4gICAgICAgICAgICAgICAgaWYgKHN0cmVhbSkge1xuICAgICAgICAgICAgICAgICAgICBzdHJlYW0uZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgICAgICBzdHJlYW0gPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3RyZWFtcyA9IHt9O1xuICAgICAgICAgICAgdGhpcy5yZXN1bHQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLmJ1ZmZlciA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5yZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIHRoaXMucmVhZHkuYmluZCh0aGlzKSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVxdWVzdC5yZW1vdmVFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgdGhpcy5lcnJvci5iaW5kKHRoaXMpLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVVcmw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBub19jYWNoZSA9IG5ldyBEYXRlKCkudmFsdWVPZigpO1xuICAgICAgICAgICAgdGhpcy51cmwgPSB0aGlzLm9wdGlvbnMucGF0aCArIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLm9wdGlvbnMubmFtZSkgKyBcIi5cIiArIHRoaXMub3B0aW9ucy5zdXBwb3J0ZWRbdGhpcy5leHRdICsgXCI/XCIgKyBub19jYWNoZTtcbiAgICAgICAgfSxcblxuICAgICAgICBsb2FkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5ub19maWxlKSB7XG4gICAgICAgICAgICAgICAgd2FybihcIk5vIHNvdXJjZXMgZm9yIFxcXCJcIiArIHRoaXMub3B0aW9ucy5uYW1lICsgXCJcXFwiIHNvdW5kIDooXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMucmVxdWVzdCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5jcmVhdGVVcmwoKTtcblxuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3Qub3BlbihcIkdFVFwiLCB0aGlzLnVybCwgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3QucmVzcG9uc2VUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIHRoaXMucmVhZHkuYmluZCh0aGlzKSwgZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCB0aGlzLmVycm9yLmJpbmQodGhpcyksIGZhbHNlKTtcblxuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0LnNlbmQoKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuZXh0Kys7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3VwcG9ydGVkW3RoaXMuZXh0XSkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9hZCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5vX2ZpbGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHdhcm4oXCJObyBzb3VyY2VzIGZvciBcXFwiXCIgKyB0aGlzLm9wdGlvbnMubmFtZSArIFwiXFxcIiBzb3VuZCA6KFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICByZWFkeTogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMucmVzdWx0ID0gZGF0YS50YXJnZXQ7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnJlc3VsdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWxvYWQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnJlc3VsdC5zdGF0dXMgIT09IDIwMCAmJiB0aGlzLnJlc3VsdC5zdGF0dXMgIT09IDApIHtcbiAgICAgICAgICAgICAgICB3YXJuKHRoaXMudXJsICsgXCIgd2FzIG5vdCBmb3VuZCBvbiBzZXJ2ZXIhXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVsb2FkKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnJlcXVlc3QucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgdGhpcy5yZWFkeS5iaW5kKHRoaXMpLCBmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3QucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIHRoaXMuZXJyb3IuYmluZCh0aGlzKSwgZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMubG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vd2FybihcIkxvYWRlZDogXCIgKyB0aGlzLm9wdGlvbnMubmFtZSArIFwiLlwiICsgc2V0dGluZ3Muc3VwcG9ydGVkW3RoaXMuZXh0XSk7XG5cbiAgICAgICAgICAgIHRoaXMuZGVjb2RlKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGVjb2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIWF1ZGlvKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhdWRpby5kZWNvZGVBdWRpb0RhdGEodGhpcy5yZXN1bHQucmVzcG9uc2UsIHRoaXMuc2V0QnVmZmVyLmJpbmQodGhpcyksIHRoaXMuZXJyb3IuYmluZCh0aGlzKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0QnVmZmVyOiBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuYnVmZmVyID0gYnVmZmVyO1xuICAgICAgICAgICAgdGhpcy5kZWNvZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vd2FybihcIkRlY29kZWQ6IFwiICsgdGhpcy5vcHRpb25zLm5hbWUgKyBcIi5cIiArIHNldHRpbmdzLnN1cHBvcnRlZFt0aGlzLmV4dF0pO1xuXG4gICAgICAgICAgICB2YXIgY29uZmlnID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMub3B0aW9ucy5uYW1lLFxuICAgICAgICAgICAgICAgIGFsaWFzOiB0aGlzLm9wdGlvbnMuYWxpYXMsXG4gICAgICAgICAgICAgICAgZXh0OiB0aGlzLm9wdGlvbnMuc3VwcG9ydGVkW3RoaXMuZXh0XSxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogdGhpcy5vcHRpb25zLmJ1ZmZlci5kdXJhdGlvblxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yZWFkeV9jYWxsYmFjayAmJiB0eXBlb2YgdGhpcy5vcHRpb25zLnJlYWR5X2NhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMucmVhZHlfY2FsbGJhY2suY2FsbCh0aGlzLm9wdGlvbnMuc2NvcGUsIGNvbmZpZyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3ByaXRlKSB7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGkgaW4gdGhpcy5vcHRpb25zLnNwcml0ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuc3RhcnQgPSB0aGlzLm9wdGlvbnMuc3ByaXRlW2ldWzBdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuZW5kID0gdGhpcy5vcHRpb25zLnNwcml0ZVtpXVsxXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHJlYW1zW2ldID0gbmV3IFN0cmVhbSh0aGlzLm9wdGlvbnMsIGkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtc1swXSA9IG5ldyBTdHJlYW0odGhpcy5vcHRpb25zKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5hdXRvcGxheSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYXV0b3BsYXkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBlcnJvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5yZWxvYWQoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBwbGF5OiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMub3B0aW9ucy5wYXJ0O1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGV4dGVuZChvcHRpb25zLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXRoaXMubG9hZGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hdXRvcGxheSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkKCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm5vX2ZpbGUgfHwgIXRoaXMuZGVjb2RlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zcHJpdGUpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHJlYW1zW3RoaXMub3B0aW9ucy5wYXJ0XS5wbGF5KHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpIGluIHRoaXMub3B0aW9ucy5zcHJpdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtc1tpXS5wbGF5KHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtc1swXS5wbGF5KHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgc3RvcDogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3ByaXRlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbXNbb3B0aW9ucy5wYXJ0XS5zdG9wKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpIGluIHRoaXMub3B0aW9ucy5zcHJpdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtc1tpXS5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdHJlYW1zWzBdLnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBwYXVzZTogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3ByaXRlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbXNbb3B0aW9ucy5wYXJ0XS5wYXVzZSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSBpbiB0aGlzLm9wdGlvbnMuc3ByaXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbXNbaV0ucGF1c2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbXNbMF0ucGF1c2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICB2b2x1bWU6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICB2YXIgc3RyZWFtO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGV4dGVuZChvcHRpb25zLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3ByaXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wYXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbSA9IHRoaXMuc3RyZWFtc1t0aGlzLm9wdGlvbnMucGFydF07XG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbSAmJiBzdHJlYW0uc2V0Vm9sdW1lKHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpIGluIHRoaXMub3B0aW9ucy5zcHJpdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbSA9IHRoaXMuc3RyZWFtc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbSAmJiBzdHJlYW0uc2V0Vm9sdW1lKHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0cmVhbSA9IHRoaXMuc3RyZWFtc1swXTtcbiAgICAgICAgICAgICAgICBzdHJlYW0gJiYgc3RyZWFtLnNldFZvbHVtZSh0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuXG5cbiAgICB2YXIgU3RyZWFtID0gZnVuY3Rpb24gKG9wdGlvbnMsIHNwcml0ZV9wYXJ0KSB7XG4gICAgICAgIHRoaXMuYWxpYXMgPSBvcHRpb25zLmFsaWFzO1xuICAgICAgICB0aGlzLm5hbWUgPSBvcHRpb25zLm5hbWU7XG4gICAgICAgIHRoaXMuc3ByaXRlX3BhcnQgPSBzcHJpdGVfcGFydDtcblxuICAgICAgICB0aGlzLmJ1ZmZlciA9IG9wdGlvbnMuYnVmZmVyO1xuICAgICAgICB0aGlzLnN0YXJ0ID0gb3B0aW9ucy5zdGFydCB8fCAwO1xuICAgICAgICB0aGlzLmVuZCA9IG9wdGlvbnMuZW5kIHx8IHRoaXMuYnVmZmVyLmR1cmF0aW9uO1xuICAgICAgICB0aGlzLm11bHRpcGxheSA9IG9wdGlvbnMubXVsdGlwbGF5IHx8IGZhbHNlO1xuICAgICAgICB0aGlzLnZvbHVtZSA9IG9wdGlvbnMudm9sdW1lIHx8IDE7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBvcHRpb25zLnNjb3BlO1xuICAgICAgICB0aGlzLmVuZGVkX2NhbGxiYWNrID0gb3B0aW9ucy5lbmRlZF9jYWxsYmFjaztcblxuICAgICAgICB0aGlzLnNldExvb3Aob3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5zb3VyY2UgPSBudWxsO1xuICAgICAgICB0aGlzLmdhaW4gPSBudWxsO1xuICAgICAgICB0aGlzLnBsYXlpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wYXVzZWQgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLnRpbWVfc3RhcnRlZCA9IDA7XG4gICAgICAgIHRoaXMudGltZV9lbmRlZCA9IDA7XG4gICAgICAgIHRoaXMudGltZV9wbGF5ZWQgPSAwO1xuICAgICAgICB0aGlzLnRpbWVfb2Zmc2V0ID0gMDtcbiAgICB9O1xuXG4gICAgU3RyZWFtLnByb3RvdHlwZSA9IHtcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5zdG9wKCk7XG5cbiAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuc291cmNlID0gbnVsbDtcblxuICAgICAgICAgICAgdGhpcy5nYWluICYmIHRoaXMuZ2Fpbi5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZSAmJiB0aGlzLnNvdXJjZS5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICB0aGlzLmdhaW4gPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5zb3VyY2UgPSBudWxsO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldExvb3A6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5sb29wID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb29wID0gOTk5OTk5OTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMubG9vcCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIHRoaXMubG9vcCA9ICtvcHRpb25zLmxvb3AgLSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvb3AgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLnNldExvb3Aob3B0aW9ucyk7XG4gICAgICAgICAgICBpZiAoXCJ2b2x1bWVcIiBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52b2x1bWUgPSBvcHRpb25zLnZvbHVtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBwbGF5OiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZShvcHRpb25zKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCF0aGlzLm11bHRpcGxheSAmJiB0aGlzLnBsYXlpbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZ2FpbiA9IGF1ZGlvLmNyZWF0ZUdhaW4oKTtcbiAgICAgICAgICAgIHRoaXMuc291cmNlID0gYXVkaW8uY3JlYXRlQnVmZmVyU291cmNlKCk7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZS5idWZmZXIgPSB0aGlzLmJ1ZmZlcjtcbiAgICAgICAgICAgIHRoaXMuc291cmNlLmNvbm5lY3QodGhpcy5nYWluKTtcbiAgICAgICAgICAgIHRoaXMuZ2Fpbi5jb25uZWN0KGF1ZGlvLmRlc3RpbmF0aW9uKTtcbiAgICAgICAgICAgIHRoaXMuZ2Fpbi5nYWluLnZhbHVlID0gdGhpcy52b2x1bWU7XG5cbiAgICAgICAgICAgIHRoaXMuc291cmNlLm9uZW5kZWQgPSB0aGlzLmVuZGVkLmJpbmQodGhpcyk7XG5cbiAgICAgICAgICAgIHRoaXMuX3BsYXkoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBfcGxheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHN0YXJ0LFxuICAgICAgICAgICAgICAgIGVuZDtcblxuICAgICAgICAgICAgaWYgKHRoaXMucGF1c2VkKSB7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSB0aGlzLnN0YXJ0ICsgdGhpcy50aW1lX29mZnNldDtcbiAgICAgICAgICAgICAgICBlbmQgPSB0aGlzLmVuZCAtIHRoaXMudGltZV9vZmZzZXQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gdGhpcy5zdGFydDtcbiAgICAgICAgICAgICAgICBlbmQgPSB0aGlzLmVuZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGVuZCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnNvdXJjZS5zdGFydCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zb3VyY2Uuc3RhcnQoMCwgc3RhcnQsIGVuZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc291cmNlLm5vdGVPbigwLCBzdGFydCwgZW5kKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5wbGF5aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMucGF1c2VkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnRpbWVfc3RhcnRlZCA9IG5ldyBEYXRlKCkudmFsdWVPZigpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHN0b3A6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnBsYXlpbmcgJiYgdGhpcy5zb3VyY2UpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuc291cmNlLnN0b3AgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZS5zdG9wKDApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc291cmNlLm5vdGVPZmYoMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcGF1c2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnBhdXNlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMucGxheSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCF0aGlzLnBsYXlpbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc291cmNlICYmIHRoaXMuc291cmNlLnN0b3AoMCk7XG4gICAgICAgICAgICB0aGlzLnBhdXNlZCA9IHRydWU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZW5kZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMucGxheWluZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy50aW1lX2VuZGVkID0gbmV3IERhdGUoKS52YWx1ZU9mKCk7XG4gICAgICAgICAgICB0aGlzLnRpbWVfcGxheWVkID0gKHRoaXMudGltZV9lbmRlZCAtIHRoaXMudGltZV9zdGFydGVkKSAvIDEwMDA7XG4gICAgICAgICAgICB0aGlzLnRpbWVfb2Zmc2V0ICs9IHRoaXMudGltZV9wbGF5ZWQ7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnRpbWVfb2Zmc2V0ID49IHRoaXMuZW5kIHx8IHRoaXMuZW5kIC0gdGhpcy50aW1lX29mZnNldCA8IDAuMDE1KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW5kZWQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sb29wKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9vcC0tO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgX2VuZGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY29uZmlnID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgICAgICBhbGlhczogdGhpcy5hbGlhcyxcbiAgICAgICAgICAgICAgICBwYXJ0OiB0aGlzLnNwcml0ZV9wYXJ0LFxuICAgICAgICAgICAgICAgIHN0YXJ0OiB0aGlzLnN0YXJ0LFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiB0aGlzLmVuZFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuZW5kZWRfY2FsbGJhY2sgJiYgdHlwZW9mIHRoaXMuZW5kZWRfY2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIHRoaXMuZW5kZWRfY2FsbGJhY2suY2FsbCh0aGlzLnNjb3BlLCBjb25maWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGNsZWFyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnRpbWVfcGxheWVkID0gMDtcbiAgICAgICAgICAgIHRoaXMudGltZV9vZmZzZXQgPSAwO1xuICAgICAgICAgICAgdGhpcy5wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMucGxheWluZyA9IGZhbHNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldFZvbHVtZTogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMudm9sdW1lID0gb3B0aW9ucy52b2x1bWU7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmdhaW4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdhaW4uZ2Fpbi52YWx1ZSA9IHRoaXMudm9sdW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIGlmIChhdWRpbykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG5cblxuICAgIC8qKlxuICAgICAqIEZhbGxiYWNrIGZvciBIVE1MNSBhdWRpb1xuICAgICAqIC0gZm9yIG5vdCBzbyBtb2Rlcm4gYnJvd3NlcnNcbiAgICAgKi9cblxuICAgIHZhciBjaGVja1N1cHBvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzb3VuZCA9IG5ldyBBdWRpbygpLFxuICAgICAgICAgICAgY2FuX3BsYXlfbXAzID0gc291bmQuY2FuUGxheVR5cGUoJ2F1ZGlvL21wZWcnKSxcbiAgICAgICAgICAgIGNhbl9wbGF5X29nZyA9IHNvdW5kLmNhblBsYXlUeXBlKCdhdWRpby9vZ2cnKSxcbiAgICAgICAgICAgIGNhbl9wbGF5X2FhYyA9IHNvdW5kLmNhblBsYXlUeXBlKCdhdWRpby9tcDQ7IGNvZGVjcz1cIm1wNGEuNDAuMlwiJyksXG4gICAgICAgICAgICBpdGVtLCBpO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBzZXR0aW5ncy5zdXBwb3J0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGl0ZW0gPSBzZXR0aW5ncy5zdXBwb3J0ZWRbaV07XG5cbiAgICAgICAgICAgIGlmICghY2FuX3BsYXlfbXAzICYmIGl0ZW0gPT09IFwibXAzXCIpIHtcbiAgICAgICAgICAgICAgICBzZXR0aW5ncy5zdXBwb3J0ZWQuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWNhbl9wbGF5X29nZyAmJiBpdGVtID09PSBcIm9nZ1wiKSB7XG4gICAgICAgICAgICAgICAgc2V0dGluZ3Muc3VwcG9ydGVkLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFjYW5fcGxheV9hYWMgJiYgaXRlbSA9PT0gXCJhYWNcIikge1xuICAgICAgICAgICAgICAgIHNldHRpbmdzLnN1cHBvcnRlZC5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghY2FuX3BsYXlfYWFjICYmIGl0ZW0gPT09IFwibXA0XCIpIHtcbiAgICAgICAgICAgICAgICBzZXR0aW5ncy5zdXBwb3J0ZWQuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc291bmQgPSBudWxsO1xuICAgIH07XG4gICAgY2hlY2tTdXBwb3J0KCk7XG5cblxuXG4gICAgU291bmQucHJvdG90eXBlID0ge1xuICAgICAgICBpbml0OiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBleHRlbmQob3B0aW9ucywgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5pbml0ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnByZWxvYWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc3RyZWFtO1xuXG4gICAgICAgICAgICBmb3IgKGkgaW4gdGhpcy5zdHJlYW1zKSB7XG4gICAgICAgICAgICAgICAgc3RyZWFtID0gdGhpcy5zdHJlYW1zW2ldO1xuXG4gICAgICAgICAgICAgICAgaWYgKHN0cmVhbSkge1xuICAgICAgICAgICAgICAgICAgICBzdHJlYW0uZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgICAgICBzdHJlYW0gPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3RyZWFtcyA9IHt9O1xuICAgICAgICAgICAgdGhpcy5sb2FkZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuaW5pdGVkID0gZmFsc2U7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbG9hZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHBhcnQ7XG5cbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5wcmVsb2FkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5fcmVhZHkgPSB0aGlzLnJlYWR5O1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLl9zY29wZSA9IHRoaXM7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3ByaXRlKSB7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGkgaW4gdGhpcy5vcHRpb25zLnNwcml0ZSkge1xuICAgICAgICAgICAgICAgICAgICBwYXJ0ID0gdGhpcy5vcHRpb25zLnNwcml0ZVtpXTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuc3RhcnQgPSBwYXJ0WzBdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuZW5kID0gcGFydFsxXTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbXNbaV0gPSBuZXcgU3RyZWFtKHRoaXMub3B0aW9ucywgaSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zdHJlYW1zWzBdID0gbmV3IFN0cmVhbSh0aGlzLm9wdGlvbnMpO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVhZHk6IGZ1bmN0aW9uIChkdXJhdGlvbikge1xuICAgICAgICAgICAgaWYgKHRoaXMubG9hZGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmxvYWRlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIHZhciBjb25maWcgPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogdGhpcy5vcHRpb25zLm5hbWUsXG4gICAgICAgICAgICAgICAgYWxpYXM6IHRoaXMub3B0aW9ucy5hbGlhcyxcbiAgICAgICAgICAgICAgICBleHQ6IHRoaXMub3B0aW9ucy5zdXBwb3J0ZWRbdGhpcy5leHRdLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvblxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yZWFkeV9jYWxsYmFjayAmJiB0eXBlb2YgdGhpcy5vcHRpb25zLnJlYWR5X2NhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMucmVhZHlfY2FsbGJhY2suY2FsbCh0aGlzLm9wdGlvbnMuc2NvcGUsIGNvbmZpZyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmF1dG9wbGF5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hdXRvcGxheSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMucGxheSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHBsYXk6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaW5pdGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5vcHRpb25zLnBhcnQ7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgZXh0ZW5kKG9wdGlvbnMsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKDEpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmxvYWRlZCkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLnByZWxvYWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdXRvcGxheSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXV0b3BsYXkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zcHJpdGUpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHJlYW1zW3RoaXMub3B0aW9ucy5wYXJ0XS5wbGF5KHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpIGluIHRoaXMub3B0aW9ucy5zcHJpdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtc1tpXS5wbGF5KHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtc1swXS5wbGF5KHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgc3RvcDogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pbml0ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3ByaXRlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbXNbb3B0aW9ucy5wYXJ0XS5zdG9wKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpIGluIHRoaXMub3B0aW9ucy5zcHJpdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtc1tpXS5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdHJlYW1zWzBdLnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBwYXVzZTogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pbml0ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3ByaXRlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbXNbb3B0aW9ucy5wYXJ0XS5wYXVzZSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSBpbiB0aGlzLm9wdGlvbnMuc3ByaXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbXNbaV0ucGF1c2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbXNbMF0ucGF1c2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICB2b2x1bWU6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICB2YXIgc3RyZWFtO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGV4dGVuZChvcHRpb25zLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3ByaXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wYXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbSA9IHRoaXMuc3RyZWFtc1t0aGlzLm9wdGlvbnMucGFydF07XG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbSAmJiBzdHJlYW0uc2V0Vm9sdW1lKHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpIGluIHRoaXMub3B0aW9ucy5zcHJpdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbSA9IHRoaXMuc3RyZWFtc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbSAmJiBzdHJlYW0uc2V0Vm9sdW1lKHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0cmVhbSA9IHRoaXMuc3RyZWFtc1swXTtcbiAgICAgICAgICAgICAgICBzdHJlYW0gJiYgc3RyZWFtLnNldFZvbHVtZSh0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuXG5cbiAgICBTdHJlYW0gPSBmdW5jdGlvbiAob3B0aW9ucywgc3ByaXRlX3BhcnQpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gb3B0aW9ucy5uYW1lO1xuICAgICAgICB0aGlzLmFsaWFzID0gb3B0aW9ucy5hbGlhcztcbiAgICAgICAgdGhpcy5zcHJpdGVfcGFydCA9IHNwcml0ZV9wYXJ0O1xuXG4gICAgICAgIHRoaXMubXVsdGlwbGF5ID0gb3B0aW9ucy5tdWx0aXBsYXk7XG4gICAgICAgIHRoaXMudm9sdW1lID0gb3B0aW9ucy52b2x1bWU7XG4gICAgICAgIHRoaXMucHJlbG9hZCA9IG9wdGlvbnMucHJlbG9hZDtcbiAgICAgICAgdGhpcy5wYXRoID0gc2V0dGluZ3MucGF0aDtcbiAgICAgICAgdGhpcy5zdGFydCA9IG9wdGlvbnMuc3RhcnQgfHwgMDtcbiAgICAgICAgdGhpcy5lbmQgPSBvcHRpb25zLmVuZCB8fCAwO1xuICAgICAgICB0aGlzLnNjb3BlID0gb3B0aW9ucy5zY29wZTtcbiAgICAgICAgdGhpcy5lbmRlZF9jYWxsYmFjayA9IG9wdGlvbnMuZW5kZWRfY2FsbGJhY2s7XG5cbiAgICAgICAgdGhpcy5fc2NvcGUgPSBvcHRpb25zLl9zY29wZTtcbiAgICAgICAgdGhpcy5fcmVhZHkgPSBvcHRpb25zLl9yZWFkeTtcblxuICAgICAgICB0aGlzLnNldExvb3Aob3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5zb3VuZCA9IG51bGw7XG4gICAgICAgIHRoaXMudXJsID0gbnVsbDtcbiAgICAgICAgdGhpcy5sb2FkZWQgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLnN0YXJ0X3RpbWUgPSAwO1xuICAgICAgICB0aGlzLnBhdXNlZF90aW1lID0gMDtcbiAgICAgICAgdGhpcy5wbGF5ZWRfdGltZSA9IDA7XG5cbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgfTtcblxuICAgIFN0cmVhbS5wcm90b3R5cGUgPSB7XG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuc291bmQgPSBuZXcgQXVkaW8oKTtcbiAgICAgICAgICAgIHRoaXMuc291bmQudm9sdW1lID0gdGhpcy52b2x1bWU7XG5cbiAgICAgICAgICAgIHRoaXMuY3JlYXRlVXJsKCk7XG5cbiAgICAgICAgICAgIHRoaXMuc291bmQuYWRkRXZlbnRMaXN0ZW5lcihcImVuZGVkXCIsIHRoaXMuZW5kZWQuYmluZCh0aGlzKSwgZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5zb3VuZC5hZGRFdmVudExpc3RlbmVyKFwiY2FucGxheXRocm91Z2hcIiwgdGhpcy5jYW5fcGxheV90aHJvdWdoLmJpbmQodGhpcyksIGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuc291bmQuYWRkRXZlbnRMaXN0ZW5lcihcInRpbWV1cGRhdGVcIiwgdGhpcy5fdXBkYXRlLmJpbmQodGhpcyksIGZhbHNlKTtcblxuICAgICAgICAgICAgdGhpcy5sb2FkKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5zdG9wKCk7XG5cbiAgICAgICAgICAgIHRoaXMuc291bmQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImVuZGVkXCIsIHRoaXMuZW5kZWQuYmluZCh0aGlzKSwgZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5zb3VuZC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2FucGxheXRocm91Z2hcIiwgdGhpcy5jYW5fcGxheV90aHJvdWdoLmJpbmQodGhpcyksIGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuc291bmQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRpbWV1cGRhdGVcIiwgdGhpcy5fdXBkYXRlLmJpbmQodGhpcyksIGZhbHNlKTtcblxuICAgICAgICAgICAgdGhpcy5zb3VuZCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmxvYWRlZCA9IGZhbHNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZVVybDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJhbmQgPSBuZXcgRGF0ZSgpLnZhbHVlT2YoKTtcbiAgICAgICAgICAgIHRoaXMudXJsID0gdGhpcy5wYXRoICsgZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMubmFtZSkgKyBcIi5cIiArIHNldHRpbmdzLnN1cHBvcnRlZFswXSArIFwiP1wiICsgcmFuZDtcbiAgICAgICAgfSxcblxuICAgICAgICBjYW5fcGxheV90aHJvdWdoOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmVsb2FkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWFkeSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuc291bmQuc3JjID0gdGhpcy51cmw7XG4gICAgICAgICAgICB0aGlzLnNvdW5kLnByZWxvYWQgPSB0aGlzLnByZWxvYWQgPyBcImF1dG9cIiA6IFwibm9uZVwiO1xuICAgICAgICAgICAgaWYgKHRoaXMucHJlbG9hZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc291bmQubG9hZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHNldExvb3A6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5sb29wID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb29wID0gOTk5OTk5OTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMubG9vcCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIHRoaXMubG9vcCA9ICtvcHRpb25zLmxvb3AgLSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvb3AgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLnNldExvb3Aob3B0aW9ucyk7XG5cbiAgICAgICAgICAgIGlmIChcInZvbHVtZVwiIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZvbHVtZSA9IG9wdGlvbnMudm9sdW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHJlYWR5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5sb2FkZWQgfHwgIXRoaXMuc291bmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMubG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3JlYWR5LmNhbGwodGhpcy5fc2NvcGUsIHRoaXMuc291bmQuZHVyYXRpb24pO1xuXG4gICAgICAgICAgICBpZiAoIXRoaXMuZW5kKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmQgPSB0aGlzLnNvdW5kLmR1cmF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHBsYXk6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXRoaXMubXVsdGlwbGF5ICYmIHRoaXMucGxheWluZykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fcGxheSgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIF9wbGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wYXVzZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNvdW5kLmN1cnJlbnRUaW1lID0gdGhpcy5zdGFydDtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnBsYXlpbmcgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5zdGFydF90aW1lID0gbmV3IERhdGUoKS52YWx1ZU9mKCk7XG4gICAgICAgICAgICB0aGlzLnNvdW5kLnZvbHVtZSA9IHRoaXMudm9sdW1lO1xuICAgICAgICAgICAgdGhpcy5zb3VuZC5wbGF5KCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc3RvcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnBsYXlpbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMucGxheWluZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuc291bmQucGF1c2UoKTtcbiAgICAgICAgICAgIHRoaXMuY2xlYXIoKTtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNvdW5kLmN1cnJlbnRUaW1lID0gdGhpcy5zdGFydDtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIH0sXG5cbiAgICAgICAgcGF1c2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnBhdXNlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3BsYXkoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuc291bmQucGF1c2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBhdXNlZF90aW1lID0gbmV3IERhdGUoKS52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5ZWRfdGltZSArPSB0aGlzLnBhdXNlZF90aW1lIC0gdGhpcy5zdGFydF90aW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIF91cGRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5zdGFydF90aW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgY3VycmVudF90aW1lID0gbmV3IERhdGUoKS52YWx1ZU9mKCksXG4gICAgICAgICAgICAgICAgcGxheWVkX3RpbWUgPSBjdXJyZW50X3RpbWUgLSB0aGlzLnN0YXJ0X3RpbWUsXG4gICAgICAgICAgICAgICAgcGxheWVkID0gKHRoaXMucGxheWVkX3RpbWUgKyBwbGF5ZWRfdGltZSkgLyAxMDAwO1xuXG4gICAgICAgICAgICBpZiAocGxheWVkID49IHRoaXMuZW5kKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucGxheWluZykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW5kZWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZW5kZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnBsYXlpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbmRlZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIF9lbmRlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5wbGF5aW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgIHZhciBjb25maWcgPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgICAgIGFsaWFzOiB0aGlzLmFsaWFzLFxuICAgICAgICAgICAgICAgIHBhcnQ6IHRoaXMuc3ByaXRlX3BhcnQsXG4gICAgICAgICAgICAgICAgc3RhcnQ6IHRoaXMuc3RhcnQsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IHRoaXMuZW5kXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAodGhpcy5lbmRlZF9jYWxsYmFjayAmJiB0eXBlb2YgdGhpcy5lbmRlZF9jYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmRlZF9jYWxsYmFjay5jYWxsKHRoaXMuc2NvcGUsIGNvbmZpZyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmxvb3ApIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KHRoaXMubG9vcGVyLmJpbmQodGhpcyksIDE1KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBsb29wZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMubG9vcC0tO1xuICAgICAgICAgICAgdGhpcy5wbGF5KCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2xlYXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRfdGltZSA9IDA7XG4gICAgICAgICAgICB0aGlzLnBsYXllZF90aW1lID0gMDtcbiAgICAgICAgICAgIHRoaXMucGF1c2VkX3RpbWUgPSAwO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldFZvbHVtZTogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMudm9sdW1lID0gb3B0aW9ucy52b2x1bWU7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnNvdW5kKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zb3VuZC52b2x1bWUgPSB0aGlzLnZvbHVtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbn0gKHdpbmRvdywgbmF2aWdhdG9yLCB3aW5kb3cualF1ZXJ5IHx8IHdpbmRvdy4kKSk7XG4iLCIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjIuMi40XG4gKiBodHRwOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHA6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTYtMDUtMjBUMTc6MjNaXG4gKi9cblxuKGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59KHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gU3VwcG9ydDogRmlyZWZveCAxOCtcbi8vIENhbid0IGJlIGluIHN0cmljdCBtb2RlLCBzZXZlcmFsIGxpYnMgaW5jbHVkaW5nIEFTUC5ORVQgdHJhY2Vcbi8vIHRoZSBzdGFjayB2aWEgYXJndW1lbnRzLmNhbGxlci5jYWxsZWUgYW5kIEZpcmVmb3ggZGllcyBpZlxuLy8geW91IHRyeSB0byB0cmFjZSB0aHJvdWdoIFwidXNlIHN0cmljdFwiIGNhbGwgY2hhaW5zLiAoIzEzMzM1KVxuLy9cInVzZSBzdHJpY3RcIjtcbnZhciBhcnIgPSBbXTtcblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBjb25jYXQgPSBhcnIuY29uY2F0O1xuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIyLjIuNFwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMVxuXHQvLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1Bcblx0cnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csXG5cblx0Ly8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG5cdHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbXFxkYS16XSkvZ2ksXG5cblx0Ly8gVXNlZCBieSBqUXVlcnkuY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxuXHRmY2FtZWxDYXNlID0gZnVuY3Rpb24oIGFsbCwgbGV0dGVyICkge1xuXHRcdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcblx0fTtcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFN0YXJ0IHdpdGggYW4gZW1wdHkgc2VsZWN0b3Jcblx0c2VsZWN0b3I6IFwiXCIsXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXHRcdHJldHVybiBudW0gIT0gbnVsbCA/XG5cblx0XHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRcdCggbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXSApIDpcblxuXHRcdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdFx0c2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblx0XHRyZXQuY29udGV4dCA9IHRoaXMuY29udGV4dDtcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFqUXVlcnkuaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBqUXVlcnkuaXNBcnJheSggY29weSApICkgKSApIHtcblxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgKSB7XG5cdFx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzQXJyYXkoIHNyYyApID8gc3JjIDogW107XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApID8gc3JjIDoge307XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNGdW5jdGlvbjogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LnR5cGUoIG9iaiApID09PSBcImZ1bmN0aW9uXCI7XG5cdH0sXG5cblx0aXNBcnJheTogQXJyYXkuaXNBcnJheSxcblxuXHRpc1dpbmRvdzogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuXHR9LFxuXG5cdGlzTnVtZXJpYzogZnVuY3Rpb24oIG9iaiApIHtcblxuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChudWxsfHRydWV8ZmFsc2V8XCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0Ly8gYWRkaW5nIDEgY29ycmVjdHMgbG9zcyBvZiBwcmVjaXNpb24gZnJvbSBwYXJzZUZsb2F0ICgjMTUxMDApXG5cdFx0dmFyIHJlYWxTdHJpbmdPYmogPSBvYmogJiYgb2JqLnRvU3RyaW5nKCk7XG5cdFx0cmV0dXJuICFqUXVlcnkuaXNBcnJheSggb2JqICkgJiYgKCByZWFsU3RyaW5nT2JqIC0gcGFyc2VGbG9hdCggcmVhbFN0cmluZ09iaiApICsgMSApID49IDA7XG5cdH0sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIga2V5O1xuXG5cdFx0Ly8gTm90IHBsYWluIG9iamVjdHM6XG5cdFx0Ly8gLSBBbnkgb2JqZWN0IG9yIHZhbHVlIHdob3NlIGludGVybmFsIFtbQ2xhc3NdXSBwcm9wZXJ0eSBpcyBub3QgXCJbb2JqZWN0IE9iamVjdF1cIlxuXHRcdC8vIC0gRE9NIG5vZGVzXG5cdFx0Ly8gLSB3aW5kb3dcblx0XHRpZiAoIGpRdWVyeS50eXBlKCBvYmogKSAhPT0gXCJvYmplY3RcIiB8fCBvYmoubm9kZVR5cGUgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBOb3Qgb3duIGNvbnN0cnVjdG9yIHByb3BlcnR5IG11c3QgYmUgT2JqZWN0XG5cdFx0aWYgKCBvYmouY29uc3RydWN0b3IgJiZcblx0XHRcdFx0IWhhc093bi5jYWxsKCBvYmosIFwiY29uc3RydWN0b3JcIiApICYmXG5cdFx0XHRcdCFoYXNPd24uY2FsbCggb2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZSB8fCB7fSwgXCJpc1Byb3RvdHlwZU9mXCIgKSApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBPd24gcHJvcGVydGllcyBhcmUgZW51bWVyYXRlZCBmaXJzdGx5LCBzbyB0byBzcGVlZCB1cCxcblx0XHQvLyBpZiBsYXN0IG9uZSBpcyBvd24sIHRoZW4gYWxsIHByb3BlcnRpZXMgYXJlIG93blxuXHRcdGZvciAoIGtleSBpbiBvYmogKSB7fVxuXG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkIHx8IGhhc093bi5jYWxsKCBvYmosIGtleSApO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdHR5cGU6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wLCBpT1M8NiAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRcdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdFx0dHlwZW9mIG9iajtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBnbG9iYWwgY29udGV4dFxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSApIHtcblx0XHR2YXIgc2NyaXB0LFxuXHRcdFx0aW5kaXJlY3QgPSBldmFsO1xuXG5cdFx0Y29kZSA9IGpRdWVyeS50cmltKCBjb2RlICk7XG5cblx0XHRpZiAoIGNvZGUgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBjb2RlIGluY2x1ZGVzIGEgdmFsaWQsIHByb2xvZ3VlIHBvc2l0aW9uXG5cdFx0XHQvLyBzdHJpY3QgbW9kZSBwcmFnbWEsIGV4ZWN1dGUgY29kZSBieSBpbmplY3RpbmcgYVxuXHRcdFx0Ly8gc2NyaXB0IHRhZyBpbnRvIHRoZSBkb2N1bWVudC5cblx0XHRcdGlmICggY29kZS5pbmRleE9mKCBcInVzZSBzdHJpY3RcIiApID09PSAxICkge1xuXHRcdFx0XHRzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cdFx0XHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgYXZvaWQgdGhlIERPTSBub2RlIGNyZWF0aW9uLCBpbnNlcnRpb25cblx0XHRcdFx0Ly8gYW5kIHJlbW92YWwgYnkgdXNpbmcgYW4gaW5kaXJlY3QgZ2xvYmFsIGV2YWxcblxuXHRcdFx0XHRpbmRpcmVjdCggY29kZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG5cdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0Ly8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuXHRjYW1lbENhc2U6IGZ1bmN0aW9uKCBzdHJpbmcgKSB7XG5cdFx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG5cdH0sXG5cblx0bm9kZU5hbWU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjFcblx0dHJpbTogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XHRcIlwiIDpcblx0XHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG5cdC8vIGFyZ3VtZW50cy5cblx0cHJveHk6IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0XHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRcdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdFx0Y29udGV4dCA9IGZuO1xuXHRcdFx0Zm4gPSB0bXA7XG5cdFx0fVxuXG5cdFx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0XHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBTaW11bGF0ZWQgYmluZFxuXHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0XHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdFx0fTtcblxuXHRcdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRcdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdFx0cmV0dXJuIHByb3h5O1xuXHR9LFxuXG5cdG5vdzogRGF0ZS5ub3csXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuLy8gSlNIaW50IHdvdWxkIGVycm9yIG9uIHRoaXMgY29kZSBkdWUgdG8gdGhlIFN5bWJvbCBub3QgYmVpbmcgZGVmaW5lZCBpbiBFUzUuXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuanNoaW50cmMgd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBqdXN0IGRpc2FibGUgSlNIaW50IGZvciB0aGVzZVxuLy8gdGhyZWUgbGluZXMuXG4vKiBqc2hpbnQgaWdub3JlOiBzdGFydCAqL1xuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuLyoganNoaW50IGlnbm9yZTogZW5kICovXG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcbmZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbn0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiBpT1MgOC4yIChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXG5cdGlmICggdHlwZSA9PT0gXCJmdW5jdGlvblwiIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjIuMVxuICogaHR0cDovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNS0xMC0xN1xuICovXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcblxudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gR2VuZXJhbC1wdXJwb3NlIGNvbnN0YW50c1xuXHRNQVhfTkVHQVRJVkUgPSAxIDw8IDMxLFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hfbmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0W2ldID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXFxceDAwLVxcXFx4YTBdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblxuXHRyYXR0cmlidXRlUXVvdGVzID0gbmV3IFJlZ0V4cCggXCI9XCIgKyB3aGl0ZXNwYWNlICsgXCIqKFteXFxcXF0nXFxcIl0qPylcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLCBcImdcIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cdHJlc2NhcGUgPSAvJ3xcXFxcL2csXG5cblx0Ly8gQ1NTIGVzY2FwZXMgaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG5cdFx0XHRlc2NhcGVkIDpcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9O1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG5pZHNlbGVjdCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXG5cdFx0aWYgKCAoIGNvbnRleHQgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IHByZWZlcnJlZERvYyApICE9PSBkb2N1bWVudCApIHtcblx0XHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0fVxuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmIChtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAobSA9IG1hdGNoWzFdKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXG5cdFx0XHRcdC8vIHFTQSBsb29rcyBvdXRzaWRlIEVsZW1lbnQgY29udGV4dCwgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudFxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB3b3JrYXJvdW5kIHRlY2huaXF1ZVxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PThcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0fSBlbHNlIGlmICggY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRpZiAoIChuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkpICkge1xuXHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJlc2NhcGUsIFwiXFxcXCQmXCIgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKG5pZCA9IGV4cGFuZG8pICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0bmlkc2VsZWN0ID0gcmlkZW50aWZpZXIudGVzdCggbmlkICkgPyBcIiNcIiArIG5pZCA6IFwiW2lkPSdcIiArIG5pZCArIFwiJ11cIjtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IG5pZHNlbGVjdCArIFwiIFwiICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIG5ld1NlbGVjdG9yICkge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZGl2IGFuZCBleHBlY3RzIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZGl2ICk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBkaXYucGFyZW50Tm9kZSApIHtcblx0XHRcdGRpdi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBkaXYgKTtcblx0XHR9XG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRkaXYgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0KCB+Yi5zb3VyY2VJbmRleCB8fCBNQVhfTkVHQVRJVkUgKSAtXG5cdFx0XHQoIH5hLnNvdXJjZUluZGV4IHx8IE1BWF9ORUdBVElWRSApO1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIGRvY3VtZW50RWxlbWVudCBpcyB2ZXJpZmllZCBmb3IgY2FzZXMgd2hlcmUgaXQgZG9lc24ndCB5ZXQgZXhpc3Rcblx0Ly8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpXG5cdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXHRyZXR1cm4gZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICE9PSBcIkhUTUxcIiA6IGZhbHNlO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBwYXJlbnQsXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2Vcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHRpZiAoIChwYXJlbnQgPSBkb2N1bWVudC5kZWZhdWx0VmlldykgJiYgcGFyZW50LnRvcCAhPT0gcGFyZW50ICkge1xuXHRcdC8vIFN1cHBvcnQ6IElFIDExXG5cdFx0aWYgKCBwYXJlbnQuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHBhcmVudC5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBwYXJlbnQuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRwYXJlbnQuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRkaXYuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFkaXYuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuXHR9KTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRkaXYuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcblx0XHRyZXR1cm4gIWRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZGl2ICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBJRCBmaW5kIGFuZCBmaWx0ZXJcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBtID8gWyBtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHQvLyBTdXBwb3J0OiBJRTYvN1xuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRkZWxldGUgRXhwci5maW5kW1wiSURcIl07XG5cblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZGl2ICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIi4jLitbK35dXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZGl2LCBcImRpdlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZGl2LCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0pO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbihcInxcIikgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbihcInxcIikgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkpO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHRpZiAoIGEgPT09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYSkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHRcdGlmICggYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXHRcdFx0cmV0dXJuIGEgPT09IGRvY3VtZW50ID8gLTEgOlxuXHRcdFx0XHRiID09PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbaV0gPT09IGJwW2ldICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0YXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IGF0dHJpYnV0ZSBzZWxlY3RvcnMgYXJlIHF1b3RlZFxuXHRleHByID0gZXhwci5yZXBsYWNlKCByYXR0cmlidXRlUXVvdGVzLCBcIj0nJDEnXVwiICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFjb21waWxlckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cdFx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlKSB7fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKG5vZGUgPSBlbGVtW2krK10pICkge1xuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbM10gPSAoIG1hdGNoWzNdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzJdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWzNdID0gXCIgXCIgKyBtYXRjaFszXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzFdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWzNdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWzRdID0gKyggbWF0Y2hbNF0gPyBtYXRjaFs1XSArIChtYXRjaFs2XSB8fCAxKSA6IDIgKiAoIG1hdGNoWzNdID09PSBcImV2ZW5cIiB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWzZdICYmIG1hdGNoWzJdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwcltcIkNISUxEXCJdLnRlc3QoIG1hdGNoWzBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0bWF0Y2hbMl0gPSBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdChleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSkgJiZcblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdChleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGgpICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQocGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkpICYmXG5cdFx0XHRcdGNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdCggdHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIgKTtcblx0XHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBhcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gbm9kZVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcblx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0XHRpZiAoIGRpZmYgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFtpXSA9ICEobWF0Y2hlc1tpXSA9IGVsZW0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WzBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRpbnB1dFswXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdChsYW5nIHx8IFwiXCIpICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIikgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXgpO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcImVuYWJsZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2U7XG5cdFx0fSxcblxuXHRcdFwiZGlzYWJsZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIChub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkKTtcblx0XHR9LFxuXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikpID09IG51bGwgfHwgYXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0pLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pXG5cdH1cbn07XG5cbkV4cHIucHNldWRvc1tcIm50aFwiXSA9IEV4cHIucHNldWRvc1tcImVxXCJdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAobWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFswXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAodG9rZW5zID0gW10pICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWzBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9KTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdChtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSkpICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufTtcblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1tpXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBkaXIgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHwgKG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0aWYgKCAob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsgZGlyIF0pICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBkaXIgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWzBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwpICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRzdXBwb3J0LmdldEJ5SWQgJiYgY29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdFx0XHRFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdjEgKSB7XG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZGl2MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSApICYgMTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdGRpdi5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGRpdi5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIikgPT09IFwiI1wiIDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdGRpdi5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGRpdi5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XG5cdHJldHVybiBkaXYuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdHJldHVybiBkaXYuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikgPT0gbnVsbDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcblx0XHR9XG5cdH0pO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59KSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW1xcdy1dKylcXHMqXFwvPz4oPzo8XFwvXFwxPnwpJC8gKTtcblxuXG5cbnZhciByaXNTaW1wbGUgPSAvXi5bXjojXFxbXFwuLF0qJC87XG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cblx0fVxuXG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cblx0fVxuXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRpZiAoIHJpc1NpbXBsZS50ZXN0KCBxdWFsaWZpZXIgKSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcblx0XHR9XG5cblx0XHRxdWFsaWZpZXIgPSBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzICk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHR9ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRyZXR1cm4gZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgP1xuXHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXSA6XG5cdFx0alF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHRcdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdC8vIE5lZWRlZCBiZWNhdXNlICQoIHNlbGVjdG9yLCBjb250ZXh0ICkgYmVjb21lcyAkKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKVxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZSggcmV0ICkgOiByZXQgKTtcblx0XHRyZXQuc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yID8gdGhpcy5zZWxlY3RvciArIFwiIFwiICsgc2VsZWN0b3IgOiBzZWxlY3Rvcjtcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0qKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBCbGFja2JlcnJ5IDQuNlxuXHRcdFx0XHRcdC8vIGdFQklEIHJldHVybnMgbm9kZXMgbm8gbG9uZ2VyIGluIHRoZSBkb2N1bWVudCAoIzY5NjMpXG5cdFx0XHRcdFx0aWYgKCBlbGVtICYmIGVsZW0ucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGhpcy5jb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0XHRcdFx0dGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpcy5jb250ZXh0ID0gdGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yLnNlbGVjdG9yICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3Iuc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmNvbnRleHQgPSBzZWxlY3Rvci5jb250ZXh0O1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0cG9zID0gcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSB8fCB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvcnMsIGNvbnRleHQgfHwgdGhpcy5jb250ZXh0ICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHBvcyA/XG5cdFx0XHRcdFx0cG9zLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQgfHwgalF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59ICk7XG52YXIgcm5vdHdoaXRlID0gKCAvXFxTKy9nICk7XG5cblxuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIGpRdWVyeS50eXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgbGlzdGVuZXIgbGlzdCwgZmluYWwgc3RhdGVcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIFwicmVqZWN0ZWRcIiBdLFxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBqUXVlcnkuaXNGdW5jdGlvbiggZm5zWyBpIF0gKSAmJiBmbnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZFsgZG9uZSB8IGZhaWwgfCBwcm9ncmVzcyBdIGZvciBmb3J3YXJkaW5nIGFjdGlvbnMgdG8gbmV3RGVmZXJcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMgPT09IHByb21pc2UgPyBuZXdEZWZlci5wcm9taXNlKCkgOiB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdHByb21pc2UucGlwZSA9IHByb21pc2UudGhlbjtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDMgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZVsgZG9uZSB8IGZhaWwgfCBwcm9ncmVzcyBdID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdC8vIHN0YXRlID0gWyByZXNvbHZlZCB8IHJlamVjdGVkIF1cblx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXG5cdFx0XHRcdC8vIFsgcmVqZWN0X2xpc3QgfCByZXNvbHZlX2xpc3QgXS5kaXNhYmxlOyBwcm9ncmVzc19saXN0LmxvY2tcblx0XHRcdFx0fSwgdHVwbGVzWyBpIF4gMSBdWyAyIF0uZGlzYWJsZSwgdHVwbGVzWyAyIF1bIDIgXS5sb2NrICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGRlZmVycmVkWyByZXNvbHZlIHwgcmVqZWN0IHwgbm90aWZ5IF1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHByb21pc2UgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9ICk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzdWJvcmRpbmF0ZSAvKiAsIC4uLiwgc3Vib3JkaW5hdGVOICovICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblx0XHRcdGxlbmd0aCA9IHJlc29sdmVWYWx1ZXMubGVuZ3RoLFxuXG5cdFx0XHQvLyB0aGUgY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBsZW5ndGggIT09IDEgfHxcblx0XHRcdFx0KCBzdWJvcmRpbmF0ZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggc3Vib3JkaW5hdGUucHJvbWlzZSApICkgPyBsZW5ndGggOiAwLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkLlxuXHRcdFx0Ly8gSWYgcmVzb2x2ZVZhbHVlcyBjb25zaXN0IG9mIG9ubHkgYSBzaW5nbGUgRGVmZXJyZWQsIGp1c3QgdXNlIHRoYXQuXG5cdFx0XHRkZWZlcnJlZCA9IHJlbWFpbmluZyA9PT0gMSA/IHN1Ym9yZGluYXRlIDogalF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIFVwZGF0ZSBmdW5jdGlvbiBmb3IgYm90aCByZXNvbHZlIGFuZCBwcm9ncmVzcyB2YWx1ZXNcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSwgY29udGV4dHMsIHZhbHVlcyApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRjb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHR2YWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoIHZhbHVlcyA9PT0gcHJvZ3Jlc3NWYWx1ZXMgKSB7XG5cdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBjb250ZXh0cywgdmFsdWVzICk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjb250ZXh0cywgdmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fSxcblxuXHRcdFx0cHJvZ3Jlc3NWYWx1ZXMsIHByb2dyZXNzQ29udGV4dHMsIHJlc29sdmVDb250ZXh0cztcblxuXHRcdC8vIEFkZCBsaXN0ZW5lcnMgdG8gRGVmZXJyZWQgc3Vib3JkaW5hdGVzOyB0cmVhdCBvdGhlcnMgYXMgcmVzb2x2ZWRcblx0XHRpZiAoIGxlbmd0aCA+IDEgKSB7XG5cdFx0XHRwcm9ncmVzc1ZhbHVlcyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XG5cdFx0XHRwcm9ncmVzc0NvbnRleHRzID0gbmV3IEFycmF5KCBsZW5ndGggKTtcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXS5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0LnByb2dyZXNzKCB1cGRhdGVGdW5jKCBpLCBwcm9ncmVzc0NvbnRleHRzLCBwcm9ncmVzc1ZhbHVlcyApIClcblx0XHRcdFx0XHRcdC5kb25lKCB1cGRhdGVGdW5jKCBpLCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKSApXG5cdFx0XHRcdFx0XHQuZmFpbCggZGVmZXJyZWQucmVqZWN0ICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0LS1yZW1haW5pbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBJZiB3ZSdyZSBub3Qgd2FpdGluZyBvbiBhbnl0aGluZywgcmVzb2x2ZSB0aGUgbWFzdGVyXG5cdFx0aWYgKCAhcmVtYWluaW5nICkge1xuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkZWZlcnJlZC5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3Q7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHQvLyBBZGQgdGhlIGNhbGxiYWNrXG5cdGpRdWVyeS5yZWFkeS5wcm9taXNlKCkuZG9uZSggZm4gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIb2xkIChvciByZWxlYXNlKSB0aGUgcmVhZHkgZXZlbnRcblx0aG9sZFJlYWR5OiBmdW5jdGlvbiggaG9sZCApIHtcblx0XHRpZiAoIGhvbGQgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHRcdH1cblx0fSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cblx0XHQvLyBUcmlnZ2VyIGFueSBib3VuZCByZWFkeSBldmVudHNcblx0XHRpZiAoIGpRdWVyeS5mbi50cmlnZ2VySGFuZGxlciApIHtcblx0XHRcdGpRdWVyeSggZG9jdW1lbnQgKS50cmlnZ2VySGFuZGxlciggXCJyZWFkeVwiICk7XG5cdFx0XHRqUXVlcnkoIGRvY3VtZW50ICkub2ZmKCBcInJlYWR5XCIgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuLyoqXG4gKiBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuICovXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbmpRdWVyeS5yZWFkeS5wcm9taXNlID0gZnVuY3Rpb24oIG9iaiApIHtcblx0aWYgKCAhcmVhZHlMaXN0ICkge1xuXG5cdFx0cmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cblx0XHQvLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuXHRcdC8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuXHRcdC8vIFN1cHBvcnQ6IElFOS0xMCBvbmx5XG5cdFx0Ly8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5cdFx0aWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0XHRcdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdFx0XHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHRcdFx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZWFkeUxpc3QucHJvbWlzZSggb2JqICk7XG59O1xuXG4vLyBLaWNrIG9mZiB0aGUgRE9NIHJlYWR5IGNoZWNrIGV2ZW4gaWYgdGhlIHVzZXIgZG9lcyBub3RcbmpRdWVyeS5yZWFkeS5wcm9taXNlKCk7XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggalF1ZXJ5LnR5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjaGFpbmFibGUgP1xuXHRcdGVsZW1zIDpcblxuXHRcdC8vIEdldHNcblx0XHRidWxrID9cblx0XHRcdGZuLmNhbGwoIGVsZW1zICkgOlxuXHRcdFx0bGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdC8qIGpzaGludCAtVzAxOCAqL1xuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0cmVnaXN0ZXI6IGZ1bmN0aW9uKCBvd25lciwgaW5pdGlhbCApIHtcblx0XHR2YXIgdmFsdWUgPSBpbml0aWFsIHx8IHt9O1xuXG5cdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlLCBub24td3JpdGFibGUgcHJvcGVydHlcblx0XHQvLyBjb25maWd1cmFiaWxpdHkgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdC8vIGRlbGV0ZWQgd2l0aCB0aGUgZGVsZXRlIG9wZXJhdG9yXG5cdFx0fSBlbHNlIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdH0gKTtcblx0XHR9XG5cdFx0cmV0dXJuIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0fSxcblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0aWYgKCAhYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblx0XHRcdHJldHVybiB7fTtcblx0XHR9XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBkYXRhIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVbIHByb3AgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGtleSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgc3RvcmVkO1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRzdG9yZWQgPSB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXG5cdFx0XHRyZXR1cm4gc3RvcmVkICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRzdG9yZWQgOiB0aGlzLmdldCggb3duZXIsIGpRdWVyeS5jYW1lbENhc2UoIGtleSApICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLCBuYW1lLCBjYW1lbCxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0aGlzLnJlZ2lzdGVyKCBvd25lciApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIFwibmFtZVwiIGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2hlbiBkYXRhIGlzIGluaXRpYWxseSBjcmVhdGVkLCB2aWEgKFwia2V5XCIsIFwidmFsXCIpIHNpZ25hdHVyZSxcblx0XHRcdFx0Ly8ga2V5cyB3aWxsIGJlIGNvbnZlcnRlZCB0byBjYW1lbENhc2UuXG5cdFx0XHRcdC8vIFNpbmNlIHRoZXJlIGlzIG5vIHdheSB0byB0ZWxsIF9ob3dfIGEga2V5IHdhcyBhZGRlZCwgcmVtb3ZlXG5cdFx0XHRcdC8vIGJvdGggcGxhaW4ga2V5IGFuZCBjYW1lbENhc2Uga2V5LiAjMTI3ODZcblx0XHRcdFx0Ly8gVGhpcyB3aWxsIG9ubHkgcGVuYWxpemUgdGhlIGFycmF5IGFyZ3VtZW50IHBhdGguXG5cdFx0XHRcdG5hbWUgPSBrZXkuY29uY2F0KCBrZXkubWFwKCBqUXVlcnkuY2FtZWxDYXNlICkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNhbWVsID0galF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gVHJ5IHRoZSBzdHJpbmcgYXMgYSBrZXkgYmVmb3JlIGFueSBtYW5pcHVsYXRpb25cblx0XHRcdFx0aWYgKCBrZXkgaW4gY2FjaGUgKSB7XG5cdFx0XHRcdFx0bmFtZSA9IFsga2V5LCBjYW1lbCBdO1xuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0bmFtZSA9IGNhbWVsO1xuXHRcdFx0XHRcdG5hbWUgPSBuYW1lIGluIGNhY2hlID9cblx0XHRcdFx0XHRcdFsgbmFtZSBdIDogKCBuYW1lLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsgbmFtZVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9IDM1LTQ1K1xuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDdcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhID09PSBcInRydWVcIiA/IHRydWUgOlxuXHRcdFx0XHRcdGRhdGEgPT09IFwiZmFsc2VcIiA/IGZhbHNlIDpcblx0XHRcdFx0XHRkYXRhID09PSBcIm51bGxcIiA/IG51bGwgOlxuXG5cdFx0XHRcdFx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0XHRcdFx0XHQrZGF0YSArIFwiXCIgPT09IGRhdGEgPyArZGF0YSA6XG5cdFx0XHRcdFx0cmJyYWNlLnRlc3QoIGRhdGEgKSA/IGpRdWVyeS5wYXJzZUpTT04oIGRhdGEgKSA6XG5cdFx0XHRcdFx0ZGF0YTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTExK1xuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGEsIGNhbWVsS2V5O1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyB3aXRoIHRoZSBrZXkgYXMtaXNcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICkgfHxcblxuXHRcdFx0XHRcdC8vIFRyeSB0byBmaW5kIGRhc2hlZCBrZXkgaWYgaXQgZXhpc3RzIChnaC0yNzc5KVxuXHRcdFx0XHRcdC8vIFRoaXMgaXMgZm9yIDIuMi54IG9ubHlcblx0XHRcdFx0XHRkYXRhVXNlci5nZXQoIGVsZW0sIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKSApO1xuXG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FtZWxLZXkgPSBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIHdpdGggdGhlIGtleSBjYW1lbGl6ZWRcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwgY2FtZWxLZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwgY2FtZWxLZXksIHVuZGVmaW5lZCApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdGNhbWVsS2V5ID0galF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICk7XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIEZpcnN0LCBhdHRlbXB0IHRvIHN0b3JlIGEgY29weSBvciByZWZlcmVuY2Ugb2YgYW55XG5cdFx0XHRcdC8vIGRhdGEgdGhhdCBtaWdodCd2ZSBiZWVuIHN0b3JlIHdpdGggYSBjYW1lbENhc2VkIGtleS5cblx0XHRcdFx0dmFyIGRhdGEgPSBkYXRhVXNlci5nZXQoIHRoaXMsIGNhbWVsS2V5ICk7XG5cblx0XHRcdFx0Ly8gRm9yIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGUgaW50ZXJvcCwgd2UgaGF2ZSB0b1xuXHRcdFx0XHQvLyBzdG9yZSBwcm9wZXJ0eSBuYW1lcyB3aXRoIGRhc2hlcyBpbiBhIGNhbWVsQ2FzZSBmb3JtLlxuXHRcdFx0XHQvLyBUaGlzIG1pZ2h0IG5vdCBhcHBseSB0byBhbGwgcHJvcGVydGllcy4uLipcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBjYW1lbEtleSwgdmFsdWUgKTtcblxuXHRcdFx0XHQvLyAqLi4uIEluIHRoZSBjYXNlIG9mIHByb3BlcnRpZXMgdGhhdCBtaWdodCBfYWN0dWFsbHlfXG5cdFx0XHRcdC8vIGhhdmUgZGFzaGVzLCB3ZSBuZWVkIHRvIGFsc28gc3RvcmUgYSBjb3B5IG9mIHRoYXRcblx0XHRcdFx0Ly8gdW5jaGFuZ2VkIHByb3BlcnR5LlxuXHRcdFx0XHRpZiAoIGtleS5pbmRleE9mKCBcIi1cIiApID4gLTEgJiYgZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgalF1ZXJ5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGlzSGlkZGVuID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW4gbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCIgfHxcblx0XHRcdCFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHR9O1xuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLFxuXHRcdHNjYWxlID0gMSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiB0d2Vlbi5jdXIoKTsgfSA6XG5cdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTsgfSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0ZG8ge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyBpdGVyYXRpb24gemVyb2VkIG91dCwgZG91YmxlIHVudGlsIHdlIGdldCAqc29tZXRoaW5nKi5cblx0XHRcdC8vIFVzZSBzdHJpbmcgZm9yIGRvdWJsaW5nIHNvIHdlIGRvbid0IGFjY2lkZW50YWxseSBzZWUgc2NhbGUgYXMgdW5jaGFuZ2VkIGJlbG93XG5cdFx0XHRzY2FsZSA9IHNjYWxlIHx8IFwiLjVcIjtcblxuXHRcdFx0Ly8gQWRqdXN0IGFuZCBhcHBseVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIFVwZGF0ZSBzY2FsZSwgdG9sZXJhdGluZyB6ZXJvIG9yIE5hTiBmcm9tIHR3ZWVuLmN1cigpXG5cdFx0Ly8gQnJlYWsgdGhlIGxvb3AgaWYgc2NhbGUgaXMgdW5jaGFuZ2VkIG9yIHBlcmZlY3QsIG9yIGlmIHdlJ3ZlIGp1c3QgaGFkIGVub3VnaC5cblx0XHR9IHdoaWxlIChcblx0XHRcdHNjYWxlICE9PSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsICkgJiYgc2NhbGUgIT09IDEgJiYgLS1tYXhJdGVyYXRpb25zXG5cdFx0KTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW1xcdzotXSspLyApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBTdXBwb3J0OiBJRTlcblx0b3B0aW9uOiBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF0sXG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG4vLyBTdXBwb3J0OiBJRTlcbndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0ID0gdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgP1xuXHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICkgOlxuXHRcdFx0dHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiA/XG5cdFx0XHRcdGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICkgOlxuXHRcdFx0W107XG5cblx0cmV0dXJuIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBqUXVlcnkubm9kZU5hbWUoIGNvbnRleHQsIHRhZyApID9cblx0XHRqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKSA6XG5cdFx0cmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgY29udGFpbnMsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCBqUXVlcnkudHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xLCBQaGFudG9tSlM8MlxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjEsIFBoYW50b21KUzwyXG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Y29udGFpbnMgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBjb250YWlucyApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wLTQuMywgU2FmYXJpPD01LjFcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IFNhZmFyaTw9NS4xLCBBbmRyb2lkPDQuMlxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFPD0xMStcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbn0gKSgpO1xuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRTlcbi8vIFNlZSAjMTMzOTMgZm9yIG1vcmUgaW5mb1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcblx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXG5cdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0b3JpZ0ZuID0gZm47XG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fTtcblxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdH1cblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHR9ICk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBEb24ndCBhdHRhY2ggZXZlbnRzIHRvIG5vRGF0YSBvciB0ZXh0L2NvbW1lbnQgbm9kZXMgKGJ1dCBhbGxvdyBwbGFpbiBvYmplY3RzKVxuXHRcdGlmICggIWVsZW1EYXRhICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0ZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApO1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cdFx0XHRoYW5kbGVycyA9ICggZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJlxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBUcmlnZ2VyZWQgZXZlbnQgbXVzdCBlaXRoZXIgMSkgaGF2ZSBubyBuYW1lc3BhY2UsIG9yIDIpIGhhdmUgbmFtZXNwYWNlKHMpXG5cdFx0XHRcdC8vIGEgc3Vic2V0IG9yIGVxdWFsIHRvIHRob3NlIGluIHRoZSBib3VuZCBldmVudCAoYm90aCBjYW4gaGF2ZSBubyBuYW1lc3BhY2UpLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBtYXRjaGVzLCBzZWwsIGhhbmRsZU9iaixcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBTdXBwb3J0IChhdCBsZWFzdCk6IENocm9tZSwgSUU5XG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICgjMTMxODApXG5cdFx0Ly9cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PD00Mitcblx0XHQvLyBBdm9pZCBub24tbGVmdC1jbGljayBpbiBGRiBidXQgZG9uJ3QgYmxvY2sgSUUgcmFkaW8gZXZlbnRzICgjMzg2MSwgZ2gtMjM0Mylcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiYgY3VyLm5vZGVUeXBlICYmXG5cdFx0XHQoIGV2ZW50LnR5cGUgIT09IFwiY2xpY2tcIiB8fCBpc05hTiggZXZlbnQuYnV0dG9uICkgfHwgZXZlbnQuYnV0dG9uIDwgMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICggY3VyLmRpc2FibGVkICE9PSB0cnVlIHx8IGV2ZW50LnR5cGUgIT09IFwiY2xpY2tcIiApICkge1xuXHRcdFx0XHRcdG1hdGNoZXMgPSBbXTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZXMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlcyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IHRoaXMsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdC8vIEluY2x1ZGVzIHNvbWUgZXZlbnQgcHJvcHMgc2hhcmVkIGJ5IEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50XG5cdHByb3BzOiAoIFwiYWx0S2V5IGJ1YmJsZXMgY2FuY2VsYWJsZSBjdHJsS2V5IGN1cnJlbnRUYXJnZXQgZGV0YWlsIGV2ZW50UGhhc2UgXCIgK1xuXHRcdFwibWV0YUtleSByZWxhdGVkVGFyZ2V0IHNoaWZ0S2V5IHRhcmdldCB0aW1lU3RhbXAgdmlldyB3aGljaFwiICkuc3BsaXQoIFwiIFwiICksXG5cblx0Zml4SG9va3M6IHt9LFxuXG5cdGtleUhvb2tzOiB7XG5cdFx0cHJvcHM6IFwiY2hhciBjaGFyQ29kZSBrZXkga2V5Q29kZVwiLnNwbGl0KCBcIiBcIiApLFxuXHRcdGZpbHRlcjogZnVuY3Rpb24oIGV2ZW50LCBvcmlnaW5hbCApIHtcblxuXHRcdFx0Ly8gQWRkIHdoaWNoIGZvciBrZXkgZXZlbnRzXG5cdFx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgKSB7XG5cdFx0XHRcdGV2ZW50LndoaWNoID0gb3JpZ2luYWwuY2hhckNvZGUgIT0gbnVsbCA/IG9yaWdpbmFsLmNoYXJDb2RlIDogb3JpZ2luYWwua2V5Q29kZTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdH1cblx0fSxcblxuXHRtb3VzZUhvb2tzOiB7XG5cdFx0cHJvcHM6ICggXCJidXR0b24gYnV0dG9ucyBjbGllbnRYIGNsaWVudFkgb2Zmc2V0WCBvZmZzZXRZIHBhZ2VYIHBhZ2VZIFwiICtcblx0XHRcdFwic2NyZWVuWCBzY3JlZW5ZIHRvRWxlbWVudFwiICkuc3BsaXQoIFwiIFwiICksXG5cdFx0ZmlsdGVyOiBmdW5jdGlvbiggZXZlbnQsIG9yaWdpbmFsICkge1xuXHRcdFx0dmFyIGV2ZW50RG9jLCBkb2MsIGJvZHksXG5cdFx0XHRcdGJ1dHRvbiA9IG9yaWdpbmFsLmJ1dHRvbjtcblxuXHRcdFx0Ly8gQ2FsY3VsYXRlIHBhZ2VYL1kgaWYgbWlzc2luZyBhbmQgY2xpZW50WC9ZIGF2YWlsYWJsZVxuXHRcdFx0aWYgKCBldmVudC5wYWdlWCA9PSBudWxsICYmIG9yaWdpbmFsLmNsaWVudFggIT0gbnVsbCApIHtcblx0XHRcdFx0ZXZlbnREb2MgPSBldmVudC50YXJnZXQub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcblx0XHRcdFx0ZG9jID0gZXZlbnREb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0XHRib2R5ID0gZXZlbnREb2MuYm9keTtcblxuXHRcdFx0XHRldmVudC5wYWdlWCA9IG9yaWdpbmFsLmNsaWVudFggK1xuXHRcdFx0XHRcdCggZG9jICYmIGRvYy5zY3JvbGxMZWZ0IHx8IGJvZHkgJiYgYm9keS5zY3JvbGxMZWZ0IHx8IDAgKSAtXG5cdFx0XHRcdFx0KCBkb2MgJiYgZG9jLmNsaWVudExlZnQgfHwgYm9keSAmJiBib2R5LmNsaWVudExlZnQgfHwgMCApO1xuXHRcdFx0XHRldmVudC5wYWdlWSA9IG9yaWdpbmFsLmNsaWVudFkgK1xuXHRcdFx0XHRcdCggZG9jICYmIGRvYy5zY3JvbGxUb3AgIHx8IGJvZHkgJiYgYm9keS5zY3JvbGxUb3AgIHx8IDAgKSAtXG5cdFx0XHRcdFx0KCBkb2MgJiYgZG9jLmNsaWVudFRvcCAgfHwgYm9keSAmJiBib2R5LmNsaWVudFRvcCAgfHwgMCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XG5cdFx0XHQvLyBOb3RlOiBidXR0b24gaXMgbm90IG5vcm1hbGl6ZWQsIHNvIGRvbid0IHVzZSBpdFxuXHRcdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGV2ZW50LndoaWNoID0gKCBidXR0b24gJiAxID8gMSA6ICggYnV0dG9uICYgMiA/IDMgOiAoIGJ1dHRvbiAmIDQgPyAyIDogMCApICkgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdH1cblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRpZiAoIGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdH1cblxuXHRcdC8vIENyZWF0ZSBhIHdyaXRhYmxlIGNvcHkgb2YgdGhlIGV2ZW50IG9iamVjdCBhbmQgbm9ybWFsaXplIHNvbWUgcHJvcGVydGllc1xuXHRcdHZhciBpLCBwcm9wLCBjb3B5LFxuXHRcdFx0dHlwZSA9IGV2ZW50LnR5cGUsXG5cdFx0XHRvcmlnaW5hbEV2ZW50ID0gZXZlbnQsXG5cdFx0XHRmaXhIb29rID0gdGhpcy5maXhIb29rc1sgdHlwZSBdO1xuXG5cdFx0aWYgKCAhZml4SG9vayApIHtcblx0XHRcdHRoaXMuZml4SG9va3NbIHR5cGUgXSA9IGZpeEhvb2sgPVxuXHRcdFx0XHRybW91c2VFdmVudC50ZXN0KCB0eXBlICkgPyB0aGlzLm1vdXNlSG9va3MgOlxuXHRcdFx0XHRya2V5RXZlbnQudGVzdCggdHlwZSApID8gdGhpcy5rZXlIb29rcyA6XG5cdFx0XHRcdHt9O1xuXHRcdH1cblx0XHRjb3B5ID0gZml4SG9vay5wcm9wcyA/IHRoaXMucHJvcHMuY29uY2F0KCBmaXhIb29rLnByb3BzICkgOiB0aGlzLnByb3BzO1xuXG5cdFx0ZXZlbnQgPSBuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cblx0XHRpID0gY29weS5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRwcm9wID0gY29weVsgaSBdO1xuXHRcdFx0ZXZlbnRbIHByb3AgXSA9IG9yaWdpbmFsRXZlbnRbIHByb3AgXTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBDb3Jkb3ZhIDIuNSAoV2ViS2l0KSAoIzEzMjU1KVxuXHRcdC8vIEFsbCBldmVudHMgc2hvdWxkIGhhdmUgYSB0YXJnZXQ7IENvcmRvdmEgZGV2aWNlcmVhZHkgZG9lc24ndFxuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGRvY3VtZW50O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA2LjArLCBDaHJvbWU8Mjhcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdGlmICggZXZlbnQudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZXZlbnQudGFyZ2V0LnBhcmVudE5vZGU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZpeEhvb2suZmlsdGVyID8gZml4SG9vay5maWx0ZXIoIGV2ZW50LCBvcmlnaW5hbEV2ZW50ICkgOiBldmVudDtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Zm9jdXM6IHtcblxuXHRcdFx0Ly8gRmlyZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzICE9PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuZm9jdXMgKSB7XG5cdFx0XHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c2luXCJcblx0XHR9LFxuXHRcdGJsdXI6IHtcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5ibHVyICkge1xuXHRcdFx0XHRcdHRoaXMuYmx1cigpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c291dFwiXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBGb3IgY2hlY2tib3gsIGZpcmUgbmF0aXZlIGV2ZW50IHNvIGNoZWNrZWQgc3RhdGUgd2lsbCBiZSByaWdodFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgJiYgdGhpcy5jbGljayAmJiBqUXVlcnkubm9kZU5hbWUoIHRoaXMsIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHRoaXMuY2xpY2soKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBkb24ndCBmaXJlIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZXZlbnQudGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IGpRdWVyeS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdH0sXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUsXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyeGh0bWxUYWcgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbXFx3Oi1dKylbXj5dKilcXC8+L2dpLFxuXG5cdC8vIFN1cHBvcnQ6IElFIDEwLTExLCBFZGdlIDEwMjQwK1xuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyc2NyaXB0VHlwZU1hc2tlZCA9IC9edHJ1ZVxcLyguKikvLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbi8vIE1hbmlwdWxhdGluZyB0YWJsZXMgcmVxdWlyZXMgYSB0Ym9keVxuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRyZXR1cm4galF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdGpRdWVyeS5ub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSA/XG5cblx0XHRlbGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInRib2R5XCIgKVsgMCBdIHx8XG5cdFx0XHRlbGVtLmFwcGVuZENoaWxkKCBlbGVtLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0Ym9keVwiICkgKSA6XG5cdFx0ZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0dmFyIG1hdGNoID0gcnNjcmlwdFR5cGVNYXNrZWQuZXhlYyggZWxlbS50eXBlICk7XG5cblx0aWYgKCBtYXRjaCApIHtcblx0XHRlbGVtLnR5cGUgPSBtYXRjaFsgMSBdO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgcGRhdGFDdXIsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuYWNjZXNzKCBzcmMgKTtcblx0XHRwZGF0YUN1ciA9IGRhdGFQcml2LnNldCggZGVzdCwgcGRhdGFPbGQgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRlbGV0ZSBwZGF0YUN1ci5oYW5kbGU7XG5cdFx0XHRwZGF0YUN1ci5ldmVudHMgPSB7fTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGNvbmNhdC5hcHBseSggW10sIGFyZ3MgKTtcblxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIGlzRnVuY3Rpb24gfHxcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjEsIFBoYW50b21KUzwyXG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGpRdWVyeS5jb250YWlucyggbm9kZS5vd25lckRvY3VtZW50LCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbC5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKTtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHA6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PSAzNS00NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0gMzUtNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBLZWVwIGRvbU1hbmlwIGV4cG9zZWQgdW50aWwgMy4wIChnaC0yMjI1KVxuXHRkb21NYW5pcDogZG9tTWFuaXAsXG5cblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogUXRXZWJLaXRcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Ncblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSApO1xuXG5cbnZhciBpZnJhbWUsXG5cdGVsZW1kaXNwbGF5ID0ge1xuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveFxuXHRcdC8vIFdlIGhhdmUgdG8gcHJlLWRlZmluZSB0aGVzZSB2YWx1ZXMgZm9yIEZGICgjMTAyMjcpXG5cdFx0SFRNTDogXCJibG9ja1wiLFxuXHRcdEJPRFk6IFwiYmxvY2tcIlxuXHR9O1xuXG4vKipcbiAqIFJldHJpZXZlIHRoZSBhY3R1YWwgZGlzcGxheSBvZiBhIGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG5vZGVOYW1lIG9mIHRoZSBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gZG9jIERvY3VtZW50IG9iamVjdFxuICovXG5cbi8vIENhbGxlZCBvbmx5IGZyb20gd2l0aGluIGRlZmF1bHREaXNwbGF5XG5mdW5jdGlvbiBhY3R1YWxEaXNwbGF5KCBuYW1lLCBkb2MgKSB7XG5cdHZhciBlbGVtID0galF1ZXJ5KCBkb2MuY3JlYXRlRWxlbWVudCggbmFtZSApICkuYXBwZW5kVG8oIGRvYy5ib2R5ICksXG5cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbVsgMCBdLCBcImRpc3BsYXlcIiApO1xuXG5cdC8vIFdlIGRvbid0IGhhdmUgYW55IGRhdGEgc3RvcmVkIG9uIHRoZSBlbGVtZW50LFxuXHQvLyBzbyB1c2UgXCJkZXRhY2hcIiBtZXRob2QgYXMgZmFzdCB3YXkgdG8gZ2V0IHJpZCBvZiB0aGUgZWxlbWVudFxuXHRlbGVtLmRldGFjaCgpO1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG4vKipcbiAqIFRyeSB0byBkZXRlcm1pbmUgdGhlIGRlZmF1bHQgZGlzcGxheSB2YWx1ZSBvZiBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gbm9kZU5hbWVcbiAqL1xuZnVuY3Rpb24gZGVmYXVsdERpc3BsYXkoIG5vZGVOYW1lICkge1xuXHR2YXIgZG9jID0gZG9jdW1lbnQsXG5cdFx0ZGlzcGxheSA9IGVsZW1kaXNwbGF5WyBub2RlTmFtZSBdO1xuXG5cdGlmICggIWRpc3BsYXkgKSB7XG5cdFx0ZGlzcGxheSA9IGFjdHVhbERpc3BsYXkoIG5vZGVOYW1lLCBkb2MgKTtcblxuXHRcdC8vIElmIHRoZSBzaW1wbGUgd2F5IGZhaWxzLCByZWFkIGZyb20gaW5zaWRlIGFuIGlmcmFtZVxuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgfHwgIWRpc3BsYXkgKSB7XG5cblx0XHRcdC8vIFVzZSB0aGUgYWxyZWFkeS1jcmVhdGVkIGlmcmFtZSBpZiBwb3NzaWJsZVxuXHRcdFx0aWZyYW1lID0gKCBpZnJhbWUgfHwgalF1ZXJ5KCBcIjxpZnJhbWUgZnJhbWVib3JkZXI9JzAnIHdpZHRoPScwJyBoZWlnaHQ9JzAnLz5cIiApIClcblx0XHRcdFx0LmFwcGVuZFRvKCBkb2MuZG9jdW1lbnRFbGVtZW50ICk7XG5cblx0XHRcdC8vIEFsd2F5cyB3cml0ZSBhIG5ldyBIVE1MIHNrZWxldG9uIHNvIFdlYmtpdCBhbmQgRmlyZWZveCBkb24ndCBjaG9rZSBvbiByZXVzZVxuXHRcdFx0ZG9jID0gaWZyYW1lWyAwIF0uY29udGVudERvY3VtZW50O1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRVxuXHRcdFx0ZG9jLndyaXRlKCk7XG5cdFx0XHRkb2MuY2xvc2UoKTtcblxuXHRcdFx0ZGlzcGxheSA9IGFjdHVhbERpc3BsYXkoIG5vZGVOYW1lLCBkb2MgKTtcblx0XHRcdGlmcmFtZS5kZXRhY2goKTtcblx0XHR9XG5cblx0XHQvLyBTdG9yZSB0aGUgY29ycmVjdCBkZWZhdWx0IGRpc3BsYXlcblx0XHRlbGVtZGlzcGxheVsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cdH1cblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cbnZhciBybWFyZ2luID0gKCAvXm1hcmdpbi8gKTtcblxudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw9MTErLCBGaXJlZm94PD0zMCsgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBwaXhlbE1hcmdpblJpZ2h0VmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyOjA7d2lkdGg6OHB4O2hlaWdodDowO3RvcDowO2xlZnQ6LTk5OTlweDtcIiArXG5cdFx0XCJwYWRkaW5nOjA7bWFyZ2luLXRvcDoxcHg7cG9zaXRpb246YWJzb2x1dGVcIjtcblx0Y29udGFpbmVyLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI5LCBBbmRyb2lkIDIuM1xuXHRcdFx0Ly8gVmVuZG9yLXByZWZpeCBib3gtc2l6aW5nXG5cdFx0XHRcIi13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94Oy1tb3otYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDtcIiArXG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwidG9wOjElO3dpZHRoOjUwJVwiO1xuXHRcdGRpdi5pbm5lckhUTUwgPSBcIlwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IGRpdlN0eWxlLm1hcmdpbkxlZnQgPT09IFwiMnB4XCI7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSBkaXZTdHlsZS53aWR0aCA9PT0gXCI0cHhcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUubWFyZ2luUmlnaHQgPSBcIjUwJVwiO1xuXHRcdHBpeGVsTWFyZ2luUmlnaHRWYWwgPSBkaXZTdHlsZS5tYXJnaW5SaWdodCA9PT0gXCI0cHhcIjtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cdH1cblxuXHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIFRoaXMgdGVzdCBpcyBleGVjdXRlZCBvbmx5IG9uY2UgYnV0IHdlIHN0aWxsIGRvIG1lbW9pemluZ1xuXHRcdFx0Ly8gc2luY2Ugd2UgY2FuIHVzZSB0aGUgYm94U2l6aW5nUmVsaWFibGUgcHJlLWNvbXB1dGluZy5cblx0XHRcdC8vIE5vIG5lZWQgdG8gY2hlY2sgaWYgdGhlIHRlc3Qgd2FzIGFscmVhZHkgcGVyZm9ybWVkLCB0aG91Z2guXG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGJveFNpemluZ1JlbGlhYmxlVmFsID09IG51bGwgKSB7XG5cdFx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbE1hcmdpblJpZ2h0OiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAtNC4zXG5cdFx0XHQvLyBXZSdyZSBjaGVja2luZyBmb3IgYm94U2l6aW5nUmVsaWFibGVWYWwgaGVyZSBpbnN0ZWFkIG9mIHBpeGVsTWFyZ2luUmlnaHRWYWxcblx0XHRcdC8vIHNpbmNlIHRoYXQgY29tcHJlc3NlcyBiZXR0ZXIgYW5kIHRoZXkncmUgY29tcHV0ZWQgdG9nZXRoZXIgYW55d2F5LlxuXHRcdFx0aWYgKCBib3hTaXppbmdSZWxpYWJsZVZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHBpeGVsTWFyZ2luUmlnaHRWYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggb25seSwgQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSAzN1xuXHRcdFx0aWYgKCBib3hTaXppbmdSZWxpYWJsZVZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luUmlnaHQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xuXHRcdFx0Ly8gQ2hlY2sgaWYgZGl2IHdpdGggZXhwbGljaXQgd2lkdGggYW5kIG5vIG1hcmdpbi1yaWdodCBpbmNvcnJlY3RseVxuXHRcdFx0Ly8gZ2V0cyBjb21wdXRlZCBtYXJnaW4tcmlnaHQgYmFzZWQgb24gd2lkdGggb2YgY29udGFpbmVyLiAoIzMzMzMpXG5cdFx0XHQvLyBXZWJLaXQgQnVnIDEzMzQzIC0gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHdyb25nIHZhbHVlIGZvciBtYXJnaW4tcmlnaHRcblx0XHRcdC8vIFRoaXMgc3VwcG9ydCBmdW5jdGlvbiBpcyBvbmx5IGV4ZWN1dGVkIG9uY2Ugc28gbm8gbWVtb2l6aW5nIGlzIG5lZWRlZC5cblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdG1hcmdpbkRpdiA9IGRpdi5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdC8vIFJlc2V0IENTUzogYm94LXNpemluZzsgZGlzcGxheTsgbWFyZ2luOyBib3JkZXI7IHBhZGRpbmdcblx0XHRcdG1hcmdpbkRpdi5zdHlsZS5jc3NUZXh0ID0gZGl2LnN0eWxlLmNzc1RleHQgPVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG5cdFx0XHRcdC8vIFZlbmRvci1wcmVmaXggYm94LXNpemluZ1xuXHRcdFx0XHRcIi13ZWJraXQtYm94LXNpemluZzpjb250ZW50LWJveDtib3gtc2l6aW5nOmNvbnRlbnQtYm94O1wiICtcblx0XHRcdFx0XCJkaXNwbGF5OmJsb2NrO21hcmdpbjowO2JvcmRlcjowO3BhZGRpbmc6MFwiO1xuXHRcdFx0bWFyZ2luRGl2LnN0eWxlLm1hcmdpblJpZ2h0ID0gbWFyZ2luRGl2LnN0eWxlLndpZHRoID0gXCIwXCI7XG5cdFx0XHRkaXYuc3R5bGUud2lkdGggPSBcIjFweFwiO1xuXHRcdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdFx0cmV0ID0gIXBhcnNlRmxvYXQoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBtYXJnaW5EaXYgKS5tYXJnaW5SaWdodCApO1xuXG5cdFx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXHRcdFx0ZGl2LnJlbW92ZUNoaWxkKCBtYXJnaW5EaXYgKTtcblxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cdHJldCA9IGNvbXB1dGVkID8gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF0gOiB1bmRlZmluZWQ7XG5cblx0Ly8gU3VwcG9ydDogT3BlcmEgMTIuMXggb25seVxuXHQvLyBGYWxsIGJhY2sgdG8gc3R5bGUgZXZlbiB3aXRob3V0IGNvbXB1dGVkXG5cdC8vIGNvbXB1dGVkIGlzIHVuZGVmaW5lZCBmb3IgZWxlbXMgb24gZG9jdW1lbnQgZnJhZ21lbnRzXG5cdGlmICggKCByZXQgPT09IFwiXCIgfHwgcmV0ID09PSB1bmRlZmluZWQgKSAmJiAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcblx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFOVxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG9ubHkgbmVlZGVkIGZvciAuY3NzKCdmaWx0ZXInKSAoIzEyNTM3KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHA6Ly9kZXYudzMub3JnL2Nzc3dnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsTWFyZ2luUmlnaHQoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcm1hcmdpbi50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhclxuXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGVcblx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG5cblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH0sXG5cblx0Y3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiT1wiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZTtcblxuLy8gUmV0dXJuIGEgY3NzIHByb3BlcnR5IG1hcHBlZCB0byBhIHBvdGVudGlhbGx5IHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XG5cblx0Ly8gU2hvcnRjdXQgZm9yIG5hbWVzIHRoYXQgYXJlIG5vdCB2ZW5kb3IgcHJlZml4ZWRcblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYXVnbWVudFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhLCBpc0JvcmRlckJveCwgc3R5bGVzICkge1xuXHR2YXIgaSA9IGV4dHJhID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgP1xuXG5cdFx0Ly8gSWYgd2UgYWxyZWFkeSBoYXZlIHRoZSByaWdodCBtZWFzdXJlbWVudCwgYXZvaWQgYXVnbWVudGF0aW9uXG5cdFx0NCA6XG5cblx0XHQvLyBPdGhlcndpc2UgaW5pdGlhbGl6ZSBmb3IgaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbCBwcm9wZXJ0aWVzXG5cdFx0bmFtZSA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cblx0XHR2YWwgPSAwO1xuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpbiwgc28gYWRkIGl0IGlmIHdlIHdhbnQgaXRcblx0XHRpZiAoIGV4dHJhID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIGV4dHJhICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdGlmICggaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIGJvcmRlci1ib3ggaW5jbHVkZXMgcGFkZGluZywgc28gcmVtb3ZlIGl0IGlmIHdlIHdhbnQgY29udGVudFxuXHRcdFx0aWYgKCBleHRyYSA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgYm9yZGVyIG5vciBtYXJnaW4sIHNvIHJlbW92ZSBib3JkZXJcblx0XHRcdGlmICggZXh0cmEgIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQsIHNvIGFkZCBwYWRkaW5nXG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQgbm9yIHBhZGRpbmcsIHNvIGFkZCBib3JkZXJcblx0XHRcdGlmICggZXh0cmEgIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIG9mZnNldCBwcm9wZXJ0eSwgd2hpY2ggaXMgZXF1aXZhbGVudCB0byB0aGUgYm9yZGVyLWJveCB2YWx1ZVxuXHR2YXIgdmFsdWVJc0JvcmRlckJveCA9IHRydWUsXG5cdFx0dmFsID0gbmFtZSA9PT0gXCJ3aWR0aFwiID8gZWxlbS5vZmZzZXRXaWR0aCA6IGVsZW0ub2Zmc2V0SGVpZ2h0LFxuXHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHQvLyBTb21lIG5vbi1odG1sIGVsZW1lbnRzIHJldHVybiB1bmRlZmluZWQgZm9yIG9mZnNldFdpZHRoLCBzbyBjaGVjayBmb3IgbnVsbC91bmRlZmluZWRcblx0Ly8gc3ZnIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjQ5Mjg1XG5cdC8vIE1hdGhNTCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTQ5MTY2OFxuXHRpZiAoIHZhbCA8PSAwIHx8IHZhbCA9PSBudWxsICkge1xuXG5cdFx0Ly8gRmFsbCBiYWNrIHRvIGNvbXB1dGVkIHRoZW4gdW5jb21wdXRlZCBjc3MgaWYgbmVjZXNzYXJ5XG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHRpZiAoIHZhbCA8IDAgfHwgdmFsID09IG51bGwgKSB7XG5cdFx0XHR2YWwgPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gQ29tcHV0ZWQgdW5pdCBpcyBub3QgcGl4ZWxzLiBTdG9wIGhlcmUgYW5kIHJldHVybi5cblx0XHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXG5cdFx0Ly8gQ2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcblx0XHQvLyBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSBzaWxlbnRseSBmYWxscyBiYWNrIHRvIHRoZSByZWxpYWJsZSBlbGVtLnN0eWxlXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94ICYmXG5cdFx0XHQoIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbIG5hbWUgXSApO1xuXG5cdFx0Ly8gTm9ybWFsaXplIFwiXCIsIGF1dG8sIGFuZCBwcmVwYXJlIGZvciBleHRyYVxuXHRcdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cdH1cblxuXHQvLyBVc2UgdGhlIGFjdGl2ZSBib3gtc2l6aW5nIG1vZGVsIHRvIGFkZC9zdWJ0cmFjdCBpcnJlbGV2YW50IHN0eWxlc1xuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0ZWxlbSxcblx0XHRcdG5hbWUsXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLCBoaWRkZW4sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcIm9sZGRpc3BsYXlcIiApO1xuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBSZXNldCB0aGUgaW5saW5lIGRpc3BsYXkgb2YgdGhpcyBlbGVtZW50IHRvIGxlYXJuIGlmIGl0IGlzXG5cdFx0XHQvLyBiZWluZyBoaWRkZW4gYnkgY2FzY2FkZWQgcnVsZXMgb3Igbm90XG5cdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gJiYgZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBlbGVtZW50cyB3aGljaCBoYXZlIGJlZW4gb3ZlcnJpZGRlbiB3aXRoIGRpc3BsYXk6IG5vbmVcblx0XHRcdC8vIGluIGEgc3R5bGVzaGVldCB0byB3aGF0ZXZlciB0aGUgZGVmYXVsdCBicm93c2VyIHN0eWxlIGlzXG5cdFx0XHQvLyBmb3Igc3VjaCBhbiBlbGVtZW50XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbiggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5hY2Nlc3MoXG5cdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRcIm9sZGRpc3BsYXlcIixcblx0XHRcdFx0XHRkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGhpZGRlbiA9IGlzSGlkZGVuKCBlbGVtICk7XG5cblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgfHwgIWhpZGRlbiApIHtcblx0XHRcdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0XCJvbGRkaXNwbGF5XCIsXG5cdFx0XHRcdFx0aGlkZGVuID8gZGlzcGxheSA6IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgbW9zdCBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcFxuXHQvLyB0byBhdm9pZCB0aGUgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cdFx0aWYgKCAhc2hvdyB8fCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8IGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IHNob3cgPyB2YWx1ZXNbIGluZGV4IF0gfHwgXCJcIiA6IFwibm9uZVwiO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHtcblx0XHRcImZsb2F0XCI6IFwiY3NzRmxvYXRcIlxuXHR9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHxcblx0XHRcdCggalF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG9yaWdOYW1lICkgfHwgb3JpZ05hbWUgKTtcblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0bmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fFxuXHRcdFx0KCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggb3JpZ05hbWUgKSB8fCBvcmlnTmFtZSApO1xuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cdFx0XHRcdFx0ZWxlbS5vZmZzZXRXaWR0aCA9PT0gMCA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGV4dHJhICYmIGdldFN0eWxlcyggZWxlbSApLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhICYmIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0bmFtZSxcblx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHQpO1xuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xualF1ZXJ5LmNzc0hvb2tzLm1hcmdpblJpZ2h0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luUmlnaHQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuIHN3YXAoIGVsZW0sIHsgXCJkaXNwbGF5XCI6IFwiaW5saW5lLWJsb2NrXCIgfSxcblx0XHRcdFx0Y3VyQ1NTLCBbIGVsZW0sIFwibWFyZ2luUmlnaHRcIiBdICk7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoICFybWFyZ2luLnRlc3QoIHByZWZpeCApICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW4oIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRTlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIENvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCB0aW1lcklkLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBqUXVlcnkubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNCA7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHQvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCB0d2VlbiwgaG9va3MsIG9sZGZpcmUsIGRpc3BsYXksIGNoZWNrRGlzcGxheSxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW4oIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIEhhbmRsZSBxdWV1ZTogZmFsc2UgcHJvbWlzZXNcblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSGVpZ2h0L3dpZHRoIG92ZXJmbG93IHBhc3Ncblx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCJoZWlnaHRcIiBpbiBwcm9wcyB8fCBcIndpZHRoXCIgaW4gcHJvcHMgKSApIHtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG5vdGhpbmcgc25lYWtzIG91dFxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUU5LTEwIGRvIG5vdFxuXHRcdC8vIGNoYW5nZSB0aGUgb3ZlcmZsb3cgYXR0cmlidXRlIHdoZW4gb3ZlcmZsb3dYIGFuZFxuXHRcdC8vIG92ZXJmbG93WSBhcmUgc2V0IHRvIHRoZSBzYW1lIHZhbHVlXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBTZXQgZGlzcGxheSBwcm9wZXJ0eSB0byBpbmxpbmUtYmxvY2sgZm9yIGhlaWdodC93aWR0aFxuXHRcdC8vIGFuaW1hdGlvbnMgb24gaW5saW5lIGVsZW1lbnRzIHRoYXQgYXJlIGhhdmluZyB3aWR0aC9oZWlnaHQgYW5pbWF0ZWRcblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblxuXHRcdC8vIFRlc3QgZGVmYXVsdCBkaXNwbGF5IGlmIGRpc3BsYXkgaXMgY3VycmVudGx5IFwibm9uZVwiXG5cdFx0Y2hlY2tEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgP1xuXHRcdFx0ZGF0YVByaXYuZ2V0KCBlbGVtLCBcIm9sZGRpc3BsYXlcIiApIHx8IGRlZmF1bHREaXNwbGF5KCBlbGVtLm5vZGVOYW1lICkgOiBkaXNwbGF5O1xuXG5cdFx0aWYgKCBjaGVja0Rpc3BsYXkgPT09IFwiaW5saW5lXCIgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBzaG93L2hpZGUgcGFzc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLmV4ZWMoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGRhdGFTaG93IGxlZnQgb3ZlciBmcm9tIGEgc3RvcHBlZCBoaWRlIG9yIHNob3dcblx0XHRcdFx0Ly8gYW5kIHdlIGFyZSBnb2luZyB0byBwcm9jZWVkIHdpdGggc2hvdywgd2Ugc2hvdWxkIHByZXRlbmQgdG8gYmUgaGlkZGVuXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXG5cdFx0Ly8gQW55IG5vbi1meCB2YWx1ZSBzdG9wcyB1cyBmcm9tIHJlc3RvcmluZyB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRkaXNwbGF5ID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwge30gKTtcblx0XHR9XG5cblx0XHQvLyBTdG9yZSBzdGF0ZSBpZiBpdHMgdG9nZ2xlIC0gZW5hYmxlcyAuc3RvcCgpLnRvZ2dsZSgpIHRvIFwicmV2ZXJzZVwiXG5cdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdH1cblx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdGpRdWVyeSggZWxlbSApLnNob3coKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5KCBlbGVtICkuaGlkZSgpO1xuXHRcdFx0fSApO1xuXHRcdH1cblx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHByb3A7XG5cblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHR0d2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXG5cdFx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0XHR0d2Vlbi5lbmQgPSB0d2Vlbi5zdGFydDtcblx0XHRcdFx0XHR0d2Vlbi5zdGFydCA9IHByb3AgPT09IFwid2lkdGhcIiB8fCBwcm9wID09PSBcImhlaWdodFwiID8gMSA6IDA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0Ly8gSWYgdGhpcyBpcyBhIG5vb3AgbGlrZSAuaGlkZSgpLmhpZGUoKSwgcmVzdG9yZSBhbiBvdmVyd3JpdHRlbiBkaXNwbGF5IHZhbHVlXG5cdH0gZWxzZSBpZiAoICggZGlzcGxheSA9PT0gXCJub25lXCIgPyBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApIDogZGlzcGxheSApID09PSBcImlubGluZVwiICkge1xuXHRcdHN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5O1xuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRqUXVlcnkucHJveHkoIHJlc3VsdC5zdG9wLCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHQvLyBhdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRyZXR1cm4gYW5pbWF0aW9uLnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90d2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFqUXVlcnkuaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4Lm9mZiA/IDAgOiB0eXBlb2Ygb3B0LmR1cmF0aW9uID09PSBcIm51bWJlclwiID9cblx0XHRvcHQuZHVyYXRpb24gOiBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyA/XG5cdFx0XHRqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXSA6IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW4gKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBqUXVlcnkubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBDaGVja3MgdGhlIHRpbWVyIGhhcyBub3QgYWxyZWFkeSBiZWVuIHJlbW92ZWRcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRpZiAoIHRpbWVyKCkgKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnRpbWVycy5wb3AoKTtcblx0fVxufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCAhdGltZXJJZCApIHtcblx0XHR0aW1lcklkID0gd2luZG93LnNldEludGVydmFsKCBqUXVlcnkuZngudGljaywgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdH1cbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdHdpbmRvdy5jbGVhckludGVydmFsKCB0aW1lcklkICk7XG5cblx0dGltZXJJZCA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cDovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IGlPUzw9NS4xLCBBbmRyb2lkPD00LjIrXG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRTw9MTErXG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw9Mi4zXG5cdC8vIE9wdGlvbnMgaW5zaWRlIGRpc2FibGVkIHNlbGVjdHMgYXJlIGluY29ycmVjdGx5IG1hcmtlZCBhcyBkaXNhYmxlZFxuXHRzZWxlY3QuZGlzYWJsZWQgPSB0cnVlO1xuXHRzdXBwb3J0Lm9wdERpc2FibGVkID0gIW9wdC5kaXNhYmxlZDtcblxuXHQvLyBTdXBwb3J0OiBJRTw9MTErXG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgYXR0cmlidXRlcyBhcmUgbG93ZXJjYXNlXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0bmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSwgcHJvcE5hbWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0cHJvcE5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cblx0XHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGdldCBzcGVjaWFsIHRyZWF0bWVudCAoIzEwODcwKVxuXHRcdFx0XHRpZiAoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHRcdFx0Ly8gU2V0IGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdG8gZmFsc2Vcblx0XHRcdFx0XHRlbGVtWyBwcm9wTmFtZSBdID0gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZTtcblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIGh0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdHJldHVybiB0YWJpbmRleCA/XG5cdFx0XHRcdFx0cGFyc2VJbnQoIHRhYmluZGV4LCAxMCApIDpcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiYgZWxlbS5ocmVmID9cblx0XHRcdFx0XHRcdFx0MCA6XG5cdFx0XHRcdFx0XHRcdC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cbnZhciByY2xhc3MgPSAvW1xcdFxcclxcblxcZl0vZztcblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgKSB7XG5cdFx0XHRjbGFzc2VzID0gdmFsdWUubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdCggXCIgXCIgKyBjdXJWYWx1ZSArIFwiIFwiICkucmVwbGFjZSggcmNsYXNzLCBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IGpRdWVyeS50cmltKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgKSB7XG5cdFx0XHRjbGFzc2VzID0gdmFsdWUubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0KCBcIiBcIiArIGN1clZhbHVlICsgXCIgXCIgKS5yZXBsYWNlKCByY2xhc3MsIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBqUXVlcnkudHJpbSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiB0eXBlID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIGdldENsYXNzKCBlbGVtICkgKyBcIiBcIiApLnJlcGxhY2UoIHJjbGFzcywgXCIgXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nLFxuXHRyc3BhY2VzID0gL1tcXHgyMFxcdFxcclxcblxcZl0rL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIGlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0cmV0dXJuIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgP1xuXG5cdFx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRcdHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICkgOlxuXG5cdFx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdFx0cmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFMTAtMTErXG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRqUXVlcnkudHJpbSggalF1ZXJ5LnRleHQoIGVsZW0gKSApLnJlcGxhY2UoIHJzcGFjZXMsIFwiIFwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIiB8fCBpbmRleCA8IDAsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoLFxuXHRcdFx0XHRcdGkgPSBpbmRleCA8IDAgP1xuXHRcdFx0XHRcdFx0bWF4IDpcblx0XHRcdFx0XHRcdG9uZSA/IGluZGV4IDogMDtcblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0KCBzdXBwb3J0Lm9wdERpc2FibGVkID9cblx0XHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkIDogb3B0aW9uLmdldEF0dHJpYnV0ZSggXCJkaXNhYmxlZFwiICkgPT09IG51bGwgKSAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFqUXVlcnkubm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC87XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IGxvYWQgcmVzaXplIHNjcm9sbCB1bmxvYWQgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGVycm9yIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3hcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lLCBTYWZhcmlcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0galF1ZXJ5Lm5vdygpO1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gU3VwcG9ydDogQW5kcm9pZCAyLjNcbi8vIFdvcmthcm91bmQgZmFpbHVyZSB0byBzdHJpbmctY2FzdCBudWxsIGlucHV0XG5qUXVlcnkucGFyc2VKU09OID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICsgXCJcIiApO1xufTtcblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbDtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFOVxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHhtbCA9IHVuZGVmaW5lZDtcblx0fVxuXG5cdGlmICggIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyaGFzaCA9IC8jLiokLyxcblx0cnRzID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblx0b3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzICM5ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogalF1ZXJ5LnBhcnNlSlNPTixcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gVGhlIGpxWEhSIHN0YXRlXG5cdFx0XHRzdGF0ZSA9IDAsXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIHN0YXRlID09PSAyICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSBdID0gbWF0Y2hbIDIgXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGUgPT09IDIgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHR2YXIgbG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0aWYgKCAhc3RhdGUgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbG5hbWUgXSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIGxuYW1lIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCAhc3RhdGUgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggc3RhdGUgPCAyICkge1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2sgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApLmNvbXBsZXRlID0gY29tcGxldGVEZWZlcnJlZC5hZGQ7XG5cdFx0anFYSFIuc3VjY2VzcyA9IGpxWEhSLmRvbmU7XG5cdFx0anFYSFIuZXJyb3IgPSBqcVhIUi5mYWlsO1xuXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggY2hhcmFjdGVyICgjNzUzMTogYW5kIHN0cmluZyBwcm9tb3Rpb24pXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApLnJlcGxhY2UoIHJoYXNoLCBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0galF1ZXJ5LnRyaW0oIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LTExK1xuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBpZiB1cmwgaXMgbWFsZm9ybWVkLCBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFOC0xMStcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggc3RhdGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHRjYWNoZVVSTCA9IHMudXJsO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9ICggcy51cmwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YSApO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGFudGktY2FjaGUgaW4gdXJsIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0cy51cmwgPSBydHMudGVzdCggY2FjaGVVUkwgKSA/XG5cblx0XHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbHJlYWR5IGEgJ18nIHBhcmFtZXRlciwgc2V0IGl0cyB2YWx1ZVxuXHRcdFx0XHRcdGNhY2hlVVJMLnJlcGxhY2UoIHJ0cywgXCIkMV89XCIgKyBub25jZSsrICkgOlxuXG5cdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFkZCBvbmUgdG8gdGhlIGVuZFxuXHRcdFx0XHRcdGNhY2hlVVJMICsgKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArIG5vbmNlKys7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IHN0YXRlID09PSAyICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRmb3IgKCBpIGluIHsgc3VjY2VzczogMSwgZXJyb3I6IDEsIGNvbXBsZXRlOiAxIH0gKSB7XG5cdFx0XHRqcVhIUlsgaSBdKCBzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0c3RhdGUgPSAxO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBleGNlcHRpb24gYXMgZXJyb3IgaWYgbm90IGRvbmVcblx0XHRcdFx0aWYgKCBzdGF0ZSA8IDIgKSB7XG5cdFx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblxuXHRcdFx0XHQvLyBTaW1wbHkgcmV0aHJvdyBvdGhlcndpc2Vcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gQ2FsbGVkIG9uY2Vcblx0XHRcdGlmICggc3RhdGUgPT09IDIgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdGUgaXMgXCJkb25lXCIgbm93XG5cdFx0XHRzdGF0ZSA9IDI7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIGksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXHRcdFwidGhyb3dzXCI6IHRydWVcblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBpc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucGFyZW50KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFqUXVlcnkubm9kZU5hbWUoIHRoaXMsIFwiYm9keVwiICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHRcdH1cblx0XHR9ICkuZW5kKCk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5maWx0ZXJzLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLmZpbHRlcnMudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLmZpbHRlcnMudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdC8vIFN1cHBvcnQ6IE9wZXJhIDw9IDEyLjEyXG5cdC8vIE9wZXJhIHJlcG9ydHMgb2Zmc2V0V2lkdGhzIGFuZCBvZmZzZXRIZWlnaHRzIGxlc3MgdGhhbiB6ZXJvIG9uIHNvbWUgZWxlbWVudHNcblx0Ly8gVXNlIE9SIGluc3RlYWQgb2YgQU5EIGFzIHRoZSBlbGVtZW50IGlzIG5vdCB2aXNpYmxlIGlmIGVpdGhlciBpcyB0cnVlXG5cdC8vIFNlZSB0aWNrZXRzICMxMDQwNiBhbmQgIzEzMTMyXG5cdHJldHVybiBlbGVtLm9mZnNldFdpZHRoID4gMCB8fCBlbGVtLm9mZnNldEhlaWdodCA+IDAgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCA+IDA7XG59O1xuXG5cblxuXG52YXIgcjIwID0gLyUyMC9nLFxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIGpRdWVyeS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCByZXR1cm4gaXRzIHZhbHVlXG5cdFx0XHR2YWx1ZSA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApID8gdmFsdWUoKSA6ICggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgKTtcblx0XHR9O1xuXG5cdC8vIFNldCB0cmFkaXRpb25hbCB0byB0cnVlIGZvciBqUXVlcnkgPD0gMS4zLjIgYmVoYXZpb3IuXG5cdGlmICggdHJhZGl0aW9uYWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHR0cmFkaXRpb25hbCA9IGpRdWVyeS5hamF4U2V0dGluZ3MgJiYgalF1ZXJ5LmFqYXhTZXR0aW5ncy50cmFkaXRpb25hbDtcblx0fVxuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggalF1ZXJ5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKVxuXHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9IClcblx0XHQubWFwKCBmdW5jdGlvbiggaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0cmV0dXJuIHZhbCA9PSBudWxsID9cblx0XHRcdFx0bnVsbCA6XG5cdFx0XHRcdGpRdWVyeS5pc0FycmF5KCB2YWwgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRTlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFOVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSBjYWxsYmFjayggXCJlcnJvclwiICk7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU5XG5cdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XG5cdFx0XHRcdC8vIHRvIGhhbmRsZSB1bmNhdWdodCBhYm9ydHNcblx0XHRcdFx0aWYgKCB4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHhoci5vbmFib3J0ID0gZXJyb3JDYWxsYmFjaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIENoZWNrIHJlYWR5U3RhdGUgYmVmb3JlIHRpbWVvdXQgYXMgaXQgY2hhbmdlc1xuXHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBbGxvdyBvbmVycm9yIHRvIGJlIGNhbGxlZCBmaXJzdCxcblx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XG5cdFx0XHRcdFx0XHRcdC8vIEFsc28sIHNhdmUgZXJyb3JDYWxsYmFjayB0byBhIHZhcmlhYmxlXG5cdFx0XHRcdFx0XHRcdC8vIGFzIHhoci5vbmVycm9yIGNhbm5vdCBiZSBhY2Nlc3NlZFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrKCBcImFib3J0XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArXG5cdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiICkucHJvcCgge1xuXHRcdFx0XHRcdGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCxcblx0XHRcdFx0XHRzcmM6IHMudXJsXG5cdFx0XHRcdH0gKS5vbihcblx0XHRcdFx0XHRcImxvYWQgZXJyb3JcIixcblx0XHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSApO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdHZhciBwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKSxcblx0XHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vLyBLZWVwIGEgY29weSBvZiB0aGUgb2xkIGxvYWQgbWV0aG9kXG52YXIgX2xvYWQgPSBqUXVlcnkuZm4ubG9hZDtcblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0aWYgKCB0eXBlb2YgdXJsICE9PSBcInN0cmluZ1wiICYmIF9sb2FkICkge1xuXHRcdHJldHVybiBfbG9hZC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdH1cblxuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBqUXVlcnkudHJpbSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxuLy8gQXR0YWNoIGEgYnVuY2ggb2YgZnVuY3Rpb25zIGZvciBoYW5kbGluZyBjb21tb24gQUpBWCBldmVudHNcbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBpLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmV4cHIuZmlsdGVycy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbi8qKlxuICogR2V0cyBhIHdpbmRvdyBmcm9tIGFuIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0V2luZG93KCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmlzV2luZG93KCBlbGVtICkgPyBlbGVtIDogZWxlbS5ub2RlVHlwZSA9PT0gOSAmJiBlbGVtLmRlZmF1bHRWaWV3O1xufVxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgZG9jRWxlbSwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGJveCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH0sXG5cdFx0XHRkb2MgPSBlbGVtICYmIGVsZW0ub3duZXJEb2N1bWVudDtcblxuXHRcdGlmICggIWRvYyApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdC8vIE1ha2Ugc3VyZSBpdCdzIG5vdCBhIGRpc2Nvbm5lY3RlZCBET00gbm9kZVxuXHRcdGlmICggIWpRdWVyeS5jb250YWlucyggZG9jRWxlbSwgZWxlbSApICkge1xuXHRcdFx0cmV0dXJuIGJveDtcblx0XHR9XG5cblx0XHRib3ggPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdHdpbiA9IGdldFdpbmRvdyggZG9jICk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogYm94LnRvcCArIHdpbi5wYWdlWU9mZnNldCAtIGRvY0VsZW0uY2xpZW50VG9wLFxuXHRcdFx0bGVmdDogYm94LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXQgLSBkb2NFbGVtLmNsaWVudExlZnRcblx0XHR9O1xuXHR9LFxuXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBGaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gd2luZG93IChwYXJlbnRPZmZzZXQgPSB7dG9wOjAsIGxlZnQ6IDB9LFxuXHRcdC8vIGJlY2F1c2UgaXQgaXMgaXRzIG9ubHkgb2Zmc2V0IHBhcmVudFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpcyB0aGVyZSB3aGVuIGNvbXB1dGVkIHBvc2l0aW9uIGlzIGZpeGVkXG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gR2V0ICpyZWFsKiBvZmZzZXRQYXJlbnRcblx0XHRcdG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50KCk7XG5cblx0XHRcdC8vIEdldCBjb3JyZWN0IG9mZnNldHNcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cdFx0XHRpZiAoICFqUXVlcnkubm9kZU5hbWUoIG9mZnNldFBhcmVudFsgMCBdLCBcImh0bWxcIiApICkge1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0KCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvZmZzZXRQYXJlbnQgYm9yZGVyc1xuXHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXHRcdFx0dmFyIHdpbiA9IGdldFdpbmRvdyggZWxlbSApO1xuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9O1xufSApO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmk8Ny04KywgQ2hyb21lPDM3LTQ0K1xuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MjI5MjgwXG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIEFzIG9mIDUvOC8yMDEyIHRoaXMgd2lsbCB5aWVsZCBpbmNvcnJlY3QgcmVzdWx0cyBmb3IgTW9iaWxlIFNhZmFyaSwgYnV0IHRoZXJlXG5cdFx0XHRcdFx0Ly8gaXNuJ3QgYSB3aG9sZSBsb3Qgd2UgY2FuIGRvLiBTZWUgcHVsbCByZXF1ZXN0IGF0IHRoaXMgVVJMIGZvciBkaXNjdXNzaW9uOlxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNzY0XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlLCBudWxsICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH0sXG5cdHNpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmxlbmd0aDtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uYW5kU2VsZiA9IGpRdWVyeS5mbi5hZGRCYWNrO1xuXG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcbn1cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggIW5vR2xvYmFsICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cbnJldHVybiBqUXVlcnk7XG59KSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCJpbXBvcnQgJCBmcm9tIFwianF1ZXJ5XCI7XG5cbi8vIGxlZ2VuZCBmaWx0ZXIobW91c2Ugb3ZlcikgdG8gbWFrZSBub2RlIGJpZ2dlclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGVnZW5kIHtcbiAgc3RhdGljIG1vdXNlb3ZlckZpbHRlcihsZWdlbmRJZCwgY2lyY2xlLCBjZWxsLCBjb2xvckZ1bmMpIHtcbiAgICBjb25zdCBsZWdlbmRUZXh0ID0gY2VsbC5jaGlsZHJlbihcInRleHRcIilbbGVnZW5kSWRdO1xuICAgICQobGVnZW5kVGV4dCkuYW5pbWF0ZSh7XG4gICAgICAgICAgXCJmb250LXNpemVcIjogW1wiMS4xNWVtXCJdLFxuICAgICAgICAgIFwiZm9udC13ZWlnaHRcIjogW1wiNzAwXCJdXG4gICAgICAgIH0sXG4gICAgICAgIDEwMCk7XG5cbiAgICBjb25zdCBsZWdlbmRQYXRoID0gY2VsbC5jaGlsZHJlbihcInBhdGhcIilbbGVnZW5kSWRdO1xuICAgICQobGVnZW5kUGF0aCkuY3NzKHtcInN0cm9rZVwiOiBbY29sb3JGdW5jKGxlZ2VuZElkKV19KTtcbiAgICAkKGxlZ2VuZFBhdGgpLmFuaW1hdGUoe1wic3Ryb2tlLXdpZHRoXCI6IFtcIjVcIl19LCAxMDApO1xuXG4gICAgY29uc3QgZmlsdGVyZWRDaXJjbGUgPSBjaXJjbGUucGFyZW50KFwiLlwiICsgbGVnZW5kSWQpLmNoaWxkcmVuKFwiY2lyY2xlXCIpO1xuICAgICQoZmlsdGVyZWRDaXJjbGUpLmF0dHIoXCJjbGFzc1wiLCBcImZpbHRlcmVkQ2lyY2xlXCIpO1xuICAgIC8vICAgICAgICAgICAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgY29sb3IobGVnZW5kSWQpKTtcblxuICAgIGNvbnN0IGZpbHRlcmVkVGV4dCA9IGNpcmNsZS5wYXJlbnQoXCIuXCIgKyBsZWdlbmRJZCkuY2hpbGRyZW4oXCJ0ZXh0XCIpO1xuICAgICQoZmlsdGVyZWRUZXh0KS5hdHRyKFwiY2xhc3NcIiwgXCJmaWx0ZXJlZFRleHRcIik7XG4gIH1cblxuICBzdGF0aWMgbW91c2VvdXRGaWx0ZXIobGVnZW5kSWQsIGNpcmNsZSwgY2VsbCkge1xuICAgIGNvbnN0IGxlZ2VuZFRleHQgPSBjZWxsLmNoaWxkcmVuKFwidGV4dFwiKVtsZWdlbmRJZF07XG4gICAgJChsZWdlbmRUZXh0KS5hbmltYXRlKHtcbiAgICAgICAgICBcImZpbGxcIjogW1wiIzMwMjgzM1wiXSxcbiAgICAgICAgICBcImZvbnQtc2l6ZVwiOiBbXCIxZW1cIl0sXG4gICAgICAgICAgXCJmb250LXdlaWdodFwiOiBbXCI0MDBcIl1cbiAgICAgICAgfSxcbiAgICAgICAgMTAwKTtcblxuICAgIGNvbnN0IGxlZ2VuZFBhdGggPSBjZWxsLmNoaWxkcmVuKFwicGF0aFwiKVtsZWdlbmRJZF07XG4gICAgJChsZWdlbmRQYXRoKS5jc3Moe1wic3Ryb2tlXCI6IFtcIndoaXRlXCJdfSk7XG4gICAgJChsZWdlbmRQYXRoKS5hbmltYXRlKHtcInN0cm9rZS13aWR0aFwiOiBbXCIyXCJdfSwgMTAwKTtcblxuICAgIGNvbnN0IGZpbHRlcmVkQ2lyY2xlID0gY2lyY2xlLnBhcmVudChcIi5cIiArIGxlZ2VuZElkKS5jaGlsZHJlbihcImNpcmNsZVwiKTtcbiAgICAkKGZpbHRlcmVkQ2lyY2xlKS5hdHRyKFwiY2xhc3NcIiwgXCJyZXR1cm5GaWx0ZXJlZENpcmNsZVwiKTtcblxuICAgIGNvbnN0IGZpbHRlcmVkVGV4dCA9IGNpcmNsZS5wYXJlbnQoXCIuXCIgKyBsZWdlbmRJZCkuY2hpbGRyZW4oXCJ0ZXh0XCIpO1xuICAgICQoZmlsdGVyZWRUZXh0KS5hdHRyKFwiY2xhc3NcIiwgXCJyZXR1cm5GaWx0ZXJlZFRleHRcIik7XG4gIH1cblxuICBzdGF0aWMgbW91c2VvdmVyQ2xpY2sobGVnZW5kSWQsIGNpcmNsZSwgY2VsbCwgY29sb3JGdW5jKSB7XG4gICAgY29uc3QgbGVnZW5kVGV4dCA9IGNlbGwuY2hpbGRyZW4oXCJ0ZXh0XCIpW2xlZ2VuZElkXTtcbiAgICAkKGxlZ2VuZFRleHQpLmFuaW1hdGUoe1xuICAgICAgICAgIFwiZm9udC1zaXplXCI6IFtcIjEuMTVlbVwiXSxcbiAgICAgICAgICBcImZvbnQtd2VpZ2h0XCI6IFtcIjcwMFwiXVxuICAgICAgICB9LFxuICAgICAgICAxMDApO1xuXG4gICAgY29uc3QgbGVnZW5kUGF0aCA9IGNlbGwuY2hpbGRyZW4oXCJwYXRoXCIpW2xlZ2VuZElkXTtcbiAgICAkKGxlZ2VuZFBhdGgpLmNzcyh7XCJzdHJva2VcIjogW2NvbG9yRnVuYyhsZWdlbmRJZCldfSk7XG4gICAgJChsZWdlbmRQYXRoKS5hbmltYXRlKHtcInN0cm9rZS13aWR0aFwiOiBbXCI1XCJdfSwgMTAwKTtcblxuICAgIGNvbnN0IGZpbHRlcmVkQ2lyY2xlID0gY2lyY2xlLnBhcmVudChcIi5cIiArIGxlZ2VuZElkKS5jaGlsZHJlbihcImNpcmNsZVwiKTtcbiAgICAkKGZpbHRlcmVkQ2lyY2xlKS5hdHRyKFwiY2xhc3NcIiwgXCJmaWx0ZXJlZENpcmNsZVwiKTtcblxuICAgIGNvbnN0IGZpbHRlcmVkVGV4dCA9IGNpcmNsZS5wYXJlbnQoXCIuXCIgKyBsZWdlbmRJZCkuY2hpbGRyZW4oXCJ0ZXh0XCIpO1xuICAgICQoZmlsdGVyZWRUZXh0KS5hdHRyKFwiY2xhc3NcIiwgXCJmaWx0ZXJlZFRleHRcIik7XG4gIH1cblxuXG4gIHN0YXRpYyBwdXRJZDJMZWdlbmQoY2VsbCwgbGVnZW5kTmFtZSkge1xuICAgIGZvciAobGV0IGkgPSAwLCBsID0gbGVnZW5kTmFtZS5sZW5ndGg7IGwgPiBpOyBpKyspIHtcbiAgICAgIGxldCBsZWdlbmRJZCA9IGNlbGxbaV07XG4gICAgICAkKGxlZ2VuZElkKS5hdHRyKFwiaWRcIiwgXCJsZWdlbmRfTm9cIiArIGkpO1xuICAgIH1cbiAgfVxuXG5cbiAgLy8gVGhpcyBmdW5jdGlvbiBoYXMgdG8gYmUgY2FsbGVkIHdoZW4gbm9kZXMgYXJlIGRpc3BsYXllZFxuICBzdGF0aWMgcHV0Q2xhc3MyTm9kZShub2RlcywgY2lyY2xlKSB7XG4gICAgY29uc3Qgbm9kZUdyb3VwID0gY2lyY2xlLnBhcmVudCgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBub2RlR3JvdXAubGVuZ3RoOyBsID4gaTsgaSsrKSB7XG4gICAgICBsZXQgbm9kZUcgPSBub2RlR3JvdXBbaV07XG4gICAgICAkKG5vZGVHKS5hdHRyKFwiY2xhc3NcIiwgbm9kZXNbaV0uZ3JvdXBfaWQpO1xuICAgIH1cbiAgfVxuXG59IiwiaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuaW1wb3J0ICQgZnJvbSBcImpxdWVyeVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOZXR3b3JrIHtcblxuICBzdGF0aWMgbW91c2VvdmVyKGQsIGxpbmtzLCBjaXJjbGUpIHtcbiAgICBjb25zdCBub2RlSW5kZXggPSBkLmluZGV4OyAvLyB0byBnZXQgbm9kZSBpbmRleFxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gbGlua3MubGVuZ3RoOyBsID4gaTsgaSsrKSB7XG4gICAgICBpZiAobGlua3NbaV0uc291cmNlLmluZGV4ID09PSBub2RlSW5kZXggfHxcbiAgICAgICAgICBsaW5rc1tpXS50YXJnZXQuaW5kZXggPT09IG5vZGVJbmRleCkge1xuXG4gICAgICAgIGNvbnN0IGxpbmVJbmRleCA9IGk7ICAvLyBpbmRleCBudW1iZXJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhsaW5lSW5kZXgpXG5cbiAgICAgICAgY29uc3Qgc2VsZWN0TGluZSA9IGQzLnNlbGVjdEFsbChcImxpbmVcIilbJ19ncm91cHMnXVswXVtsaW5lSW5kZXhdOyAvL25vZGUgd2hpY2ggbWF0Y2ggaW5kZXggbnVtYmVyXG4gICAgICAgICQoc2VsZWN0TGluZSkuYXR0cihcImNsYXNzXCIsIFwibGluZUNvbG9yXCIpOyAgLy8gbm9kZSBjb2xvclxuXG4gICAgICAgIC8vY29uc29sZS5sb2cobGlua3NbbGluZUluZGV4XS5zb3VyY2UuaW5kZXgpXG4gICAgICAgIC8vY29uc29sZS5sb2cobGlua3NbbGluZUluZGV4XS50YXJnZXQuaW5kZXgpXG5cbiAgICAgICAgY29uc3Qgbm9kZVNvdXJjZSA9IGxpbmtzW2xpbmVJbmRleF0uc291cmNlLmluZGV4O1xuICAgICAgICBjb25zdCBub2RlVGFyZ2V0ID0gbGlua3NbbGluZUluZGV4XS50YXJnZXQuaW5kZXg7XG5cbiAgICAgICAgY29uc3Qgc2VsZWN0Tm9kZVNvdXJjZSA9IGQzLnNlbGVjdEFsbChcImNpcmNsZVwiKVsnX2dyb3VwcyddWzBdW25vZGVTb3VyY2VdOyAvL25vZGUgd2hpY2ggbWF0Y2ggc291cmNlIGluZGV4IG51bWJlclxuICAgICAgICBjb25zdCBzZWxlY3ROb2RlVGFyZ2V0ID0gZDMuc2VsZWN0QWxsKFwiY2lyY2xlXCIpWydfZ3JvdXBzJ11bMF1bbm9kZVRhcmdldF07IC8vbm9kZSB3aGljaCBtYXRjaCB0YXJnZXQgaW5kZXggbnVtYmVyXG4gICAgICAgICQoc2VsZWN0Tm9kZVNvdXJjZSkuYXR0cihcImNsYXNzXCIsIFwibm9kZUNvbG9yXCIpOyAgLy8gbm9kZSBjb2xvclxuICAgICAgICAkKHNlbGVjdE5vZGVUYXJnZXQpLmF0dHIoXCJjbGFzc1wiLCBcIm5vZGVDb2xvclwiKTsgIC8vIG5vZGUgY29sb3JcblxuICAgICAgICBjb25zdCBzZWxlY3ROb2RlU291cmNlMiA9IGNpcmNsZS5wYXJlbnQoKS5jaGlsZHJlbigndGV4dCcpW25vZGVTb3VyY2VdOyAgLy8gdGV4dCB3aGljaCBtYXRjaCBzb3VyY2UgaW5kZXggbnVtYmVyXG4gICAgICAgIGNvbnN0IHNlbGVjdE5vZGVUYXJnZXQyID0gY2lyY2xlLnBhcmVudCgpLmNoaWxkcmVuKCd0ZXh0Jylbbm9kZVRhcmdldF07ICAvLyB0ZXh0IHdoaWNoIG1hdGNoIHRhcmdldCBpbmRleCBudW1iZXJcbiAgICAgICAgJChzZWxlY3ROb2RlU291cmNlMikuYXR0cihcImNsYXNzXCIsIFwibGlua2VkTm9kZVRleHRcIik7ICAvLyBub2RlIHRleHQgY29sb3JcbiAgICAgICAgJChzZWxlY3ROb2RlVGFyZ2V0MikuYXR0cihcImNsYXNzXCIsIFwibGlua2VkTm9kZVRleHRcIik7ICAvLyBub2RlIHRleHQgY29sb3JcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgc2VsZWN0Tm9kZSA9IGQzLnNlbGVjdEFsbChcImNpcmNsZVwiKVsnX2dyb3VwcyddWzBdW25vZGVJbmRleF07XG4gICAgJChzZWxlY3ROb2RlKS5hdHRyKFwiY2xhc3NcIiwgXCJub2RlQ29sb3JcIik7XG4gICAgY29uc3Qgc2VsZWN0Tm9kZVRleHQgPSBjaXJjbGUucGFyZW50KCkuY2hpbGRyZW4oJ3RleHQnKVtub2RlSW5kZXhdO1xuICAgICQoc2VsZWN0Tm9kZVRleHQpLmF0dHIoXCJjbGFzc1wiLCBcImxpbmtlZE5vZGVUZXh0XCIpO1xuICB9XG5cblxuICBzdGF0aWMgbW91c2VvdXQoZCwgbGlua3MsIGNpcmNsZSkge1xuICAgIGNvbnN0IG5vZGVJbmRleCA9IGQuaW5kZXg7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBsaW5rcy5sZW5ndGg7IGwgPiBpOyBpKyspIHtcbiAgICAgIGlmIChsaW5rc1tpXS5zb3VyY2UuaW5kZXggPT09IG5vZGVJbmRleCB8fFxuICAgICAgICAgIGxpbmtzW2ldLnRhcmdldC5pbmRleCA9PT0gbm9kZUluZGV4KSB7XG5cbiAgICAgICAgY29uc3QgbGluZUluZGV4ID0gaTtcblxuICAgICAgICBjb25zdCBzZWxlY3RMaW5lID0gZDMuc2VsZWN0QWxsKFwibGluZVwiKVsnX2dyb3VwcyddWzBdW2xpbmVJbmRleF07XG4gICAgICAgICQoc2VsZWN0TGluZSkuYXR0cihcImNsYXNzXCIsIFwibGluZUNvbG9yRGVmYXVsdFwiKTtcblxuICAgICAgICBjb25zdCBub2RlU291cmNlID0gbGlua3NbbGluZUluZGV4XS5zb3VyY2UuaW5kZXg7XG4gICAgICAgIGNvbnN0IG5vZGVUYXJnZXQgPSBsaW5rc1tsaW5lSW5kZXhdLnRhcmdldC5pbmRleDtcblxuICAgICAgICBjb25zdCBzZWxlY3ROb2RlU291cmNlID0gZDMuc2VsZWN0QWxsKFwiY2lyY2xlXCIpWydfZ3JvdXBzJ11bMF1bbm9kZVNvdXJjZV07XG4gICAgICAgIGNvbnN0IHNlbGVjdE5vZGVUYXJnZXQgPSBkMy5zZWxlY3RBbGwoXCJjaXJjbGVcIilbJ19ncm91cHMnXVswXVtub2RlVGFyZ2V0XTtcbiAgICAgICAgJChzZWxlY3ROb2RlU291cmNlKS5hdHRyKFwiY2xhc3NcIiwgXCJub2RlQ29sb3JEZWZhdWx0XCIpO1xuICAgICAgICAkKHNlbGVjdE5vZGVUYXJnZXQpLmF0dHIoXCJjbGFzc1wiLCBcIm5vZGVDb2xvckRlZmF1bHRcIik7XG5cbiAgICAgICAgY29uc3Qgc2VsZWN0Tm9kZVNvdXJjZTIgPSBjaXJjbGUucGFyZW50KCkuY2hpbGRyZW4oJ3RleHQnKVtub2RlU291cmNlXTtcbiAgICAgICAgY29uc3Qgc2VsZWN0Tm9kZVRhcmdldDIgPSBjaXJjbGUucGFyZW50KCkuY2hpbGRyZW4oJ3RleHQnKVtub2RlVGFyZ2V0XTtcbiAgICAgICAgJChzZWxlY3ROb2RlU291cmNlMikuYXR0cihcImNsYXNzXCIsIFwidGV4dFNpemVEZWZhdWx0XCIpO1xuICAgICAgICAkKHNlbGVjdE5vZGVUYXJnZXQyKS5hdHRyKFwiY2xhc3NcIiwgXCJ0ZXh0U2l6ZURlZmF1bHRcIik7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHNlbGVjdE5vZGUgPSBkMy5zZWxlY3RBbGwoXCJjaXJjbGVcIilbJ19ncm91cHMnXVswXVtub2RlSW5kZXhdO1xuICAgICQoc2VsZWN0Tm9kZSkuYXR0cihcImNsYXNzXCIsIFwibm9kZUNvbG9yRGVmYXVsdFwiKTtcbiAgICBjb25zdCBzZWxlY3ROb2RlVGV4dCA9IGNpcmNsZS5wYXJlbnQoKS5jaGlsZHJlbigndGV4dCcpW25vZGVJbmRleF07XG4gICAgJChzZWxlY3ROb2RlVGV4dCkuYXR0cihcImNsYXNzXCIsIFwidGV4dFNpemVEZWZhdWx0XCIpO1xuICB9XG5cblxuICBzdGF0aWMgbW91c2Vkb3duKGQsIGxpbmtzLCBjaXJjbGUsIGxhYmVscykge1xuICAgIC8vYXQgZmlyc3QsIG1ha2UgYWxsIG5vZGUgJiBsaW5lIGZhZGVcbiAgICAvLyBkMy5zZWxlY3RBbGwoXCJjaXJjbGVcIikuYXR0cihcImNsYXNzXCIsIFwibm9kZUNvbG9yRmFkZVwiKTtcbiAgICBkMy5zZWxlY3RBbGwoXCJsaW5lXCIpLmF0dHIoXCJjbGFzc1wiLCBcImxpbmVDb2xvckZhZGVcIik7XG4gICAgbGFiZWxzLmF0dHIoXCJjbGFzc1wiLCBcIm5vZGVUZXh0RmFkZVwiKTtcbiAgICAvLyBjaXJjbGUucGFyZW50KCkuY2hpbGRyZW4oJ3RleHQnKS5hdHRyKFwiY2xhc3NcIiwgXCJub2RlVGV4dEZhZGVcIik7XG5cbiAgICBjb25zdCBub2RlSW5kZXggPSBkLmluZGV4O1xuICAgIGZvciAobGV0IGkgPSAwLCBsID0gbGlua3MubGVuZ3RoOyBsID4gaTsgaSsrKSB7XG4gICAgICBpZiAobGlua3NbaV0uc291cmNlLmluZGV4ID09PSBub2RlSW5kZXggfHxcbiAgICAgICAgICBsaW5rc1tpXS50YXJnZXQuaW5kZXggPT09IG5vZGVJbmRleCkge1xuXG4gICAgICAgIGNvbnN0IGxpbmVJbmRleCA9IGk7XG4gICAgICAgIGNvbnN0IHNlbGVjdExpbmUgPSBkMy5zZWxlY3RBbGwoXCJsaW5lXCIpWydfZ3JvdXBzJ11bMF1bbGluZUluZGV4XTtcbiAgICAgICAgJChzZWxlY3RMaW5lKS5hdHRyKFwiY2xhc3NcIiwgXCJsaW5lQ29sb3JcIik7XG5cbiAgICAgICAgY29uc3Qgbm9kZVNvdXJjZSA9IGxpbmtzW2xpbmVJbmRleF0uc291cmNlLmluZGV4O1xuICAgICAgICBjb25zdCBub2RlVGFyZ2V0ID0gbGlua3NbbGluZUluZGV4XS50YXJnZXQuaW5kZXg7XG5cbiAgICAgICAgY29uc3Qgc2VsZWN0Tm9kZVNvdXJjZSA9IGQzLnNlbGVjdEFsbChcImNpcmNsZVwiKVsnX2dyb3VwcyddWzBdW25vZGVTb3VyY2VdO1xuICAgICAgICBjb25zdCBzZWxlY3ROb2RlVGFyZ2V0ID0gZDMuc2VsZWN0QWxsKFwiY2lyY2xlXCIpWydfZ3JvdXBzJ11bMF1bbm9kZVRhcmdldF07XG4gICAgICAgICQoc2VsZWN0Tm9kZVNvdXJjZSkuYXR0cihcImNsYXNzXCIsIFwibm9kZUNvbG9yXCIpO1xuICAgICAgICAkKHNlbGVjdE5vZGVUYXJnZXQpLmF0dHIoXCJjbGFzc1wiLCBcIm5vZGVDb2xvclwiKTtcblxuICAgICAgICBjb25zdCBzZWxlY3ROb2RlU291cmNlMiA9IGNpcmNsZS5wYXJlbnQoKS5jaGlsZHJlbigndGV4dCcpW25vZGVTb3VyY2VdO1xuICAgICAgICBjb25zdCBzZWxlY3ROb2RlVGFyZ2V0MiA9IGNpcmNsZS5wYXJlbnQoKS5jaGlsZHJlbigndGV4dCcpW25vZGVUYXJnZXRdO1xuICAgICAgICAkKHNlbGVjdE5vZGVTb3VyY2UyKS5hdHRyKFwiY2xhc3NcIiwgXCJsaW5rZWROb2RlVGV4dFwiKTtcbiAgICAgICAgJChzZWxlY3ROb2RlVGFyZ2V0MikuYXR0cihcImNsYXNzXCIsIFwibGlua2VkTm9kZVRleHRcIik7XG5cbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgc2VsZWN0Tm9kZSA9IGQzLnNlbGVjdEFsbChcImNpcmNsZVwiKVsnX2dyb3VwcyddWzBdW25vZGVJbmRleF07XG4gICAgJChzZWxlY3ROb2RlKS5hdHRyKFwiY2xhc3NcIiwgXCJub2RlQ29sb3JcIik7XG4gICAgY29uc3Qgc2VsZWN0Tm9kZVRleHQgPSBjaXJjbGUucGFyZW50KCkuY2hpbGRyZW4oJ3RleHQnKVtub2RlSW5kZXhdO1xuICAgICQoc2VsZWN0Tm9kZVRleHQpLmF0dHIoXCJjbGFzc1wiLCBcImxpbmtlZE5vZGVUZXh0XCIpO1xuICB9XG5cblxuICBzdGF0aWMgdG91Y2hTdGFydChkLCBsaW5rcywgY2lyY2xlLCBsYWJlbHMpIHtcbiAgICAvL2F0IGZpcnN0LCBtYWtlIGFsbCBub2RlICYgbGluZSBmYWRlXG4gICAgLy8gZDMuc2VsZWN0QWxsKFwiY2lyY2xlXCIpLmF0dHIoXCJjbGFzc1wiLCBcIm5vZGVDb2xvckZhZGVTcFwiKTtcbiAgICBkMy5zZWxlY3RBbGwoXCJsaW5lXCIpLmF0dHIoXCJjbGFzc1wiLCBcImxpbmVDb2xvckZhZGVcIik7XG4gICAgbGFiZWxzLmF0dHIoXCJjbGFzc1wiLCBcIm5vZGVUZXh0RmFkZVwiKTtcblxuXG4gICAgY29uc3Qgbm9kZUluZGV4ID0gZC5pbmRleDtcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGxpbmtzLmxlbmd0aDsgbCA+IGk7IGkrKykge1xuICAgICAgaWYgKGxpbmtzW2ldLnNvdXJjZS5pbmRleCA9PT0gbm9kZUluZGV4IHx8XG4gICAgICAgICAgbGlua3NbaV0udGFyZ2V0LmluZGV4ID09PSBub2RlSW5kZXgpIHtcblxuICAgICAgICBjb25zdCBsaW5lSW5kZXggPSBpO1xuICAgICAgICBjb25zdCBzZWxlY3RMaW5lID0gZDMuc2VsZWN0QWxsKFwibGluZVwiKVsnX2dyb3VwcyddWzBdW2xpbmVJbmRleF07XG4gICAgICAgICQoc2VsZWN0TGluZSkuYXR0cihcImNsYXNzXCIsIFwibGluZUNvbG9yXCIpO1xuXG4gICAgICAgIGNvbnN0IG5vZGVTb3VyY2UgPSBsaW5rc1tsaW5lSW5kZXhdLnNvdXJjZS5pbmRleDtcbiAgICAgICAgY29uc3Qgbm9kZVRhcmdldCA9IGxpbmtzW2xpbmVJbmRleF0udGFyZ2V0LmluZGV4O1xuXG4gICAgICAgIGNvbnN0IHNlbGVjdE5vZGVTb3VyY2UgPSBkMy5zZWxlY3RBbGwoXCJjaXJjbGVcIilbJ19ncm91cHMnXVswXVtub2RlU291cmNlXTtcbiAgICAgICAgY29uc3Qgc2VsZWN0Tm9kZVRhcmdldCA9IGQzLnNlbGVjdEFsbChcImNpcmNsZVwiKVsnX2dyb3VwcyddWzBdW25vZGVUYXJnZXRdO1xuICAgICAgICAkKHNlbGVjdE5vZGVTb3VyY2UpLmF0dHIoXCJjbGFzc1wiLCBcIm5vZGVDb2xvclwiKTtcbiAgICAgICAgJChzZWxlY3ROb2RlVGFyZ2V0KS5hdHRyKFwiY2xhc3NcIiwgXCJub2RlQ29sb3JcIik7XG5cbiAgICAgICAgY29uc3Qgc2VsZWN0Tm9kZVNvdXJjZTIgPSBjaXJjbGUucGFyZW50KCkuY2hpbGRyZW4oJ3RleHQnKVtub2RlU291cmNlXTtcbiAgICAgICAgY29uc3Qgc2VsZWN0Tm9kZVRhcmdldDIgPSBjaXJjbGUucGFyZW50KCkuY2hpbGRyZW4oJ3RleHQnKVtub2RlVGFyZ2V0XTtcbiAgICAgICAgJChzZWxlY3ROb2RlU291cmNlMikuYXR0cihcImNsYXNzXCIsIFwibGlua2VkTm9kZVRleHRcIik7XG4gICAgICAgICQoc2VsZWN0Tm9kZVRhcmdldDIpLmF0dHIoXCJjbGFzc1wiLCBcImxpbmtlZE5vZGVUZXh0XCIpO1xuXG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHNlbGVjdE5vZGUgPSBkMy5zZWxlY3RBbGwoXCJjaXJjbGVcIilbJ19ncm91cHMnXVswXVtub2RlSW5kZXhdO1xuICAgICQoc2VsZWN0Tm9kZSkuYXR0cihcImNsYXNzXCIsIFwibm9kZUNvbG9yXCIpO1xuICAgIGNvbnN0IHNlbGVjdE5vZGVUZXh0ID0gY2lyY2xlLnBhcmVudCgpLmNoaWxkcmVuKCd0ZXh0Jylbbm9kZUluZGV4XTtcbiAgICAkKHNlbGVjdE5vZGVUZXh0KS5hdHRyKFwiY2xhc3NcIiwgXCJsaW5rZWROb2RlVGV4dFwiKTtcbiAgfVxuXG5cbiAgc3RhdGljIG1vdXNldXAoZCwgbGlua3MsIGNpcmNsZSwgbGFiZWxzKSB7XG4gICAgLy8gZDMuc2VsZWN0QWxsKFwiY2lyY2xlXCIpLmF0dHIoXCJjbGFzc1wiLCBcIm5vZGVSZXR1cm5GYWRlXCIpO1xuICAgIGQzLnNlbGVjdEFsbChcImxpbmVcIikuYXR0cihcImNsYXNzXCIsIFwibGluZVJldHVybkZhZGVcIik7XG4gICAgbGFiZWxzLmF0dHIoXCJjbGFzc1wiLCBcIm5vZGVUZXh0UmV0dXJuRmFkZVwiKTtcblxuICAgIGNvbnN0IG5vZGVJbmRleCA9IGQuaW5kZXg7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBsaW5rcy5sZW5ndGg7IGwgPiBpOyBpKyspIHtcbiAgICAgIGlmIChsaW5rc1tpXS5zb3VyY2UuaW5kZXggPT09IG5vZGVJbmRleCB8fFxuICAgICAgICAgIGxpbmtzW2ldLnRhcmdldC5pbmRleCA9PT0gbm9kZUluZGV4KSB7XG5cbiAgICAgICAgY29uc3QgbGluZUluZGV4ID0gaTtcblxuICAgICAgICBjb25zdCBzZWxlY3RMaW5lID0gZDMuc2VsZWN0QWxsKFwibGluZVwiKVsnX2dyb3VwcyddWzBdW2xpbmVJbmRleF07XG4gICAgICAgICQoc2VsZWN0TGluZSkuYXR0cihcImNsYXNzXCIsIFwibGluZUNvbG9yXCIpO1xuXG4gICAgICAgIGNvbnN0IG5vZGVTb3VyY2UgPSBsaW5rc1tsaW5lSW5kZXhdLnNvdXJjZS5pbmRleDtcbiAgICAgICAgY29uc3Qgbm9kZVRhcmdldCA9IGxpbmtzW2xpbmVJbmRleF0udGFyZ2V0LmluZGV4O1xuXG4gICAgICAgIGNvbnN0IHNlbGVjdE5vZGVTb3VyY2UgPSBkMy5zZWxlY3RBbGwoXCJjaXJjbGVcIilbJ19ncm91cHMnXVswXVtub2RlU291cmNlXTtcbiAgICAgICAgY29uc3Qgc2VsZWN0Tm9kZVRhcmdldCA9IGQzLnNlbGVjdEFsbChcImNpcmNsZVwiKVsnX2dyb3VwcyddWzBdW25vZGVUYXJnZXRdO1xuICAgICAgICAkKHNlbGVjdE5vZGVTb3VyY2UpLmF0dHIoXCJjbGFzc1wiLCBcIm5vZGVDb2xvclwiKTtcbiAgICAgICAgJChzZWxlY3ROb2RlVGFyZ2V0KS5hdHRyKFwiY2xhc3NcIiwgXCJub2RlQ29sb3JcIik7XG5cbiAgICAgICAgY29uc3Qgc2VsZWN0Tm9kZVNvdXJjZTIgPSBjaXJjbGUucGFyZW50KCkuY2hpbGRyZW4oJ3RleHQnKVtub2RlU291cmNlXTtcbiAgICAgICAgY29uc3Qgc2VsZWN0Tm9kZVRhcmdldDIgPSBjaXJjbGUucGFyZW50KCkuY2hpbGRyZW4oJ3RleHQnKVtub2RlVGFyZ2V0XTtcbiAgICAgICAgJChzZWxlY3ROb2RlU291cmNlMikuYXR0cihcImNsYXNzXCIsIFwibGlua2VkTm9kZVRleHRcIik7XG4gICAgICAgICQoc2VsZWN0Tm9kZVRhcmdldDIpLmF0dHIoXCJjbGFzc1wiLCBcImxpbmtlZE5vZGVUZXh0XCIpO1xuXG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHNlbGVjdE5vZGUgPSBkMy5zZWxlY3RBbGwoXCJjaXJjbGVcIilbJ19ncm91cHMnXVswXVtub2RlSW5kZXhdO1xuICAgICQoc2VsZWN0Tm9kZSkuYXR0cihcImNsYXNzXCIsIFwibm9kZUNvbG9yXCIpO1xuICAgIGNvbnN0IHNlbGVjdE5vZGVUZXh0ID0gY2lyY2xlLnBhcmVudCgpLmNoaWxkcmVuKCd0ZXh0Jylbbm9kZUluZGV4XTtcbiAgICAkKHNlbGVjdE5vZGVUZXh0KS5hdHRyKFwiY2xhc3NcIiwgXCJsaW5rZWROb2RlVGV4dFwiKTtcbiAgfVxuXG5cbiAgc3RhdGljIGN1cnNvcih0eXBlLCBib2R5LCBjaXJjbGUpIHtcbiAgICBsZXQgZ3JhYlR5cGVDO1xuICAgIGxldCBncmFiVHlwZUI7XG4gICAgaWYgKHR5cGUgPT09ICdncmFiYmluZycpIHtcbiAgICAgIGdyYWJUeXBlQyA9IFwiZ3JhYmJpbmdcIjtcbiAgICAgIGdyYWJUeXBlQiA9IFwiZ3JhYmJpbmdcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgZ3JhYlR5cGVDID0gXCJncmFiXCI7XG4gICAgICBncmFiVHlwZUIgPSBcImF1dG9cIjtcbiAgICB9XG5cbiAgICAvL2dyYWJiaW5nXG4gICAgY2lyY2xlLmNzcyh7XCJjdXJzb3JcIjogW1wiLXdlYmtpdC1cIiArIGdyYWJUeXBlQ119KTtcbiAgICBjaXJjbGUuY3NzKHtcImN1cnNvclwiOiBbXCItbW96LVwiICsgZ3JhYlR5cGVDXX0pO1xuICAgIGNpcmNsZS5jc3Moe1wiY3Vyc29yXCI6IFtncmFiVHlwZUNdfSk7XG5cbiAgICBib2R5LmNzcyh7XCJjdXJzb3JcIjogW1wiLXdlYmtpdC1cIiArIGdyYWJUeXBlQl19KTtcbiAgICBib2R5LmNzcyh7XCJjdXJzb3JcIjogW1wiLW1vei1cIiArIGdyYWJUeXBlQl19KTtcbiAgICBib2R5LmNzcyh7XCJjdXJzb3JcIjogW2dyYWJUeXBlQl19KTtcbiAgfVxuXG5cbiAgLyogLy9Db2xsaXNpb24gZGV0ZWN0aW9uLy8gKi9cbiAgLy8gc3RhdGljIGNvbGxpZGUoYWxwaGEsIHJhZGl1c0NhbGxpc2lvbiwgbm9kZXMpIHtcbiAgLy8gICBjb25zdCBxdWFkdHJlZSA9IGQzLmdlb20ucXVhZHRyZWUobm9kZXMpO1xuICAvLyAgIHJldHVybiBmdW5jdGlvbiAoZCkge1xuICAvLyAgICAgbGV0IHJiID0gMiAqIHJhZGl1c0NhbGxpc2lvbixcbiAgLy8gICAgICAgICBueDEgPSBkLnggLSByYixcbiAgLy8gICAgICAgICBueDIgPSBkLnggKyByYixcbiAgLy8gICAgICAgICBueTEgPSBkLnkgLSByYixcbiAgLy8gICAgICAgICBueTIgPSBkLnkgKyByYjtcbiAgLy8gICAgIHF1YWR0cmVlLnZpc2l0KGZ1bmN0aW9uIChxdWFkLCB4MSwgeTEsIHgyLCB5Mikge1xuICAvLyAgICAgICBpZiAocXVhZC5wb2ludCAmJiAocXVhZC5wb2ludCAhPT0gZCkpIHtcbiAgLy8gICAgICAgICBsZXQgeCA9IGQueCAtIHF1YWQucG9pbnQueCxcbiAgLy8gICAgICAgICAgICAgeSA9IGQueSAtIHF1YWQucG9pbnQueSxcbiAgLy8gICAgICAgICAgICAgbCA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5KTtcbiAgLy8gICAgICAgICBpZiAobCA8IHJiKSB7XG4gIC8vICAgICAgICAgICBsID0gKGwgLSByYikgLyBsICogYWxwaGE7XG4gIC8vICAgICAgICAgICBkLnggLT0geCAqPSBsO1xuICAvLyAgICAgICAgICAgZC55IC09IHkgKj0gbDtcbiAgLy8gICAgICAgICAgIHF1YWQucG9pbnQueCArPSB4O1xuICAvLyAgICAgICAgICAgcXVhZC5wb2ludC55ICs9IHk7XG4gIC8vICAgICAgICAgfVxuICAvLyAgICAgICB9XG4gIC8vICAgICAgIHJldHVybiB4MSA+IG54MlxuICAvLyAgICAgICAgICAgfHwgeDIgPCBueDFcbiAgLy8gICAgICAgICAgIHx8IHkxID4gbnkyXG4gIC8vICAgICAgICAgICB8fCB5MiA8IG55MTtcbiAgLy8gICAgIH0pO1xuICAvLyAgIH07XG4gIC8vIH1cblxufSIsImNvbnN0IGZsYXZvckRhdGEgPSB7XG4gICAgXCJsaW5rc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMCwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAwLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEwMiwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxNC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA3NCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAzMS4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDIsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMiwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA0MSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMTUuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAyLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDIsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogODQsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTAwLjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMiwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAyLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDQ1LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDExNS4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDIsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMiwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA4OSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMTUuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAyLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDIsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogOSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA4MS4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDIsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMiwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxNDMsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTE1LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAzLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDg2LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDExOC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDMsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMywgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMTAsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTE3LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAzLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDk4LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDExNy4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNCwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMDIsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNTQuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDQsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogNzQsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMzAuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA0LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDUsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMzEsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNTEuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA1LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDYsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogNzcsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogODYuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA1LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDYsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTAwLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDE1NS4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDUsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNiwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA3NCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMDUuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA1LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDYsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogNTgsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogOTguMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA1LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDYsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTUwLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDE1NS4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDUsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNiwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA4LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDYyLjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA2LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDM1LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDU5LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA2LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDY2LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDE5LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA2LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDExOCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMzUuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA1LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDYsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogNjAsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTI4LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA2LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDExNSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA3Mi4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDUsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNiwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA5MSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMTguMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA1LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDYsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTcsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTA3LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA2LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDE1MiwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA4MC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDUsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNiwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMzAsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTM5LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA2LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDMwLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDE3LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA2LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDE1NiwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMjguMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA2LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDcsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogNjgsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTAuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDgsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTEzLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDY3LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA4LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDc0LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDY0LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMiwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA5LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDQxLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDgwLjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMiwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA5LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDg0LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDk4LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMiwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA5LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDQ1LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDg0LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMiwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA5LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDg5LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDgzLjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMiwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA5LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDk1LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDk5LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMiwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA5LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDE0MywgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA4NC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDMsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMTAsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogODYsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTE3LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAxMCwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA5OCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMTcuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDExLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDkxLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDc4LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAxMSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA5NSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA3Ny4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMTEsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTExLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDc5LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAxMiwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA3OCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA5Ni4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMTMsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogNjMsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTI1LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAxMywgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMjYsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogOC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMTQsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogNzIsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTI3LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAxNCwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMTEsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTI4LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogOCwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAxNSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA4NCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA3Mi4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDgsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMTUsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMjgsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogOTcuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA4LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDE1LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDUxLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDk3LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogOCwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAxNSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA5NSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA3NC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDksIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMTYsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogNTcsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMzYuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA5LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDE2LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDk3LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDM2LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogOSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAxNiwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAyNiwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAzNi4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDksIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMTYsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogNzYsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMzYuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA5LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDE2LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEzMiwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAzNi4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDksIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMTYsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMjIsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMzYuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA1LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDE3LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDU4LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDk0LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAxNywgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMDAsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogOTQuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA1LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDE3LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDM1LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDU1LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAxNywgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA2MCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA4Mi4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDUsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMTcsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTMwLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDkwLjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAxNywgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxNTYsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogODIuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDE4LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDExMywgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA2Ny4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMTgsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogNzQsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNzEuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAzLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDE5LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDI3LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDg2LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAxOSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA3OCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA4Ni4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDQsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMjAsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogOTMsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNzQuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxMCwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAyMSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA0NCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA2NC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEwLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDIxLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEzNCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA2NC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEwLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDIxLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDE0MSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA2NS4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDksIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMjIsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogNTcsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMzYuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA5LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDIyLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDk3LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDM2LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogOSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAyMiwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAyNiwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAzNi4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDksIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMjIsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTMyLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDM2LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogOSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAyMiwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA3NiwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAzOC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDExLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDIzLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDUxLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDg2LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMTEsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMjMsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogODQsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTAyLjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMTEsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMjMsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogNDMsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogODYuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxMSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAyMywgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA3NywgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA5NS4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDExLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDIzLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDkxLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEwMS4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDExLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDIzLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDI4LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDg2LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMTEsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMjMsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTM5LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDkzLjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMTEsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMjMsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogNzAsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMjUuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxMSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAyMywgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA5NSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMDUuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDI0LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEwMiwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA1MS4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMjQsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogNTMsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNTEuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDI0LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEyNSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA1MS4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMjQsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogODIsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNTEuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAzLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDI1LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDY0LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDg2LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAyNSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAyNywgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA4Ni4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDMsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMjUsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTIxLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDkwLjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAyNSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA3OCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA4Ni4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDMsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMjUsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMjksIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogODcuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA5LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDI2LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDU3LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDM2LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogOSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAyNiwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA5NywgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAzNi4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDksIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMjYsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogNzYsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMzYuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA5LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDI2LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEzMiwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAzNi4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDMsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMjcsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMjksIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogODYuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAzLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDI3LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDY0LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDg2LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAyNywgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA3OCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA4Ni4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDMsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMjcsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTIxLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDg2LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMTEsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMjgsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogODQsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogOTkuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxMSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAyOCwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA3OCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA4OC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDExLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDI4LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDUxLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDE0NC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDMsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMjksIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogNjQsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogODYuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAzLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDI5LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDc4LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDg2LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAzMCwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMDAsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTcuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA1LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDMwLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDM1LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDE1LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAzMCwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA3NCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxNC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDQsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMzEsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogODAsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNTEuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA0LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDMxLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDE1MSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA1MS4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMzIsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTMzLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDU0LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMTAsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMzMsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogODQsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNDguMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAzLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDM0LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDk5LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEyLjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAzNCwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMzUsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTcuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAzLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDM0LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEzOCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxNi4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDMsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMzQsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogOTUsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMzIuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAzLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDM0LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDg0LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDMwLjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAzNSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA3NCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA1OS4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDUsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMzUsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogNTgsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNTQuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA1LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDM1LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEwMCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA1Mi4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDUsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMzUsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogOTEsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNTAuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA1LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDM1LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEzMCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA1Mi4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDAsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMzYsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTAxLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDMyLjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMTAsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMzcsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogODQsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNDkuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA5LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDM4LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEyMCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMi4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDksIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMzgsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogNjgsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMjAuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA5LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDM4LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEwMywgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAyMi4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDYsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMzksIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogOTQsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTAuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA2LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDM5LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEwMywgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxNy4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDksIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNDAsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTM5LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDQ0LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogOSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA0MCwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA3OSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA0NS4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDIsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNDEsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTE3LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDUyLjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMiwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA0MSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA4NCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA5Ny4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDIsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNDEsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogNDUsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTE1LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMiwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA0MSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA4OSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMTUuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAyLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDQxLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDk1LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDk3LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMiwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA0MSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxNDMsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTE1LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA0MiwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA3OCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA4Ni4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDExLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDQzLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDU2LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDguMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxMSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA0MywgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA0NywgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAyOS4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDExLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDQzLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDc5LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDE3MS4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEwLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDQ0LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDE0NSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA2NC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEwLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDQ0LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEzNCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA2NC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEwLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDQ0LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDUyLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDY0LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMTAsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNDQsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTI4LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDY0LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMTAsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNDQsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTQxLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDY0LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMTAsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNDQsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogODEsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNjQuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxMCwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA0NCwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA2MiwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA2NC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDIsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNDUsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTE3LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDUyLjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMiwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA0NSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA4NCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMDIuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAyLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDQ1LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDg5LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDExNS4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDIsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNDUsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogOTUsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTAyLjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMiwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA0NSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxNDMsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTE5LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMTIsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNDYsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTM3LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDUuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA2LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDQ3LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEzOSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAzMy4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDgsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNDgsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTAzLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEwLjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNiwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA0OSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMjUsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTMuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDUwLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDY4LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDI1LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogOCwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA1MSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA4NCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA5OS4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDgsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNTEsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogNzgsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogODguMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxMCwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA1MiwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMzQsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNjQuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxMCwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA1MiwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxNDUsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNjQuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDUzLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEwMiwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA1Ny4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNTMsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTI1LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDU2LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA1MywgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMDEsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNTMuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDUzLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDgyLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDUzLjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA1NCwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA3NCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAzNi4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNTUsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogNTksIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNDkuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDU1LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDc0LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDQ0LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMCwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA1NiwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMDIsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogOC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDAsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNTYsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTA2LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDYuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA5LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDU3LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDk3LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDM2LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogOSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA1NywgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA3NiwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAzNi4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDksIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNTcsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTMyLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDM2LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA1OCwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMTUsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNzYuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA1LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDU4LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDkxLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEwMy4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDUsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNTgsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTMwLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDg3LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA1OSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMTMsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMzguMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDU5LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDc0LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDQ0LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA2MCwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA2NiwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxOC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDUsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNjAsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTAwLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEyOC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDUsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNjAsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTU2LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEyOC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNjEsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTEzLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDg5LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMTAsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNjIsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogODgsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTguMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxMCwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA2MiwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMzQsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogODQuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxMCwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA2MiwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxNDUsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNjUuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAzLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDY0LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEyMSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA4Ni4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDMsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNjQsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogNzgsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogODYuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDY1LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDExMywgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA2My4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNjUsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogNzQsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNjQuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA1LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDY2LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEwMCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxOC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDUsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNjYsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTE4LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDE4LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA2NiwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMzAsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTguMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA1LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDY2LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDE1NiwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxOC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNjcsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogODMsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTI3LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA2NywgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA3MiwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMjcuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDY3LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEyMywgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAyNy4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNjcsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogODUsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTI4LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA2NywgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxNDgsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTI5LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA2NywgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMTEsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTI5LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA2NywgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMjcsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTI3LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA2NywgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMDQsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTI3LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA2NywgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA2OSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMzQuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDY3LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDE0MCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMjkuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDY3LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDE1MywgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMjcuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDY3LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDcxLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEzNi4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNjcsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTA3LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEzMS4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDksIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNjgsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogODcsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTAuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA5LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDY4LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDE0NiwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA3LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA2OSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA4MywgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMzMuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDY5LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDcyLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEyNy4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNjksIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogODUsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTMwLjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA2OSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxNDgsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTI5LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA2OSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA5MCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMi4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNjksIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTExLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEzNy4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNjksIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTI3LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEzMS4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNjksIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTI5LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEyOC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNjksIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTA0LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEzMC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNjksIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTQwLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEyNy4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNjksIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogNzEsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTQyLjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA2OSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMjMsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMjcuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDcxLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDgzLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEzMC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNzEsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogNzIsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTI3LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA3MSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxNDgsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTI5LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA3MSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA4NSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMjkuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDcxLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDc1LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEyNy4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNzEsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogOTAsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTIuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDcxLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDExMSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMzQuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDcxLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEyNywgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMzEuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDcxLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEyOSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMjguMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDcxLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEwNCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMzAuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDcxLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDE0MCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMjcuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDcxLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDE1MywgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMjcuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDcxLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEyMywgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAyOC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNzEsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTA3LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEyOC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNzIsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogODMsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTI3LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA3MiwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMDcsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTI3LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA3MiwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxNDgsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTI3LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA3MiwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA4NSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMjcuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDcyLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDc1LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEyNy4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNzIsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTExLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEyNy4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNzIsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTI3LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEyNy4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNzIsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTI5LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEyNy4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNzIsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTA0LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEyNy4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNzIsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTQwLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEyNy4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNzIsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTUzLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEyNy4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDYsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNzMsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTAzLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDE4LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA3NCwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMDgsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNzQuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDc0LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDExOSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA0MS4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNzQsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTEzLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDExNC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNzQsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTEyLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDg1LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA3NSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMDQsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTI3LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogOSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA3NiwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA5NywgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAzNi4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDksIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNzYsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTMyLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDM3LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMTEsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNzcsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogOTEsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogOTQuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAzLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDc4LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEwOSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA1OC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDMsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNzgsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogOTUsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTAwLjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMTEsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNzksIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTQ0LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDg0LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMTEsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNzksIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTMyLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDQxLjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMTEsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogNzksIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogOTQsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTEuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxMSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA3OSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMjIsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMjQuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDgyLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEwMiwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA1Ni4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogODIsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTI1LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDU4LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA4MiwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMDEsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNTMuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDgzLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDg1LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEzMC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogODMsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTQ4LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEyNy4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogODMsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTExLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEyOS4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogODMsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTI3LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEyOC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogODMsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTI5LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEyOS4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogODMsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTA0LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEyNy4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogODMsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTQwLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEyNy4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogODMsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTUzLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEyNy4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDIsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogODQsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTI0LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDU4LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMiwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA4NCwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA4OSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMDMuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAyLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDg0LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDkxLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEwMi4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDIsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogODQsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogOTUsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTk5LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMiwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA4NCwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxNDMsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTAxLjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMiwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA4NCwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMTQsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTYuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDg1LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDE0OCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMjguMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDg1LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDExMSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMzEuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDg1LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEyNywgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMjcuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDg1LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEyOSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMzAuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDg1LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEwNCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMjcuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDg1LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDE0MCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMjcuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAzLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDg2LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDExMCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMTcuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAzLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDg2LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDk4LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDExNy4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDIsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogODksIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogOTUsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTA1LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMiwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA4OSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxNDMsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTE1LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA5MSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMDAsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTA2LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA5MSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiA5NSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMDYuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA1LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDkxLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDE1NiwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA4Ni4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogOTIsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTAyLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDMwLjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNiwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA5NCwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMDIsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTAuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAyLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDk1LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDk5LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEwLjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMiwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA5NSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMzgsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTEuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAyLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDk1LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDE1NSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA0Mi4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDIsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogOTUsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTQzLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEwMS4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogOTYsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTEzLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDM5LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiA5NywgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMzIsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMzYuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAzLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDk4LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDExMCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMTcuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAzLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDk5LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEzMSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMS4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDUsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMTAwLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDE1MCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxNjUuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA1LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDEwMCwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMTgsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTMzLjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAxMDAsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTMwLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEzOC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDUsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMTAwLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDE1NiwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMjguMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDEwMSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMDIsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNjIuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDEwMSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMjUsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNTUuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDEwMiwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMjUsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNjkuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDEwMiwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMTMsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNjkuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA5LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDEwMywgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMjAsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTAuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDEwNCwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxNDgsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTI3LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAxMDQsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTExLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEzMC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMTA0LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEyNywgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMzAuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDEwNCwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMjksIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTI3LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAxMDQsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTQwLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEyNy4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMTA0LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDE1MywgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMjcuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDEwNCwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMDcsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTI3LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAxMDUsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTEzLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDQ3LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAxMDcsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTExLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEzNC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMTA3LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDE0MCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMjguMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDEwOCwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMTMsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNzAuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDExMSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMzYsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTI3LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAxMTEsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTQ4LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEyNy4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMTExLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEyNywgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMzAuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDExMSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMjksIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTI4LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAxMTEsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTQwLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEyNy4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMTExLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDE1MywgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMjcuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDExMiwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMTMsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNjkuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDExMywgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxNDIsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNDAuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDExMywgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMTksIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNDAuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA4LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDExNiwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxNTQsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTguMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAyLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDExNywgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxNDMsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNTIuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA1LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDExOCwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxNTAsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTMzLjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAxMTgsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTMwLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEzMS4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDUsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMTE4LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDE1NiwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMjguMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDEyNywgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxNDgsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTI3LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAxMjcsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTQwLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEyNy4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMTI3LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDEyOSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMjcuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDEyOSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxNDgsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTI3LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAxMjksIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTQwLCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEyNy4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDUsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMTMwLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDE1NiwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMjguMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAzLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDEzMSwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxMzUsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTEuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxMCwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAxMzQsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTQ1LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDY1LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMTAsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMTM0LCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDE0MSwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiA4NC4wXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogMTQwLCBcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IDE0OCwgXG4gICAgICAgICAgICBcIndlaWdodFwiOiAxMjcuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAzLCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDE0NywgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxNDksIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogNDQuMFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwic291cmNlXCI6IDE0OCwgXG4gICAgICAgICAgICBcInRhcmdldFwiOiAxNTMsIFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogMTI3LjBcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNSwgXG4gICAgICAgICAgICBcInNvdXJjZVwiOiAxNTAsIFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogMTU2LCBcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IDEyOC4wXG4gICAgICAgIH1cbiAgICBdLCBcbiAgICBcIm5vZGVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAwLCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcInBsYW50XCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwib3JhbmdlX3BlZWxcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMS4wMTI0MjUyMTg1OTE4MDg2XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiZnJ1aXRcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJjaGVycnlcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMS45MTg2NTE5ODc2ODA5Nzk4XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDIsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwibWVhdFwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcInJvYXN0ZWRfcG9ya1wiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAwLjIyMTI0Njc2OTc5NzE2MDkzXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDMsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwidmVnZXRhYmxlXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwibWF0c3V0YWtlXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuMDk5MTE4NTUyODY5MTI4MTJcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMSwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJmcnVpdFwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIm9yYW5nZV9qdWljZVwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAzLjAwODk1NjA2OTI0MTM4OVxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA0LCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcImNlcmVhbC9jcm9wXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwicnllX2JyZWFkXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuMTYxMDY3NjQ4NDEyMzMzMThcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNSwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJhbGNvaG9saWMgYmV2ZXJhZ2VcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJ3aGl0ZV93aW5lXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDMuODMzNzY0MDI3MDQ1MjA0N1xuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA2LCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcImhlcmJcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJmZW5uZWxcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMS42MDUzNjY1NjE2NDgyXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiZnJ1aXRcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJwaW5lYXBwbGVcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMi44NjAyNzgyMzk5Mzc2OTdcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMiwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJtZWF0XCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiY2hpY2tlblwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiA5LjM3MDI0MzE5NDQ0OTM2MlxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAzLCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcInZlZ2V0YWJsZVwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcInBvcmNpbmlcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMC4xODc2MTcyNjA3ODc5OTI0OFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcImRhaXJ5XCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwibWlsa1wiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAyMi44MjM4MTY3NzIyNzUxMjNcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMiwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJtZWF0XCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwicmF3X2JlZWZcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMC4wMDM1Mzk5NDgzMTY3NTQ1NzVcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMSwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJmcnVpdFwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImdyYXBlXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuNjEwNjQxMDg0NjQwMTY0M1xuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcImRhaXJ5XCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiY2FtZW1iZXJ0X2NoZWVzZVwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAwLjAyMTIzOTY4OTkwMDUyNzQ1NFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA4LCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcIm51dC9zZWVkL3B1bHNlXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwicGVhbnV0XCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuODAxNzk4MjkzNzQ0OTExM1xuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA5LCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcInNwaWNlXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiY2F5ZW5uZVwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAxNC4wNzEyOTQ1NTkwOTk0MzdcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNSwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJhbGNvaG9saWMgYmV2ZXJhZ2VcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJjb2duYWNcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMC4xMTY4MTgyOTQ0NTI5MDFcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMSwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJmcnVpdFwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIm1lbG9uXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuMjc3ODg1OTQyODY1MjM0MTZcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMywgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJ2ZWdldGFibGVcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJtdW5nX2JlYW5cIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMC4wMzM2Mjk1MDkwMDkxNjg0NjZcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNCwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJjZXJlYWwvY3JvcFwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcInJpY2VcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogNi4wMDkwNjIyNjc2OTA4OTJcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMTAsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiZmlzaC9zZWFmb29kXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwibWFja2VyZWxcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMC4wNzc4Nzg4NjI5Njg2MDA2NVxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA5LCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcInNwaWNlXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwidGhhaV9wZXBwZXJcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMC4xNTM5ODc3NTE3Nzg4MjQwNFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxMSwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJwbGFudCBkZXJpdmF0aXZlXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiY29mZmVlXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDEuMjY3MzAxNDk3Mzk4MTM4XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiZnJ1aXRcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJjaXRydXNcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMC4yODg1MDU3ODc4MTU0OTc4NVxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAzLCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcInZlZ2V0YWJsZVwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImxpbWFfYmVhblwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAwLjI2MzcyNjE0OTU5ODIxNTlcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogOSwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJzcGljZVwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImJsYWNrX3BlcHBlclwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAxNy4yNjA3ODc5OTI0OTUzMVxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAzLCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcInZlZ2V0YWJsZVwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImJlYW5cIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMy4zNjgyNjA4MjMzOTE5Nzg0XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDExLCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcInBsYW50IGRlcml2YXRpdmVcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJwZWFudXRfYnV0dGVyXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDEuNzYxMTI0Mjg3NTg1NDAxNFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAzLCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcInZlZ2V0YWJsZVwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImtpZG5leV9iZWFuXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuNzgyMzI4NTc4MDAyNzYxMVxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA1LCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcImFsY29ob2xpYyBiZXZlcmFnZVwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImFwcGxlX2JyYW5keVwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAwLjA2NTQ4OTA0Mzg1OTk1OTY0XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDQsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiY2VyZWFsL2Nyb3BcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJicmVhZFwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiA4LjA1ODY5MjM0MzA5MTc5XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiZnJ1aXRcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJqdW5pcGVyX2JlcnJ5XCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuMDU4NDA5MTQ3MjI2NDUwNVxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxMCwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJmaXNoL3NlYWZvb2RcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJjbGFtXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuODE1OTU4MDg3MDExOTI5NlxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAzLCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcInZlZ2V0YWJsZVwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIm9uaW9uXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDMxLjkxNDQwNDA0OTcwMDg3NFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA1LCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcImFsY29ob2xpYyBiZXZlcmFnZVwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImNpZGVyXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDEuOTgyMzcxMDU3MzgyNTYyNFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAwLCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcInBsYW50XCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiY2l0cnVzX3BlZWxcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMC4wMDcwNzk4OTY2MzM1MDkxNVxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxMCwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJmaXNoL3NlYWZvb2RcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJlZWxcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMC4wMzUzOTk0ODMxNjc1NDU3NlxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA5LCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcInNwaWNlXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwibnV0bWVnXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDQuNDQ2MTc1MDg1ODQzNzQ2NVxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA2LCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcImhlcmJcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJyb3NlbWFyeVwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAzLjM0NTI1MTE1OTMzMzA3MzZcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogOSwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJzcGljZVwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbmlsbGFcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMTUuOTc0MDE2Nzc5MzU1MDIyXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDIsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwibWVhdFwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcInBvcmtcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMy40NzYyMjkyNDcwNTI5OTI3XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDMsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwidmVnZXRhYmxlXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwicmVkX2JlYW5cIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMC4wNTg0MDkxNDcyMjY0NTA1XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDExLCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcInBsYW50IGRlcml2YXRpdmVcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJ0ZWFcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMC4xNzg3NjczODk5OTYxMDYwNlxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxMCwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJmaXNoL3NlYWZvb2RcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJmaXNoXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDMuMzI1NzgxNDQzNTkwOTIzNlxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAyLCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcIm1lYXRcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJiYWNvblwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAzLjgxNjA2NDI4NTQ2MTQzMjZcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMTIsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiZmxvd2VyXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwibGF2ZW5kZXJcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMC4xMDk3MzgzOTc4MTkzOTE4M1xuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA2LCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcImhlcmJcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJwZXBwZXJtaW50XCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuMjUxMzM2MzMwNDg5NTc0OVxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA4LCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcIm51dC9zZWVkL3B1bHNlXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiYmxhY2tfc2VzYW1lX3NlZWRcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMC4wNDYwMTkzMjgxMTc4MDk0OFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA2LCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcImhlcmJcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJsZW1vbmdyYXNzXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuMjQyNDg2NDU5Njk3Njg4NDJcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMSwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJmcnVpdFwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImd1YXZhXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuMDIzMDA5NjY0MDU4OTA0NzRcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogOCwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJudXQvc2VlZC9wdWxzZVwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcInJvYXN0ZWRfcGVhbnV0XCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuMjkyMDQ1NzM2MTMyMjUyNVxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxMCwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJmaXNoL3NlYWZvb2RcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJoYWRkb2NrXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuMDU0ODY5MTk4OTA5Njk1OTJcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMSwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJmcnVpdFwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIm1hbmRhcmluXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuNDkyMDUyODE2MDI4ODg2XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiZnJ1aXRcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJxdWluY2VcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMC4wNDk1NTkyNzY0MzQ1NjQwNlxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcImZydWl0XCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiYmFydGxldHRfcGVhclwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAwLjA0MDcwOTQwNTY0MjY3NzYyXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDAsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwicGxhbnRcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJsZW1vbl9wZWVsXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDEuMjY1NTMxNTIzMjM5NzYwNlxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA5LCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcInNwaWNlXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwicGVwcGVyXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDE2LjAzNTk2NTg3NDg5ODIyNFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA1LCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcImFsY29ob2xpYyBiZXZlcmFnZVwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcInJ1bVwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAxLjA2NTUyNDQ0MzM0MzEyN1xuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcImZydWl0XCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwicGVhclwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAwLjgyODM0NzkwNjEyMDU3MDdcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNSwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJhbGNvaG9saWMgYmV2ZXJhZ2VcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJjaGFtcGFnbmVfd2luZVwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAwLjE3NTIyNzQ0MTY3OTM1MTVcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMSwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJmcnVpdFwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcInJhc3BiZXJyeVwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAxLjM4NzY1OTc0MDE2Nzc5MzVcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMTAsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiZmlzaC9zZWFmb29kXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwic21va2VkX3NhbG1vblwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAwLjE3MTY4NzQ5MzM2MjU5NjlcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMSwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJmcnVpdFwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImNvbmNvcmRfZ3JhcGVcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMC4wMjEyMzk2ODk5MDA1Mjc0NTRcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMywgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJ2ZWdldGFibGVcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJibGFja19iZWFuXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuODM4OTY3NzUxMDcwODM0M1xuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcImZydWl0XCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwicGx1bVwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAwLjQ5MDI4Mjg0MTg3MDUwODdcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNSwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJhbGNvaG9saWMgYmV2ZXJhZ2VcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJicmFuZHlcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMC42OTkxMzk3OTI1NTkwMjg3XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiZGFpcnlcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJzd2lzc19jaGVlc2VcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMC45MjM5MjY1MTA2NzI5NDQyXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDksIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwic3BpY2VcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJjaW5uYW1vblwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiA5LjkxNzE2NTIwOTM4Nzk0MlxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcImRhaXJ5XCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiYmx1ZV9jaGVlc2VcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMC42OTkxMzk3OTI1NTkwMjg3XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDQsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiY2VyZWFsL2Nyb3BcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJwb3Bjb3JuXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuMTcxNjg3NDkzMzYyNTk2OVxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcImRhaXJ5XCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiY2hlZGRhcl9jaGVlc2VcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogNS4zNjEyNTE3MjU3MjQ4MDRcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJkYWlyeVwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImNoZWVzZVwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiA1LjgwOTA1NTE4Nzc5NDI1OFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA2LCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcImhlcmJcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJtYXJqb3JhbVwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAwLjkzNDU0NjM1NTYyMzIwOFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcImZydWl0XCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiYXBwbGVcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogNC4yNzk3OTc1MTQ5NTYyODE1XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiZGFpcnlcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJyb3F1ZWZvcnRfY2hlZXNlXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuMDQwNzA5NDA1NjQyNjc3NjJcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogOSwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJzcGljZVwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcInRhYmFzY29fcGVwcGVyXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDEuNzA4MDI1MDYyODM0MDgyNVxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxMSwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJwbGFudCBkZXJpdmF0aXZlXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiY29jb2FcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogOC40OTc2NDU5MzQzNjkzNTdcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMywgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJ2ZWdldGFibGVcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJzb3liZWFuXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDEuODMwMTUzMjc5NzYyMTE1NlxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxMSwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJwbGFudCBkZXJpdmF0aXZlXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiYmxhY2tfdGVhXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuMDY3MjU5MDE4MDE4MzM2OTNcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNCwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJjZXJlYWwvY3JvcFwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIndoaXRlX2JyZWFkXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuNjU0ODkwNDM4NTk5NTk2NVxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxMCwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJmaXNoL3NlYWZvb2RcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJoZXJyaW5nXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuMDE3Njk5NzQxNTgzNzcyODhcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMSwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJmcnVpdFwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImxpbWVcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMS45MTY4ODIwMTM1MjI2MDIzXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiZGFpcnlcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJwcm92b2xvbmVfY2hlZXNlXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuMjk1NTg1Njg0NDQ5MDA3MDdcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMiwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJtZWF0XCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiYmVlZlwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiA4LjUzNDgxNTM5MTY5NTI4XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiZGFpcnlcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJyb21hbm9fY2hlZXNlXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuNDg2NzQyODkzNTUzNzU0MTZcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMywgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJ2ZWdldGFibGVcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJzaGlpdGFrZVwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAwLjkwNDQ1Njc5NDkzMDc5MzlcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogOSwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJzcGljZVwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImFuaXNlXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuMzk0NzA0MjM3MzE4MTM1MlxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxMCwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJmaXNoL3NlYWZvb2RcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJjYXZpYXJcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMC4wNDYwMTkzMjgxMTc4MDk0OFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAyLCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcIm1lYXRcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJjdXJlZF9wb3JrXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuNTU1NzcxODg1NzMwNDY4M1xuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA3LCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcImRhaXJ5XCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiYnV0dGVybWlsa1wiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAyLjg5MDM2NzgwMDYzMDExMDZcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNSwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJhbGNvaG9saWMgYmV2ZXJhZ2VcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJiZWVyXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuNTM2MzAyMTY5OTg4MzE4MVxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcImZydWl0XCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiZ3JhcGVmcnVpdFwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAwLjIwNzA4Njk3NjUzMDE0MjY5XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDQsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiY2VyZWFsL2Nyb3BcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJicm93bl9yaWNlXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuNTk2NDgxMjkxMzczMTQ2XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDYsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiaGVyYlwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImJhc2lsXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDYuNjg4NzMyMzQ0NTA3NzdcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMiwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJtZWF0XCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwicm9hc3RlZF9iZWVmXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuMzkyOTM0MjYzMTU5NzU3OVxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcImZydWl0XCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwia2l3aVwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAwLjE4NTg0NzI4NjYyOTYxNTIyXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDMsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwidmVnZXRhYmxlXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiZ3JlZW5fYmVsbF9wZXBwZXJcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogNC41NjI5OTMzODAyOTY2NDdcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMywgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJ2ZWdldGFibGVcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJtdXNocm9vbVwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiA1Ljg3MTAwNDI4MzMzNzQ2M1xuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAzLCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcInZlZ2V0YWJsZVwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcInNoYWxsb3RcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMi4xMDA5NTkzMjU5OTM4NDA0XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDUsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiYWxjb2hvbGljIGJldmVyYWdlXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwicmVkX3dpbmVcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMi40NjU1NzQwMDI2MTk1NjE2XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiZnJ1aXRcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJ0YW5nZXJpbmVcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMC4wNzc4Nzg4NjI5Njg2MDA2NVxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcImZydWl0XCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwib3JhbmdlXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDMuMDI0ODg1ODM2NjY2Nzg0NlxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA5LCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcInNwaWNlXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiZ2luZ2VyXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDYuNzU0MjIxMzg4MzY3NzNcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJkYWlyeVwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImNyZWFtX2NoZWVzZVwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiA1LjAyNDk1NjYzNTYzMzEyXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiZnJ1aXRcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJvbGl2ZVwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAzLjE4MDY0MzU2MjYwMzk4NlxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxMSwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJwbGFudCBkZXJpdmF0aXZlXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwibGltZV9wZWVsX29pbFwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAwLjE3Njk5NzQxNTgzNzcyODc3XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiZGFpcnlcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJncnV5ZXJlX2NoZWVzZVwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAwLjA3Nzg3ODg2Mjk2ODYwMDY1XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiZnJ1aXRcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJhcHJpY290XCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDEuMDk3MzgzOTc4MTkzOTE4NVxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA0LCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcImNlcmVhbC9jcm9wXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwibWFsdFwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAwLjA2NTQ4OTA0Mzg1OTk1OTY0XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDMsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwidmVnZXRhYmxlXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiZW5va2lkYWtlXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuMTg3NjE3MjYwNzg3OTkyNDhcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJkYWlyeVwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcInBhcm1lc2FuX2NoZWVzZVwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiA1LjYwNTUwODE1OTU4MDg3XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiZnJ1aXRcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJiYW5hbmFcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMS43NDE2NTQ1NzE4NDMyNTFcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMSwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJmcnVpdFwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcInN0cmF3YmVycnlcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMS45MDgwMzIxNDI3MzA3MTYzXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDIsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwibWVhdFwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcInBvcmtfbGl2ZXJcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMC4wMDg4NDk4NzA3OTE4ODY0NFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA1LCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcImFsY29ob2xpYyBiZXZlcmFnZVwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIndoaXNrZXlcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMC4yNjE5NTYxNzU0Mzk4Mzg1N1xuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiA4LCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcIm51dC9zZWVkL3B1bHNlXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiY29jb251dFwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAzLjAyNjY1NTgxMDgyNTE2MlxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAyLCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcIm1lYXRcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJtdXR0b25cIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMC4wMDUzMDk5MjI0NzUxMzE4NjM0XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDUsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiYWxjb2hvbGljIGJldmVyYWdlXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwicG9ydF93aW5lXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuMDg2NzI4NzMzNzYwNDg3MDlcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMTMsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiYW5pbWFsIHByb2R1Y3RcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJob25leVwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiA0LjM5NDg0NTgzNTI1MDgwNTVcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogOCwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJudXQvc2VlZC9wdWxzZVwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcInNlZWRcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMi4zMjM5NzYwNjk5NDkzNzg4XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDMsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwidmVnZXRhYmxlXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwicmVkX2tpZG5leV9iZWFuXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuMTA0NDI4NDc1MzQ0MjU5OTdcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNiwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJoZXJiXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwibWludFwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAxLjY0OTYxNTkxNTYwNzYzMjJcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJkYWlyeVwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImNyZWFtXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDE3Ljk2ODc3NzY1NTg0NjIyNVxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAyLCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcIm1lYXRcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJsYW1iXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuODM1NDI3ODAyNzU0MDc5OFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcImZydWl0XCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwibGVtb25cIiwgXG4gICAgICAgICAgICBcInNpemVcIjogNS4zOTEzNDEyODY0MTcyMTg1XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDMsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwidmVnZXRhYmxlXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwicmh1YmFyYlwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAwLjI5OTEyNTYzMjc2NTc2MTZcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJkYWlyeVwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImNvdHRhZ2VfY2hlZXNlXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuNjE1OTUxMDA3MTE1Mjk2MlxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxMCwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJmaXNoL3NlYWZvb2RcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJjYXRmaXNoXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuMTIwMzU4MjQyNzY5NjU1NTdcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJkYWlyeVwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImdvYXRfY2hlZXNlXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuNDU4NDIzMzA3MDE5NzE3NTZcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNSwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJhbGNvaG9saWMgYmV2ZXJhZ2VcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJzaGVycnlcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMS4xMTUwODM3MTk3Nzc2OTEzXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDMsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwidmVnZXRhYmxlXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwibGVla1wiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAwLjcyNzQ1OTM3OTA5MzA2NTJcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMywgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJ2ZWdldGFibGVcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJiZWxsX3BlcHBlclwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAxMC4zNDkwMzg5MDQwMzIwMDFcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMSwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJmcnVpdFwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImNyYW5iZXJyeVwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAxLjYyMTI5NjMyOTA3MzU5NTZcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMTAsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiZmlzaC9zZWFmb29kXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwic2FsbW9uXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuNzY4MTY4Nzg0NzM1NzQyOVxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAzLCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcInZlZ2V0YWJsZVwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImNoaXZlXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDIuMzI3NTE2MDE4MjY2MTMzXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiZGFpcnlcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJzaGVlcF9jaGVlc2VcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMC4wMDM1Mzk5NDgzMTY3NTQ1NzVcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMTIsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiZmxvd2VyXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiZmxvd2VyXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuMDUzMDk5MjI0NzUxMzE4NjI2XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDMsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwidmVnZXRhYmxlXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiZ2FybGljXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDI5LjkwMDE3MzQ1NzQ2NzUyXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDExLCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcInBsYW50IGRlcml2YXRpdmVcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJncmVlbl90ZWFcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMC4wNTY2MzkxNzMwNjgwNzMyXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiZGFpcnlcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJtb3p6YXJlbGxhX2NoZWVzZVwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAyLjI4MzI2NjY2NDMwNjcwMVxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxMCwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJmaXNoL3NlYWZvb2RcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJ0dW5hXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuNzg0MDk4NTUyMTYxMTM4NFxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxLCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcImZydWl0XCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwibmVjdGFyaW5lXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuMDg4NDk4NzA3OTE4ODY0MzhcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogMiwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJtZWF0XCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwicG9ya19zYXVzYWdlXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDIuNDEwNzA0ODAzNzA5ODY2XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDMsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwidmVnZXRhYmxlXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwidG9tYXRvXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDE3LjUzODY3MzkzNTM2MDU0MlxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgXCJncm91cF9pZFwiOiAxMCwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJmaXNoL3NlYWZvb2RcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJjb2RcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMC4zMDc5NzU1MDM1NTc2NDgxXG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDYsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiaGVyYlwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcInRhcnJhZ29uXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDAuODQyNTA3Njk5Mzg3NTg5XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDMsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwidmVnZXRhYmxlXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwicG90YXRvXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDYuMjc0NTU4MzkxNDQ3NDg1XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiZGFpcnlcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJmZXRhX2NoZWVzZVwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAxLjA5OTE1Mzk1MjM1MjI5NTVcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNywgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJkYWlyeVwiLCBcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImVtbWVudGFsX2NoZWVzZVwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAwLjAwMTc2OTk3NDE1ODM3NzI4NzVcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZ3JvdXBfaWRcIjogNSwgXG4gICAgICAgICAgICBcImdyb3VwX25hbWVcIjogXCJhbGNvaG9saWMgYmV2ZXJhZ2VcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJjYWJlcm5ldF9zYXV2aWdub25fd2luZVwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAwLjAzMDA4OTU2MDY5MjQxMzg5XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDQsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiY2VyZWFsL2Nyb3BcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJ3aGVhdF9icmVhZFwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAwLjE0NjkwNzg1NTE0NTMxNDg4XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiZnJ1aXRcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJtdXNjYXRfZ3JhcGVcIiwgXG4gICAgICAgICAgICBcInNpemVcIjogMC4wMDE3Njk5NzQxNTgzNzcyODc1XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDcsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiZGFpcnlcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJtdW5zdGVyX2NoZWVzZVwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAwLjA0Nzc4OTMwMjI3NjE4Njc3XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDExLCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcInBsYW50IGRlcml2YXRpdmVcIiwgXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJjb2NvbnV0X29pbFwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAwLjAzMDA4OTU2MDY5MjQxMzg5XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDEzLCBcbiAgICAgICAgICAgIFwiZ3JvdXBfbmFtZVwiOiBcImFuaW1hbCBwcm9kdWN0XCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiZWdnXCIsIFxuICAgICAgICAgICAgXCJzaXplXCI6IDM3LjA4MjcyODU5MjE2MjU1XG4gICAgICAgIH0sIFxuICAgICAgICB7XG4gICAgICAgICAgICBcImdyb3VwX2lkXCI6IDUsIFxuICAgICAgICAgICAgXCJncm91cF9uYW1lXCI6IFwiYWxjb2hvbGljIGJldmVyYWdlXCIsIFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwid2luZVwiLCBcbiAgICAgICAgICAgIFwic2l6ZVwiOiAxLjU1MjI2NzMzNjg5Njg4MTNcbiAgICAgICAgfVxuICAgIF1cbn1cbmV4cG9ydCBkZWZhdWx0IGZsYXZvckRhdGE7IiwiY29uc3QgdW1hbWlEYXRhID0ge1wibGlua3NcIjogW3tcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogODYuMCwgXCJ0YXJnZXRcIjogODQuMCwgXCJ3ZWlnaHRcIjogMTA1LjM4MTI5OTA2Nzg1NjQzfSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiA3Mi4wLCBcInRhcmdldFwiOiA4NC4wLCBcIndlaWdodFwiOiA5MS42OTExNTE0NTkzOTYxfSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiA3Mi4wLCBcInRhcmdldFwiOiA4NC4wLCBcIndlaWdodFwiOiA0NS45MDg2MjcyODg2ODU0fSwge1wiZ3JvdXBfaWRcIjogMTEuMCwgXCJzb3VyY2VcIjogMTM5LjAsIFwidGFyZ2V0XCI6IDg0LjAsIFwid2VpZ2h0XCI6IDY4LjUyODU1MDU0OTI0NzQzfSwge1wiZ3JvdXBfaWRcIjogMTAuMCwgXCJzb3VyY2VcIjogMzMuMCwgXCJ0YXJnZXRcIjogODQuMCwgXCJ3ZWlnaHRcIjogNTUuMzkwNzkzNzExMDM4MzF9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDEzOC4wLCBcInRhcmdldFwiOiA4NC4wLCBcIndlaWdodFwiOiA1NS4wODE0MjczODA0NjgyM30sIHtcImdyb3VwX2lkXCI6IDIuMCwgXCJzb3VyY2VcIjogNDUuMCwgXCJ0YXJnZXRcIjogODQuMCwgXCJ3ZWlnaHRcIjogNTQuMDUwMjA2Mjc4NTY4fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxMjkuMCwgXCJ0YXJnZXRcIjogODQuMCwgXCJ3ZWlnaHRcIjogNDUuOTA4NjI3Mjg4Njg1NH0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogMTI3LjAsIFwidGFyZ2V0XCI6IDg0LjAsIFwid2VpZ2h0XCI6IDQ1LjkwODYyNzI4ODY4NTR9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDY3LjAsIFwidGFyZ2V0XCI6IDg0LjAsIFwid2VpZ2h0XCI6IDQ1LjkwODYyNzI4ODY4NTR9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDc1LjAsIFwidGFyZ2V0XCI6IDg0LjAsIFwid2VpZ2h0XCI6IDQ1LjkwODYyNzI4ODY4NTR9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDgzLjAsIFwidGFyZ2V0XCI6IDg0LjAsIFwid2VpZ2h0XCI6IDQ1LjkwODYyNzI4ODY4NTR9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDg1LjAsIFwidGFyZ2V0XCI6IDg0LjAsIFwid2VpZ2h0XCI6IDQ1LjkwODYyNzI4ODY4NTR9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDEwNC4wLCBcInRhcmdldFwiOiA4NC4wLCBcIndlaWdodFwiOiA0NS45MDg2MjcyODg2ODU0fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxNC4wLCBcInRhcmdldFwiOiA4NC4wLCBcIndlaWdodFwiOiA0NS45MDg2MjcyODg2ODU0fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxMDcuMCwgXCJ0YXJnZXRcIjogODQuMCwgXCJ3ZWlnaHRcIjogNDUuOTA4NjI3Mjg4Njg1NH0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogMTExLjAsIFwidGFyZ2V0XCI6IDg0LjAsIFwid2VpZ2h0XCI6IDQ1LjkwODYyNzI4ODY4NTR9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDY5LjAsIFwidGFyZ2V0XCI6IDg0LjAsIFwid2VpZ2h0XCI6IDQ1LjkwODYyNzI4ODY4NTR9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDEzNi4wLCBcInRhcmdldFwiOiA4NC4wLCBcIndlaWdodFwiOiA0NS45MDg2MjcyODg2ODU0fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxNDkuMCwgXCJ0YXJnZXRcIjogODQuMCwgXCJ3ZWlnaHRcIjogNDUuOTA4NjI3Mjg4Njg1NH0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogMTUzLjAsIFwidGFyZ2V0XCI6IDg0LjAsIFwid2VpZ2h0XCI6IDQ1LjkwODYyNzI4ODY4NTR9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDk4LjAsIFwidGFyZ2V0XCI6IDg0LjAsIFwid2VpZ2h0XCI6IDQzLjI3MTg4MzMyMTUwNjYzNX0sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogMTQ0LjAsIFwidGFyZ2V0XCI6IDg0LjAsIFwid2VpZ2h0XCI6IDQxLjk5NTY0NDA4NTc5NDg5fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAxMC4wLCBcInRhcmdldFwiOiA4NC4wLCBcIndlaWdodFwiOiAzMC40MDIyNDM5Njk3OTE1OX0sIHtcImdyb3VwX2lkXCI6IDEuMCwgXCJzb3VyY2VcIjogMTguMCwgXCJ0YXJnZXRcIjogODQuMCwgXCJ3ZWlnaHRcIjogMjYuMDMxOTI4OTM5OTM4MzZ9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDcxLjAsIFwidGFyZ2V0XCI6IDg0LjAsIFwid2VpZ2h0XCI6IDI1LjY5Mjk1MTgzMjAxMzcyM30sIHtcImdyb3VwX2lkXCI6IDEwLjAsIFwic291cmNlXCI6IDg4LjAsIFwidGFyZ2V0XCI6IDg0LjAsIFwid2VpZ2h0XCI6IDIyLjk0ODU3Nzg0NTI1NjYzfSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAxMTAuMCwgXCJ0YXJnZXRcIjogODQuMCwgXCJ3ZWlnaHRcIjogMjEuNjA3OTkwNDEyNzg2MzE0fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAyNy4wLCBcInRhcmdldFwiOiA4NC4wLCBcIndlaWdodFwiOiAxOS44OTIwMzg0OTkyMjQzMDZ9LCB7XCJncm91cF9pZFwiOiAyLjAsIFwic291cmNlXCI6IDkuMCwgXCJ0YXJnZXRcIjogODQuMCwgXCJ3ZWlnaHRcIjogMTUuOTEzNTg3NDg4MDkzMTY3fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiA3OC4wLCBcInRhcmdldFwiOiA4NC4wLCBcIndlaWdodFwiOiAxNC4yNDgxNjU0MDg1MjQyNjl9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDE0Ny4wLCBcInRhcmdldFwiOiA4NC4wLCBcIndlaWdodFwiOiAxMC44OTQwMTU2NTI0ODM1Mzl9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDM0LjAsIFwidGFyZ2V0XCI6IDg0LjAsIFwid2VpZ2h0XCI6IDguNzc0MTAwMDU5MjcwNDc3fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAxMzUuMCwgXCJ0YXJnZXRcIjogODQuMCwgXCJ3ZWlnaHRcIjogNy42OTI2OTI4NjM3NDQ0MjF9LCB7XCJncm91cF9pZFwiOiAxMS4wLCBcInNvdXJjZVwiOiAyMy4wLCBcInRhcmdldFwiOiA4NC4wLCBcIndlaWdodFwiOiA3LjU4NTQ0NTg2OTE0Njc5Nn0sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogODYuMCwgXCJ0YXJnZXRcIjogOS4wLCBcIndlaWdodFwiOiAxMTIuMjMwNDc3OTM5NjIyOTd9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDg2LjAsIFwidGFyZ2V0XCI6IDkuMCwgXCJ3ZWlnaHRcIjogMjYuMTMyODMzNDk3NjQwOTAyfSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiA3Mi4wLCBcInRhcmdldFwiOiA5LjAsIFwid2VpZ2h0XCI6IDk3LjY1MDU0OTQwNjI2NzY2fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiA3Mi4wLCBcInRhcmdldFwiOiA5LjAsIFwid2VpZ2h0XCI6IDIyLjczNzkwMTQ2MzQ1MDkyfSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiA3Mi4wLCBcInRhcmdldFwiOiA5LjAsIFwid2VpZ2h0XCI6IDQ4Ljg5MjQyNDI1MTEzMzE2NH0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogNzIuMCwgXCJ0YXJnZXRcIjogOS4wLCBcIndlaWdodFwiOiAxMS4zODQ1ODY0ODQwNTg3M30sIHtcImdyb3VwX2lkXCI6IDExLjAsIFwic291cmNlXCI6IDEzOS4wLCBcInRhcmdldFwiOiA5LjAsIFwid2VpZ2h0XCI6IDcyLjk4MjUxMjUzOTUyODY0fSwge1wiZ3JvdXBfaWRcIjogMTEuMCwgXCJzb3VyY2VcIjogMTM5LjAsIFwidGFyZ2V0XCI6IDkuMCwgXCJ3ZWlnaHRcIjogMTYuOTkzOTU2Mzk2MjM4NzgzfSwge1wiZ3JvdXBfaWRcIjogMTAuMCwgXCJzb3VyY2VcIjogMzMuMCwgXCJ0YXJnZXRcIjogOS4wLCBcIndlaWdodFwiOiA1OC45OTA4NzcwMDIyMDg3M30sIHtcImdyb3VwX2lkXCI6IDEwLjAsIFwic291cmNlXCI6IDMzLjAsIFwidGFyZ2V0XCI6IDkuMCwgXCJ3ZWlnaHRcIjogMTMuNzM2MDA4MjExNjcyMDAzfSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAxMzguMCwgXCJ0YXJnZXRcIjogOS4wLCBcIndlaWdodFwiOiA1OC42NjE0MDM2Mzc5MDc2MjV9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDEzOC4wLCBcInRhcmdldFwiOiA5LjAsIFwid2VpZ2h0XCI6IDEzLjY1OTI5MDQzNjUyNTIxNn0sIHtcImdyb3VwX2lkXCI6IDIuMCwgXCJzb3VyY2VcIjogNDUuMCwgXCJ0YXJnZXRcIjogOS4wLCBcIndlaWdodFwiOiA1Ny41NjMxNTkwOTAyMzczMX0sIHtcImdyb3VwX2lkXCI6IDIuMCwgXCJzb3VyY2VcIjogNDUuMCwgXCJ0YXJnZXRcIjogOS4wLCBcIndlaWdodFwiOiAxMy40MDM1NjQ1MTkzNjkyN30sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogMTI5LjAsIFwidGFyZ2V0XCI6IDkuMCwgXCJ3ZWlnaHRcIjogNDguODkyNDI0MjUxMTMzMTY0fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxMjkuMCwgXCJ0YXJnZXRcIjogOS4wLCBcIndlaWdodFwiOiAxMS4zODQ1ODY0ODQwNTg3M30sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogMTI3LjAsIFwidGFyZ2V0XCI6IDkuMCwgXCJ3ZWlnaHRcIjogNDguODkyNDI0MjUxMTMzMTY0fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxMjcuMCwgXCJ0YXJnZXRcIjogOS4wLCBcIndlaWdodFwiOiAxMS4zODQ1ODY0ODQwNTg3M30sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogNjcuMCwgXCJ0YXJnZXRcIjogOS4wLCBcIndlaWdodFwiOiA0OC44OTI0MjQyNTExMzMxNjR9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDY3LjAsIFwidGFyZ2V0XCI6IDkuMCwgXCJ3ZWlnaHRcIjogMTEuMzg0NTg2NDg0MDU4NzN9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDc1LjAsIFwidGFyZ2V0XCI6IDkuMCwgXCJ3ZWlnaHRcIjogNDguODkyNDI0MjUxMTMzMTY0fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiA3NS4wLCBcInRhcmdldFwiOiA5LjAsIFwid2VpZ2h0XCI6IDExLjM4NDU4NjQ4NDA1ODczfSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiA4My4wLCBcInRhcmdldFwiOiA5LjAsIFwid2VpZ2h0XCI6IDQ4Ljg5MjQyNDI1MTEzMzE2NH0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogODMuMCwgXCJ0YXJnZXRcIjogOS4wLCBcIndlaWdodFwiOiAxMS4zODQ1ODY0ODQwNTg3M30sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogODUuMCwgXCJ0YXJnZXRcIjogOS4wLCBcIndlaWdodFwiOiA0OC44OTI0MjQyNTExMzMxNjR9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDg1LjAsIFwidGFyZ2V0XCI6IDkuMCwgXCJ3ZWlnaHRcIjogMTEuMzg0NTg2NDg0MDU4NzN9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDEwNC4wLCBcInRhcmdldFwiOiA5LjAsIFwid2VpZ2h0XCI6IDQ4Ljg5MjQyNDI1MTEzMzE2NH0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogMTA0LjAsIFwidGFyZ2V0XCI6IDkuMCwgXCJ3ZWlnaHRcIjogMTEuMzg0NTg2NDg0MDU4NzN9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDE0LjAsIFwidGFyZ2V0XCI6IDkuMCwgXCJ3ZWlnaHRcIjogNDguODkyNDI0MjUxMTMzMTY0fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxNC4wLCBcInRhcmdldFwiOiA5LjAsIFwid2VpZ2h0XCI6IDExLjM4NDU4NjQ4NDA1ODczfSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxMDcuMCwgXCJ0YXJnZXRcIjogOS4wLCBcIndlaWdodFwiOiA0OC44OTI0MjQyNTExMzMxNjR9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDEwNy4wLCBcInRhcmdldFwiOiA5LjAsIFwid2VpZ2h0XCI6IDExLjM4NDU4NjQ4NDA1ODczfSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxMTEuMCwgXCJ0YXJnZXRcIjogOS4wLCBcIndlaWdodFwiOiA0OC44OTI0MjQyNTExMzMxNjR9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDExMS4wLCBcInRhcmdldFwiOiA5LjAsIFwid2VpZ2h0XCI6IDExLjM4NDU4NjQ4NDA1ODczfSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiA2OS4wLCBcInRhcmdldFwiOiA5LjAsIFwid2VpZ2h0XCI6IDQ4Ljg5MjQyNDI1MTEzMzE2NH0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogNjkuMCwgXCJ0YXJnZXRcIjogOS4wLCBcIndlaWdodFwiOiAxMS4zODQ1ODY0ODQwNTg3M30sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogMTM2LjAsIFwidGFyZ2V0XCI6IDkuMCwgXCJ3ZWlnaHRcIjogNDguODkyNDI0MjUxMTMzMTY0fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxMzYuMCwgXCJ0YXJnZXRcIjogOS4wLCBcIndlaWdodFwiOiAxMS4zODQ1ODY0ODQwNTg3M30sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogMTQ5LjAsIFwidGFyZ2V0XCI6IDkuMCwgXCJ3ZWlnaHRcIjogNDguODkyNDI0MjUxMTMzMTY0fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxNDkuMCwgXCJ0YXJnZXRcIjogOS4wLCBcIndlaWdodFwiOiAxMS4zODQ1ODY0ODQwNTg3M30sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogMTUzLjAsIFwidGFyZ2V0XCI6IDkuMCwgXCJ3ZWlnaHRcIjogNDguODkyNDI0MjUxMTMzMTY0fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxNTMuMCwgXCJ0YXJnZXRcIjogOS4wLCBcIndlaWdodFwiOiAxMS4zODQ1ODY0ODQwNTg3M30sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogOTguMCwgXCJ0YXJnZXRcIjogOS4wLCBcIndlaWdodFwiOiA0Ni4wODQzMDcwNzc5ODcwOX0sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogOTguMCwgXCJ0YXJnZXRcIjogOS4wLCBcIndlaWdodFwiOiAxMC43MzA3MTcyMzMyNTUyOTh9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDE0NC4wLCBcInRhcmdldFwiOiA5LjAsIFwid2VpZ2h0XCI6IDQ0LjcyNTExOTYyNTc5MDI4NX0sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogMTQ0LjAsIFwidGFyZ2V0XCI6IDkuMCwgXCJ3ZWlnaHRcIjogMTAuNDE0MjMwODM4MTgzMDk0fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAxMC4wLCBcInRhcmdldFwiOiA5LjAsIFwid2VpZ2h0XCI6IDMyLjM3ODIxNTEyMzA2MTQ1fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAxMC4wLCBcInRhcmdldFwiOiA5LjAsIFwid2VpZ2h0XCI6IDcuNTM5MjU3Nzg3MTQ5MDYyNX0sIHtcImdyb3VwX2lkXCI6IDEuMCwgXCJzb3VyY2VcIjogMTguMCwgXCJ0YXJnZXRcIjogOS4wLCBcIndlaWdodFwiOiAyNy43MjM4NTQ3MzAwMzQ2Mjh9LCB7XCJncm91cF9pZFwiOiAxLjAsIFwic291cmNlXCI6IDE4LjAsIFwidGFyZ2V0XCI6IDkuMCwgXCJ3ZWlnaHRcIjogNi40NTU0OTEzNTAyNDIxNTV9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDcxLjAsIFwidGFyZ2V0XCI6IDkuMCwgXCJ3ZWlnaHRcIjogMjcuMzYyODQ2MDU4MDA3NTY2fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiA3MS4wLCBcInRhcmdldFwiOiA5LjAsIFwid2VpZ2h0XCI6IDYuMzcxNDMwNTg4MDQ1NjA1fSwge1wiZ3JvdXBfaWRcIjogMTAuMCwgXCJzb3VyY2VcIjogODguMCwgXCJ0YXJnZXRcIjogOS4wLCBcIndlaWdodFwiOiAyNC40NDAxMDM1MzI1MDAzNn0sIHtcImdyb3VwX2lkXCI6IDEwLjAsIFwic291cmNlXCI6IDg4LjAsIFwidGFyZ2V0XCI6IDkuMCwgXCJ3ZWlnaHRcIjogNS42OTA4NzA4NTc5NDU4Njh9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDExMC4wLCBcInRhcmdldFwiOiA5LjAsIFwid2VpZ2h0XCI6IDIzLjAxMjM4NTYyMDUyODk0fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAxMTAuMCwgXCJ0YXJnZXRcIjogOS4wLCBcIndlaWdodFwiOiA1LjM1ODQyNzE2NTY0MzEzN30sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogMjcuMCwgXCJ0YXJnZXRcIjogOS4wLCBcIndlaWdodFwiOiAyMS4xODQ5MDY2OTMyMDU1Mn0sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogMjcuMCwgXCJ0YXJnZXRcIjogOS4wLCBcIndlaWdodFwiOiA0LjkzMjg5OTIzOTQ5NTYzOX0sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogNzguMCwgXCJ0YXJnZXRcIjogOS4wLCBcIndlaWdodFwiOiAxNS4xNzQyMTQyODM4MDU4NH0sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogNzguMCwgXCJ0YXJnZXRcIjogOS4wLCBcIndlaWdodFwiOiAzLjUzMzMxMTI5NDkwMTEzMzZ9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDE0Ny4wLCBcInRhcmdldFwiOiA5LjAsIFwid2VpZ2h0XCI6IDExLjYwMjA2NDA2ODA1MzM1fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAxNDcuMCwgXCJ0YXJnZXRcIjogOS4wLCBcIndlaWdodFwiOiAyLjcwMTUzNzE3Njc1OTY5Njd9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDM0LjAsIFwidGFyZ2V0XCI6IDkuMCwgXCJ3ZWlnaHRcIjogOS4zNDQzNjYxNDMyNTU4Nzd9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDM0LjAsIFwidGFyZ2V0XCI6IDkuMCwgXCJ3ZWlnaHRcIjogMi4xNzU4MzI4ODQ2NjQ5NzU3fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAxMzUuMCwgXCJ0YXJnZXRcIjogOS4wLCBcIndlaWdodFwiOiA4LjE5MjY3MzY5NDI2NTZ9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDEzNS4wLCBcInRhcmdldFwiOiA5LjAsIFwid2VpZ2h0XCI6IDEuOTA3NjYxNjM5NTQwNzcxM30sIHtcImdyb3VwX2lkXCI6IDExLjAsIFwic291cmNlXCI6IDIzLjAsIFwidGFyZ2V0XCI6IDkuMCwgXCJ3ZWlnaHRcIjogOC4wNzg0NTYyNjEzMDc4ODV9LCB7XCJncm91cF9pZFwiOiAxMS4wLCBcInNvdXJjZVwiOiAyMy4wLCBcInRhcmdldFwiOiA5LjAsIFwid2VpZ2h0XCI6IDEuODgxMDY2MTQ0MTU2NTUyNH0sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogODYuMCwgXCJ0YXJnZXRcIjogMTQ1LjAsIFwid2VpZ2h0XCI6IDI5MS45NjU3Mzg5NDI0MjI4fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiA3Mi4wLCBcInRhcmdldFwiOiAxNDUuMCwgXCJ3ZWlnaHRcIjogMjU0LjAzNjI5NTEyMTgzMzYzfSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiA3Mi4wLCBcInRhcmdldFwiOiAxNDUuMCwgXCJ3ZWlnaHRcIjogMTI3LjE5MjgzNjAwMzQ5Njc3fSwge1wiZ3JvdXBfaWRcIjogMTEuMCwgXCJzb3VyY2VcIjogMTM5LjAsIFwidGFyZ2V0XCI6IDE0NS4wLCBcIndlaWdodFwiOiAxODkuODYyODAzNzExMzE4N30sIHtcImdyb3VwX2lkXCI6IDEwLjAsIFwic291cmNlXCI6IDMzLjAsIFwidGFyZ2V0XCI6IDE0NS4wLCBcIndlaWdodFwiOiAxNTMuNDYzNzk0NDI1NTg0OTV9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDEzOC4wLCBcInRhcmdldFwiOiAxNDUuMCwgXCJ3ZWlnaHRcIjogMTUyLjYwNjY3NDg5NzY2MzQyfSwge1wiZ3JvdXBfaWRcIjogMi4wLCBcInNvdXJjZVwiOiA0NS4wLCBcInRhcmdldFwiOiAxNDUuMCwgXCJ3ZWlnaHRcIjogMTQ5Ljc0OTYwOTgwNDU5MTd9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDEyOS4wLCBcInRhcmdldFwiOiAxNDUuMCwgXCJ3ZWlnaHRcIjogMTI3LjE5MjgzNjAwMzQ5Njc3fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxMjcuMCwgXCJ0YXJnZXRcIjogMTQ1LjAsIFwid2VpZ2h0XCI6IDEyNy4xOTI4MzYwMDM0OTY3N30sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogNjcuMCwgXCJ0YXJnZXRcIjogMTQ1LjAsIFwid2VpZ2h0XCI6IDEyNy4xOTI4MzYwMDM0OTY3N30sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogNzUuMCwgXCJ0YXJnZXRcIjogMTQ1LjAsIFwid2VpZ2h0XCI6IDEyNy4xOTI4MzYwMDM0OTY3N30sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogODMuMCwgXCJ0YXJnZXRcIjogMTQ1LjAsIFwid2VpZ2h0XCI6IDEyNy4xOTI4MzYwMDM0OTY3N30sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogODUuMCwgXCJ0YXJnZXRcIjogMTQ1LjAsIFwid2VpZ2h0XCI6IDEyNy4xOTI4MzYwMDM0OTY3N30sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogMTA0LjAsIFwidGFyZ2V0XCI6IDE0NS4wLCBcIndlaWdodFwiOiAxMjcuMTkyODM2MDAzNDk2Nzd9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDE0LjAsIFwidGFyZ2V0XCI6IDE0NS4wLCBcIndlaWdodFwiOiAxMjcuMTkyODM2MDAzNDk2Nzd9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDEwNy4wLCBcInRhcmdldFwiOiAxNDUuMCwgXCJ3ZWlnaHRcIjogMTI3LjE5MjgzNjAwMzQ5Njc3fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxMTEuMCwgXCJ0YXJnZXRcIjogMTQ1LjAsIFwid2VpZ2h0XCI6IDEyNy4xOTI4MzYwMDM0OTY3N30sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogNjkuMCwgXCJ0YXJnZXRcIjogMTQ1LjAsIFwid2VpZ2h0XCI6IDEyNy4xOTI4MzYwMDM0OTY3N30sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogMTM2LjAsIFwidGFyZ2V0XCI6IDE0NS4wLCBcIndlaWdodFwiOiAxMjcuMTkyODM2MDAzNDk2Nzd9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDE0OS4wLCBcInRhcmdldFwiOiAxNDUuMCwgXCJ3ZWlnaHRcIjogMTI3LjE5MjgzNjAwMzQ5Njc3fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxNTMuMCwgXCJ0YXJnZXRcIjogMTQ1LjAsIFwid2VpZ2h0XCI6IDEyNy4xOTI4MzYwMDM0OTY3N30sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogOTguMCwgXCJ0YXJnZXRcIjogMTQ1LjAsIFwid2VpZ2h0XCI6IDExOS44ODc1NjU0NTE4MDYwNX0sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogMTQ0LjAsIFwidGFyZ2V0XCI6IDE0NS4wLCBcIndlaWdodFwiOiAxMTYuMzUxNjYxNjkyNjIwNDh9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDEwLjAsIFwidGFyZ2V0XCI6IDE0NS4wLCBcIndlaWdodFwiOiA4NC4yMzEzOTMwOTAyNzA5Nn0sIHtcImdyb3VwX2lkXCI6IDEuMCwgXCJzb3VyY2VcIjogMTguMCwgXCJ0YXJnZXRcIjogMTQ1LjAsIFwid2VpZ2h0XCI6IDcyLjEyMzE1MTIyNTgzMzAxfSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiA3MS4wLCBcInRhcmdldFwiOiAxNDUuMCwgXCJ3ZWlnaHRcIjogNzEuMTgzOTkzMTE0NTI0NzF9LCB7XCJncm91cF9pZFwiOiAxMC4wLCBcInNvdXJjZVwiOiA4OC4wLCBcInRhcmdldFwiOiAxNDUuMCwgXCJ3ZWlnaHRcIjogNjMuNTgwNTI2NTk3NTQ4NTU1fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAxMTAuMCwgXCJ0YXJnZXRcIjogMTQ1LjAsIFwid2VpZ2h0XCI6IDU5Ljg2NjM0MTk3NjU1NTMyfSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAyNy4wLCBcInRhcmdldFwiOiAxNDUuMCwgXCJ3ZWlnaHRcIjogNTUuMTEyMTg1NjYxNjgzOTd9LCB7XCJncm91cF9pZFwiOiAyLjAsIFwic291cmNlXCI6IDkuMCwgXCJ0YXJnZXRcIjogMTQ1LjAsIFwid2VpZ2h0XCI6IDQ0LjA4OTYyODUzMjYxMzI3Nn0sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogNzguMCwgXCJ0YXJnZXRcIjogMTQ1LjAsIFwid2VpZ2h0XCI6IDM5LjQ3NTQ2ODQwNzMwMjQzfSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAxNDcuMCwgXCJ0YXJnZXRcIjogMTQ1LjAsIFwid2VpZ2h0XCI6IDMwLjE4MjU3ODQ4NTU3NzM1Nn0sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogMzQuMCwgXCJ0YXJnZXRcIjogMTQ1LjAsIFwid2VpZ2h0XCI6IDI0LjMwOTIxNDUzODI0NjcxN30sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogMTM1LjAsIFwidGFyZ2V0XCI6IDE0NS4wLCBcIndlaWdodFwiOiAyMS4zMTMxMDU2MTA2NDU1fSwge1wiZ3JvdXBfaWRcIjogMTEuMCwgXCJzb3VyY2VcIjogMjMuMCwgXCJ0YXJnZXRcIjogMTQ1LjAsIFwid2VpZ2h0XCI6IDIxLjAxNTk3MDg0MDk2NjA0fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiA4Ni4wLCBcInRhcmdldFwiOiAyMS4wLCBcIndlaWdodFwiOiAyMDYuOTA3ODQ2ODU2MDU0MDV9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDcyLjAsIFwidGFyZ2V0XCI6IDIxLjAsIFwid2VpZ2h0XCI6IDE4MC4wMjgzMjQ2ODQwNTkwMn0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogNzIuMCwgXCJ0YXJnZXRcIjogMjEuMCwgXCJ3ZWlnaHRcIjogOTAuMTM3OTU5MDkxNzk4MDd9LCB7XCJncm91cF9pZFwiOiAxMS4wLCBcInNvdXJjZVwiOiAxMzkuMCwgXCJ0YXJnZXRcIjogMjEuMCwgXCJ3ZWlnaHRcIjogMTM0LjU1MDM4OTU2MzcyMDczfSwge1wiZ3JvdXBfaWRcIjogMTAuMCwgXCJzb3VyY2VcIjogMzMuMCwgXCJ0YXJnZXRcIjogMjEuMCwgXCJ3ZWlnaHRcIjogMTA4Ljc1NTQ0Mjk4NDQyNDAxfSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAxMzguMCwgXCJ0YXJnZXRcIjogMjEuMCwgXCJ3ZWlnaHRcIjogMTA4LjE0ODAyNjY1OTk1MDc2fSwge1wiZ3JvdXBfaWRcIjogMi4wLCBcInNvdXJjZVwiOiA0NS4wLCBcInRhcmdldFwiOiAyMS4wLCBcIndlaWdodFwiOiAxMDYuMTIzMzA1NTc4MzczMzN9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDEyOS4wLCBcInRhcmdldFwiOiAyMS4wLCBcIndlaWdodFwiOiA5MC4xMzc5NTkwOTE3OTgwN30sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogMTI3LjAsIFwidGFyZ2V0XCI6IDIxLjAsIFwid2VpZ2h0XCI6IDkwLjEzNzk1OTA5MTc5ODA3fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiA2Ny4wLCBcInRhcmdldFwiOiAyMS4wLCBcIndlaWdodFwiOiA5MC4xMzc5NTkwOTE3OTgwN30sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogNzUuMCwgXCJ0YXJnZXRcIjogMjEuMCwgXCJ3ZWlnaHRcIjogOTAuMTM3OTU5MDkxNzk4MDd9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDgzLjAsIFwidGFyZ2V0XCI6IDIxLjAsIFwid2VpZ2h0XCI6IDkwLjEzNzk1OTA5MTc5ODA3fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiA4NS4wLCBcInRhcmdldFwiOiAyMS4wLCBcIndlaWdodFwiOiA5MC4xMzc5NTkwOTE3OTgwN30sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogMTA0LjAsIFwidGFyZ2V0XCI6IDIxLjAsIFwid2VpZ2h0XCI6IDkwLjEzNzk1OTA5MTc5ODA3fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxNC4wLCBcInRhcmdldFwiOiAyMS4wLCBcIndlaWdodFwiOiA5MC4xMzc5NTkwOTE3OTgwN30sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogMTA3LjAsIFwidGFyZ2V0XCI6IDIxLjAsIFwid2VpZ2h0XCI6IDkwLjEzNzk1OTA5MTc5ODA3fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxMTEuMCwgXCJ0YXJnZXRcIjogMjEuMCwgXCJ3ZWlnaHRcIjogOTAuMTM3OTU5MDkxNzk4MDd9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDY5LjAsIFwidGFyZ2V0XCI6IDIxLjAsIFwid2VpZ2h0XCI6IDkwLjEzNzk1OTA5MTc5ODA3fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxMzYuMCwgXCJ0YXJnZXRcIjogMjEuMCwgXCJ3ZWlnaHRcIjogOTAuMTM3OTU5MDkxNzk4MDd9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDE0OS4wLCBcInRhcmdldFwiOiAyMS4wLCBcIndlaWdodFwiOiA5MC4xMzc5NTkwOTE3OTgwN30sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogMTUzLjAsIFwidGFyZ2V0XCI6IDIxLjAsIFwid2VpZ2h0XCI6IDkwLjEzNzk1OTA5MTc5ODA3fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiA5OC4wLCBcInRhcmdldFwiOiAyMS4wLCBcIndlaWdodFwiOiA4NC45NjA5MjA4MzM3MjU4MX0sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogMTQ0LjAsIFwidGFyZ2V0XCI6IDIxLjAsIFwid2VpZ2h0XCI6IDgyLjQ1NTEyNjAyMzE2NTU2fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAxMC4wLCBcInRhcmdldFwiOiAyMS4wLCBcIndlaWdodFwiOiA1OS42OTI0MDE3MzU2MzkyNH0sIHtcImdyb3VwX2lkXCI6IDEuMCwgXCJzb3VyY2VcIjogMTguMCwgXCJ0YXJnZXRcIjogMjEuMCwgXCJ3ZWlnaHRcIjogNTEuMTExNjMzNzkxOTE0MDF9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDcxLjAsIFwidGFyZ2V0XCI6IDIxLjAsIFwid2VpZ2h0XCI6IDUwLjQ0NjA3OTA0NzgxMjYyfSwge1wiZ3JvdXBfaWRcIjogMTAuMCwgXCJzb3VyY2VcIjogODguMCwgXCJ0YXJnZXRcIjogMjEuMCwgXCJ3ZWlnaHRcIjogNDUuMDU3NzE3NzU3OTk3NDN9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDExMC4wLCBcInRhcmdldFwiOiAyMS4wLCBcIndlaWdodFwiOiA0Mi40MjU1ODAzNTE5NDY3NX0sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogMjcuMCwgXCJ0YXJnZXRcIjogMjEuMCwgXCJ3ZWlnaHRcIjogMzkuMDU2NDQ0NDcyMjAxODc1fSwge1wiZ3JvdXBfaWRcIjogMi4wLCBcInNvdXJjZVwiOiA5LjAsIFwidGFyZ2V0XCI6IDIxLjAsIFwid2VpZ2h0XCI6IDMxLjI0NTA3MDUzOTQ3NjA3OH0sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogNzguMCwgXCJ0YXJnZXRcIjogMjEuMCwgXCJ3ZWlnaHRcIjogMjcuOTc1MTQ1OTkyNzI4NDg2fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAxNDcuMCwgXCJ0YXJnZXRcIjogMjEuMCwgXCJ3ZWlnaHRcIjogMjEuMzg5NTM4MjAyNzg5Njh9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDM0LjAsIFwidGFyZ2V0XCI6IDIxLjAsIFwid2VpZ2h0XCI6IDE3LjIyNzI1MTU4NDY4ODE5N30sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogMTM1LjAsIFwidGFyZ2V0XCI6IDIxLjAsIFwid2VpZ2h0XCI6IDE1LjEwMzk5NDA3NzE0MDY0Mn0sIHtcImdyb3VwX2lkXCI6IDExLjAsIFwic291cmNlXCI6IDIzLjAsIFwidGFyZ2V0XCI6IDIxLjAsIFwid2VpZ2h0XCI6IDE0Ljg5MzQyMzA4NDY1NjU5fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiA4Ni4wLCBcInRhcmdldFwiOiA0MS4wLCBcIndlaWdodFwiOiAyMzUuNzY3OTE1MTIyMTU0ODh9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDcyLjAsIFwidGFyZ2V0XCI6IDQxLjAsIFwid2VpZ2h0XCI6IDIwNS4xMzkxNjQyMTU1NzQyOH0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogNzIuMCwgXCJ0YXJnZXRcIjogNDEuMCwgXCJ3ZWlnaHRcIjogMTAyLjcxMDY0NjM2NDM0MDY1fSwge1wiZ3JvdXBfaWRcIjogMTEuMCwgXCJzb3VyY2VcIjogMTM5LjAsIFwidGFyZ2V0XCI6IDQxLjAsIFwid2VpZ2h0XCI6IDE1My4zMTc4NDMyMjUwNjQ2NX0sIHtcImdyb3VwX2lkXCI6IDEwLjAsIFwic291cmNlXCI6IDMzLjAsIFwidGFyZ2V0XCI6IDQxLjAsIFwid2VpZ2h0XCI6IDEyMy45MjQ5NDc0NTk2NDE0NH0sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogMTM4LjAsIFwidGFyZ2V0XCI6IDQxLjAsIFwid2VpZ2h0XCI6IDEyMy4yMzI4MDcwNTcwMDE5Nn0sIHtcImdyb3VwX2lkXCI6IDIuMCwgXCJzb3VyY2VcIjogNDUuMCwgXCJ0YXJnZXRcIjogNDEuMCwgXCJ3ZWlnaHRcIjogMTIwLjkyNTY3MjM4MTUzNzA0fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxMjkuMCwgXCJ0YXJnZXRcIjogNDEuMCwgXCJ3ZWlnaHRcIjogMTAyLjcxMDY0NjM2NDM0MDY1fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxMjcuMCwgXCJ0YXJnZXRcIjogNDEuMCwgXCJ3ZWlnaHRcIjogMTAyLjcxMDY0NjM2NDM0MDY1fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiA2Ny4wLCBcInRhcmdldFwiOiA0MS4wLCBcIndlaWdodFwiOiAxMDIuNzEwNjQ2MzY0MzQwNjV9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDc1LjAsIFwidGFyZ2V0XCI6IDQxLjAsIFwid2VpZ2h0XCI6IDEwMi43MTA2NDYzNjQzNDA2NX0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogODMuMCwgXCJ0YXJnZXRcIjogNDEuMCwgXCJ3ZWlnaHRcIjogMTAyLjcxMDY0NjM2NDM0MDY1fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiA4NS4wLCBcInRhcmdldFwiOiA0MS4wLCBcIndlaWdodFwiOiAxMDIuNzEwNjQ2MzY0MzQwNjV9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDEwNC4wLCBcInRhcmdldFwiOiA0MS4wLCBcIndlaWdodFwiOiAxMDIuNzEwNjQ2MzY0MzQwNjV9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDE0LjAsIFwidGFyZ2V0XCI6IDQxLjAsIFwid2VpZ2h0XCI6IDEwMi43MTA2NDYzNjQzNDA2NX0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogMTA3LjAsIFwidGFyZ2V0XCI6IDQxLjAsIFwid2VpZ2h0XCI6IDEwMi43MTA2NDYzNjQzNDA2NX0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogMTExLjAsIFwidGFyZ2V0XCI6IDQxLjAsIFwid2VpZ2h0XCI6IDEwMi43MTA2NDYzNjQzNDA2NX0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogNjkuMCwgXCJ0YXJnZXRcIjogNDEuMCwgXCJ3ZWlnaHRcIjogMTAyLjcxMDY0NjM2NDM0MDY1fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxMzYuMCwgXCJ0YXJnZXRcIjogNDEuMCwgXCJ3ZWlnaHRcIjogMTAyLjcxMDY0NjM2NDM0MDY1fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxNDkuMCwgXCJ0YXJnZXRcIjogNDEuMCwgXCJ3ZWlnaHRcIjogMTAyLjcxMDY0NjM2NDM0MDY1fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxNTMuMCwgXCJ0YXJnZXRcIjogNDEuMCwgXCJ3ZWlnaHRcIjogMTAyLjcxMDY0NjM2NDM0MDY1fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiA5OC4wLCBcInRhcmdldFwiOiA0MS4wLCBcIndlaWdodFwiOiA5Ni44MTE1MDA3NTM1Nzc1OH0sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogMTQ0LjAsIFwidGFyZ2V0XCI6IDQxLjAsIFwid2VpZ2h0XCI6IDkzLjk1NjE5MDg3OTIyMjE4fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAxMC4wLCBcInRhcmdldFwiOiA0MS4wLCBcIndlaWdodFwiOiA2OC4wMTg0NjAwMDM3NzUyM30sIHtcImdyb3VwX2lkXCI6IDEuMCwgXCJzb3VyY2VcIjogMTguMCwgXCJ0YXJnZXRcIjogNDEuMCwgXCJ3ZWlnaHRcIjogNTguMjQwODIzMjQ5MTU0ODY1fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiA3MS4wLCBcInRhcmdldFwiOiA0MS4wLCBcIndlaWdodFwiOiA1Ny40ODI0MzUxMjIyNjI3NH0sIHtcImdyb3VwX2lkXCI6IDEwLjAsIFwic291cmNlXCI6IDg4LjAsIFwidGFyZ2V0XCI6IDQxLjAsIFwid2VpZ2h0XCI6IDUxLjM0MjQ5MDU2OTUxNDcxNn0sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogMTEwLjAsIFwidGFyZ2V0XCI6IDQxLjAsIFwid2VpZ2h0XCI6IDQ4LjM0MzIxNTQ5MTQxMDMxfSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAyNy4wLCBcInRhcmdldFwiOiA0MS4wLCBcIndlaWdodFwiOiA0NC41MDQxNDMzOTE0MzY2Nn0sIHtcImdyb3VwX2lkXCI6IDIuMCwgXCJzb3VyY2VcIjogOS4wLCBcInRhcmdldFwiOiA0MS4wLCBcIndlaWdodFwiOiAzNS42MDMyMTc4MTM0OTI5N30sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogNzguMCwgXCJ0YXJnZXRcIjogNDEuMCwgXCJ3ZWlnaHRcIjogMzEuODc3MTk1MzEyNjE3MDk3fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAxNDcuMCwgXCJ0YXJnZXRcIjogNDEuMCwgXCJ3ZWlnaHRcIjogMjQuMzczMDA5MDY3MTk5ODY3fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAzNC4wLCBcInRhcmdldFwiOiA0MS4wLCBcIndlaWdodFwiOiAxOS42MzAxNTU0MTAzNTc0M30sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogMTM1LjAsIFwidGFyZ2V0XCI6IDQxLjAsIFwid2VpZ2h0XCI6IDE3LjIxMDc0MDE4MDY4NjUzNX0sIHtcImdyb3VwX2lkXCI6IDExLjAsIFwic291cmNlXCI6IDIzLjAsIFwidGFyZ2V0XCI6IDQxLjAsIFwid2VpZ2h0XCI6IDE2Ljk3MDc5ODE3NDQzODE4M30sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogODYuMCwgXCJ0YXJnZXRcIjogMTQxLjAsIFwid2VpZ2h0XCI6IDYwOC42NzA2NTYyODUyODUxfSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiA3Mi4wLCBcInRhcmdldFwiOiAxNDEuMCwgXCJ3ZWlnaHRcIjogNTI5LjU5Nzg4NzE3NzM3NzR9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDcyLjAsIFwidGFyZ2V0XCI6IDE0MS4wLCBcIndlaWdodFwiOiAyNjUuMTYzMTIyMzc2ODQyODZ9LCB7XCJncm91cF9pZFwiOiAxMS4wLCBcInNvdXJjZVwiOiAxMzkuMCwgXCJ0YXJnZXRcIjogMTQxLjAsIFwid2VpZ2h0XCI6IDM5NS44MTMyODE5MjA0NTk5M30sIHtcImdyb3VwX2lkXCI6IDEwLjAsIFwic291cmNlXCI6IDMzLjAsIFwidGFyZ2V0XCI6IDE0MS4wLCBcIndlaWdodFwiOiAzMTkuOTMxMDYwNDI5OTA3NDZ9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDEzOC4wLCBcInRhcmdldFwiOiAxNDEuMCwgXCJ3ZWlnaHRcIjogMzE4LjE0NDE5NDkzMTY5OTh9LCB7XCJncm91cF9pZFwiOiAyLjAsIFwic291cmNlXCI6IDQ1LjAsIFwidGFyZ2V0XCI6IDE0MS4wLCBcIndlaWdodFwiOiAzMTIuMTg3OTc2NjA0MzQxfSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxMjkuMCwgXCJ0YXJnZXRcIjogMTQxLjAsIFwid2VpZ2h0XCI6IDI2NS4xNjMxMjIzNzY4NDI4Nn0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogMTI3LjAsIFwidGFyZ2V0XCI6IDE0MS4wLCBcIndlaWdodFwiOiAyNjUuMTYzMTIyMzc2ODQyODZ9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDY3LjAsIFwidGFyZ2V0XCI6IDE0MS4wLCBcIndlaWdodFwiOiAyNjUuMTYzMTIyMzc2ODQyODZ9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDc1LjAsIFwidGFyZ2V0XCI6IDE0MS4wLCBcIndlaWdodFwiOiAyNjUuMTYzMTIyMzc2ODQyODZ9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDgzLjAsIFwidGFyZ2V0XCI6IDE0MS4wLCBcIndlaWdodFwiOiAyNjUuMTYzMTIyMzc2ODQyODZ9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDg1LjAsIFwidGFyZ2V0XCI6IDE0MS4wLCBcIndlaWdodFwiOiAyNjUuMTYzMTIyMzc2ODQyODZ9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDEwNC4wLCBcInRhcmdldFwiOiAxNDEuMCwgXCJ3ZWlnaHRcIjogMjY1LjE2MzEyMjM3Njg0Mjg2fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxNC4wLCBcInRhcmdldFwiOiAxNDEuMCwgXCJ3ZWlnaHRcIjogMjY1LjE2MzEyMjM3Njg0Mjg2fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxMDcuMCwgXCJ0YXJnZXRcIjogMTQxLjAsIFwid2VpZ2h0XCI6IDI2NS4xNjMxMjIzNzY4NDI4Nn0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogMTExLjAsIFwidGFyZ2V0XCI6IDE0MS4wLCBcIndlaWdodFwiOiAyNjUuMTYzMTIyMzc2ODQyODZ9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDY5LjAsIFwidGFyZ2V0XCI6IDE0MS4wLCBcIndlaWdodFwiOiAyNjUuMTYzMTIyMzc2ODQyODZ9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDEzNi4wLCBcInRhcmdldFwiOiAxNDEuMCwgXCJ3ZWlnaHRcIjogMjY1LjE2MzEyMjM3Njg0Mjg2fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxNDkuMCwgXCJ0YXJnZXRcIjogMTQxLjAsIFwid2VpZ2h0XCI6IDI2NS4xNjMxMjIzNzY4NDI4Nn0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogMTUzLjAsIFwidGFyZ2V0XCI6IDE0MS4wLCBcIndlaWdodFwiOiAyNjUuMTYzMTIyMzc2ODQyODZ9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDk4LjAsIFwidGFyZ2V0XCI6IDE0MS4wLCBcIndlaWdodFwiOiAyNDkuOTMzNTgyNjQ2Nzg1NjJ9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDE0NC4wLCBcInRhcmdldFwiOiAxNDEuMCwgXCJ3ZWlnaHRcIjogMjQyLjU2MjE2Njg0NDg0NjIyfSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAxMC4wLCBcInRhcmdldFwiOiAxNDEuMCwgXCJ3ZWlnaHRcIjogMTc1LjU5OTk3NzkyMTM0NjQ2fSwge1wiZ3JvdXBfaWRcIjogMS4wLCBcInNvdXJjZVwiOiAxOC4wLCBcInRhcmdldFwiOiAxNDEuMCwgXCJ3ZWlnaHRcIjogMTUwLjM1NzUyNDY0OTk5OTQ1fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiA3MS4wLCBcInRhcmdldFwiOiAxNDEuMCwgXCJ3ZWlnaHRcIjogMTQ4LjM5OTYzMDU5Njk2MzN9LCB7XCJncm91cF9pZFwiOiAxMC4wLCBcInNvdXJjZVwiOiA4OC4wLCBcInRhcmdldFwiOiAxNDEuMCwgXCJ3ZWlnaHRcIjogMTMyLjU0ODQzMTg1MTE5NjN9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDExMC4wLCBcInRhcmdldFwiOiAxNDEuMCwgXCJ3ZWlnaHRcIjogMTI0LjgwNTM0ODAyNTYyOTc0fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAyNy4wLCBcInRhcmdldFwiOiAxNDEuMCwgXCJ3ZWlnaHRcIjogMTE0Ljg5NDIwMDcyODkwNDUyfSwge1wiZ3JvdXBfaWRcIjogMi4wLCBcInNvdXJjZVwiOiA5LjAsIFwidGFyZ2V0XCI6IDE0MS4wLCBcIndlaWdodFwiOiA5MS45MTUxMTA0MjE5NTM5fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiA3OC4wLCBcInRhcmdldFwiOiAxNDEuMCwgXCJ3ZWlnaHRcIjogODIuMjk1ODE3ODIzMjY5MjN9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDE0Ny4wLCBcInRhcmdldFwiOiAxNDEuMCwgXCJ3ZWlnaHRcIjogNjIuOTIyNjIyMDkxNzAxNjd9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDM0LjAsIFwidGFyZ2V0XCI6IDE0MS4wLCBcIndlaWdodFwiOiA1MC42NzgyMjU1MzU1MzkwNn0sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogMTM1LjAsIFwidGFyZ2V0XCI6IDE0MS4wLCBcIndlaWdodFwiOiA0NC40MzIxMzc5MTYyNDg2ODV9LCB7XCJncm91cF9pZFwiOiAxMS4wLCBcInNvdXJjZVwiOiAyMy4wLCBcInRhcmdldFwiOiAxNDEuMCwgXCJ3ZWlnaHRcIjogNDMuODEyNjkxMjEwMjAzMzZ9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDg2LjAsIFwidGFyZ2V0XCI6IDQ1LjAsIFwid2VpZ2h0XCI6IDYuMDI2NDQyMTQxNDM4NDY2fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiA3Mi4wLCBcInRhcmdldFwiOiA0NS4wLCBcIndlaWdodFwiOiA1LjI0MzU0MzQzNzM5OTc3N30sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogNzIuMCwgXCJ0YXJnZXRcIjogNDUuMCwgXCJ3ZWlnaHRcIjogMi42MjUzNzc0NDkyNzU2NzJ9LCB7XCJncm91cF9pZFwiOiAxMS4wLCBcInNvdXJjZVwiOiAxMzkuMCwgXCJ0YXJnZXRcIjogNDUuMCwgXCJ3ZWlnaHRcIjogMy45MTg5NDMzODUzNTEwODg0fSwge1wiZ3JvdXBfaWRcIjogMTAuMCwgXCJzb3VyY2VcIjogMzMuMCwgXCJ0YXJnZXRcIjogNDUuMCwgXCJ3ZWlnaHRcIjogMy4xNjc2MzQyNjE2ODIyNTI0fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAxMzguMCwgXCJ0YXJnZXRcIjogNDUuMCwgXCJ3ZWlnaHRcIjogMy4xNDk5NDI1MjQwNzYyMzU1fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxMjkuMCwgXCJ0YXJnZXRcIjogNDUuMCwgXCJ3ZWlnaHRcIjogMi42MjUzNzc0NDkyNzU2NzJ9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDEyNy4wLCBcInRhcmdldFwiOiA0NS4wLCBcIndlaWdodFwiOiAyLjYyNTM3NzQ0OTI3NTY3Mn0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogNjcuMCwgXCJ0YXJnZXRcIjogNDUuMCwgXCJ3ZWlnaHRcIjogMi42MjUzNzc0NDkyNzU2NzJ9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDc1LjAsIFwidGFyZ2V0XCI6IDQ1LjAsIFwid2VpZ2h0XCI6IDIuNjI1Mzc3NDQ5Mjc1NjcyfSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiA4My4wLCBcInRhcmdldFwiOiA0NS4wLCBcIndlaWdodFwiOiAyLjYyNTM3NzQ0OTI3NTY3Mn0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogODUuMCwgXCJ0YXJnZXRcIjogNDUuMCwgXCJ3ZWlnaHRcIjogMi42MjUzNzc0NDkyNzU2NzJ9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDEwNC4wLCBcInRhcmdldFwiOiA0NS4wLCBcIndlaWdodFwiOiAyLjYyNTM3NzQ0OTI3NTY3Mn0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogMTQuMCwgXCJ0YXJnZXRcIjogNDUuMCwgXCJ3ZWlnaHRcIjogMi42MjUzNzc0NDkyNzU2NzJ9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDEwNy4wLCBcInRhcmdldFwiOiA0NS4wLCBcIndlaWdodFwiOiAyLjYyNTM3NzQ0OTI3NTY3Mn0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogMTExLjAsIFwidGFyZ2V0XCI6IDQ1LjAsIFwid2VpZ2h0XCI6IDIuNjI1Mzc3NDQ5Mjc1NjcyfSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiA2OS4wLCBcInRhcmdldFwiOiA0NS4wLCBcIndlaWdodFwiOiAyLjYyNTM3NzQ0OTI3NTY3Mn0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogMTM2LjAsIFwidGFyZ2V0XCI6IDQ1LjAsIFwid2VpZ2h0XCI6IDIuNjI1Mzc3NDQ5Mjc1NjcyfSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxNDkuMCwgXCJ0YXJnZXRcIjogNDUuMCwgXCJ3ZWlnaHRcIjogMi42MjUzNzc0NDkyNzU2NzJ9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDE1My4wLCBcInRhcmdldFwiOiA0NS4wLCBcIndlaWdodFwiOiAyLjYyNTM3NzQ0OTI3NTY3Mn0sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogOTguMCwgXCJ0YXJnZXRcIjogNDUuMCwgXCJ3ZWlnaHRcIjogMi40NzQ1ODk5MjcxOTU4OTczfSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAxNDQuMCwgXCJ0YXJnZXRcIjogNDUuMCwgXCJ3ZWlnaHRcIjogMi40MDE2MDU2MTIzMjUyMX0sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogMTAuMCwgXCJ0YXJnZXRcIjogNDUuMCwgXCJ3ZWlnaHRcIjogMS43Mzg2MTM2NDI3ODU2MDg3fSwge1wiZ3JvdXBfaWRcIjogMS4wLCBcInNvdXJjZVwiOiAxOC4wLCBcInRhcmdldFwiOiA0NS4wLCBcIndlaWdodFwiOiAxLjQ4ODY4ODM2Mjg3MTI4MTd9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDcxLjAsIFwidGFyZ2V0XCI6IDQ1LjAsIFwid2VpZ2h0XCI6IDEuNDY5MzAzMjczMjM3MjYwNn0sIHtcImdyb3VwX2lkXCI6IDEwLjAsIFwic291cmNlXCI6IDg4LjAsIFwidGFyZ2V0XCI6IDQ1LjAsIFwid2VpZ2h0XCI6IDEuMzEyMzYwNzExMzk3OTgzNn0sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogMTEwLjAsIFwidGFyZ2V0XCI6IDQ1LjAsIFwid2VpZ2h0XCI6IDEuMjM1Njk2NTE1MTA1MjQ1fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAyNy4wLCBcInRhcmdldFwiOiA0NS4wLCBcIndlaWdodFwiOiAxLjEzNzU2NjM0Mzg1MDU0fSwge1wiZ3JvdXBfaWRcIjogMi4wLCBcInNvdXJjZVwiOiA5LjAsIFwidGFyZ2V0XCI6IDQ1LjAsIFwid2VpZ2h0XCI6IDAuOTEwMDUwNTk4MjM3MTY3Mn0sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogNzguMCwgXCJ0YXJnZXRcIjogNDUuMCwgXCJ3ZWlnaHRcIjogMC44MTQ4MTAwNzc0NTgxMTEyfSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAxNDcuMCwgXCJ0YXJnZXRcIjogNDUuMCwgXCJ3ZWlnaHRcIjogMC42MjI5OTYyNTgzMzM2Nzk5fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAzNC4wLCBcInRhcmdldFwiOiA0NS4wLCBcIndlaWdodFwiOiAwLjUwMTc2NDYwOTI2Mjc2M30sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogMTM1LjAsIFwidGFyZ2V0XCI6IDQ1LjAsIFwid2VpZ2h0XCI6IDAuNDM5OTIyMTU3NTg2NjIwN30sIHtcImdyb3VwX2lkXCI6IDExLjAsIFwic291cmNlXCI6IDIzLjAsIFwidGFyZ2V0XCI6IDQ1LjAsIFwid2VpZ2h0XCI6IDAuNDMzNzg5MDIxODgzMjAxNn0sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogODYuMCwgXCJ0YXJnZXRcIjogNzguMCwgXCJ3ZWlnaHRcIjogNi4wMjY0NDIxNDE0Mzg0NjZ9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDcyLjAsIFwidGFyZ2V0XCI6IDc4LjAsIFwid2VpZ2h0XCI6IDUuMjQzNTQzNDM3Mzk5Nzc3fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiA3Mi4wLCBcInRhcmdldFwiOiA3OC4wLCBcIndlaWdodFwiOiAyLjYyNTM3NzQ0OTI3NTY3Mn0sIHtcImdyb3VwX2lkXCI6IDExLjAsIFwic291cmNlXCI6IDEzOS4wLCBcInRhcmdldFwiOiA3OC4wLCBcIndlaWdodFwiOiAzLjkxODk0MzM4NTM1MTA4ODR9LCB7XCJncm91cF9pZFwiOiAxMC4wLCBcInNvdXJjZVwiOiAzMy4wLCBcInRhcmdldFwiOiA3OC4wLCBcIndlaWdodFwiOiAzLjE2NzYzNDI2MTY4MjI1MjR9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDEzOC4wLCBcInRhcmdldFwiOiA3OC4wLCBcIndlaWdodFwiOiAzLjE0OTk0MjUyNDA3NjIzNTV9LCB7XCJncm91cF9pZFwiOiAyLjAsIFwic291cmNlXCI6IDQ1LjAsIFwidGFyZ2V0XCI6IDc4LjAsIFwid2VpZ2h0XCI6IDMuMDkwOTcwMDY1Mzg5NTE0N30sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogMTI5LjAsIFwidGFyZ2V0XCI6IDc4LjAsIFwid2VpZ2h0XCI6IDIuNjI1Mzc3NDQ5Mjc1NjcyfSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxMjcuMCwgXCJ0YXJnZXRcIjogNzguMCwgXCJ3ZWlnaHRcIjogMi42MjUzNzc0NDkyNzU2NzJ9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDY3LjAsIFwidGFyZ2V0XCI6IDc4LjAsIFwid2VpZ2h0XCI6IDIuNjI1Mzc3NDQ5Mjc1NjcyfSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiA3NS4wLCBcInRhcmdldFwiOiA3OC4wLCBcIndlaWdodFwiOiAyLjYyNTM3NzQ0OTI3NTY3Mn0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogODMuMCwgXCJ0YXJnZXRcIjogNzguMCwgXCJ3ZWlnaHRcIjogMi42MjUzNzc0NDkyNzU2NzJ9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDg1LjAsIFwidGFyZ2V0XCI6IDc4LjAsIFwid2VpZ2h0XCI6IDIuNjI1Mzc3NDQ5Mjc1NjcyfSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxMDQuMCwgXCJ0YXJnZXRcIjogNzguMCwgXCJ3ZWlnaHRcIjogMi42MjUzNzc0NDkyNzU2NzJ9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDE0LjAsIFwidGFyZ2V0XCI6IDc4LjAsIFwid2VpZ2h0XCI6IDIuNjI1Mzc3NDQ5Mjc1NjcyfSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxMDcuMCwgXCJ0YXJnZXRcIjogNzguMCwgXCJ3ZWlnaHRcIjogMi42MjUzNzc0NDkyNzU2NzJ9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDExMS4wLCBcInRhcmdldFwiOiA3OC4wLCBcIndlaWdodFwiOiAyLjYyNTM3NzQ0OTI3NTY3Mn0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogNjkuMCwgXCJ0YXJnZXRcIjogNzguMCwgXCJ3ZWlnaHRcIjogMi42MjUzNzc0NDkyNzU2NzJ9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDEzNi4wLCBcInRhcmdldFwiOiA3OC4wLCBcIndlaWdodFwiOiAyLjYyNTM3NzQ0OTI3NTY3Mn0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogMTQ5LjAsIFwidGFyZ2V0XCI6IDc4LjAsIFwid2VpZ2h0XCI6IDIuNjI1Mzc3NDQ5Mjc1NjcyfSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxNTMuMCwgXCJ0YXJnZXRcIjogNzguMCwgXCJ3ZWlnaHRcIjogMi42MjUzNzc0NDkyNzU2NzJ9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDk4LjAsIFwidGFyZ2V0XCI6IDc4LjAsIFwid2VpZ2h0XCI6IDIuNDc0NTg5OTI3MTk1ODk3M30sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogMTQ0LjAsIFwidGFyZ2V0XCI6IDc4LjAsIFwid2VpZ2h0XCI6IDIuNDAxNjA1NjEyMzI1MjF9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDEwLjAsIFwidGFyZ2V0XCI6IDc4LjAsIFwid2VpZ2h0XCI6IDEuNzM4NjEzNjQyNzg1NjA4N30sIHtcImdyb3VwX2lkXCI6IDEuMCwgXCJzb3VyY2VcIjogMTguMCwgXCJ0YXJnZXRcIjogNzguMCwgXCJ3ZWlnaHRcIjogMS40ODg2ODgzNjI4NzEyODE3fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiA3MS4wLCBcInRhcmdldFwiOiA3OC4wLCBcIndlaWdodFwiOiAxLjQ2OTMwMzI3MzIzNzI2MDZ9LCB7XCJncm91cF9pZFwiOiAxMC4wLCBcInNvdXJjZVwiOiA4OC4wLCBcInRhcmdldFwiOiA3OC4wLCBcIndlaWdodFwiOiAxLjMxMjM2MDcxMTM5Nzk4MzZ9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDExMC4wLCBcInRhcmdldFwiOiA3OC4wLCBcIndlaWdodFwiOiAxLjIzNTY5NjUxNTEwNTI0NX0sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogMjcuMCwgXCJ0YXJnZXRcIjogNzguMCwgXCJ3ZWlnaHRcIjogMS4xMzc1NjYzNDM4NTA1NH0sIHtcImdyb3VwX2lkXCI6IDIuMCwgXCJzb3VyY2VcIjogOS4wLCBcInRhcmdldFwiOiA3OC4wLCBcIndlaWdodFwiOiAwLjkxMDA1MDU5ODIzNzE2NzJ9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDE0Ny4wLCBcInRhcmdldFwiOiA3OC4wLCBcIndlaWdodFwiOiAwLjYyMjk5NjI1ODMzMzY3OTl9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDM0LjAsIFwidGFyZ2V0XCI6IDc4LjAsIFwid2VpZ2h0XCI6IDAuNTAxNzY0NjA5MjYyNzYzfSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAxMzUuMCwgXCJ0YXJnZXRcIjogNzguMCwgXCJ3ZWlnaHRcIjogMC40Mzk5MjIxNTc1ODY2MjA3fSwge1wiZ3JvdXBfaWRcIjogMTEuMCwgXCJzb3VyY2VcIjogMjMuMCwgXCJ0YXJnZXRcIjogNzguMCwgXCJ3ZWlnaHRcIjogMC40MzM3ODkwMjE4ODMyMDE2fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiA4Ni4wLCBcInRhcmdldFwiOiAxMTAuMCwgXCJ3ZWlnaHRcIjogMTU1LjEwNTc1MjMzMzE5MDZ9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDcyLjAsIFwidGFyZ2V0XCI6IDExMC4wLCBcIndlaWdodFwiOiAxMzQuOTU1ODcxMjUyMzQxNzh9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDcyLjAsIFwidGFyZ2V0XCI6IDExMC4wLCBcIndlaWdodFwiOiA2Ny41NzA3MzgyMzUxNjMzNn0sIHtcImdyb3VwX2lkXCI6IDExLjAsIFwic291cmNlXCI6IDEzOS4wLCBcInRhcmdldFwiOiAxMTAuMCwgXCJ3ZWlnaHRcIjogMTAwLjg2MzkzMzk1NDczMTcyfSwge1wiZ3JvdXBfaWRcIjogMTAuMCwgXCJzb3VyY2VcIjogMzMuMCwgXCJ0YXJnZXRcIjogMTEwLjAsIFwid2VpZ2h0XCI6IDgxLjUyNzA5MDczNTA1NTU4fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAxMzguMCwgXCJ0YXJnZXRcIjogMTEwLjAsIFwid2VpZ2h0XCI6IDgxLjA3MTc0OTA1Nzk4MzEzfSwge1wiZ3JvdXBfaWRcIjogMi4wLCBcInNvdXJjZVwiOiA0NS4wLCBcInRhcmdldFwiOiAxMTAuMCwgXCJ3ZWlnaHRcIjogNzkuNTUzOTQzNDY3NzQxNjl9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDEyOS4wLCBcInRhcmdldFwiOiAxMTAuMCwgXCJ3ZWlnaHRcIjogNjcuNTcwNzM4MjM1MTYzMzZ9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDEyNy4wLCBcInRhcmdldFwiOiAxMTAuMCwgXCJ3ZWlnaHRcIjogNjcuNTcwNzM4MjM1MTYzMzZ9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDY3LjAsIFwidGFyZ2V0XCI6IDExMC4wLCBcIndlaWdodFwiOiA2Ny41NzA3MzgyMzUxNjMzNn0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogNzUuMCwgXCJ0YXJnZXRcIjogMTEwLjAsIFwid2VpZ2h0XCI6IDY3LjU3MDczODIzNTE2MzM2fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiA4My4wLCBcInRhcmdldFwiOiAxMTAuMCwgXCJ3ZWlnaHRcIjogNjcuNTcwNzM4MjM1MTYzMzZ9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDg1LjAsIFwidGFyZ2V0XCI6IDExMC4wLCBcIndlaWdodFwiOiA2Ny41NzA3MzgyMzUxNjMzNn0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogMTA0LjAsIFwidGFyZ2V0XCI6IDExMC4wLCBcIndlaWdodFwiOiA2Ny41NzA3MzgyMzUxNjMzNn0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogMTQuMCwgXCJ0YXJnZXRcIjogMTEwLjAsIFwid2VpZ2h0XCI6IDY3LjU3MDczODIzNTE2MzM2fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxMDcuMCwgXCJ0YXJnZXRcIjogMTEwLjAsIFwid2VpZ2h0XCI6IDY3LjU3MDczODIzNTE2MzM2fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxMTEuMCwgXCJ0YXJnZXRcIjogMTEwLjAsIFwid2VpZ2h0XCI6IDY3LjU3MDczODIzNTE2MzM2fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiA2OS4wLCBcInRhcmdldFwiOiAxMTAuMCwgXCJ3ZWlnaHRcIjogNjcuNTcwNzM4MjM1MTYzMzZ9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDEzNi4wLCBcInRhcmdldFwiOiAxMTAuMCwgXCJ3ZWlnaHRcIjogNjcuNTcwNzM4MjM1MTYzMzZ9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDE0OS4wLCBcInRhcmdldFwiOiAxMTAuMCwgXCJ3ZWlnaHRcIjogNjcuNTcwNzM4MjM1MTYzMzZ9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDE1My4wLCBcInRhcmdldFwiOiAxMTAuMCwgXCJ3ZWlnaHRcIjogNjcuNTcwNzM4MjM1MTYzMzZ9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDk4LjAsIFwidGFyZ2V0XCI6IDExMC4wLCBcIndlaWdodFwiOiA2My42ODk4Mzk0Mzg1Mzc5OX0sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogMTQ0LjAsIFwidGFyZ2V0XCI6IDExMC4wLCBcIndlaWdodFwiOiA2MS44MTE0MDMyNDAwNTUxNn0sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogMTAuMCwgXCJ0YXJnZXRcIjogMTEwLjAsIFwid2VpZ2h0XCI6IDQ0Ljc0NzYyNTY3MjMyNDYyNH0sIHtcImdyb3VwX2lkXCI6IDEuMCwgXCJzb3VyY2VcIjogMTguMCwgXCJ0YXJnZXRcIjogMTEwLjAsIFwid2VpZ2h0XCI6IDM4LjMxNTE2NTU4MDg4MTM0fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiA3MS4wLCBcInRhcmdldFwiOiAxMTAuMCwgXCJ3ZWlnaHRcIjogMzcuODE2MjQxMjAwNDMxOTd9LCB7XCJncm91cF9pZFwiOiAxMC4wLCBcInNvdXJjZVwiOiA4OC4wLCBcInRhcmdldFwiOiAxMTAuMCwgXCJ3ZWlnaHRcIjogMzMuNzc2OTI2ODY2MDU5Mzl9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDI3LjAsIFwidGFyZ2V0XCI6IDExMC4wLCBcIndlaWdodFwiOiAyOS4yNzgxNTEwOTY1ODM3MTZ9LCB7XCJncm91cF9pZFwiOiAyLjAsIFwic291cmNlXCI6IDkuMCwgXCJ0YXJnZXRcIjogMTEwLjAsIFwid2VpZ2h0XCI6IDIzLjQyMjQ1NzEyOTQzMjE4NX0sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogNzguMCwgXCJ0YXJnZXRcIjogMTEwLjAsIFwid2VpZ2h0XCI6IDIwLjk3MTIwMTEwMTE5MjIzMn0sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogMTQ3LjAsIFwidGFyZ2V0XCI6IDExMC4wLCBcIndlaWdodFwiOiAxNi4wMzQzODY2MzgzNzI4NzZ9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDM0LjAsIFwidGFyZ2V0XCI6IDExMC4wLCBcIndlaWdodFwiOiAxMi45MTQxODMwOTI5OTM4NDN9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDEzNS4wLCBcInRhcmdldFwiOiAxMTAuMCwgXCJ3ZWlnaHRcIjogMTEuMzIyNTEwOTY0MDI3MzA0fSwge1wiZ3JvdXBfaWRcIjogMTEuMCwgXCJzb3VyY2VcIjogMjMuMCwgXCJ0YXJnZXRcIjogMTEwLjAsIFwid2VpZ2h0XCI6IDExLjE2NDY1OTE4MjY0MjE5MX0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogNzIuMCwgXCJ0YXJnZXRcIjogODYuMCwgXCJ3ZWlnaHRcIjogNTI5LjU5Nzg4NzE3NzM3NzV9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDcyLjAsIFwidGFyZ2V0XCI6IDg2LjAsIFwid2VpZ2h0XCI6IDI2NS4xNjMxMjIzNzY4NDI5fSwge1wiZ3JvdXBfaWRcIjogMTEuMCwgXCJzb3VyY2VcIjogMTM5LjAsIFwidGFyZ2V0XCI6IDg2LjAsIFwid2VpZ2h0XCI6IDM5NS44MTMyODE5MjA0NjAwNH0sIHtcImdyb3VwX2lkXCI6IDEwLjAsIFwic291cmNlXCI6IDMzLjAsIFwidGFyZ2V0XCI6IDg2LjAsIFwid2VpZ2h0XCI6IDMxOS45MzEwNjA0Mjk5MDc1fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAxMzguMCwgXCJ0YXJnZXRcIjogODYuMCwgXCJ3ZWlnaHRcIjogMzE4LjE0NDE5NDkzMTY5OTl9LCB7XCJncm91cF9pZFwiOiAyLjAsIFwic291cmNlXCI6IDQ1LjAsIFwidGFyZ2V0XCI6IDg2LjAsIFwid2VpZ2h0XCI6IDMxMi4xODc5NzY2MDQzNDEwM30sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogMTI5LjAsIFwidGFyZ2V0XCI6IDg2LjAsIFwid2VpZ2h0XCI6IDI2NS4xNjMxMjIzNzY4NDI5fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxMjcuMCwgXCJ0YXJnZXRcIjogODYuMCwgXCJ3ZWlnaHRcIjogMjY1LjE2MzEyMjM3Njg0Mjl9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDY3LjAsIFwidGFyZ2V0XCI6IDg2LjAsIFwid2VpZ2h0XCI6IDI2NS4xNjMxMjIzNzY4NDI5fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiA3NS4wLCBcInRhcmdldFwiOiA4Ni4wLCBcIndlaWdodFwiOiAyNjUuMTYzMTIyMzc2ODQyOX0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogODMuMCwgXCJ0YXJnZXRcIjogODYuMCwgXCJ3ZWlnaHRcIjogMjY1LjE2MzEyMjM3Njg0Mjl9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDg1LjAsIFwidGFyZ2V0XCI6IDg2LjAsIFwid2VpZ2h0XCI6IDI2NS4xNjMxMjIzNzY4NDI5fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxMDQuMCwgXCJ0YXJnZXRcIjogODYuMCwgXCJ3ZWlnaHRcIjogMjY1LjE2MzEyMjM3Njg0Mjl9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDE0LjAsIFwidGFyZ2V0XCI6IDg2LjAsIFwid2VpZ2h0XCI6IDI2NS4xNjMxMjIzNzY4NDI5fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxMDcuMCwgXCJ0YXJnZXRcIjogODYuMCwgXCJ3ZWlnaHRcIjogMjY1LjE2MzEyMjM3Njg0Mjl9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDExMS4wLCBcInRhcmdldFwiOiA4Ni4wLCBcIndlaWdodFwiOiAyNjUuMTYzMTIyMzc2ODQyOX0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogNjkuMCwgXCJ0YXJnZXRcIjogODYuMCwgXCJ3ZWlnaHRcIjogMjY1LjE2MzEyMjM3Njg0Mjl9LCB7XCJncm91cF9pZFwiOiA3LjAsIFwic291cmNlXCI6IDEzNi4wLCBcInRhcmdldFwiOiA4Ni4wLCBcIndlaWdodFwiOiAyNjUuMTYzMTIyMzc2ODQyOX0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogMTQ5LjAsIFwidGFyZ2V0XCI6IDg2LjAsIFwid2VpZ2h0XCI6IDI2NS4xNjMxMjIzNzY4NDI5fSwge1wiZ3JvdXBfaWRcIjogNy4wLCBcInNvdXJjZVwiOiAxNTMuMCwgXCJ0YXJnZXRcIjogODYuMCwgXCJ3ZWlnaHRcIjogMjY1LjE2MzEyMjM3Njg0Mjl9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDk4LjAsIFwidGFyZ2V0XCI6IDg2LjAsIFwid2VpZ2h0XCI6IDI0OS45MzM1ODI2NDY3ODU2OH0sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogMTQ0LjAsIFwidGFyZ2V0XCI6IDg2LjAsIFwid2VpZ2h0XCI6IDI0Mi41NjIxNjY4NDQ4NDYyN30sIHtcImdyb3VwX2lkXCI6IDMuMCwgXCJzb3VyY2VcIjogMTAuMCwgXCJ0YXJnZXRcIjogODYuMCwgXCJ3ZWlnaHRcIjogMTc1LjU5OTk3NzkyMTM0NjV9LCB7XCJncm91cF9pZFwiOiAxLjAsIFwic291cmNlXCI6IDE4LjAsIFwidGFyZ2V0XCI6IDg2LjAsIFwid2VpZ2h0XCI6IDE1MC4zNTc1MjQ2NDk5OTk0OH0sIHtcImdyb3VwX2lkXCI6IDcuMCwgXCJzb3VyY2VcIjogNzEuMCwgXCJ0YXJnZXRcIjogODYuMCwgXCJ3ZWlnaHRcIjogMTQ4LjM5OTYzMDU5Njk2MzMzfSwge1wiZ3JvdXBfaWRcIjogMTAuMCwgXCJzb3VyY2VcIjogODguMCwgXCJ0YXJnZXRcIjogODYuMCwgXCJ3ZWlnaHRcIjogMTMyLjU0ODQzMTg1MTE5NjM0fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAxMTAuMCwgXCJ0YXJnZXRcIjogODYuMCwgXCJ3ZWlnaHRcIjogMTI0LjgwNTM0ODAyNTYyOTc4fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAyNy4wLCBcInRhcmdldFwiOiA4Ni4wLCBcIndlaWdodFwiOiAxMTQuODk0MjAwNzI4OTA0NTV9LCB7XCJncm91cF9pZFwiOiAyLjAsIFwic291cmNlXCI6IDkuMCwgXCJ0YXJnZXRcIjogODYuMCwgXCJ3ZWlnaHRcIjogOTEuOTE1MTEwNDIxOTUzOTF9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDc4LjAsIFwidGFyZ2V0XCI6IDg2LjAsIFwid2VpZ2h0XCI6IDgyLjI5NTgxNzgyMzI2OTI1fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAxNDcuMCwgXCJ0YXJnZXRcIjogODYuMCwgXCJ3ZWlnaHRcIjogNjIuOTIyNjIyMDkxNzAxNjh9LCB7XCJncm91cF9pZFwiOiAzLjAsIFwic291cmNlXCI6IDM0LjAsIFwidGFyZ2V0XCI6IDg2LjAsIFwid2VpZ2h0XCI6IDUwLjY3ODIyNTUzNTUzOTA3fSwge1wiZ3JvdXBfaWRcIjogMy4wLCBcInNvdXJjZVwiOiAxMzUuMCwgXCJ0YXJnZXRcIjogODYuMCwgXCJ3ZWlnaHRcIjogNDQuNDMyMTM3OTE2MjQ4Njl9LCB7XCJncm91cF9pZFwiOiAxMS4wLCBcInNvdXJjZVwiOiAyMy4wLCBcInRhcmdldFwiOiA4Ni4wLCBcIndlaWdodFwiOiA0My44MTI2OTEyMTAyMDMzN31dLCBcIm5vZGVzXCI6IFtdfVxuZXhwb3J0IGRlZmF1bHQgdW1hbWlEYXRhOyIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XG4vLyBpbXBvcnQgJ2QzLXN2Zy1sZWdlbmQvZDMtbGVnZW5kJztcbmltcG9ydCAnaW9uLXNvdW5kJztcblxuaW1wb3J0IGZsYXZvckRhdGEgZnJvbSAnLi9kYXRhL2ZsYXZvcl9kYXRhJztcbmltcG9ydCB1bWFtaURhdGEgZnJvbSAnLi9kYXRhL3VtYW1pX2RhdGEnO1xuXG5pbXBvcnQgTmV0d29yayBmcm9tICcuL05ldHdvcmsnO1xuaW1wb3J0IExlZ2VuZCBmcm9tICcuL0xlZ2VuZCdcblxuXG5jb25zb2xlLmxvZyhmbGF2b3JEYXRhKTtcbmNvbnNvbGUubG9nKHVtYW1pRGF0YSk7XG5cbigoKSA9PiB7XG4gIGxldCBpc1NwID0gKChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ2lQaG9uZScpID4gMCB8fFxuICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdpUGFkJykgPiAwKSB8fFxuICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdpUG9kJykgPiAwIHx8XG4gICAgICBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0FuZHJvaWQnKSA+IDApO1xuXG4gIGNvbnNvbGUubG9nKGlzU3ApXG5cblxuICAvL21ha2UgY29sb3IgZnVuY3Rpb25cbiAgY29uc3QgY29sb3IgPSBmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBsZWdlbmRDb2xvcltuXTtcbiAgfTtcblxuICAvKiBDaGVja2luZyBpZiBtb3VzZSBidXR0b24gZG93biBvciBub3Q/ICovXG4gIC8vIGRlZmF1bHQgOiB1cFxuICBsZXQgbW91c2VEb3duID0gMDtcbiAgZG9jdW1lbnQuYm9keS5vbm1vdXNlZG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICBtb3VzZURvd24gPSAxO1xuICB9O1xuICBkb2N1bWVudC5ib2R5Lm9ubW91c2V1cCA9IGZ1bmN0aW9uICgpIHtcbiAgICBtb3VzZURvd24gPSAwO1xuICB9O1xuXG4gIC8qIC8vTGVnZW5kLy8gKi9cbiAgY29uc3QgbGVnZW5kTmFtZSA9IFtcInBsYW50XCIsIFwiZnJ1aXRcIiwgXCJtZWF0XCIsIFwidmVnZXRhYmxlXCIsIFwiY2VyZWFsL2Nyb3BcIixcbiAgICBcImFsY29ob2xpYyBiZXZlcmFnZVwiLCBcImhlcmJcIiwgXCJkYWlyeVwiLCBcIm51dC9zZWVkL3B1bHNlXCIsIFwic3BpY2VcIixcbiAgICBcImZpc2gvc2VhZm9vZFwiLCBcInBsYW50IGRlcml2YXRpdmVcIiwgXCJmbG93ZXJcIiwgXCJhbmltYWwgcHJvZHVjdFwiXTtcblxuICBjb25zdCBsZWdlbmRDb2xvciA9IFtcIiMwZmZmMGZcIiwgXCIjZmM3ODNmXCIsIFwiI2ZmNGM0Y1wiLCBcIiMzY2IzN2FcIiwgXCIjZThjNTljXCIsXG4gICAgXCIjZTczNTUyXCIsIFwiI2FkNWQ4OFwiLCBcIiNkYjgzMGRcIiwgXCIjOTY1ZDIxXCIsIFwiIzAwYWZjY1wiLFxuICAgIFwiIzQzNGRhMlwiLCBcIiNiM2U1MDBcIiwgXCIjZmYwMGFlXCIsIFwiI2ZmN2ZiZlwiXTtcblxuICAvLyBjb25zdCBvcmRpbmFsID0gZDMuc2NhbGUub3JkaW5hbCgpXG4gIC8vICAgICAuZG9tYWluKGxlZ2VuZE5hbWUpXG4gIC8vICAgICAucmFuZ2UobGVnZW5kQ29sb3IpO1xuXG5cbiAgY29uc3Qgc3ZnID0gZDMuc2VsZWN0KFwiI215R3JhcGhcIik7XG5cbiAgc3ZnLmFwcGVuZChcImdcIilcbiAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJsZWdlbmRPcmRpbmFsXCIpXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgyNSw1MClcIilcbiAgICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLCBcIjEuMmVtXCIpXG4gICAgICAuc3R5bGUoXCJmaWxsXCIsIFwiIzM1MjYyMlwiKVxuICAgICAgLnN0eWxlKHtcImZvbnQtZmFtaWx5XCI6IFtcIkhlbHZldGljYSBOZXVlXCIsIFwiQXJpYWxcIiwgXCJzYW5zLXNlcmlmXCJdfSk7XG5cblxuICAvLyBjb25zdCBsZWdlbmRPcmRpbmFsID0gZDMubGVnZW5kLmNvbG9yKClcbiAgLy8gICAgIC5zaGFwZShcInBhdGhcIiwgZDMuc3ZnLnN5bWJvbCgpLnR5cGUoXCJjaXJjbGVcIikuc2l6ZSgzMDApKCkpXG4gIC8vICAgICAuc2hhcGVQYWRkaW5nKDQpXG4gIC8vICAgICAubGFiZWxPZmZzZXQoMi41KVxuICAvLyAgICAgLy8udGl0bGUoXCJJbmdyZWRpZW50IENhdGVnb3JpZXNcIilcbiAgLy8gICAgIC5zY2FsZShvcmRpbmFsKTtcblxuICAvLyBzdmcuc2VsZWN0KFwiLmxlZ2VuZE9yZGluYWxcIilcbiAgLy8gICAgIC5jYWxsKGxlZ2VuZE9yZGluYWwpO1xuXG4gIC8vIGF0dHIgb2YgbGVnZW5kIGNpcmNsZVxuICBjb25zdCBjZWxsID0gJChcIi5jZWxsXCIpO1xuICBjb25zdCBsZWdlbmRQYXRoRGVmbyA9IGNlbGwuY2hpbGRyZW4oXCJwYXRoXCIpO1xuICAkKGxlZ2VuZFBhdGhEZWZvKS5jc3Moe1xuICAgIFwib3BhY2l0eVwiOiBbXCIwLjZcIl0sXG4gICAgXCJzdHJva2Utd2lkdGhcIjogW1wiMlwiXSxcbiAgICBcInN0cm9rZVwiOiBbXCJ3aGl0ZVwiXVxuICB9KTtcblxuICAvLyBzZXQgcG9pbnRlciBjdXJzb3IgYXQgbGVnZW5kXG4gICQoXCIubGVnZW5kQ2VsbHNcIikuY3NzKHtcImN1cnNvclwiOiBbXCJwb2ludGVyXCJdfSk7XG5cbiAgLyogLy9TZXR0aW5nLy8gKi9cbiAgY29uc3Qgd2lkdGggPSAxMDAwO1xuICBjb25zdCBoZWlnaHQgPSA2NTA7XG5cbiAgbGV0IG5vZGVzID0gZmxhdm9yRGF0YS5ub2RlcztcbiAgbGV0IGxpbmtzID0gZmxhdm9yRGF0YS5saW5rcztcblxuXG4gIC8qIC8vQ29udGludWFsbHkgbW92ZS8vICovXG4gIC8vc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtmb3JjZS5hbHBoYSgwLjA1KTt9LCAxMjUpO1xuICAvL2QzLnRpbWVyKGZ1bmN0aW9uKCl7XG4gIC8vZm9yY2UuYWxwaGEoMC4xKTtcbiAgLy99KTtcblxuICAvKiAvL1N0YXRpYyBOZXR3b3JrLy8gKi9cbiAgLy8gZm9yIHBpY3R1cmVcblxuICAvL2xldCBrZXlEb3duID0gMDtcbiAgY29uc3QgYm9keSA9ICQoXCJib2R5XCIpO1xuICAvKlxuICBib2R5Lm9uKFwia2V5ZG93blwiLCBmdW5jdGlvbigpe1xuICAgIGlmIChrZXlEb3duPT09MCl7XG4gICAgICBmb3JjZS5zdG9wKCk7IC8vZm9yY2Ug44Os44Kk44Ki44Km44OI44Gu6KiI566X44KS57WC5LqGXG4gICAgICBub2RlLmVhY2goZnVuY3Rpb24oZCl7IGQuZml4ZWQgPSB0cnVlIH0pO1xuICAgICAga2V5RG93biA9IDFcbiAgICB9ZWxzZXtcbiAgICAgIGZvcmNlLnN0YXJ0KCk7IC8vZm9yY2Ug44Os44Kk44Ki44Km44OI44Gu6KiI566X44KS57WC5LqGXG4gICAgICBub2RlLmVhY2goZnVuY3Rpb24oZCl7IGQuZml4ZWQgPSBmYWxzZSB9KTtcbiAgICAgIGtleURvd24gPSAwXG4gICAgfVxuICB9KTtcbiAgKi9cblxuXG4gIC8vIHNldCBzdmcgZWxlbWVudHNcbiAgbGV0IGxpbmsgPSBkMy5zZWxlY3QoXCIjbXlHcmFwaFwiKVxuICAgIC5zZWxlY3RBbGwoXCJsaW5lXCIpXG4gICAgLmRhdGEobGlua3MpXG4gICAgICAuZW50ZXIoKVxuICAgICAgLmFwcGVuZChcImxpbmVcIilcbiAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCBcIjAuNVwiKVxuICAgICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydChkLndlaWdodCkgKiAwLjEgKyBkLndlaWdodCAqIDAuMDJcbiAgICAgIH0pXG4gICAgICAuYXR0cihcInN0cm9rZVwiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICByZXR1cm4gY29sb3IoZC5ncm91cF9pZClcbiAgICAgIH0pO1xuXG4gIGxldCBub2RlID0gZDMuc2VsZWN0KFwiI215R3JhcGhcIilcbiAgICAgIC5zZWxlY3RBbGwoXCJjaXJjbGVcIilcbiAgICAgIC5kYXRhKG5vZGVzKVxuICAgICAgLmVudGVyKClcbiAgICAgIC5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCBcIjAuNlwiKVxuICAgICAgLmF0dHIoXCJyXCIsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoZC5zaXplKSAqIDUgKyAzO1xuICAgICAgfSlcbiAgICAgIC5hdHRyKFwiZmlsbFwiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICByZXR1cm4gY29sb3IoZC5ncm91cF9pZClcbiAgICAgIH0pXG4gICAgICAuYXR0cihcInN0cm9rZVwiLCBcIiNmZmZjZjlcIilcbiAgICAgIC5jYWxsKGQzLmRyYWcoKVxuICAgICAgICAgIC5vbihcInN0YXJ0XCIsIGRyYWdzdGFydGVkKVxuICAgICAgICAgIC5vbihcImRyYWdcIiwgZHJhZ2dlZClcbiAgICAgICAgICAub24oXCJlbmRcIiwgZHJhZ2VuZGVkKSk7XG5cblxuICBsZXQgbGFiZWxzID0gZDMuc2VsZWN0KFwiI215R3JhcGhcIilcbiAgICAgIC5zZWxlY3RBbGwoXCJ0ZXh0XCIpLmRhdGEobm9kZXMpLmVudGVyKCkuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgLnRleHQoZnVuY3Rpb24oZCl7cmV0dXJuIGQubmFtZTt9KVxuXG4gIGxhYmVsc1xuICAgICAgLmF0dHIoXCJmb250LXNpemVcIiwgXCIuN2VtXCIpXG4gICAgICAuYXR0cihcImZvbnQtd2VpZ2h0XCIsIFwiMzAwXCIpXG4gICAgICAuYXR0cihcImNsYXNzXCIsIFwibm9uRHJhZ1wiKVxuICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiIzM1MjYyMlwiKVxuICAgICAgLmF0dHIoe1wiZm9udC1mYW1pbHlcIjogW1wiRnV0dXJhXCIsIFwiTnVuaXRvXCIsIFwiSGVsdmV0aWNhIE5ldWVcIiwgXCJBcmlhbFwiLCBcInNhbnMtc2VyaWZcIl19KTtcblxuXG4gIGxldCBzaW11bGF0aW9uID0gZDMuZm9yY2VTaW11bGF0aW9uKClcbiAgICAgIC8vLmZvcmNlKFwiY2VudGVyXCIsIGQzLmZvcmNlQ2VudGVyKFt3aWR0aCAvIDIgLSA1MCwgaGVpZ2h0IC8gMiAtIDEwXSkpXG4gICAgICAuZm9yY2UoXCJsaW5rXCIsXG4gICAgICAgICAgZDMuZm9yY2VMaW5rKClcbiAgICAgICAgICAgICAgLy8gLmRpc3RhbmNlKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgIC8vICAgcmV0dXJuIE1hdGguc3FydChkLndlaWdodCkgKiAwLjEgKyBkLndlaWdodCAqIDAuMDI7XG4gICAgICAgICAgICAgIC8vIH0pXG4gICAgICAgICAgICAgIC5kaXN0YW5jZSgxMDApXG4gICAgICAgICAgICAgIC5zdHJlbmd0aCgwLjgpXG4gICAgICAgICAgICAgIC5pdGVyYXRpb25zKDE2KSlcbiAgICAgIC5mb3JjZShcImNvbGxpZGVcIixcbiAgICAgICAgICBkMy5mb3JjZUNvbGxpZGUoKVxuICAgICAgICAgICAgICAucmFkaXVzKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGQuc2l6ZTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLnN0cmVuZ3RoKDAuNylcbiAgICAgICAgICAgICAgLml0ZXJhdGlvbnMoMTYpKVxuICAgICAgLmZvcmNlKFwiY2hhcmdlXCIsIGQzLmZvcmNlTWFueUJvZHkoKS5zdHJlbmd0aCgtMzAwKSlcbiAgICAgIC5mb3JjZShcImNlbnRlclwiLCBkMy5mb3JjZUNlbnRlcih3aWR0aCAvIDIgKyA1MCwgaGVpZ2h0IC8gMiArIDEwMCkpXG4gICAgICAuZm9yY2UoXCJ4XCIsIGQzLmZvcmNlWCgpLnN0cmVuZ3RoKDAuMikpXG4gICAgICAuZm9yY2UoXCJ5XCIsIGQzLmZvcmNlWSgpLnN0cmVuZ3RoKDAuMikpO1xuXG4gIHNpbXVsYXRpb25cbiAgICAubm9kZXMobm9kZXMpXG4gICAgLm9uKFwidGlja1wiLCB0aWNrZWQpO1xuXG4gIHNpbXVsYXRpb24uZm9yY2UoXCJsaW5rXCIpXG4gICAgLmxpbmtzKGxpbmtzKTtcblxuXG4gIC8vIHRpY2sgZm9yIHNpbXVsYXRpb25cbiAgZnVuY3Rpb24gdGlja2VkKCkge1xuICAgIGxpbmtcbiAgICAgICAgLmF0dHIoXCJ4MVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnNvdXJjZS54OyB9KVxuICAgICAgICAuYXR0cihcInkxXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuc291cmNlLnk7IH0pXG4gICAgICAgIC5hdHRyKFwieDJcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50YXJnZXQueDsgfSlcbiAgICAgICAgLmF0dHIoXCJ5MlwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnRhcmdldC55OyB9KTtcbiAgICBub2RlXG4gICAgICAgIC5hdHRyKFwiY3hcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC54OyB9KVxuICAgICAgICAuYXR0cihcImN5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQueTsgfSk7XG4gICAgbGFiZWxzXG4gICAgICAgIC5hdHRyKFwieFwiLCBmdW5jdGlvbihkKXtyZXR1cm4gZC54O30pXG4gICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbihkKXtyZXR1cm4gZC55O30pO1xuICB9XG5cblxuICAvLyBkcmFnIGV2ZW50XG4gIGZ1bmN0aW9uIGRyYWdzdGFydGVkKGQpIHtcbiAgICBpZighZDMuZXZlbnQuYWN0aXZlKSBzaW11bGF0aW9uLmFscGhhVGFyZ2V0KDAuMykucmVzdGFydCgpO1xuICAgIGQuZnggPSBkLng7XG4gICAgZC5meSA9IGQueTtcblxuICAgIE5ldHdvcmsubW91c2Vkb3duKGQsIGxpbmtzLCBjaXJjbGUsIGxhYmVscyk7XG4gICAgTmV0d29yay5jdXJzb3IoJ2dyYWJiaW5nJywgYm9keSwgY2lyY2xlKTtcbiAgICBpb24uc291bmQucGxheShcImdyYWJOb2RlXCIsIHtcbiAgICAgIHZvbHVtZTogMC4yIC8vIHR1cm4gZG93blxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZHJhZ2dlZChkKSB7XG4gICAgZC5meCA9IGQzLmV2ZW50Lng7XG4gICAgZC5meSA9IGQzLmV2ZW50Lnk7XG4gIH1cblxuICBmdW5jdGlvbiBkcmFnZW5kZWQoZCkge1xuICAgIGlmKCFkMy5ldmVudC5hY3RpdmUpIHNpbXVsYXRpb24uYWxwaGFUYXJnZXQoMCk7XG4gICAgZC5meCA9IG51bGw7XG4gICAgZC5meSA9IG51bGw7XG5cbiAgICBOZXR3b3JrLm1vdXNldXAoZCwgbGlua3MsIGNpcmNsZSwgbGFiZWxzKTtcbiAgICBOZXR3b3JrLmN1cnNvcignZ3JhYicsIGJvZHksIGNpcmNsZSlcbiAgICBpb24uc291bmQucGxheShcInJlbGVhc2VOb2RlXCIsIHtcbiAgICAgIHZvbHVtZTogMC41XG4gICAgfSk7XG4gIH1cblxuXG4gIGJvZHkub24oXCJtb3VzZXVwXCIsIGZ1bmN0aW9uIChkKSB7XG4gICAgTmV0d29yay5tb3VzZXVwKGQsIGxpbmtzLCBjaXJjbGUsIGxhYmVscyk7XG4gICAgTmV0d29yay5jdXJzb3IoJ2dyYWInLCBib2R5LCBjaXJjbGUpXG5cbiAgICBjb25zb2xlLmxvZygnbW91c2V1cCBib2R5JylcblxuICB9KTtcblxuXG4gIC8vIE5ldHdvcmsgZGF0YeOCkuabtOaWsOOBmeOCi1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIGNvbnN0IGRhdGFUeXBlU2VsZWN0b3IgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGF0YVR5cGUnKTtcbiAgZGF0YVR5cGVTZWxlY3Rvci5vbmNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyDpgbjmip7jgZXjgozjgabjgYTjgotvcHRpb27opoHntKDjgpLlj5blvpfjgZnjgotcbiAgICBjb25zdCBzZWxlY3RlZFR5cGUgPSB0aGlzLm9wdGlvbnNbdGhpcy5zZWxlY3RlZEluZGV4XS52YWx1ZTtcblxuICAgIGlmIChzZWxlY3RlZFR5cGUgPT09ICdGbGF2b3InKSB7XG4gICAgICBmb3JjZVxuICAgICAgICAgIC5saW5rRGlzdGFuY2UoMTAwKVxuICAgICAgICAgIC5ncmF2aXR5KDAuMjApXG4gICAgICAgICAgLmNoYXJnZSgtMzAwKTtcbiAgICAgIG5vZGVzID0gZmxhdm9yRGF0YS5ub2RlcztcbiAgICAgIGxpbmtzID0gZmxhdm9yRGF0YS5saW5rcztcbiAgICAgIHVwZGF0ZShzZWxlY3RlZFR5cGUpXG4gICAgfSBlbHNlIGlmIChzZWxlY3RlZFR5cGUgPT09ICdVbWFtaScpIHtcbiAgICAgIGZvcmNlXG4gICAgICAgICAgLmxpbmtEaXN0YW5jZSgxNTApXG4gICAgICAgICAgLmdyYXZpdHkoMS44MClcbiAgICAgICAgICAuY2hhcmdlKC0yNTAwKTtcbiAgICAgIC8vIG5vZGVzID0gdW1hbWlEYXRhLm5vZGVzO1xuICAgICAgbGlua3MgPSB1bWFtaURhdGEubGlua3M7XG4gICAgICB1cGRhdGUoc2VsZWN0ZWRUeXBlKVxuICAgIH1cbiAgfTtcblxuXG4gIGxldCBzdG9wRm9yY2VTZXRJbnRlcnZhbDtcblxuICBmdW5jdGlvbiB1cGRhdGUoc2VsZWN0ZWRUeXBlKSB7XG4gICAgbGV0IGRlbGV0ZUxpbmUgPSBkMy5zZWxlY3RBbGwoXCJsaW5lXCIpO1xuXG4gICAgLy8gZm9yY2Uubm9kZXMobm9kZXMpLmxpbmtzKGxpbmtzKTtcbiAgICBmb3JjZS5saW5rcyhsaW5rcyk7XG5cblxuICAgIGxpbmsgPSBkMy5zZWxlY3QoXCIjbXlHcmFwaFwiKVxuICAgICAgICAuc2VsZWN0QWxsKFwiLmxpbmVcIilcbiAgICAgICAgLmRhdGEobGlua3MpXG4gICAgICAgIC5lbnRlcigpXG4gICAgICAgIC5hcHBlbmQoXCJsaW5lXCIpO1xuXG4gICAgbGluay5hdHRyKFwib3BhY2l0eVwiLCBcIjAuNVwiKVxuICAgICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgIHJldHVybiBNYXRoLnNxcnQoZC53ZWlnaHQpICogMC4xICsgZC53ZWlnaHQgKiAwLjAyO1xuICAgICAgICB9KVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgIHJldHVybiBjb2xvcihkLmdyb3VwX2lkKVxuICAgICAgICB9KTtcblxuICAgIGRlbGV0ZUxpbmUucmVtb3ZlKCk7XG5cbiAgICBmb3JjZS5zdGFydCgpO1xuICAgIGQzLnNlbGVjdEFsbChcImxpbmVcIikuc3R5bGUoXCJzdHJva2Utd2lkdGhcIiwgXCJcIik7XG5cblxuICAgIC8vIGNoYW5nZSBsaW5lIGRpc3BsYXkgb3JkZXIgdG8gYmFjayBvZiBub2RlXG4gICAgZm9yIChsZXQgaSA9IGxpbmtzLmxlbmd0aCAtIDE7IDAgPD0gaTsgaS0tKSB7XG4gICAgICBjb25zdCBsaW5rU1ZHID0gbGlua1swXVtpXTtcbiAgICAgIGNvbnN0IGZpcnN0U1ZHID0gbGlua1NWRy5wYXJlbnROb2RlLmZpcnN0Q2hpbGQ7XG4gICAgICBpZiAoZmlyc3RTVkcpIHtcbiAgICAgICAgbGlua1NWRy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShsaW5rU1ZHLCBmaXJzdFNWRyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2xlYXJJbnRlcnZhbChzdG9wRm9yY2VTZXRJbnRlcnZhbCk7XG4gICAgc3RvcEZvcmNlU2V0SW50ZXJ2YWwgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGZvcmNlLnN0b3AoKTsgLy9mb3JjZSDjg6zjgqTjgqLjgqbjg4jjga7oqIjnrpfjgpLntYLkuoZcbiAgICB9LCA1MDAwKTtcblxuICAgIC8vIHVwZGF0ZSBUaXRsZVxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdoMScpLnRleHRDb250ZW50ID0gc2VsZWN0ZWRUeXBlICsgJyBOZXR3b3JrJ1xuICB9XG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG4gIGNvbnN0IGNpcmNsZSA9ICQoXCJjaXJjbGVcIik7XG5cblxuICAvKiAvL01vdXNlIGFjdGlvbi8vICovXG4gIGlmICghaXNTcCkge1xuICAgIG5vZGUub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgIE5ldHdvcmsubW91c2VvdmVyKGQsIGxpbmtzLCBjaXJjbGUpO1xuICAgICAgaWYgKG1vdXNlRG93biA9PT0gMCkge1xuICAgICAgICBpb24uc291bmQucGxheShcIm1vdXNlb3ZlclwiLCB7XG4gICAgICAgICAgdm9sdW1lOiAwLjEgLy8gdHVybiBkb3duXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgbm9kZS5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uIChkKSB7XG4gICAgICBOZXR3b3JrLm1vdXNlb3V0KGQsIGxpbmtzLCBjaXJjbGUpXG4gICAgfSk7XG5cblxuICAgIC8vIGJvZHkub24oXCJtb3VzZXVwXCIsIGZ1bmN0aW9uIChkKSB7XG4gICAgLy8gICBOZXR3b3JrLm1vdXNldXAoZCwgbGlua3MsIGNpcmNsZSwgbGFiZWxzKTtcbiAgICAvLyAgIE5ldHdvcmsuY3Vyc29yKCdncmFiJywgYm9keSwgY2lyY2xlKVxuICAgIC8vXG4gICAgLy8gICBjb25zb2xlLmxvZygnbW91c2V1cCBib2R5JylcbiAgICAvL1xuICAgIC8vIH0pO1xuICB9XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBmb3IgU21hcnRQaG9uZVxuXG4gIGlmIChpc1NwKSB7XG4gICAgbGV0IHRvdWNoQ29sb3JlZCA9IDA7XG4gICAgbGV0IHRvdWNobW92ZSA9IDA7XG4gICAgc3ZnLm9uKFwidG91Y2htb3ZlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRvdWNobW92ZSA9IDFcbiAgICB9KTtcblxuICAgIG5vZGUub24oXCJ0b3VjaHN0YXJ0XCIsIGZ1bmN0aW9uIChkKSB7XG4gICAgICBOZXR3b3JrLnRvdWNoU3RhcnQoZCwgbGlua3MsIGNpcmNsZSk7XG4gICAgfSk7XG5cbiAgICBub2RlLm9uKFwidG91Y2hlbmRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdG91Y2hDb2xvcmVkID0gMDtcbiAgICB9KTtcblxuICAgIHN2Zy5vbihcInRvdWNoc3RhcnRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdG91Y2hDb2xvcmVkID0gMTtcbiAgICB9KTtcblxuICAgIHN2Zy5vbihcInRvdWNoZW5kXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0b3VjaG1vdmUgPT09IDApIHtcbiAgICAgICAgaWYgKHRvdWNoQ29sb3JlZCA9PT0gMSkge1xuICAgICAgICAgIGQzLnNlbGVjdEFsbChcImNpcmNsZVwiKS5hdHRyKFwiY2xhc3NcIiwgXCJub2RlUmV0dXJuRmFkZVwiKTtcbiAgICAgICAgICBkMy5zZWxlY3RBbGwoXCJsaW5lXCIpLmF0dHIoXCJjbGFzc1wiLCBcImxpbmVSZXR1cm5GYWRlXCIpO1xuICAgICAgICAgIGNpcmNsZS5wYXJlbnQoKS5jaGlsZHJlbigndGV4dCcpLmF0dHIoXCJjbGFzc1wiLCBcIm5vZGVUZXh0UmV0dXJuRmFkZVwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdG91Y2htb3ZlID0gMFxuICAgIH0pO1xuICB9XG5cbiAgLypcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIHN0b3BGb3JjZVNldEludGVydmFsID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgZm9yY2Uuc3RvcCgpOyAvL2ZvcmNlIOODrOOCpOOCouOCpuODiOOBruioiOeul+OCkue1guS6hlxuICAgIG5vZGUuZWFjaChmdW5jdGlvbiAoZCkge1xuICAgICAgLy9kLmZpeGVkID0gdHJ1ZVxuICAgIH0pXG4gIH0sIDEwMDAwKTtcblxuXG5cbiAgTGVnZW5kLnB1dElkMkxlZ2VuZChjZWxsLCBsZWdlbmROYW1lKTtcbiAgLy8g44OO44O844OJ44KS5pu05paw44GZ44KL5aC05ZCI44Gv5YaN5bqm44Kv44Op44K544KS5LuY5LiO44GZ44KL5b+F6KaB44GC44KKXG4gIExlZ2VuZC5wdXRDbGFzczJOb2RlKG5vZGVzLCBjaXJjbGUpO1xuXG5cbiAgbGV0IGxlZ2VuZEZpbHRlciA9IGQzLnNlbGVjdEFsbChcIi5jZWxsXCIpO1xuICBpZiAoIWlzU3ApIHtcbiAgICBsZWdlbmRGaWx0ZXIub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgbGVnZW5kSWQgPSB0aGlzLmlkLnNsaWNlKDkpO1xuICAgICAgTGVnZW5kLm1vdXNlb3ZlckZpbHRlcihsZWdlbmRJZCwgY2lyY2xlLCBjZWxsLCBjb2xvcik7XG5cbiAgICAgIGlvbi5zb3VuZC5wbGF5KFwibW91c2VvdmVyXCIsIHtcbiAgICAgICAgdm9sdW1lOiAwLjEgLy8gdHVybiBkb3duXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGxlZ2VuZEZpbHRlci5vbihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGxlZ2VuZElkID0gdGhpcy5pZC5zbGljZSg5KTtcbiAgICAgIExlZ2VuZC5tb3VzZW92ZXJDbGljayhsZWdlbmRJZCwgY2lyY2xlLCBjZWxsLCBjb2xvcik7XG5cbiAgICAgIGlvbi5zb3VuZC5wbGF5KFwibGVnZW5kXCIpO1xuICAgIH0pO1xuXG4gICAgLy8gbGVnZW5kIGZpbHRlcihtb3VzZSBvdXQpXG4gICAgbGVnZW5kRmlsdGVyLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgbGVnZW5kSWQgPSB0aGlzLmlkLnNsaWNlKDkpO1xuICAgICAgTGVnZW5kLm1vdXNlb3V0RmlsdGVyKGxlZ2VuZElkLCBjaXJjbGUsIGNlbGwpO1xuICAgIH0pO1xuICB9XG4qL1xuXG4gIC8qIC8vc291bmQvLyAqL1xuICAvLyBzb3VuZCBzZXR0aW5nXG4gIGlvbi5zb3VuZCh7XG4gICAgc291bmRzOiBbe25hbWU6IFwib3BlbmluZ1wifSxcbiAgICAgIHtuYW1lOiBcIm1vdXNlb3ZlclwifSxcbiAgICAgIHtuYW1lOiBcImdyYWJOb2RlXCJ9LFxuICAgICAge25hbWU6IFwicmVsZWFzZU5vZGVcIn0sXG4gICAgICB7bmFtZTogXCJsZWdlbmRcIn1dLFxuXG4gICAgLy8gbWFpbiBjb25maWdcbiAgICBwYXRoOiBcInNyYy9kYXRhL3NvdW5kL1wiLFxuICAgIHByZWxvYWQ6IHRydWUsXG4gICAgbXVsdGlwbGF5OiB0cnVlLFxuICAgIHZvbHVtZTogMC41XG4gIH0pO1xuXG4gIC8vb3BlbmluZyBzb3VuZFxuICBpZiAoIWlzU3ApIHtcbiAgICBpb24uc291bmQucGxheShcIm9wZW5pbmdcIik7XG4gIH1cblxufSkoKTtcblxuIl0sInNvdXJjZVJvb3QiOiIifQ==